class Input$Encounter_aggregate_bool_exp {
  factory Input$Encounter_aggregate_bool_exp(
          {Input$Encounter_aggregate_bool_exp_count? count}) =>
      Input$Encounter_aggregate_bool_exp._({
        if (count != null) r'count': count,
      });

  Input$Encounter_aggregate_bool_exp._(this._$data);

  factory Input$Encounter_aggregate_bool_exp.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] = l$count == null
          ? null
          : Input$Encounter_aggregate_bool_exp_count.fromJson(
              (l$count as Map<String, dynamic>));
    }
    return Input$Encounter_aggregate_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$Encounter_aggregate_bool_exp_count? get count =>
      (_$data['count'] as Input$Encounter_aggregate_bool_exp_count?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] = l$count?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$Encounter_aggregate_bool_exp<
          Input$Encounter_aggregate_bool_exp>
      get copyWith => CopyWith$Input$Encounter_aggregate_bool_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Encounter_aggregate_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$count = count;
    return Object.hashAll([_$data.containsKey('count') ? l$count : const {}]);
  }
}

abstract class CopyWith$Input$Encounter_aggregate_bool_exp<TRes> {
  factory CopyWith$Input$Encounter_aggregate_bool_exp(
    Input$Encounter_aggregate_bool_exp instance,
    TRes Function(Input$Encounter_aggregate_bool_exp) then,
  ) = _CopyWithImpl$Input$Encounter_aggregate_bool_exp;

  factory CopyWith$Input$Encounter_aggregate_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$Encounter_aggregate_bool_exp;

  TRes call({Input$Encounter_aggregate_bool_exp_count? count});
  CopyWith$Input$Encounter_aggregate_bool_exp_count<TRes> get count;
}

class _CopyWithImpl$Input$Encounter_aggregate_bool_exp<TRes>
    implements CopyWith$Input$Encounter_aggregate_bool_exp<TRes> {
  _CopyWithImpl$Input$Encounter_aggregate_bool_exp(
    this._instance,
    this._then,
  );

  final Input$Encounter_aggregate_bool_exp _instance;

  final TRes Function(Input$Encounter_aggregate_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? count = _undefined}) =>
      _then(Input$Encounter_aggregate_bool_exp._({
        ..._instance._$data,
        if (count != _undefined)
          'count': (count as Input$Encounter_aggregate_bool_exp_count?),
      }));
  CopyWith$Input$Encounter_aggregate_bool_exp_count<TRes> get count {
    final local$count = _instance.count;
    return local$count == null
        ? CopyWith$Input$Encounter_aggregate_bool_exp_count.stub(
            _then(_instance))
        : CopyWith$Input$Encounter_aggregate_bool_exp_count(
            local$count, (e) => call(count: e));
  }
}

class _CopyWithStubImpl$Input$Encounter_aggregate_bool_exp<TRes>
    implements CopyWith$Input$Encounter_aggregate_bool_exp<TRes> {
  _CopyWithStubImpl$Input$Encounter_aggregate_bool_exp(this._res);

  TRes _res;

  call({Input$Encounter_aggregate_bool_exp_count? count}) => _res;
  CopyWith$Input$Encounter_aggregate_bool_exp_count<TRes> get count =>
      CopyWith$Input$Encounter_aggregate_bool_exp_count.stub(_res);
}

class Input$Encounter_aggregate_bool_exp_count {
  factory Input$Encounter_aggregate_bool_exp_count({
    List<Enum$Encounter_select_column>? arguments,
    bool? distinct,
    Input$Encounter_bool_exp? filter,
    required Input$Int_comparison_exp predicate,
  }) =>
      Input$Encounter_aggregate_bool_exp_count._({
        if (arguments != null) r'arguments': arguments,
        if (distinct != null) r'distinct': distinct,
        if (filter != null) r'filter': filter,
        r'predicate': predicate,
      });

  Input$Encounter_aggregate_bool_exp_count._(this._$data);

  factory Input$Encounter_aggregate_bool_exp_count.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('arguments')) {
      final l$arguments = data['arguments'];
      result$data['arguments'] = (l$arguments as List<dynamic>?)
          ?.map((e) => fromJson$Enum$Encounter_select_column((e as String)))
          .toList();
    }
    if (data.containsKey('distinct')) {
      final l$distinct = data['distinct'];
      result$data['distinct'] = (l$distinct as bool?);
    }
    if (data.containsKey('filter')) {
      final l$filter = data['filter'];
      result$data['filter'] = l$filter == null
          ? null
          : Input$Encounter_bool_exp.fromJson(
              (l$filter as Map<String, dynamic>));
    }
    final l$predicate = data['predicate'];
    result$data['predicate'] = Input$Int_comparison_exp.fromJson(
        (l$predicate as Map<String, dynamic>));
    return Input$Encounter_aggregate_bool_exp_count._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Enum$Encounter_select_column>? get arguments =>
      (_$data['arguments'] as List<Enum$Encounter_select_column>?);
  bool? get distinct => (_$data['distinct'] as bool?);
  Input$Encounter_bool_exp? get filter =>
      (_$data['filter'] as Input$Encounter_bool_exp?);
  Input$Int_comparison_exp get predicate =>
      (_$data['predicate'] as Input$Int_comparison_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('arguments')) {
      final l$arguments = arguments;
      result$data['arguments'] = l$arguments
          ?.map((e) => toJson$Enum$Encounter_select_column(e))
          .toList();
    }
    if (_$data.containsKey('distinct')) {
      final l$distinct = distinct;
      result$data['distinct'] = l$distinct;
    }
    if (_$data.containsKey('filter')) {
      final l$filter = filter;
      result$data['filter'] = l$filter?.toJson();
    }
    final l$predicate = predicate;
    result$data['predicate'] = l$predicate.toJson();
    return result$data;
  }

  CopyWith$Input$Encounter_aggregate_bool_exp_count<
          Input$Encounter_aggregate_bool_exp_count>
      get copyWith => CopyWith$Input$Encounter_aggregate_bool_exp_count(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Encounter_aggregate_bool_exp_count) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$arguments = arguments;
    final lOther$arguments = other.arguments;
    if (_$data.containsKey('arguments') !=
        other._$data.containsKey('arguments')) {
      return false;
    }
    if (l$arguments != null && lOther$arguments != null) {
      if (l$arguments.length != lOther$arguments.length) {
        return false;
      }
      for (int i = 0; i < l$arguments.length; i++) {
        final l$arguments$entry = l$arguments[i];
        final lOther$arguments$entry = lOther$arguments[i];
        if (l$arguments$entry != lOther$arguments$entry) {
          return false;
        }
      }
    } else if (l$arguments != lOther$arguments) {
      return false;
    }
    final l$distinct = distinct;
    final lOther$distinct = other.distinct;
    if (_$data.containsKey('distinct') !=
        other._$data.containsKey('distinct')) {
      return false;
    }
    if (l$distinct != lOther$distinct) {
      return false;
    }
    final l$filter = filter;
    final lOther$filter = other.filter;
    if (_$data.containsKey('filter') != other._$data.containsKey('filter')) {
      return false;
    }
    if (l$filter != lOther$filter) {
      return false;
    }
    final l$predicate = predicate;
    final lOther$predicate = other.predicate;
    if (l$predicate != lOther$predicate) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$arguments = arguments;
    final l$distinct = distinct;
    final l$filter = filter;
    final l$predicate = predicate;
    return Object.hashAll([
      _$data.containsKey('arguments')
          ? l$arguments == null
              ? null
              : Object.hashAll(l$arguments.map((v) => v))
          : const {},
      _$data.containsKey('distinct') ? l$distinct : const {},
      _$data.containsKey('filter') ? l$filter : const {},
      l$predicate,
    ]);
  }
}

abstract class CopyWith$Input$Encounter_aggregate_bool_exp_count<TRes> {
  factory CopyWith$Input$Encounter_aggregate_bool_exp_count(
    Input$Encounter_aggregate_bool_exp_count instance,
    TRes Function(Input$Encounter_aggregate_bool_exp_count) then,
  ) = _CopyWithImpl$Input$Encounter_aggregate_bool_exp_count;

  factory CopyWith$Input$Encounter_aggregate_bool_exp_count.stub(TRes res) =
      _CopyWithStubImpl$Input$Encounter_aggregate_bool_exp_count;

  TRes call({
    List<Enum$Encounter_select_column>? arguments,
    bool? distinct,
    Input$Encounter_bool_exp? filter,
    Input$Int_comparison_exp? predicate,
  });
  CopyWith$Input$Encounter_bool_exp<TRes> get filter;
  CopyWith$Input$Int_comparison_exp<TRes> get predicate;
}

class _CopyWithImpl$Input$Encounter_aggregate_bool_exp_count<TRes>
    implements CopyWith$Input$Encounter_aggregate_bool_exp_count<TRes> {
  _CopyWithImpl$Input$Encounter_aggregate_bool_exp_count(
    this._instance,
    this._then,
  );

  final Input$Encounter_aggregate_bool_exp_count _instance;

  final TRes Function(Input$Encounter_aggregate_bool_exp_count) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? arguments = _undefined,
    Object? distinct = _undefined,
    Object? filter = _undefined,
    Object? predicate = _undefined,
  }) =>
      _then(Input$Encounter_aggregate_bool_exp_count._({
        ..._instance._$data,
        if (arguments != _undefined)
          'arguments': (arguments as List<Enum$Encounter_select_column>?),
        if (distinct != _undefined) 'distinct': (distinct as bool?),
        if (filter != _undefined)
          'filter': (filter as Input$Encounter_bool_exp?),
        if (predicate != _undefined && predicate != null)
          'predicate': (predicate as Input$Int_comparison_exp),
      }));
  CopyWith$Input$Encounter_bool_exp<TRes> get filter {
    final local$filter = _instance.filter;
    return local$filter == null
        ? CopyWith$Input$Encounter_bool_exp.stub(_then(_instance))
        : CopyWith$Input$Encounter_bool_exp(
            local$filter, (e) => call(filter: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get predicate {
    final local$predicate = _instance.predicate;
    return CopyWith$Input$Int_comparison_exp(
        local$predicate, (e) => call(predicate: e));
  }
}

class _CopyWithStubImpl$Input$Encounter_aggregate_bool_exp_count<TRes>
    implements CopyWith$Input$Encounter_aggregate_bool_exp_count<TRes> {
  _CopyWithStubImpl$Input$Encounter_aggregate_bool_exp_count(this._res);

  TRes _res;

  call({
    List<Enum$Encounter_select_column>? arguments,
    bool? distinct,
    Input$Encounter_bool_exp? filter,
    Input$Int_comparison_exp? predicate,
  }) =>
      _res;
  CopyWith$Input$Encounter_bool_exp<TRes> get filter =>
      CopyWith$Input$Encounter_bool_exp.stub(_res);
  CopyWith$Input$Int_comparison_exp<TRes> get predicate =>
      CopyWith$Input$Int_comparison_exp.stub(_res);
}

class Input$Encounter_updates {
  factory Input$Encounter_updates({
    required Input$Encounter_bool_exp where,
    Input$Encounter_set_input? $_set,
  }) =>
      Input$Encounter_updates._({
        r'where': where,
        if ($_set != null) r'_set': $_set,
      });

  Input$Encounter_updates._(this._$data);

  factory Input$Encounter_updates.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$where = data['where'];
    result$data['where'] =
        Input$Encounter_bool_exp.fromJson((l$where as Map<String, dynamic>));
    if (data.containsKey('_set')) {
      final l$$_set = data['_set'];
      result$data['_set'] = l$$_set == null
          ? null
          : Input$Encounter_set_input.fromJson(
              (l$$_set as Map<String, dynamic>));
    }
    return Input$Encounter_updates._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$Encounter_bool_exp get where =>
      (_$data['where'] as Input$Encounter_bool_exp);
  Input$Encounter_set_input? get $_set =>
      (_$data['_set'] as Input$Encounter_set_input?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$where = where;
    result$data['where'] = l$where.toJson();
    if (_$data.containsKey('_set')) {
      final l$$_set = $_set;
      result$data['_set'] = l$$_set?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$Encounter_updates<Input$Encounter_updates> get copyWith =>
      CopyWith$Input$Encounter_updates(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Encounter_updates) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$where = where;
    final lOther$where = other.where;
    if (l$where != lOther$where) {
      return false;
    }
    final l$$_set = $_set;
    final lOther$$_set = other.$_set;
    if (_$data.containsKey('_set') != other._$data.containsKey('_set')) {
      return false;
    }
    if (l$$_set != lOther$$_set) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$where = where;
    final l$$_set = $_set;
    return Object.hashAll([
      l$where,
      _$data.containsKey('_set') ? l$$_set : const {},
    ]);
  }
}

abstract class CopyWith$Input$Encounter_updates<TRes> {
  factory CopyWith$Input$Encounter_updates(
    Input$Encounter_updates instance,
    TRes Function(Input$Encounter_updates) then,
  ) = _CopyWithImpl$Input$Encounter_updates;

  factory CopyWith$Input$Encounter_updates.stub(TRes res) =
      _CopyWithStubImpl$Input$Encounter_updates;

  TRes call({
    Input$Encounter_bool_exp? where,
    Input$Encounter_set_input? $_set,
  });
  CopyWith$Input$Encounter_bool_exp<TRes> get where;
  CopyWith$Input$Encounter_set_input<TRes> get $_set;
}

class _CopyWithImpl$Input$Encounter_updates<TRes>
    implements CopyWith$Input$Encounter_updates<TRes> {
  _CopyWithImpl$Input$Encounter_updates(
    this._instance,
    this._then,
  );

  final Input$Encounter_updates _instance;

  final TRes Function(Input$Encounter_updates) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? where = _undefined,
    Object? $_set = _undefined,
  }) =>
      _then(Input$Encounter_updates._({
        ..._instance._$data,
        if (where != _undefined && where != null)
          'where': (where as Input$Encounter_bool_exp),
        if ($_set != _undefined) '_set': ($_set as Input$Encounter_set_input?),
      }));
  CopyWith$Input$Encounter_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return CopyWith$Input$Encounter_bool_exp(
        local$where, (e) => call(where: e));
  }

  CopyWith$Input$Encounter_set_input<TRes> get $_set {
    final local$$_set = _instance.$_set;
    return local$$_set == null
        ? CopyWith$Input$Encounter_set_input.stub(_then(_instance))
        : CopyWith$Input$Encounter_set_input(
            local$$_set, (e) => call($_set: e));
  }
}

class _CopyWithStubImpl$Input$Encounter_updates<TRes>
    implements CopyWith$Input$Encounter_updates<TRes> {
  _CopyWithStubImpl$Input$Encounter_updates(this._res);

  TRes _res;

  call({
    Input$Encounter_bool_exp? where,
    Input$Encounter_set_input? $_set,
  }) =>
      _res;
  CopyWith$Input$Encounter_bool_exp<TRes> get where =>
      CopyWith$Input$Encounter_bool_exp.stub(_res);
  CopyWith$Input$Encounter_set_input<TRes> get $_set =>
      CopyWith$Input$Encounter_set_input.stub(_res);
}

class Input$Event_aggregate_bool_exp {
  factory Input$Event_aggregate_bool_exp(
          {Input$Event_aggregate_bool_exp_count? count}) =>
      Input$Event_aggregate_bool_exp._({
        if (count != null) r'count': count,
      });

  Input$Event_aggregate_bool_exp._(this._$data);

  factory Input$Event_aggregate_bool_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] = l$count == null
          ? null
          : Input$Event_aggregate_bool_exp_count.fromJson(
              (l$count as Map<String, dynamic>));
    }
    return Input$Event_aggregate_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$Event_aggregate_bool_exp_count? get count =>
      (_$data['count'] as Input$Event_aggregate_bool_exp_count?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] = l$count?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$Event_aggregate_bool_exp<Input$Event_aggregate_bool_exp>
      get copyWith => CopyWith$Input$Event_aggregate_bool_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Event_aggregate_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$count = count;
    return Object.hashAll([_$data.containsKey('count') ? l$count : const {}]);
  }
}

abstract class CopyWith$Input$Event_aggregate_bool_exp<TRes> {
  factory CopyWith$Input$Event_aggregate_bool_exp(
    Input$Event_aggregate_bool_exp instance,
    TRes Function(Input$Event_aggregate_bool_exp) then,
  ) = _CopyWithImpl$Input$Event_aggregate_bool_exp;

  factory CopyWith$Input$Event_aggregate_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$Event_aggregate_bool_exp;

  TRes call({Input$Event_aggregate_bool_exp_count? count});
  CopyWith$Input$Event_aggregate_bool_exp_count<TRes> get count;
}

class _CopyWithImpl$Input$Event_aggregate_bool_exp<TRes>
    implements CopyWith$Input$Event_aggregate_bool_exp<TRes> {
  _CopyWithImpl$Input$Event_aggregate_bool_exp(
    this._instance,
    this._then,
  );

  final Input$Event_aggregate_bool_exp _instance;

  final TRes Function(Input$Event_aggregate_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? count = _undefined}) =>
      _then(Input$Event_aggregate_bool_exp._({
        ..._instance._$data,
        if (count != _undefined)
          'count': (count as Input$Event_aggregate_bool_exp_count?),
      }));
  CopyWith$Input$Event_aggregate_bool_exp_count<TRes> get count {
    final local$count = _instance.count;
    return local$count == null
        ? CopyWith$Input$Event_aggregate_bool_exp_count.stub(_then(_instance))
        : CopyWith$Input$Event_aggregate_bool_exp_count(
            local$count, (e) => call(count: e));
  }
}

class _CopyWithStubImpl$Input$Event_aggregate_bool_exp<TRes>
    implements CopyWith$Input$Event_aggregate_bool_exp<TRes> {
  _CopyWithStubImpl$Input$Event_aggregate_bool_exp(this._res);

  TRes _res;

  call({Input$Event_aggregate_bool_exp_count? count}) => _res;
  CopyWith$Input$Event_aggregate_bool_exp_count<TRes> get count =>
      CopyWith$Input$Event_aggregate_bool_exp_count.stub(_res);
}

class Input$Event_aggregate_bool_exp_count {
  factory Input$Event_aggregate_bool_exp_count({
    List<Enum$Event_select_column>? arguments,
    bool? distinct,
    Input$Event_bool_exp? filter,
    required Input$Int_comparison_exp predicate,
  }) =>
      Input$Event_aggregate_bool_exp_count._({
        if (arguments != null) r'arguments': arguments,
        if (distinct != null) r'distinct': distinct,
        if (filter != null) r'filter': filter,
        r'predicate': predicate,
      });

  Input$Event_aggregate_bool_exp_count._(this._$data);

  factory Input$Event_aggregate_bool_exp_count.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('arguments')) {
      final l$arguments = data['arguments'];
      result$data['arguments'] = (l$arguments as List<dynamic>?)
          ?.map((e) => fromJson$Enum$Event_select_column((e as String)))
          .toList();
    }
    if (data.containsKey('distinct')) {
      final l$distinct = data['distinct'];
      result$data['distinct'] = (l$distinct as bool?);
    }
    if (data.containsKey('filter')) {
      final l$filter = data['filter'];
      result$data['filter'] = l$filter == null
          ? null
          : Input$Event_bool_exp.fromJson((l$filter as Map<String, dynamic>));
    }
    final l$predicate = data['predicate'];
    result$data['predicate'] = Input$Int_comparison_exp.fromJson(
        (l$predicate as Map<String, dynamic>));
    return Input$Event_aggregate_bool_exp_count._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Enum$Event_select_column>? get arguments =>
      (_$data['arguments'] as List<Enum$Event_select_column>?);
  bool? get distinct => (_$data['distinct'] as bool?);
  Input$Event_bool_exp? get filter =>
      (_$data['filter'] as Input$Event_bool_exp?);
  Input$Int_comparison_exp get predicate =>
      (_$data['predicate'] as Input$Int_comparison_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('arguments')) {
      final l$arguments = arguments;
      result$data['arguments'] =
          l$arguments?.map((e) => toJson$Enum$Event_select_column(e)).toList();
    }
    if (_$data.containsKey('distinct')) {
      final l$distinct = distinct;
      result$data['distinct'] = l$distinct;
    }
    if (_$data.containsKey('filter')) {
      final l$filter = filter;
      result$data['filter'] = l$filter?.toJson();
    }
    final l$predicate = predicate;
    result$data['predicate'] = l$predicate.toJson();
    return result$data;
  }

  CopyWith$Input$Event_aggregate_bool_exp_count<
          Input$Event_aggregate_bool_exp_count>
      get copyWith => CopyWith$Input$Event_aggregate_bool_exp_count(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Event_aggregate_bool_exp_count) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$arguments = arguments;
    final lOther$arguments = other.arguments;
    if (_$data.containsKey('arguments') !=
        other._$data.containsKey('arguments')) {
      return false;
    }
    if (l$arguments != null && lOther$arguments != null) {
      if (l$arguments.length != lOther$arguments.length) {
        return false;
      }
      for (int i = 0; i < l$arguments.length; i++) {
        final l$arguments$entry = l$arguments[i];
        final lOther$arguments$entry = lOther$arguments[i];
        if (l$arguments$entry != lOther$arguments$entry) {
          return false;
        }
      }
    } else if (l$arguments != lOther$arguments) {
      return false;
    }
    final l$distinct = distinct;
    final lOther$distinct = other.distinct;
    if (_$data.containsKey('distinct') !=
        other._$data.containsKey('distinct')) {
      return false;
    }
    if (l$distinct != lOther$distinct) {
      return false;
    }
    final l$filter = filter;
    final lOther$filter = other.filter;
    if (_$data.containsKey('filter') != other._$data.containsKey('filter')) {
      return false;
    }
    if (l$filter != lOther$filter) {
      return false;
    }
    final l$predicate = predicate;
    final lOther$predicate = other.predicate;
    if (l$predicate != lOther$predicate) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$arguments = arguments;
    final l$distinct = distinct;
    final l$filter = filter;
    final l$predicate = predicate;
    return Object.hashAll([
      _$data.containsKey('arguments')
          ? l$arguments == null
              ? null
              : Object.hashAll(l$arguments.map((v) => v))
          : const {},
      _$data.containsKey('distinct') ? l$distinct : const {},
      _$data.containsKey('filter') ? l$filter : const {},
      l$predicate,
    ]);
  }
}

abstract class CopyWith$Input$Event_aggregate_bool_exp_count<TRes> {
  factory CopyWith$Input$Event_aggregate_bool_exp_count(
    Input$Event_aggregate_bool_exp_count instance,
    TRes Function(Input$Event_aggregate_bool_exp_count) then,
  ) = _CopyWithImpl$Input$Event_aggregate_bool_exp_count;

  factory CopyWith$Input$Event_aggregate_bool_exp_count.stub(TRes res) =
      _CopyWithStubImpl$Input$Event_aggregate_bool_exp_count;

  TRes call({
    List<Enum$Event_select_column>? arguments,
    bool? distinct,
    Input$Event_bool_exp? filter,
    Input$Int_comparison_exp? predicate,
  });
  CopyWith$Input$Event_bool_exp<TRes> get filter;
  CopyWith$Input$Int_comparison_exp<TRes> get predicate;
}

class _CopyWithImpl$Input$Event_aggregate_bool_exp_count<TRes>
    implements CopyWith$Input$Event_aggregate_bool_exp_count<TRes> {
  _CopyWithImpl$Input$Event_aggregate_bool_exp_count(
    this._instance,
    this._then,
  );

  final Input$Event_aggregate_bool_exp_count _instance;

  final TRes Function(Input$Event_aggregate_bool_exp_count) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? arguments = _undefined,
    Object? distinct = _undefined,
    Object? filter = _undefined,
    Object? predicate = _undefined,
  }) =>
      _then(Input$Event_aggregate_bool_exp_count._({
        ..._instance._$data,
        if (arguments != _undefined)
          'arguments': (arguments as List<Enum$Event_select_column>?),
        if (distinct != _undefined) 'distinct': (distinct as bool?),
        if (filter != _undefined) 'filter': (filter as Input$Event_bool_exp?),
        if (predicate != _undefined && predicate != null)
          'predicate': (predicate as Input$Int_comparison_exp),
      }));
  CopyWith$Input$Event_bool_exp<TRes> get filter {
    final local$filter = _instance.filter;
    return local$filter == null
        ? CopyWith$Input$Event_bool_exp.stub(_then(_instance))
        : CopyWith$Input$Event_bool_exp(local$filter, (e) => call(filter: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get predicate {
    final local$predicate = _instance.predicate;
    return CopyWith$Input$Int_comparison_exp(
        local$predicate, (e) => call(predicate: e));
  }
}

class _CopyWithStubImpl$Input$Event_aggregate_bool_exp_count<TRes>
    implements CopyWith$Input$Event_aggregate_bool_exp_count<TRes> {
  _CopyWithStubImpl$Input$Event_aggregate_bool_exp_count(this._res);

  TRes _res;

  call({
    List<Enum$Event_select_column>? arguments,
    bool? distinct,
    Input$Event_bool_exp? filter,
    Input$Int_comparison_exp? predicate,
  }) =>
      _res;
  CopyWith$Input$Event_bool_exp<TRes> get filter =>
      CopyWith$Input$Event_bool_exp.stub(_res);
  CopyWith$Input$Int_comparison_exp<TRes> get predicate =>
      CopyWith$Input$Int_comparison_exp.stub(_res);
}

class Input$Event_updates {
  factory Input$Event_updates({
    required Input$Event_bool_exp where,
    Input$Event_set_input? $_set,
  }) =>
      Input$Event_updates._({
        r'where': where,
        if ($_set != null) r'_set': $_set,
      });

  Input$Event_updates._(this._$data);

  factory Input$Event_updates.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$where = data['where'];
    result$data['where'] =
        Input$Event_bool_exp.fromJson((l$where as Map<String, dynamic>));
    if (data.containsKey('_set')) {
      final l$$_set = data['_set'];
      result$data['_set'] = l$$_set == null
          ? null
          : Input$Event_set_input.fromJson((l$$_set as Map<String, dynamic>));
    }
    return Input$Event_updates._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$Event_bool_exp get where => (_$data['where'] as Input$Event_bool_exp);
  Input$Event_set_input? get $_set =>
      (_$data['_set'] as Input$Event_set_input?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$where = where;
    result$data['where'] = l$where.toJson();
    if (_$data.containsKey('_set')) {
      final l$$_set = $_set;
      result$data['_set'] = l$$_set?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$Event_updates<Input$Event_updates> get copyWith =>
      CopyWith$Input$Event_updates(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Event_updates) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$where = where;
    final lOther$where = other.where;
    if (l$where != lOther$where) {
      return false;
    }
    final l$$_set = $_set;
    final lOther$$_set = other.$_set;
    if (_$data.containsKey('_set') != other._$data.containsKey('_set')) {
      return false;
    }
    if (l$$_set != lOther$$_set) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$where = where;
    final l$$_set = $_set;
    return Object.hashAll([
      l$where,
      _$data.containsKey('_set') ? l$$_set : const {},
    ]);
  }
}

abstract class CopyWith$Input$Event_updates<TRes> {
  factory CopyWith$Input$Event_updates(
    Input$Event_updates instance,
    TRes Function(Input$Event_updates) then,
  ) = _CopyWithImpl$Input$Event_updates;

  factory CopyWith$Input$Event_updates.stub(TRes res) =
      _CopyWithStubImpl$Input$Event_updates;

  TRes call({
    Input$Event_bool_exp? where,
    Input$Event_set_input? $_set,
  });
  CopyWith$Input$Event_bool_exp<TRes> get where;
  CopyWith$Input$Event_set_input<TRes> get $_set;
}

class _CopyWithImpl$Input$Event_updates<TRes>
    implements CopyWith$Input$Event_updates<TRes> {
  _CopyWithImpl$Input$Event_updates(
    this._instance,
    this._then,
  );

  final Input$Event_updates _instance;

  final TRes Function(Input$Event_updates) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? where = _undefined,
    Object? $_set = _undefined,
  }) =>
      _then(Input$Event_updates._({
        ..._instance._$data,
        if (where != _undefined && where != null)
          'where': (where as Input$Event_bool_exp),
        if ($_set != _undefined) '_set': ($_set as Input$Event_set_input?),
      }));
  CopyWith$Input$Event_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return CopyWith$Input$Event_bool_exp(local$where, (e) => call(where: e));
  }

  CopyWith$Input$Event_set_input<TRes> get $_set {
    final local$$_set = _instance.$_set;
    return local$$_set == null
        ? CopyWith$Input$Event_set_input.stub(_then(_instance))
        : CopyWith$Input$Event_set_input(local$$_set, (e) => call($_set: e));
  }
}

class _CopyWithStubImpl$Input$Event_updates<TRes>
    implements CopyWith$Input$Event_updates<TRes> {
  _CopyWithStubImpl$Input$Event_updates(this._res);

  TRes _res;

  call({
    Input$Event_bool_exp? where,
    Input$Event_set_input? $_set,
  }) =>
      _res;
  CopyWith$Input$Event_bool_exp<TRes> get where =>
      CopyWith$Input$Event_bool_exp.stub(_res);
  CopyWith$Input$Event_set_input<TRes> get $_set =>
      CopyWith$Input$Event_set_input.stub(_res);
}

class Input$MapArea_aggregate_bool_exp {
  factory Input$MapArea_aggregate_bool_exp(
          {Input$MapArea_aggregate_bool_exp_count? count}) =>
      Input$MapArea_aggregate_bool_exp._({
        if (count != null) r'count': count,
      });

  Input$MapArea_aggregate_bool_exp._(this._$data);

  factory Input$MapArea_aggregate_bool_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] = l$count == null
          ? null
          : Input$MapArea_aggregate_bool_exp_count.fromJson(
              (l$count as Map<String, dynamic>));
    }
    return Input$MapArea_aggregate_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$MapArea_aggregate_bool_exp_count? get count =>
      (_$data['count'] as Input$MapArea_aggregate_bool_exp_count?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] = l$count?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$MapArea_aggregate_bool_exp<Input$MapArea_aggregate_bool_exp>
      get copyWith => CopyWith$Input$MapArea_aggregate_bool_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$MapArea_aggregate_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$count = count;
    return Object.hashAll([_$data.containsKey('count') ? l$count : const {}]);
  }
}

abstract class CopyWith$Input$MapArea_aggregate_bool_exp<TRes> {
  factory CopyWith$Input$MapArea_aggregate_bool_exp(
    Input$MapArea_aggregate_bool_exp instance,
    TRes Function(Input$MapArea_aggregate_bool_exp) then,
  ) = _CopyWithImpl$Input$MapArea_aggregate_bool_exp;

  factory CopyWith$Input$MapArea_aggregate_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$MapArea_aggregate_bool_exp;

  TRes call({Input$MapArea_aggregate_bool_exp_count? count});
  CopyWith$Input$MapArea_aggregate_bool_exp_count<TRes> get count;
}

class _CopyWithImpl$Input$MapArea_aggregate_bool_exp<TRes>
    implements CopyWith$Input$MapArea_aggregate_bool_exp<TRes> {
  _CopyWithImpl$Input$MapArea_aggregate_bool_exp(
    this._instance,
    this._then,
  );

  final Input$MapArea_aggregate_bool_exp _instance;

  final TRes Function(Input$MapArea_aggregate_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? count = _undefined}) =>
      _then(Input$MapArea_aggregate_bool_exp._({
        ..._instance._$data,
        if (count != _undefined)
          'count': (count as Input$MapArea_aggregate_bool_exp_count?),
      }));
  CopyWith$Input$MapArea_aggregate_bool_exp_count<TRes> get count {
    final local$count = _instance.count;
    return local$count == null
        ? CopyWith$Input$MapArea_aggregate_bool_exp_count.stub(_then(_instance))
        : CopyWith$Input$MapArea_aggregate_bool_exp_count(
            local$count, (e) => call(count: e));
  }
}

class _CopyWithStubImpl$Input$MapArea_aggregate_bool_exp<TRes>
    implements CopyWith$Input$MapArea_aggregate_bool_exp<TRes> {
  _CopyWithStubImpl$Input$MapArea_aggregate_bool_exp(this._res);

  TRes _res;

  call({Input$MapArea_aggregate_bool_exp_count? count}) => _res;
  CopyWith$Input$MapArea_aggregate_bool_exp_count<TRes> get count =>
      CopyWith$Input$MapArea_aggregate_bool_exp_count.stub(_res);
}

class Input$MapArea_aggregate_bool_exp_count {
  factory Input$MapArea_aggregate_bool_exp_count({
    List<Enum$MapArea_select_column>? arguments,
    bool? distinct,
    Input$MapArea_bool_exp? filter,
    required Input$Int_comparison_exp predicate,
  }) =>
      Input$MapArea_aggregate_bool_exp_count._({
        if (arguments != null) r'arguments': arguments,
        if (distinct != null) r'distinct': distinct,
        if (filter != null) r'filter': filter,
        r'predicate': predicate,
      });

  Input$MapArea_aggregate_bool_exp_count._(this._$data);

  factory Input$MapArea_aggregate_bool_exp_count.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('arguments')) {
      final l$arguments = data['arguments'];
      result$data['arguments'] = (l$arguments as List<dynamic>?)
          ?.map((e) => fromJson$Enum$MapArea_select_column((e as String)))
          .toList();
    }
    if (data.containsKey('distinct')) {
      final l$distinct = data['distinct'];
      result$data['distinct'] = (l$distinct as bool?);
    }
    if (data.containsKey('filter')) {
      final l$filter = data['filter'];
      result$data['filter'] = l$filter == null
          ? null
          : Input$MapArea_bool_exp.fromJson((l$filter as Map<String, dynamic>));
    }
    final l$predicate = data['predicate'];
    result$data['predicate'] = Input$Int_comparison_exp.fromJson(
        (l$predicate as Map<String, dynamic>));
    return Input$MapArea_aggregate_bool_exp_count._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Enum$MapArea_select_column>? get arguments =>
      (_$data['arguments'] as List<Enum$MapArea_select_column>?);
  bool? get distinct => (_$data['distinct'] as bool?);
  Input$MapArea_bool_exp? get filter =>
      (_$data['filter'] as Input$MapArea_bool_exp?);
  Input$Int_comparison_exp get predicate =>
      (_$data['predicate'] as Input$Int_comparison_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('arguments')) {
      final l$arguments = arguments;
      result$data['arguments'] = l$arguments
          ?.map((e) => toJson$Enum$MapArea_select_column(e))
          .toList();
    }
    if (_$data.containsKey('distinct')) {
      final l$distinct = distinct;
      result$data['distinct'] = l$distinct;
    }
    if (_$data.containsKey('filter')) {
      final l$filter = filter;
      result$data['filter'] = l$filter?.toJson();
    }
    final l$predicate = predicate;
    result$data['predicate'] = l$predicate.toJson();
    return result$data;
  }

  CopyWith$Input$MapArea_aggregate_bool_exp_count<
          Input$MapArea_aggregate_bool_exp_count>
      get copyWith => CopyWith$Input$MapArea_aggregate_bool_exp_count(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$MapArea_aggregate_bool_exp_count) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$arguments = arguments;
    final lOther$arguments = other.arguments;
    if (_$data.containsKey('arguments') !=
        other._$data.containsKey('arguments')) {
      return false;
    }
    if (l$arguments != null && lOther$arguments != null) {
      if (l$arguments.length != lOther$arguments.length) {
        return false;
      }
      for (int i = 0; i < l$arguments.length; i++) {
        final l$arguments$entry = l$arguments[i];
        final lOther$arguments$entry = lOther$arguments[i];
        if (l$arguments$entry != lOther$arguments$entry) {
          return false;
        }
      }
    } else if (l$arguments != lOther$arguments) {
      return false;
    }
    final l$distinct = distinct;
    final lOther$distinct = other.distinct;
    if (_$data.containsKey('distinct') !=
        other._$data.containsKey('distinct')) {
      return false;
    }
    if (l$distinct != lOther$distinct) {
      return false;
    }
    final l$filter = filter;
    final lOther$filter = other.filter;
    if (_$data.containsKey('filter') != other._$data.containsKey('filter')) {
      return false;
    }
    if (l$filter != lOther$filter) {
      return false;
    }
    final l$predicate = predicate;
    final lOther$predicate = other.predicate;
    if (l$predicate != lOther$predicate) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$arguments = arguments;
    final l$distinct = distinct;
    final l$filter = filter;
    final l$predicate = predicate;
    return Object.hashAll([
      _$data.containsKey('arguments')
          ? l$arguments == null
              ? null
              : Object.hashAll(l$arguments.map((v) => v))
          : const {},
      _$data.containsKey('distinct') ? l$distinct : const {},
      _$data.containsKey('filter') ? l$filter : const {},
      l$predicate,
    ]);
  }
}

abstract class CopyWith$Input$MapArea_aggregate_bool_exp_count<TRes> {
  factory CopyWith$Input$MapArea_aggregate_bool_exp_count(
    Input$MapArea_aggregate_bool_exp_count instance,
    TRes Function(Input$MapArea_aggregate_bool_exp_count) then,
  ) = _CopyWithImpl$Input$MapArea_aggregate_bool_exp_count;

  factory CopyWith$Input$MapArea_aggregate_bool_exp_count.stub(TRes res) =
      _CopyWithStubImpl$Input$MapArea_aggregate_bool_exp_count;

  TRes call({
    List<Enum$MapArea_select_column>? arguments,
    bool? distinct,
    Input$MapArea_bool_exp? filter,
    Input$Int_comparison_exp? predicate,
  });
  CopyWith$Input$MapArea_bool_exp<TRes> get filter;
  CopyWith$Input$Int_comparison_exp<TRes> get predicate;
}

class _CopyWithImpl$Input$MapArea_aggregate_bool_exp_count<TRes>
    implements CopyWith$Input$MapArea_aggregate_bool_exp_count<TRes> {
  _CopyWithImpl$Input$MapArea_aggregate_bool_exp_count(
    this._instance,
    this._then,
  );

  final Input$MapArea_aggregate_bool_exp_count _instance;

  final TRes Function(Input$MapArea_aggregate_bool_exp_count) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? arguments = _undefined,
    Object? distinct = _undefined,
    Object? filter = _undefined,
    Object? predicate = _undefined,
  }) =>
      _then(Input$MapArea_aggregate_bool_exp_count._({
        ..._instance._$data,
        if (arguments != _undefined)
          'arguments': (arguments as List<Enum$MapArea_select_column>?),
        if (distinct != _undefined) 'distinct': (distinct as bool?),
        if (filter != _undefined) 'filter': (filter as Input$MapArea_bool_exp?),
        if (predicate != _undefined && predicate != null)
          'predicate': (predicate as Input$Int_comparison_exp),
      }));
  CopyWith$Input$MapArea_bool_exp<TRes> get filter {
    final local$filter = _instance.filter;
    return local$filter == null
        ? CopyWith$Input$MapArea_bool_exp.stub(_then(_instance))
        : CopyWith$Input$MapArea_bool_exp(local$filter, (e) => call(filter: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get predicate {
    final local$predicate = _instance.predicate;
    return CopyWith$Input$Int_comparison_exp(
        local$predicate, (e) => call(predicate: e));
  }
}

class _CopyWithStubImpl$Input$MapArea_aggregate_bool_exp_count<TRes>
    implements CopyWith$Input$MapArea_aggregate_bool_exp_count<TRes> {
  _CopyWithStubImpl$Input$MapArea_aggregate_bool_exp_count(this._res);

  TRes _res;

  call({
    List<Enum$MapArea_select_column>? arguments,
    bool? distinct,
    Input$MapArea_bool_exp? filter,
    Input$Int_comparison_exp? predicate,
  }) =>
      _res;
  CopyWith$Input$MapArea_bool_exp<TRes> get filter =>
      CopyWith$Input$MapArea_bool_exp.stub(_res);
  CopyWith$Input$Int_comparison_exp<TRes> get predicate =>
      CopyWith$Input$Int_comparison_exp.stub(_res);
}

class Input$MapArea_updates {
  factory Input$MapArea_updates({
    Input$MapArea_append_input? $_append,
    Input$MapArea_delete_key_input? $_delete_key,
    Input$MapArea_delete_elem_input? $_delete_elem,
    Input$MapArea_delete_at_path_input? $_delete_at_path,
    required Input$MapArea_bool_exp where,
    Input$MapArea_prepend_input? $_prepend,
    Input$MapArea_set_input? $_set,
  }) =>
      Input$MapArea_updates._({
        if ($_append != null) r'_append': $_append,
        if ($_delete_key != null) r'_delete_key': $_delete_key,
        if ($_delete_elem != null) r'_delete_elem': $_delete_elem,
        if ($_delete_at_path != null) r'_delete_at_path': $_delete_at_path,
        r'where': where,
        if ($_prepend != null) r'_prepend': $_prepend,
        if ($_set != null) r'_set': $_set,
      });

  Input$MapArea_updates._(this._$data);

  factory Input$MapArea_updates.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_append')) {
      final l$$_append = data['_append'];
      result$data['_append'] = l$$_append == null
          ? null
          : Input$MapArea_append_input.fromJson(
              (l$$_append as Map<String, dynamic>));
    }
    if (data.containsKey('_delete_key')) {
      final l$$_delete_key = data['_delete_key'];
      result$data['_delete_key'] = l$$_delete_key == null
          ? null
          : Input$MapArea_delete_key_input.fromJson(
              (l$$_delete_key as Map<String, dynamic>));
    }
    if (data.containsKey('_delete_elem')) {
      final l$$_delete_elem = data['_delete_elem'];
      result$data['_delete_elem'] = l$$_delete_elem == null
          ? null
          : Input$MapArea_delete_elem_input.fromJson(
              (l$$_delete_elem as Map<String, dynamic>));
    }
    if (data.containsKey('_delete_at_path')) {
      final l$$_delete_at_path = data['_delete_at_path'];
      result$data['_delete_at_path'] = l$$_delete_at_path == null
          ? null
          : Input$MapArea_delete_at_path_input.fromJson(
              (l$$_delete_at_path as Map<String, dynamic>));
    }
    final l$where = data['where'];
    result$data['where'] =
        Input$MapArea_bool_exp.fromJson((l$where as Map<String, dynamic>));
    if (data.containsKey('_prepend')) {
      final l$$_prepend = data['_prepend'];
      result$data['_prepend'] = l$$_prepend == null
          ? null
          : Input$MapArea_prepend_input.fromJson(
              (l$$_prepend as Map<String, dynamic>));
    }
    if (data.containsKey('_set')) {
      final l$$_set = data['_set'];
      result$data['_set'] = l$$_set == null
          ? null
          : Input$MapArea_set_input.fromJson((l$$_set as Map<String, dynamic>));
    }
    return Input$MapArea_updates._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$MapArea_append_input? get $_append =>
      (_$data['_append'] as Input$MapArea_append_input?);
  Input$MapArea_delete_key_input? get $_delete_key =>
      (_$data['_delete_key'] as Input$MapArea_delete_key_input?);
  Input$MapArea_delete_elem_input? get $_delete_elem =>
      (_$data['_delete_elem'] as Input$MapArea_delete_elem_input?);
  Input$MapArea_delete_at_path_input? get $_delete_at_path =>
      (_$data['_delete_at_path'] as Input$MapArea_delete_at_path_input?);
  Input$MapArea_bool_exp get where =>
      (_$data['where'] as Input$MapArea_bool_exp);
  Input$MapArea_prepend_input? get $_prepend =>
      (_$data['_prepend'] as Input$MapArea_prepend_input?);
  Input$MapArea_set_input? get $_set =>
      (_$data['_set'] as Input$MapArea_set_input?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_append')) {
      final l$$_append = $_append;
      result$data['_append'] = l$$_append?.toJson();
    }
    if (_$data.containsKey('_delete_key')) {
      final l$$_delete_key = $_delete_key;
      result$data['_delete_key'] = l$$_delete_key?.toJson();
    }
    if (_$data.containsKey('_delete_elem')) {
      final l$$_delete_elem = $_delete_elem;
      result$data['_delete_elem'] = l$$_delete_elem?.toJson();
    }
    if (_$data.containsKey('_delete_at_path')) {
      final l$$_delete_at_path = $_delete_at_path;
      result$data['_delete_at_path'] = l$$_delete_at_path?.toJson();
    }
    final l$where = where;
    result$data['where'] = l$where.toJson();
    if (_$data.containsKey('_prepend')) {
      final l$$_prepend = $_prepend;
      result$data['_prepend'] = l$$_prepend?.toJson();
    }
    if (_$data.containsKey('_set')) {
      final l$$_set = $_set;
      result$data['_set'] = l$$_set?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$MapArea_updates<Input$MapArea_updates> get copyWith =>
      CopyWith$Input$MapArea_updates(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$MapArea_updates) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_append = $_append;
    final lOther$$_append = other.$_append;
    if (_$data.containsKey('_append') != other._$data.containsKey('_append')) {
      return false;
    }
    if (l$$_append != lOther$$_append) {
      return false;
    }
    final l$$_delete_key = $_delete_key;
    final lOther$$_delete_key = other.$_delete_key;
    if (_$data.containsKey('_delete_key') !=
        other._$data.containsKey('_delete_key')) {
      return false;
    }
    if (l$$_delete_key != lOther$$_delete_key) {
      return false;
    }
    final l$$_delete_elem = $_delete_elem;
    final lOther$$_delete_elem = other.$_delete_elem;
    if (_$data.containsKey('_delete_elem') !=
        other._$data.containsKey('_delete_elem')) {
      return false;
    }
    if (l$$_delete_elem != lOther$$_delete_elem) {
      return false;
    }
    final l$$_delete_at_path = $_delete_at_path;
    final lOther$$_delete_at_path = other.$_delete_at_path;
    if (_$data.containsKey('_delete_at_path') !=
        other._$data.containsKey('_delete_at_path')) {
      return false;
    }
    if (l$$_delete_at_path != lOther$$_delete_at_path) {
      return false;
    }
    final l$where = where;
    final lOther$where = other.where;
    if (l$where != lOther$where) {
      return false;
    }
    final l$$_prepend = $_prepend;
    final lOther$$_prepend = other.$_prepend;
    if (_$data.containsKey('_prepend') !=
        other._$data.containsKey('_prepend')) {
      return false;
    }
    if (l$$_prepend != lOther$$_prepend) {
      return false;
    }
    final l$$_set = $_set;
    final lOther$$_set = other.$_set;
    if (_$data.containsKey('_set') != other._$data.containsKey('_set')) {
      return false;
    }
    if (l$$_set != lOther$$_set) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_append = $_append;
    final l$$_delete_key = $_delete_key;
    final l$$_delete_elem = $_delete_elem;
    final l$$_delete_at_path = $_delete_at_path;
    final l$where = where;
    final l$$_prepend = $_prepend;
    final l$$_set = $_set;
    return Object.hashAll([
      _$data.containsKey('_append') ? l$$_append : const {},
      _$data.containsKey('_delete_key') ? l$$_delete_key : const {},
      _$data.containsKey('_delete_elem') ? l$$_delete_elem : const {},
      _$data.containsKey('_delete_at_path') ? l$$_delete_at_path : const {},
      l$where,
      _$data.containsKey('_prepend') ? l$$_prepend : const {},
      _$data.containsKey('_set') ? l$$_set : const {},
    ]);
  }
}

abstract class CopyWith$Input$MapArea_updates<TRes> {
  factory CopyWith$Input$MapArea_updates(
    Input$MapArea_updates instance,
    TRes Function(Input$MapArea_updates) then,
  ) = _CopyWithImpl$Input$MapArea_updates;

  factory CopyWith$Input$MapArea_updates.stub(TRes res) =
      _CopyWithStubImpl$Input$MapArea_updates;

  TRes call({
    Input$MapArea_append_input? $_append,
    Input$MapArea_delete_key_input? $_delete_key,
    Input$MapArea_delete_elem_input? $_delete_elem,
    Input$MapArea_delete_at_path_input? $_delete_at_path,
    Input$MapArea_bool_exp? where,
    Input$MapArea_prepend_input? $_prepend,
    Input$MapArea_set_input? $_set,
  });
  CopyWith$Input$MapArea_append_input<TRes> get $_append;
  CopyWith$Input$MapArea_delete_key_input<TRes> get $_delete_key;
  CopyWith$Input$MapArea_delete_elem_input<TRes> get $_delete_elem;
  CopyWith$Input$MapArea_delete_at_path_input<TRes> get $_delete_at_path;
  CopyWith$Input$MapArea_bool_exp<TRes> get where;
  CopyWith$Input$MapArea_prepend_input<TRes> get $_prepend;
  CopyWith$Input$MapArea_set_input<TRes> get $_set;
}

class _CopyWithImpl$Input$MapArea_updates<TRes>
    implements CopyWith$Input$MapArea_updates<TRes> {
  _CopyWithImpl$Input$MapArea_updates(
    this._instance,
    this._then,
  );

  final Input$MapArea_updates _instance;

  final TRes Function(Input$MapArea_updates) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_append = _undefined,
    Object? $_delete_key = _undefined,
    Object? $_delete_elem = _undefined,
    Object? $_delete_at_path = _undefined,
    Object? where = _undefined,
    Object? $_prepend = _undefined,
    Object? $_set = _undefined,
  }) =>
      _then(Input$MapArea_updates._({
        ..._instance._$data,
        if ($_append != _undefined)
          '_append': ($_append as Input$MapArea_append_input?),
        if ($_delete_key != _undefined)
          '_delete_key': ($_delete_key as Input$MapArea_delete_key_input?),
        if ($_delete_elem != _undefined)
          '_delete_elem': ($_delete_elem as Input$MapArea_delete_elem_input?),
        if ($_delete_at_path != _undefined)
          '_delete_at_path':
              ($_delete_at_path as Input$MapArea_delete_at_path_input?),
        if (where != _undefined && where != null)
          'where': (where as Input$MapArea_bool_exp),
        if ($_prepend != _undefined)
          '_prepend': ($_prepend as Input$MapArea_prepend_input?),
        if ($_set != _undefined) '_set': ($_set as Input$MapArea_set_input?),
      }));
  CopyWith$Input$MapArea_append_input<TRes> get $_append {
    final local$$_append = _instance.$_append;
    return local$$_append == null
        ? CopyWith$Input$MapArea_append_input.stub(_then(_instance))
        : CopyWith$Input$MapArea_append_input(
            local$$_append, (e) => call($_append: e));
  }

  CopyWith$Input$MapArea_delete_key_input<TRes> get $_delete_key {
    final local$$_delete_key = _instance.$_delete_key;
    return local$$_delete_key == null
        ? CopyWith$Input$MapArea_delete_key_input.stub(_then(_instance))
        : CopyWith$Input$MapArea_delete_key_input(
            local$$_delete_key, (e) => call($_delete_key: e));
  }

  CopyWith$Input$MapArea_delete_elem_input<TRes> get $_delete_elem {
    final local$$_delete_elem = _instance.$_delete_elem;
    return local$$_delete_elem == null
        ? CopyWith$Input$MapArea_delete_elem_input.stub(_then(_instance))
        : CopyWith$Input$MapArea_delete_elem_input(
            local$$_delete_elem, (e) => call($_delete_elem: e));
  }

  CopyWith$Input$MapArea_delete_at_path_input<TRes> get $_delete_at_path {
    final local$$_delete_at_path = _instance.$_delete_at_path;
    return local$$_delete_at_path == null
        ? CopyWith$Input$MapArea_delete_at_path_input.stub(_then(_instance))
        : CopyWith$Input$MapArea_delete_at_path_input(
            local$$_delete_at_path, (e) => call($_delete_at_path: e));
  }

  CopyWith$Input$MapArea_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return CopyWith$Input$MapArea_bool_exp(local$where, (e) => call(where: e));
  }

  CopyWith$Input$MapArea_prepend_input<TRes> get $_prepend {
    final local$$_prepend = _instance.$_prepend;
    return local$$_prepend == null
        ? CopyWith$Input$MapArea_prepend_input.stub(_then(_instance))
        : CopyWith$Input$MapArea_prepend_input(
            local$$_prepend, (e) => call($_prepend: e));
  }

  CopyWith$Input$MapArea_set_input<TRes> get $_set {
    final local$$_set = _instance.$_set;
    return local$$_set == null
        ? CopyWith$Input$MapArea_set_input.stub(_then(_instance))
        : CopyWith$Input$MapArea_set_input(local$$_set, (e) => call($_set: e));
  }
}

class _CopyWithStubImpl$Input$MapArea_updates<TRes>
    implements CopyWith$Input$MapArea_updates<TRes> {
  _CopyWithStubImpl$Input$MapArea_updates(this._res);

  TRes _res;

  call({
    Input$MapArea_append_input? $_append,
    Input$MapArea_delete_key_input? $_delete_key,
    Input$MapArea_delete_elem_input? $_delete_elem,
    Input$MapArea_delete_at_path_input? $_delete_at_path,
    Input$MapArea_bool_exp? where,
    Input$MapArea_prepend_input? $_prepend,
    Input$MapArea_set_input? $_set,
  }) =>
      _res;
  CopyWith$Input$MapArea_append_input<TRes> get $_append =>
      CopyWith$Input$MapArea_append_input.stub(_res);
  CopyWith$Input$MapArea_delete_key_input<TRes> get $_delete_key =>
      CopyWith$Input$MapArea_delete_key_input.stub(_res);
  CopyWith$Input$MapArea_delete_elem_input<TRes> get $_delete_elem =>
      CopyWith$Input$MapArea_delete_elem_input.stub(_res);
  CopyWith$Input$MapArea_delete_at_path_input<TRes> get $_delete_at_path =>
      CopyWith$Input$MapArea_delete_at_path_input.stub(_res);
  CopyWith$Input$MapArea_bool_exp<TRes> get where =>
      CopyWith$Input$MapArea_bool_exp.stub(_res);
  CopyWith$Input$MapArea_prepend_input<TRes> get $_prepend =>
      CopyWith$Input$MapArea_prepend_input.stub(_res);
  CopyWith$Input$MapArea_set_input<TRes> get $_set =>
      CopyWith$Input$MapArea_set_input.stub(_res);
}

class Input$Map_aggregate_bool_exp {
  factory Input$Map_aggregate_bool_exp(
          {Input$Map_aggregate_bool_exp_count? count}) =>
      Input$Map_aggregate_bool_exp._({
        if (count != null) r'count': count,
      });

  Input$Map_aggregate_bool_exp._(this._$data);

  factory Input$Map_aggregate_bool_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] = l$count == null
          ? null
          : Input$Map_aggregate_bool_exp_count.fromJson(
              (l$count as Map<String, dynamic>));
    }
    return Input$Map_aggregate_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$Map_aggregate_bool_exp_count? get count =>
      (_$data['count'] as Input$Map_aggregate_bool_exp_count?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] = l$count?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$Map_aggregate_bool_exp<Input$Map_aggregate_bool_exp>
      get copyWith => CopyWith$Input$Map_aggregate_bool_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Map_aggregate_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$count = count;
    return Object.hashAll([_$data.containsKey('count') ? l$count : const {}]);
  }
}

abstract class CopyWith$Input$Map_aggregate_bool_exp<TRes> {
  factory CopyWith$Input$Map_aggregate_bool_exp(
    Input$Map_aggregate_bool_exp instance,
    TRes Function(Input$Map_aggregate_bool_exp) then,
  ) = _CopyWithImpl$Input$Map_aggregate_bool_exp;

  factory CopyWith$Input$Map_aggregate_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$Map_aggregate_bool_exp;

  TRes call({Input$Map_aggregate_bool_exp_count? count});
  CopyWith$Input$Map_aggregate_bool_exp_count<TRes> get count;
}

class _CopyWithImpl$Input$Map_aggregate_bool_exp<TRes>
    implements CopyWith$Input$Map_aggregate_bool_exp<TRes> {
  _CopyWithImpl$Input$Map_aggregate_bool_exp(
    this._instance,
    this._then,
  );

  final Input$Map_aggregate_bool_exp _instance;

  final TRes Function(Input$Map_aggregate_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? count = _undefined}) =>
      _then(Input$Map_aggregate_bool_exp._({
        ..._instance._$data,
        if (count != _undefined)
          'count': (count as Input$Map_aggregate_bool_exp_count?),
      }));
  CopyWith$Input$Map_aggregate_bool_exp_count<TRes> get count {
    final local$count = _instance.count;
    return local$count == null
        ? CopyWith$Input$Map_aggregate_bool_exp_count.stub(_then(_instance))
        : CopyWith$Input$Map_aggregate_bool_exp_count(
            local$count, (e) => call(count: e));
  }
}

class _CopyWithStubImpl$Input$Map_aggregate_bool_exp<TRes>
    implements CopyWith$Input$Map_aggregate_bool_exp<TRes> {
  _CopyWithStubImpl$Input$Map_aggregate_bool_exp(this._res);

  TRes _res;

  call({Input$Map_aggregate_bool_exp_count? count}) => _res;
  CopyWith$Input$Map_aggregate_bool_exp_count<TRes> get count =>
      CopyWith$Input$Map_aggregate_bool_exp_count.stub(_res);
}

class Input$Map_aggregate_bool_exp_count {
  factory Input$Map_aggregate_bool_exp_count({
    List<Enum$Map_select_column>? arguments,
    bool? distinct,
    Input$Map_bool_exp? filter,
    required Input$Int_comparison_exp predicate,
  }) =>
      Input$Map_aggregate_bool_exp_count._({
        if (arguments != null) r'arguments': arguments,
        if (distinct != null) r'distinct': distinct,
        if (filter != null) r'filter': filter,
        r'predicate': predicate,
      });

  Input$Map_aggregate_bool_exp_count._(this._$data);

  factory Input$Map_aggregate_bool_exp_count.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('arguments')) {
      final l$arguments = data['arguments'];
      result$data['arguments'] = (l$arguments as List<dynamic>?)
          ?.map((e) => fromJson$Enum$Map_select_column((e as String)))
          .toList();
    }
    if (data.containsKey('distinct')) {
      final l$distinct = data['distinct'];
      result$data['distinct'] = (l$distinct as bool?);
    }
    if (data.containsKey('filter')) {
      final l$filter = data['filter'];
      result$data['filter'] = l$filter == null
          ? null
          : Input$Map_bool_exp.fromJson((l$filter as Map<String, dynamic>));
    }
    final l$predicate = data['predicate'];
    result$data['predicate'] = Input$Int_comparison_exp.fromJson(
        (l$predicate as Map<String, dynamic>));
    return Input$Map_aggregate_bool_exp_count._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Enum$Map_select_column>? get arguments =>
      (_$data['arguments'] as List<Enum$Map_select_column>?);
  bool? get distinct => (_$data['distinct'] as bool?);
  Input$Map_bool_exp? get filter => (_$data['filter'] as Input$Map_bool_exp?);
  Input$Int_comparison_exp get predicate =>
      (_$data['predicate'] as Input$Int_comparison_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('arguments')) {
      final l$arguments = arguments;
      result$data['arguments'] =
          l$arguments?.map((e) => toJson$Enum$Map_select_column(e)).toList();
    }
    if (_$data.containsKey('distinct')) {
      final l$distinct = distinct;
      result$data['distinct'] = l$distinct;
    }
    if (_$data.containsKey('filter')) {
      final l$filter = filter;
      result$data['filter'] = l$filter?.toJson();
    }
    final l$predicate = predicate;
    result$data['predicate'] = l$predicate.toJson();
    return result$data;
  }

  CopyWith$Input$Map_aggregate_bool_exp_count<
          Input$Map_aggregate_bool_exp_count>
      get copyWith => CopyWith$Input$Map_aggregate_bool_exp_count(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Map_aggregate_bool_exp_count) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$arguments = arguments;
    final lOther$arguments = other.arguments;
    if (_$data.containsKey('arguments') !=
        other._$data.containsKey('arguments')) {
      return false;
    }
    if (l$arguments != null && lOther$arguments != null) {
      if (l$arguments.length != lOther$arguments.length) {
        return false;
      }
      for (int i = 0; i < l$arguments.length; i++) {
        final l$arguments$entry = l$arguments[i];
        final lOther$arguments$entry = lOther$arguments[i];
        if (l$arguments$entry != lOther$arguments$entry) {
          return false;
        }
      }
    } else if (l$arguments != lOther$arguments) {
      return false;
    }
    final l$distinct = distinct;
    final lOther$distinct = other.distinct;
    if (_$data.containsKey('distinct') !=
        other._$data.containsKey('distinct')) {
      return false;
    }
    if (l$distinct != lOther$distinct) {
      return false;
    }
    final l$filter = filter;
    final lOther$filter = other.filter;
    if (_$data.containsKey('filter') != other._$data.containsKey('filter')) {
      return false;
    }
    if (l$filter != lOther$filter) {
      return false;
    }
    final l$predicate = predicate;
    final lOther$predicate = other.predicate;
    if (l$predicate != lOther$predicate) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$arguments = arguments;
    final l$distinct = distinct;
    final l$filter = filter;
    final l$predicate = predicate;
    return Object.hashAll([
      _$data.containsKey('arguments')
          ? l$arguments == null
              ? null
              : Object.hashAll(l$arguments.map((v) => v))
          : const {},
      _$data.containsKey('distinct') ? l$distinct : const {},
      _$data.containsKey('filter') ? l$filter : const {},
      l$predicate,
    ]);
  }
}

abstract class CopyWith$Input$Map_aggregate_bool_exp_count<TRes> {
  factory CopyWith$Input$Map_aggregate_bool_exp_count(
    Input$Map_aggregate_bool_exp_count instance,
    TRes Function(Input$Map_aggregate_bool_exp_count) then,
  ) = _CopyWithImpl$Input$Map_aggregate_bool_exp_count;

  factory CopyWith$Input$Map_aggregate_bool_exp_count.stub(TRes res) =
      _CopyWithStubImpl$Input$Map_aggregate_bool_exp_count;

  TRes call({
    List<Enum$Map_select_column>? arguments,
    bool? distinct,
    Input$Map_bool_exp? filter,
    Input$Int_comparison_exp? predicate,
  });
  CopyWith$Input$Map_bool_exp<TRes> get filter;
  CopyWith$Input$Int_comparison_exp<TRes> get predicate;
}

class _CopyWithImpl$Input$Map_aggregate_bool_exp_count<TRes>
    implements CopyWith$Input$Map_aggregate_bool_exp_count<TRes> {
  _CopyWithImpl$Input$Map_aggregate_bool_exp_count(
    this._instance,
    this._then,
  );

  final Input$Map_aggregate_bool_exp_count _instance;

  final TRes Function(Input$Map_aggregate_bool_exp_count) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? arguments = _undefined,
    Object? distinct = _undefined,
    Object? filter = _undefined,
    Object? predicate = _undefined,
  }) =>
      _then(Input$Map_aggregate_bool_exp_count._({
        ..._instance._$data,
        if (arguments != _undefined)
          'arguments': (arguments as List<Enum$Map_select_column>?),
        if (distinct != _undefined) 'distinct': (distinct as bool?),
        if (filter != _undefined) 'filter': (filter as Input$Map_bool_exp?),
        if (predicate != _undefined && predicate != null)
          'predicate': (predicate as Input$Int_comparison_exp),
      }));
  CopyWith$Input$Map_bool_exp<TRes> get filter {
    final local$filter = _instance.filter;
    return local$filter == null
        ? CopyWith$Input$Map_bool_exp.stub(_then(_instance))
        : CopyWith$Input$Map_bool_exp(local$filter, (e) => call(filter: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get predicate {
    final local$predicate = _instance.predicate;
    return CopyWith$Input$Int_comparison_exp(
        local$predicate, (e) => call(predicate: e));
  }
}

class _CopyWithStubImpl$Input$Map_aggregate_bool_exp_count<TRes>
    implements CopyWith$Input$Map_aggregate_bool_exp_count<TRes> {
  _CopyWithStubImpl$Input$Map_aggregate_bool_exp_count(this._res);

  TRes _res;

  call({
    List<Enum$Map_select_column>? arguments,
    bool? distinct,
    Input$Map_bool_exp? filter,
    Input$Int_comparison_exp? predicate,
  }) =>
      _res;
  CopyWith$Input$Map_bool_exp<TRes> get filter =>
      CopyWith$Input$Map_bool_exp.stub(_res);
  CopyWith$Input$Int_comparison_exp<TRes> get predicate =>
      CopyWith$Input$Int_comparison_exp.stub(_res);
}

class Input$Map_updates {
  factory Input$Map_updates({
    required Input$Map_bool_exp where,
    Input$Map_set_input? $_set,
  }) =>
      Input$Map_updates._({
        r'where': where,
        if ($_set != null) r'_set': $_set,
      });

  Input$Map_updates._(this._$data);

  factory Input$Map_updates.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$where = data['where'];
    result$data['where'] =
        Input$Map_bool_exp.fromJson((l$where as Map<String, dynamic>));
    if (data.containsKey('_set')) {
      final l$$_set = data['_set'];
      result$data['_set'] = l$$_set == null
          ? null
          : Input$Map_set_input.fromJson((l$$_set as Map<String, dynamic>));
    }
    return Input$Map_updates._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$Map_bool_exp get where => (_$data['where'] as Input$Map_bool_exp);
  Input$Map_set_input? get $_set => (_$data['_set'] as Input$Map_set_input?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$where = where;
    result$data['where'] = l$where.toJson();
    if (_$data.containsKey('_set')) {
      final l$$_set = $_set;
      result$data['_set'] = l$$_set?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$Map_updates<Input$Map_updates> get copyWith =>
      CopyWith$Input$Map_updates(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Map_updates) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$where = where;
    final lOther$where = other.where;
    if (l$where != lOther$where) {
      return false;
    }
    final l$$_set = $_set;
    final lOther$$_set = other.$_set;
    if (_$data.containsKey('_set') != other._$data.containsKey('_set')) {
      return false;
    }
    if (l$$_set != lOther$$_set) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$where = where;
    final l$$_set = $_set;
    return Object.hashAll([
      l$where,
      _$data.containsKey('_set') ? l$$_set : const {},
    ]);
  }
}

abstract class CopyWith$Input$Map_updates<TRes> {
  factory CopyWith$Input$Map_updates(
    Input$Map_updates instance,
    TRes Function(Input$Map_updates) then,
  ) = _CopyWithImpl$Input$Map_updates;

  factory CopyWith$Input$Map_updates.stub(TRes res) =
      _CopyWithStubImpl$Input$Map_updates;

  TRes call({
    Input$Map_bool_exp? where,
    Input$Map_set_input? $_set,
  });
  CopyWith$Input$Map_bool_exp<TRes> get where;
  CopyWith$Input$Map_set_input<TRes> get $_set;
}

class _CopyWithImpl$Input$Map_updates<TRes>
    implements CopyWith$Input$Map_updates<TRes> {
  _CopyWithImpl$Input$Map_updates(
    this._instance,
    this._then,
  );

  final Input$Map_updates _instance;

  final TRes Function(Input$Map_updates) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? where = _undefined,
    Object? $_set = _undefined,
  }) =>
      _then(Input$Map_updates._({
        ..._instance._$data,
        if (where != _undefined && where != null)
          'where': (where as Input$Map_bool_exp),
        if ($_set != _undefined) '_set': ($_set as Input$Map_set_input?),
      }));
  CopyWith$Input$Map_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return CopyWith$Input$Map_bool_exp(local$where, (e) => call(where: e));
  }

  CopyWith$Input$Map_set_input<TRes> get $_set {
    final local$$_set = _instance.$_set;
    return local$$_set == null
        ? CopyWith$Input$Map_set_input.stub(_then(_instance))
        : CopyWith$Input$Map_set_input(local$$_set, (e) => call($_set: e));
  }
}

class _CopyWithStubImpl$Input$Map_updates<TRes>
    implements CopyWith$Input$Map_updates<TRes> {
  _CopyWithStubImpl$Input$Map_updates(this._res);

  TRes _res;

  call({
    Input$Map_bool_exp? where,
    Input$Map_set_input? $_set,
  }) =>
      _res;
  CopyWith$Input$Map_bool_exp<TRes> get where =>
      CopyWith$Input$Map_bool_exp.stub(_res);
  CopyWith$Input$Map_set_input<TRes> get $_set =>
      CopyWith$Input$Map_set_input.stub(_res);
}

class Input$Organization_updates {
  factory Input$Organization_updates({
    required Input$Organization_bool_exp where,
    Input$Organization_set_input? $_set,
  }) =>
      Input$Organization_updates._({
        r'where': where,
        if ($_set != null) r'_set': $_set,
      });

  Input$Organization_updates._(this._$data);

  factory Input$Organization_updates.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$where = data['where'];
    result$data['where'] =
        Input$Organization_bool_exp.fromJson((l$where as Map<String, dynamic>));
    if (data.containsKey('_set')) {
      final l$$_set = data['_set'];
      result$data['_set'] = l$$_set == null
          ? null
          : Input$Organization_set_input.fromJson(
              (l$$_set as Map<String, dynamic>));
    }
    return Input$Organization_updates._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$Organization_bool_exp get where =>
      (_$data['where'] as Input$Organization_bool_exp);
  Input$Organization_set_input? get $_set =>
      (_$data['_set'] as Input$Organization_set_input?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$where = where;
    result$data['where'] = l$where.toJson();
    if (_$data.containsKey('_set')) {
      final l$$_set = $_set;
      result$data['_set'] = l$$_set?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$Organization_updates<Input$Organization_updates>
      get copyWith => CopyWith$Input$Organization_updates(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Organization_updates) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$where = where;
    final lOther$where = other.where;
    if (l$where != lOther$where) {
      return false;
    }
    final l$$_set = $_set;
    final lOther$$_set = other.$_set;
    if (_$data.containsKey('_set') != other._$data.containsKey('_set')) {
      return false;
    }
    if (l$$_set != lOther$$_set) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$where = where;
    final l$$_set = $_set;
    return Object.hashAll([
      l$where,
      _$data.containsKey('_set') ? l$$_set : const {},
    ]);
  }
}

abstract class CopyWith$Input$Organization_updates<TRes> {
  factory CopyWith$Input$Organization_updates(
    Input$Organization_updates instance,
    TRes Function(Input$Organization_updates) then,
  ) = _CopyWithImpl$Input$Organization_updates;

  factory CopyWith$Input$Organization_updates.stub(TRes res) =
      _CopyWithStubImpl$Input$Organization_updates;

  TRes call({
    Input$Organization_bool_exp? where,
    Input$Organization_set_input? $_set,
  });
  CopyWith$Input$Organization_bool_exp<TRes> get where;
  CopyWith$Input$Organization_set_input<TRes> get $_set;
}

class _CopyWithImpl$Input$Organization_updates<TRes>
    implements CopyWith$Input$Organization_updates<TRes> {
  _CopyWithImpl$Input$Organization_updates(
    this._instance,
    this._then,
  );

  final Input$Organization_updates _instance;

  final TRes Function(Input$Organization_updates) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? where = _undefined,
    Object? $_set = _undefined,
  }) =>
      _then(Input$Organization_updates._({
        ..._instance._$data,
        if (where != _undefined && where != null)
          'where': (where as Input$Organization_bool_exp),
        if ($_set != _undefined)
          '_set': ($_set as Input$Organization_set_input?),
      }));
  CopyWith$Input$Organization_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return CopyWith$Input$Organization_bool_exp(
        local$where, (e) => call(where: e));
  }

  CopyWith$Input$Organization_set_input<TRes> get $_set {
    final local$$_set = _instance.$_set;
    return local$$_set == null
        ? CopyWith$Input$Organization_set_input.stub(_then(_instance))
        : CopyWith$Input$Organization_set_input(
            local$$_set, (e) => call($_set: e));
  }
}

class _CopyWithStubImpl$Input$Organization_updates<TRes>
    implements CopyWith$Input$Organization_updates<TRes> {
  _CopyWithStubImpl$Input$Organization_updates(this._res);

  TRes _res;

  call({
    Input$Organization_bool_exp? where,
    Input$Organization_set_input? $_set,
  }) =>
      _res;
  CopyWith$Input$Organization_bool_exp<TRes> get where =>
      CopyWith$Input$Organization_bool_exp.stub(_res);
  CopyWith$Input$Organization_set_input<TRes> get $_set =>
      CopyWith$Input$Organization_set_input.stub(_res);
}

class Input$SavedPerson_aggregate_bool_exp {
  factory Input$SavedPerson_aggregate_bool_exp(
          {Input$SavedPerson_aggregate_bool_exp_count? count}) =>
      Input$SavedPerson_aggregate_bool_exp._({
        if (count != null) r'count': count,
      });

  Input$SavedPerson_aggregate_bool_exp._(this._$data);

  factory Input$SavedPerson_aggregate_bool_exp.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] = l$count == null
          ? null
          : Input$SavedPerson_aggregate_bool_exp_count.fromJson(
              (l$count as Map<String, dynamic>));
    }
    return Input$SavedPerson_aggregate_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$SavedPerson_aggregate_bool_exp_count? get count =>
      (_$data['count'] as Input$SavedPerson_aggregate_bool_exp_count?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] = l$count?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$SavedPerson_aggregate_bool_exp<
          Input$SavedPerson_aggregate_bool_exp>
      get copyWith => CopyWith$Input$SavedPerson_aggregate_bool_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SavedPerson_aggregate_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$count = count;
    return Object.hashAll([_$data.containsKey('count') ? l$count : const {}]);
  }
}

abstract class CopyWith$Input$SavedPerson_aggregate_bool_exp<TRes> {
  factory CopyWith$Input$SavedPerson_aggregate_bool_exp(
    Input$SavedPerson_aggregate_bool_exp instance,
    TRes Function(Input$SavedPerson_aggregate_bool_exp) then,
  ) = _CopyWithImpl$Input$SavedPerson_aggregate_bool_exp;

  factory CopyWith$Input$SavedPerson_aggregate_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$SavedPerson_aggregate_bool_exp;

  TRes call({Input$SavedPerson_aggregate_bool_exp_count? count});
  CopyWith$Input$SavedPerson_aggregate_bool_exp_count<TRes> get count;
}

class _CopyWithImpl$Input$SavedPerson_aggregate_bool_exp<TRes>
    implements CopyWith$Input$SavedPerson_aggregate_bool_exp<TRes> {
  _CopyWithImpl$Input$SavedPerson_aggregate_bool_exp(
    this._instance,
    this._then,
  );

  final Input$SavedPerson_aggregate_bool_exp _instance;

  final TRes Function(Input$SavedPerson_aggregate_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? count = _undefined}) =>
      _then(Input$SavedPerson_aggregate_bool_exp._({
        ..._instance._$data,
        if (count != _undefined)
          'count': (count as Input$SavedPerson_aggregate_bool_exp_count?),
      }));
  CopyWith$Input$SavedPerson_aggregate_bool_exp_count<TRes> get count {
    final local$count = _instance.count;
    return local$count == null
        ? CopyWith$Input$SavedPerson_aggregate_bool_exp_count.stub(
            _then(_instance))
        : CopyWith$Input$SavedPerson_aggregate_bool_exp_count(
            local$count, (e) => call(count: e));
  }
}

class _CopyWithStubImpl$Input$SavedPerson_aggregate_bool_exp<TRes>
    implements CopyWith$Input$SavedPerson_aggregate_bool_exp<TRes> {
  _CopyWithStubImpl$Input$SavedPerson_aggregate_bool_exp(this._res);

  TRes _res;

  call({Input$SavedPerson_aggregate_bool_exp_count? count}) => _res;
  CopyWith$Input$SavedPerson_aggregate_bool_exp_count<TRes> get count =>
      CopyWith$Input$SavedPerson_aggregate_bool_exp_count.stub(_res);
}

class Input$SavedPerson_aggregate_bool_exp_count {
  factory Input$SavedPerson_aggregate_bool_exp_count({
    List<Enum$SavedPerson_select_column>? arguments,
    bool? distinct,
    Input$SavedPerson_bool_exp? filter,
    required Input$Int_comparison_exp predicate,
  }) =>
      Input$SavedPerson_aggregate_bool_exp_count._({
        if (arguments != null) r'arguments': arguments,
        if (distinct != null) r'distinct': distinct,
        if (filter != null) r'filter': filter,
        r'predicate': predicate,
      });

  Input$SavedPerson_aggregate_bool_exp_count._(this._$data);

  factory Input$SavedPerson_aggregate_bool_exp_count.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('arguments')) {
      final l$arguments = data['arguments'];
      result$data['arguments'] = (l$arguments as List<dynamic>?)
          ?.map((e) => fromJson$Enum$SavedPerson_select_column((e as String)))
          .toList();
    }
    if (data.containsKey('distinct')) {
      final l$distinct = data['distinct'];
      result$data['distinct'] = (l$distinct as bool?);
    }
    if (data.containsKey('filter')) {
      final l$filter = data['filter'];
      result$data['filter'] = l$filter == null
          ? null
          : Input$SavedPerson_bool_exp.fromJson(
              (l$filter as Map<String, dynamic>));
    }
    final l$predicate = data['predicate'];
    result$data['predicate'] = Input$Int_comparison_exp.fromJson(
        (l$predicate as Map<String, dynamic>));
    return Input$SavedPerson_aggregate_bool_exp_count._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Enum$SavedPerson_select_column>? get arguments =>
      (_$data['arguments'] as List<Enum$SavedPerson_select_column>?);
  bool? get distinct => (_$data['distinct'] as bool?);
  Input$SavedPerson_bool_exp? get filter =>
      (_$data['filter'] as Input$SavedPerson_bool_exp?);
  Input$Int_comparison_exp get predicate =>
      (_$data['predicate'] as Input$Int_comparison_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('arguments')) {
      final l$arguments = arguments;
      result$data['arguments'] = l$arguments
          ?.map((e) => toJson$Enum$SavedPerson_select_column(e))
          .toList();
    }
    if (_$data.containsKey('distinct')) {
      final l$distinct = distinct;
      result$data['distinct'] = l$distinct;
    }
    if (_$data.containsKey('filter')) {
      final l$filter = filter;
      result$data['filter'] = l$filter?.toJson();
    }
    final l$predicate = predicate;
    result$data['predicate'] = l$predicate.toJson();
    return result$data;
  }

  CopyWith$Input$SavedPerson_aggregate_bool_exp_count<
          Input$SavedPerson_aggregate_bool_exp_count>
      get copyWith => CopyWith$Input$SavedPerson_aggregate_bool_exp_count(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SavedPerson_aggregate_bool_exp_count) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$arguments = arguments;
    final lOther$arguments = other.arguments;
    if (_$data.containsKey('arguments') !=
        other._$data.containsKey('arguments')) {
      return false;
    }
    if (l$arguments != null && lOther$arguments != null) {
      if (l$arguments.length != lOther$arguments.length) {
        return false;
      }
      for (int i = 0; i < l$arguments.length; i++) {
        final l$arguments$entry = l$arguments[i];
        final lOther$arguments$entry = lOther$arguments[i];
        if (l$arguments$entry != lOther$arguments$entry) {
          return false;
        }
      }
    } else if (l$arguments != lOther$arguments) {
      return false;
    }
    final l$distinct = distinct;
    final lOther$distinct = other.distinct;
    if (_$data.containsKey('distinct') !=
        other._$data.containsKey('distinct')) {
      return false;
    }
    if (l$distinct != lOther$distinct) {
      return false;
    }
    final l$filter = filter;
    final lOther$filter = other.filter;
    if (_$data.containsKey('filter') != other._$data.containsKey('filter')) {
      return false;
    }
    if (l$filter != lOther$filter) {
      return false;
    }
    final l$predicate = predicate;
    final lOther$predicate = other.predicate;
    if (l$predicate != lOther$predicate) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$arguments = arguments;
    final l$distinct = distinct;
    final l$filter = filter;
    final l$predicate = predicate;
    return Object.hashAll([
      _$data.containsKey('arguments')
          ? l$arguments == null
              ? null
              : Object.hashAll(l$arguments.map((v) => v))
          : const {},
      _$data.containsKey('distinct') ? l$distinct : const {},
      _$data.containsKey('filter') ? l$filter : const {},
      l$predicate,
    ]);
  }
}

abstract class CopyWith$Input$SavedPerson_aggregate_bool_exp_count<TRes> {
  factory CopyWith$Input$SavedPerson_aggregate_bool_exp_count(
    Input$SavedPerson_aggregate_bool_exp_count instance,
    TRes Function(Input$SavedPerson_aggregate_bool_exp_count) then,
  ) = _CopyWithImpl$Input$SavedPerson_aggregate_bool_exp_count;

  factory CopyWith$Input$SavedPerson_aggregate_bool_exp_count.stub(TRes res) =
      _CopyWithStubImpl$Input$SavedPerson_aggregate_bool_exp_count;

  TRes call({
    List<Enum$SavedPerson_select_column>? arguments,
    bool? distinct,
    Input$SavedPerson_bool_exp? filter,
    Input$Int_comparison_exp? predicate,
  });
  CopyWith$Input$SavedPerson_bool_exp<TRes> get filter;
  CopyWith$Input$Int_comparison_exp<TRes> get predicate;
}

class _CopyWithImpl$Input$SavedPerson_aggregate_bool_exp_count<TRes>
    implements CopyWith$Input$SavedPerson_aggregate_bool_exp_count<TRes> {
  _CopyWithImpl$Input$SavedPerson_aggregate_bool_exp_count(
    this._instance,
    this._then,
  );

  final Input$SavedPerson_aggregate_bool_exp_count _instance;

  final TRes Function(Input$SavedPerson_aggregate_bool_exp_count) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? arguments = _undefined,
    Object? distinct = _undefined,
    Object? filter = _undefined,
    Object? predicate = _undefined,
  }) =>
      _then(Input$SavedPerson_aggregate_bool_exp_count._({
        ..._instance._$data,
        if (arguments != _undefined)
          'arguments': (arguments as List<Enum$SavedPerson_select_column>?),
        if (distinct != _undefined) 'distinct': (distinct as bool?),
        if (filter != _undefined)
          'filter': (filter as Input$SavedPerson_bool_exp?),
        if (predicate != _undefined && predicate != null)
          'predicate': (predicate as Input$Int_comparison_exp),
      }));
  CopyWith$Input$SavedPerson_bool_exp<TRes> get filter {
    final local$filter = _instance.filter;
    return local$filter == null
        ? CopyWith$Input$SavedPerson_bool_exp.stub(_then(_instance))
        : CopyWith$Input$SavedPerson_bool_exp(
            local$filter, (e) => call(filter: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get predicate {
    final local$predicate = _instance.predicate;
    return CopyWith$Input$Int_comparison_exp(
        local$predicate, (e) => call(predicate: e));
  }
}

class _CopyWithStubImpl$Input$SavedPerson_aggregate_bool_exp_count<TRes>
    implements CopyWith$Input$SavedPerson_aggregate_bool_exp_count<TRes> {
  _CopyWithStubImpl$Input$SavedPerson_aggregate_bool_exp_count(this._res);

  TRes _res;

  call({
    List<Enum$SavedPerson_select_column>? arguments,
    bool? distinct,
    Input$SavedPerson_bool_exp? filter,
    Input$Int_comparison_exp? predicate,
  }) =>
      _res;
  CopyWith$Input$SavedPerson_bool_exp<TRes> get filter =>
      CopyWith$Input$SavedPerson_bool_exp.stub(_res);
  CopyWith$Input$Int_comparison_exp<TRes> get predicate =>
      CopyWith$Input$Int_comparison_exp.stub(_res);
}

class Input$SavedPerson_updates {
  factory Input$SavedPerson_updates({
    required Input$SavedPerson_bool_exp where,
    Input$SavedPerson_set_input? $_set,
  }) =>
      Input$SavedPerson_updates._({
        r'where': where,
        if ($_set != null) r'_set': $_set,
      });

  Input$SavedPerson_updates._(this._$data);

  factory Input$SavedPerson_updates.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$where = data['where'];
    result$data['where'] =
        Input$SavedPerson_bool_exp.fromJson((l$where as Map<String, dynamic>));
    if (data.containsKey('_set')) {
      final l$$_set = data['_set'];
      result$data['_set'] = l$$_set == null
          ? null
          : Input$SavedPerson_set_input.fromJson(
              (l$$_set as Map<String, dynamic>));
    }
    return Input$SavedPerson_updates._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$SavedPerson_bool_exp get where =>
      (_$data['where'] as Input$SavedPerson_bool_exp);
  Input$SavedPerson_set_input? get $_set =>
      (_$data['_set'] as Input$SavedPerson_set_input?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$where = where;
    result$data['where'] = l$where.toJson();
    if (_$data.containsKey('_set')) {
      final l$$_set = $_set;
      result$data['_set'] = l$$_set?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$SavedPerson_updates<Input$SavedPerson_updates> get copyWith =>
      CopyWith$Input$SavedPerson_updates(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SavedPerson_updates) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$where = where;
    final lOther$where = other.where;
    if (l$where != lOther$where) {
      return false;
    }
    final l$$_set = $_set;
    final lOther$$_set = other.$_set;
    if (_$data.containsKey('_set') != other._$data.containsKey('_set')) {
      return false;
    }
    if (l$$_set != lOther$$_set) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$where = where;
    final l$$_set = $_set;
    return Object.hashAll([
      l$where,
      _$data.containsKey('_set') ? l$$_set : const {},
    ]);
  }
}

abstract class CopyWith$Input$SavedPerson_updates<TRes> {
  factory CopyWith$Input$SavedPerson_updates(
    Input$SavedPerson_updates instance,
    TRes Function(Input$SavedPerson_updates) then,
  ) = _CopyWithImpl$Input$SavedPerson_updates;

  factory CopyWith$Input$SavedPerson_updates.stub(TRes res) =
      _CopyWithStubImpl$Input$SavedPerson_updates;

  TRes call({
    Input$SavedPerson_bool_exp? where,
    Input$SavedPerson_set_input? $_set,
  });
  CopyWith$Input$SavedPerson_bool_exp<TRes> get where;
  CopyWith$Input$SavedPerson_set_input<TRes> get $_set;
}

class _CopyWithImpl$Input$SavedPerson_updates<TRes>
    implements CopyWith$Input$SavedPerson_updates<TRes> {
  _CopyWithImpl$Input$SavedPerson_updates(
    this._instance,
    this._then,
  );

  final Input$SavedPerson_updates _instance;

  final TRes Function(Input$SavedPerson_updates) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? where = _undefined,
    Object? $_set = _undefined,
  }) =>
      _then(Input$SavedPerson_updates._({
        ..._instance._$data,
        if (where != _undefined && where != null)
          'where': (where as Input$SavedPerson_bool_exp),
        if ($_set != _undefined)
          '_set': ($_set as Input$SavedPerson_set_input?),
      }));
  CopyWith$Input$SavedPerson_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return CopyWith$Input$SavedPerson_bool_exp(
        local$where, (e) => call(where: e));
  }

  CopyWith$Input$SavedPerson_set_input<TRes> get $_set {
    final local$$_set = _instance.$_set;
    return local$$_set == null
        ? CopyWith$Input$SavedPerson_set_input.stub(_then(_instance))
        : CopyWith$Input$SavedPerson_set_input(
            local$$_set, (e) => call($_set: e));
  }
}

class _CopyWithStubImpl$Input$SavedPerson_updates<TRes>
    implements CopyWith$Input$SavedPerson_updates<TRes> {
  _CopyWithStubImpl$Input$SavedPerson_updates(this._res);

  TRes _res;

  call({
    Input$SavedPerson_bool_exp? where,
    Input$SavedPerson_set_input? $_set,
  }) =>
      _res;
  CopyWith$Input$SavedPerson_bool_exp<TRes> get where =>
      CopyWith$Input$SavedPerson_bool_exp.stub(_res);
  CopyWith$Input$SavedPerson_set_input<TRes> get $_set =>
      CopyWith$Input$SavedPerson_set_input.stub(_res);
}

class Input$SoulWinningSessionGroup_aggregate_bool_exp {
  factory Input$SoulWinningSessionGroup_aggregate_bool_exp(
          {Input$SoulWinningSessionGroup_aggregate_bool_exp_count? count}) =>
      Input$SoulWinningSessionGroup_aggregate_bool_exp._({
        if (count != null) r'count': count,
      });

  Input$SoulWinningSessionGroup_aggregate_bool_exp._(this._$data);

  factory Input$SoulWinningSessionGroup_aggregate_bool_exp.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] = l$count == null
          ? null
          : Input$SoulWinningSessionGroup_aggregate_bool_exp_count.fromJson(
              (l$count as Map<String, dynamic>));
    }
    return Input$SoulWinningSessionGroup_aggregate_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$SoulWinningSessionGroup_aggregate_bool_exp_count? get count =>
      (_$data['count']
          as Input$SoulWinningSessionGroup_aggregate_bool_exp_count?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] = l$count?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$SoulWinningSessionGroup_aggregate_bool_exp<
          Input$SoulWinningSessionGroup_aggregate_bool_exp>
      get copyWith => CopyWith$Input$SoulWinningSessionGroup_aggregate_bool_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SoulWinningSessionGroup_aggregate_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$count = count;
    return Object.hashAll([_$data.containsKey('count') ? l$count : const {}]);
  }
}

abstract class CopyWith$Input$SoulWinningSessionGroup_aggregate_bool_exp<TRes> {
  factory CopyWith$Input$SoulWinningSessionGroup_aggregate_bool_exp(
    Input$SoulWinningSessionGroup_aggregate_bool_exp instance,
    TRes Function(Input$SoulWinningSessionGroup_aggregate_bool_exp) then,
  ) = _CopyWithImpl$Input$SoulWinningSessionGroup_aggregate_bool_exp;

  factory CopyWith$Input$SoulWinningSessionGroup_aggregate_bool_exp.stub(
          TRes res) =
      _CopyWithStubImpl$Input$SoulWinningSessionGroup_aggregate_bool_exp;

  TRes call({Input$SoulWinningSessionGroup_aggregate_bool_exp_count? count});
  CopyWith$Input$SoulWinningSessionGroup_aggregate_bool_exp_count<TRes>
      get count;
}

class _CopyWithImpl$Input$SoulWinningSessionGroup_aggregate_bool_exp<TRes>
    implements CopyWith$Input$SoulWinningSessionGroup_aggregate_bool_exp<TRes> {
  _CopyWithImpl$Input$SoulWinningSessionGroup_aggregate_bool_exp(
    this._instance,
    this._then,
  );

  final Input$SoulWinningSessionGroup_aggregate_bool_exp _instance;

  final TRes Function(Input$SoulWinningSessionGroup_aggregate_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? count = _undefined}) =>
      _then(Input$SoulWinningSessionGroup_aggregate_bool_exp._({
        ..._instance._$data,
        if (count != _undefined)
          'count': (count
              as Input$SoulWinningSessionGroup_aggregate_bool_exp_count?),
      }));
  CopyWith$Input$SoulWinningSessionGroup_aggregate_bool_exp_count<TRes>
      get count {
    final local$count = _instance.count;
    return local$count == null
        ? CopyWith$Input$SoulWinningSessionGroup_aggregate_bool_exp_count.stub(
            _then(_instance))
        : CopyWith$Input$SoulWinningSessionGroup_aggregate_bool_exp_count(
            local$count, (e) => call(count: e));
  }
}

class _CopyWithStubImpl$Input$SoulWinningSessionGroup_aggregate_bool_exp<TRes>
    implements CopyWith$Input$SoulWinningSessionGroup_aggregate_bool_exp<TRes> {
  _CopyWithStubImpl$Input$SoulWinningSessionGroup_aggregate_bool_exp(this._res);

  TRes _res;

  call({Input$SoulWinningSessionGroup_aggregate_bool_exp_count? count}) => _res;
  CopyWith$Input$SoulWinningSessionGroup_aggregate_bool_exp_count<TRes>
      get count =>
          CopyWith$Input$SoulWinningSessionGroup_aggregate_bool_exp_count.stub(
              _res);
}

class Input$SoulWinningSessionGroup_aggregate_bool_exp_count {
  factory Input$SoulWinningSessionGroup_aggregate_bool_exp_count({
    List<Enum$SoulWinningSessionGroup_select_column>? arguments,
    bool? distinct,
    Input$SoulWinningSessionGroup_bool_exp? filter,
    required Input$Int_comparison_exp predicate,
  }) =>
      Input$SoulWinningSessionGroup_aggregate_bool_exp_count._({
        if (arguments != null) r'arguments': arguments,
        if (distinct != null) r'distinct': distinct,
        if (filter != null) r'filter': filter,
        r'predicate': predicate,
      });

  Input$SoulWinningSessionGroup_aggregate_bool_exp_count._(this._$data);

  factory Input$SoulWinningSessionGroup_aggregate_bool_exp_count.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('arguments')) {
      final l$arguments = data['arguments'];
      result$data['arguments'] = (l$arguments as List<dynamic>?)
          ?.map((e) => fromJson$Enum$SoulWinningSessionGroup_select_column(
              (e as String)))
          .toList();
    }
    if (data.containsKey('distinct')) {
      final l$distinct = data['distinct'];
      result$data['distinct'] = (l$distinct as bool?);
    }
    if (data.containsKey('filter')) {
      final l$filter = data['filter'];
      result$data['filter'] = l$filter == null
          ? null
          : Input$SoulWinningSessionGroup_bool_exp.fromJson(
              (l$filter as Map<String, dynamic>));
    }
    final l$predicate = data['predicate'];
    result$data['predicate'] = Input$Int_comparison_exp.fromJson(
        (l$predicate as Map<String, dynamic>));
    return Input$SoulWinningSessionGroup_aggregate_bool_exp_count._(
        result$data);
  }

  Map<String, dynamic> _$data;

  List<Enum$SoulWinningSessionGroup_select_column>? get arguments =>
      (_$data['arguments']
          as List<Enum$SoulWinningSessionGroup_select_column>?);
  bool? get distinct => (_$data['distinct'] as bool?);
  Input$SoulWinningSessionGroup_bool_exp? get filter =>
      (_$data['filter'] as Input$SoulWinningSessionGroup_bool_exp?);
  Input$Int_comparison_exp get predicate =>
      (_$data['predicate'] as Input$Int_comparison_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('arguments')) {
      final l$arguments = arguments;
      result$data['arguments'] = l$arguments
          ?.map((e) => toJson$Enum$SoulWinningSessionGroup_select_column(e))
          .toList();
    }
    if (_$data.containsKey('distinct')) {
      final l$distinct = distinct;
      result$data['distinct'] = l$distinct;
    }
    if (_$data.containsKey('filter')) {
      final l$filter = filter;
      result$data['filter'] = l$filter?.toJson();
    }
    final l$predicate = predicate;
    result$data['predicate'] = l$predicate.toJson();
    return result$data;
  }

  CopyWith$Input$SoulWinningSessionGroup_aggregate_bool_exp_count<
          Input$SoulWinningSessionGroup_aggregate_bool_exp_count>
      get copyWith =>
          CopyWith$Input$SoulWinningSessionGroup_aggregate_bool_exp_count(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SoulWinningSessionGroup_aggregate_bool_exp_count) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$arguments = arguments;
    final lOther$arguments = other.arguments;
    if (_$data.containsKey('arguments') !=
        other._$data.containsKey('arguments')) {
      return false;
    }
    if (l$arguments != null && lOther$arguments != null) {
      if (l$arguments.length != lOther$arguments.length) {
        return false;
      }
      for (int i = 0; i < l$arguments.length; i++) {
        final l$arguments$entry = l$arguments[i];
        final lOther$arguments$entry = lOther$arguments[i];
        if (l$arguments$entry != lOther$arguments$entry) {
          return false;
        }
      }
    } else if (l$arguments != lOther$arguments) {
      return false;
    }
    final l$distinct = distinct;
    final lOther$distinct = other.distinct;
    if (_$data.containsKey('distinct') !=
        other._$data.containsKey('distinct')) {
      return false;
    }
    if (l$distinct != lOther$distinct) {
      return false;
    }
    final l$filter = filter;
    final lOther$filter = other.filter;
    if (_$data.containsKey('filter') != other._$data.containsKey('filter')) {
      return false;
    }
    if (l$filter != lOther$filter) {
      return false;
    }
    final l$predicate = predicate;
    final lOther$predicate = other.predicate;
    if (l$predicate != lOther$predicate) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$arguments = arguments;
    final l$distinct = distinct;
    final l$filter = filter;
    final l$predicate = predicate;
    return Object.hashAll([
      _$data.containsKey('arguments')
          ? l$arguments == null
              ? null
              : Object.hashAll(l$arguments.map((v) => v))
          : const {},
      _$data.containsKey('distinct') ? l$distinct : const {},
      _$data.containsKey('filter') ? l$filter : const {},
      l$predicate,
    ]);
  }
}

abstract class CopyWith$Input$SoulWinningSessionGroup_aggregate_bool_exp_count<
    TRes> {
  factory CopyWith$Input$SoulWinningSessionGroup_aggregate_bool_exp_count(
    Input$SoulWinningSessionGroup_aggregate_bool_exp_count instance,
    TRes Function(Input$SoulWinningSessionGroup_aggregate_bool_exp_count) then,
  ) = _CopyWithImpl$Input$SoulWinningSessionGroup_aggregate_bool_exp_count;

  factory CopyWith$Input$SoulWinningSessionGroup_aggregate_bool_exp_count.stub(
          TRes res) =
      _CopyWithStubImpl$Input$SoulWinningSessionGroup_aggregate_bool_exp_count;

  TRes call({
    List<Enum$SoulWinningSessionGroup_select_column>? arguments,
    bool? distinct,
    Input$SoulWinningSessionGroup_bool_exp? filter,
    Input$Int_comparison_exp? predicate,
  });
  CopyWith$Input$SoulWinningSessionGroup_bool_exp<TRes> get filter;
  CopyWith$Input$Int_comparison_exp<TRes> get predicate;
}

class _CopyWithImpl$Input$SoulWinningSessionGroup_aggregate_bool_exp_count<TRes>
    implements
        CopyWith$Input$SoulWinningSessionGroup_aggregate_bool_exp_count<TRes> {
  _CopyWithImpl$Input$SoulWinningSessionGroup_aggregate_bool_exp_count(
    this._instance,
    this._then,
  );

  final Input$SoulWinningSessionGroup_aggregate_bool_exp_count _instance;

  final TRes Function(Input$SoulWinningSessionGroup_aggregate_bool_exp_count)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? arguments = _undefined,
    Object? distinct = _undefined,
    Object? filter = _undefined,
    Object? predicate = _undefined,
  }) =>
      _then(Input$SoulWinningSessionGroup_aggregate_bool_exp_count._({
        ..._instance._$data,
        if (arguments != _undefined)
          'arguments':
              (arguments as List<Enum$SoulWinningSessionGroup_select_column>?),
        if (distinct != _undefined) 'distinct': (distinct as bool?),
        if (filter != _undefined)
          'filter': (filter as Input$SoulWinningSessionGroup_bool_exp?),
        if (predicate != _undefined && predicate != null)
          'predicate': (predicate as Input$Int_comparison_exp),
      }));
  CopyWith$Input$SoulWinningSessionGroup_bool_exp<TRes> get filter {
    final local$filter = _instance.filter;
    return local$filter == null
        ? CopyWith$Input$SoulWinningSessionGroup_bool_exp.stub(_then(_instance))
        : CopyWith$Input$SoulWinningSessionGroup_bool_exp(
            local$filter, (e) => call(filter: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get predicate {
    final local$predicate = _instance.predicate;
    return CopyWith$Input$Int_comparison_exp(
        local$predicate, (e) => call(predicate: e));
  }
}

class _CopyWithStubImpl$Input$SoulWinningSessionGroup_aggregate_bool_exp_count<
        TRes>
    implements
        CopyWith$Input$SoulWinningSessionGroup_aggregate_bool_exp_count<TRes> {
  _CopyWithStubImpl$Input$SoulWinningSessionGroup_aggregate_bool_exp_count(
      this._res);

  TRes _res;

  call({
    List<Enum$SoulWinningSessionGroup_select_column>? arguments,
    bool? distinct,
    Input$SoulWinningSessionGroup_bool_exp? filter,
    Input$Int_comparison_exp? predicate,
  }) =>
      _res;
  CopyWith$Input$SoulWinningSessionGroup_bool_exp<TRes> get filter =>
      CopyWith$Input$SoulWinningSessionGroup_bool_exp.stub(_res);
  CopyWith$Input$Int_comparison_exp<TRes> get predicate =>
      CopyWith$Input$Int_comparison_exp.stub(_res);
}

class Input$SoulWinningSessionGroup_updates {
  factory Input$SoulWinningSessionGroup_updates({
    required Input$SoulWinningSessionGroup_bool_exp where,
    Input$SoulWinningSessionGroup_set_input? $_set,
  }) =>
      Input$SoulWinningSessionGroup_updates._({
        r'where': where,
        if ($_set != null) r'_set': $_set,
      });

  Input$SoulWinningSessionGroup_updates._(this._$data);

  factory Input$SoulWinningSessionGroup_updates.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$where = data['where'];
    result$data['where'] = Input$SoulWinningSessionGroup_bool_exp.fromJson(
        (l$where as Map<String, dynamic>));
    if (data.containsKey('_set')) {
      final l$$_set = data['_set'];
      result$data['_set'] = l$$_set == null
          ? null
          : Input$SoulWinningSessionGroup_set_input.fromJson(
              (l$$_set as Map<String, dynamic>));
    }
    return Input$SoulWinningSessionGroup_updates._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$SoulWinningSessionGroup_bool_exp get where =>
      (_$data['where'] as Input$SoulWinningSessionGroup_bool_exp);
  Input$SoulWinningSessionGroup_set_input? get $_set =>
      (_$data['_set'] as Input$SoulWinningSessionGroup_set_input?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$where = where;
    result$data['where'] = l$where.toJson();
    if (_$data.containsKey('_set')) {
      final l$$_set = $_set;
      result$data['_set'] = l$$_set?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$SoulWinningSessionGroup_updates<
          Input$SoulWinningSessionGroup_updates>
      get copyWith => CopyWith$Input$SoulWinningSessionGroup_updates(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SoulWinningSessionGroup_updates) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$where = where;
    final lOther$where = other.where;
    if (l$where != lOther$where) {
      return false;
    }
    final l$$_set = $_set;
    final lOther$$_set = other.$_set;
    if (_$data.containsKey('_set') != other._$data.containsKey('_set')) {
      return false;
    }
    if (l$$_set != lOther$$_set) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$where = where;
    final l$$_set = $_set;
    return Object.hashAll([
      l$where,
      _$data.containsKey('_set') ? l$$_set : const {},
    ]);
  }
}

abstract class CopyWith$Input$SoulWinningSessionGroup_updates<TRes> {
  factory CopyWith$Input$SoulWinningSessionGroup_updates(
    Input$SoulWinningSessionGroup_updates instance,
    TRes Function(Input$SoulWinningSessionGroup_updates) then,
  ) = _CopyWithImpl$Input$SoulWinningSessionGroup_updates;

  factory CopyWith$Input$SoulWinningSessionGroup_updates.stub(TRes res) =
      _CopyWithStubImpl$Input$SoulWinningSessionGroup_updates;

  TRes call({
    Input$SoulWinningSessionGroup_bool_exp? where,
    Input$SoulWinningSessionGroup_set_input? $_set,
  });
  CopyWith$Input$SoulWinningSessionGroup_bool_exp<TRes> get where;
  CopyWith$Input$SoulWinningSessionGroup_set_input<TRes> get $_set;
}

class _CopyWithImpl$Input$SoulWinningSessionGroup_updates<TRes>
    implements CopyWith$Input$SoulWinningSessionGroup_updates<TRes> {
  _CopyWithImpl$Input$SoulWinningSessionGroup_updates(
    this._instance,
    this._then,
  );

  final Input$SoulWinningSessionGroup_updates _instance;

  final TRes Function(Input$SoulWinningSessionGroup_updates) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? where = _undefined,
    Object? $_set = _undefined,
  }) =>
      _then(Input$SoulWinningSessionGroup_updates._({
        ..._instance._$data,
        if (where != _undefined && where != null)
          'where': (where as Input$SoulWinningSessionGroup_bool_exp),
        if ($_set != _undefined)
          '_set': ($_set as Input$SoulWinningSessionGroup_set_input?),
      }));
  CopyWith$Input$SoulWinningSessionGroup_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return CopyWith$Input$SoulWinningSessionGroup_bool_exp(
        local$where, (e) => call(where: e));
  }

  CopyWith$Input$SoulWinningSessionGroup_set_input<TRes> get $_set {
    final local$$_set = _instance.$_set;
    return local$$_set == null
        ? CopyWith$Input$SoulWinningSessionGroup_set_input.stub(
            _then(_instance))
        : CopyWith$Input$SoulWinningSessionGroup_set_input(
            local$$_set, (e) => call($_set: e));
  }
}

class _CopyWithStubImpl$Input$SoulWinningSessionGroup_updates<TRes>
    implements CopyWith$Input$SoulWinningSessionGroup_updates<TRes> {
  _CopyWithStubImpl$Input$SoulWinningSessionGroup_updates(this._res);

  TRes _res;

  call({
    Input$SoulWinningSessionGroup_bool_exp? where,
    Input$SoulWinningSessionGroup_set_input? $_set,
  }) =>
      _res;
  CopyWith$Input$SoulWinningSessionGroup_bool_exp<TRes> get where =>
      CopyWith$Input$SoulWinningSessionGroup_bool_exp.stub(_res);
  CopyWith$Input$SoulWinningSessionGroup_set_input<TRes> get $_set =>
      CopyWith$Input$SoulWinningSessionGroup_set_input.stub(_res);
}

class Input$SoulWinningSession_aggregate_bool_exp {
  factory Input$SoulWinningSession_aggregate_bool_exp(
          {Input$SoulWinningSession_aggregate_bool_exp_count? count}) =>
      Input$SoulWinningSession_aggregate_bool_exp._({
        if (count != null) r'count': count,
      });

  Input$SoulWinningSession_aggregate_bool_exp._(this._$data);

  factory Input$SoulWinningSession_aggregate_bool_exp.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] = l$count == null
          ? null
          : Input$SoulWinningSession_aggregate_bool_exp_count.fromJson(
              (l$count as Map<String, dynamic>));
    }
    return Input$SoulWinningSession_aggregate_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$SoulWinningSession_aggregate_bool_exp_count? get count =>
      (_$data['count'] as Input$SoulWinningSession_aggregate_bool_exp_count?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] = l$count?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$SoulWinningSession_aggregate_bool_exp<
          Input$SoulWinningSession_aggregate_bool_exp>
      get copyWith => CopyWith$Input$SoulWinningSession_aggregate_bool_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SoulWinningSession_aggregate_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$count = count;
    return Object.hashAll([_$data.containsKey('count') ? l$count : const {}]);
  }
}

abstract class CopyWith$Input$SoulWinningSession_aggregate_bool_exp<TRes> {
  factory CopyWith$Input$SoulWinningSession_aggregate_bool_exp(
    Input$SoulWinningSession_aggregate_bool_exp instance,
    TRes Function(Input$SoulWinningSession_aggregate_bool_exp) then,
  ) = _CopyWithImpl$Input$SoulWinningSession_aggregate_bool_exp;

  factory CopyWith$Input$SoulWinningSession_aggregate_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$SoulWinningSession_aggregate_bool_exp;

  TRes call({Input$SoulWinningSession_aggregate_bool_exp_count? count});
  CopyWith$Input$SoulWinningSession_aggregate_bool_exp_count<TRes> get count;
}

class _CopyWithImpl$Input$SoulWinningSession_aggregate_bool_exp<TRes>
    implements CopyWith$Input$SoulWinningSession_aggregate_bool_exp<TRes> {
  _CopyWithImpl$Input$SoulWinningSession_aggregate_bool_exp(
    this._instance,
    this._then,
  );

  final Input$SoulWinningSession_aggregate_bool_exp _instance;

  final TRes Function(Input$SoulWinningSession_aggregate_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? count = _undefined}) =>
      _then(Input$SoulWinningSession_aggregate_bool_exp._({
        ..._instance._$data,
        if (count != _undefined)
          'count':
              (count as Input$SoulWinningSession_aggregate_bool_exp_count?),
      }));
  CopyWith$Input$SoulWinningSession_aggregate_bool_exp_count<TRes> get count {
    final local$count = _instance.count;
    return local$count == null
        ? CopyWith$Input$SoulWinningSession_aggregate_bool_exp_count.stub(
            _then(_instance))
        : CopyWith$Input$SoulWinningSession_aggregate_bool_exp_count(
            local$count, (e) => call(count: e));
  }
}

class _CopyWithStubImpl$Input$SoulWinningSession_aggregate_bool_exp<TRes>
    implements CopyWith$Input$SoulWinningSession_aggregate_bool_exp<TRes> {
  _CopyWithStubImpl$Input$SoulWinningSession_aggregate_bool_exp(this._res);

  TRes _res;

  call({Input$SoulWinningSession_aggregate_bool_exp_count? count}) => _res;
  CopyWith$Input$SoulWinningSession_aggregate_bool_exp_count<TRes> get count =>
      CopyWith$Input$SoulWinningSession_aggregate_bool_exp_count.stub(_res);
}

class Input$SoulWinningSession_aggregate_bool_exp_count {
  factory Input$SoulWinningSession_aggregate_bool_exp_count({
    List<Enum$SoulWinningSession_select_column>? arguments,
    bool? distinct,
    Input$SoulWinningSession_bool_exp? filter,
    required Input$Int_comparison_exp predicate,
  }) =>
      Input$SoulWinningSession_aggregate_bool_exp_count._({
        if (arguments != null) r'arguments': arguments,
        if (distinct != null) r'distinct': distinct,
        if (filter != null) r'filter': filter,
        r'predicate': predicate,
      });

  Input$SoulWinningSession_aggregate_bool_exp_count._(this._$data);

  factory Input$SoulWinningSession_aggregate_bool_exp_count.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('arguments')) {
      final l$arguments = data['arguments'];
      result$data['arguments'] = (l$arguments as List<dynamic>?)
          ?.map((e) =>
              fromJson$Enum$SoulWinningSession_select_column((e as String)))
          .toList();
    }
    if (data.containsKey('distinct')) {
      final l$distinct = data['distinct'];
      result$data['distinct'] = (l$distinct as bool?);
    }
    if (data.containsKey('filter')) {
      final l$filter = data['filter'];
      result$data['filter'] = l$filter == null
          ? null
          : Input$SoulWinningSession_bool_exp.fromJson(
              (l$filter as Map<String, dynamic>));
    }
    final l$predicate = data['predicate'];
    result$data['predicate'] = Input$Int_comparison_exp.fromJson(
        (l$predicate as Map<String, dynamic>));
    return Input$SoulWinningSession_aggregate_bool_exp_count._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Enum$SoulWinningSession_select_column>? get arguments =>
      (_$data['arguments'] as List<Enum$SoulWinningSession_select_column>?);
  bool? get distinct => (_$data['distinct'] as bool?);
  Input$SoulWinningSession_bool_exp? get filter =>
      (_$data['filter'] as Input$SoulWinningSession_bool_exp?);
  Input$Int_comparison_exp get predicate =>
      (_$data['predicate'] as Input$Int_comparison_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('arguments')) {
      final l$arguments = arguments;
      result$data['arguments'] = l$arguments
          ?.map((e) => toJson$Enum$SoulWinningSession_select_column(e))
          .toList();
    }
    if (_$data.containsKey('distinct')) {
      final l$distinct = distinct;
      result$data['distinct'] = l$distinct;
    }
    if (_$data.containsKey('filter')) {
      final l$filter = filter;
      result$data['filter'] = l$filter?.toJson();
    }
    final l$predicate = predicate;
    result$data['predicate'] = l$predicate.toJson();
    return result$data;
  }

  CopyWith$Input$SoulWinningSession_aggregate_bool_exp_count<
          Input$SoulWinningSession_aggregate_bool_exp_count>
      get copyWith =>
          CopyWith$Input$SoulWinningSession_aggregate_bool_exp_count(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SoulWinningSession_aggregate_bool_exp_count) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$arguments = arguments;
    final lOther$arguments = other.arguments;
    if (_$data.containsKey('arguments') !=
        other._$data.containsKey('arguments')) {
      return false;
    }
    if (l$arguments != null && lOther$arguments != null) {
      if (l$arguments.length != lOther$arguments.length) {
        return false;
      }
      for (int i = 0; i < l$arguments.length; i++) {
        final l$arguments$entry = l$arguments[i];
        final lOther$arguments$entry = lOther$arguments[i];
        if (l$arguments$entry != lOther$arguments$entry) {
          return false;
        }
      }
    } else if (l$arguments != lOther$arguments) {
      return false;
    }
    final l$distinct = distinct;
    final lOther$distinct = other.distinct;
    if (_$data.containsKey('distinct') !=
        other._$data.containsKey('distinct')) {
      return false;
    }
    if (l$distinct != lOther$distinct) {
      return false;
    }
    final l$filter = filter;
    final lOther$filter = other.filter;
    if (_$data.containsKey('filter') != other._$data.containsKey('filter')) {
      return false;
    }
    if (l$filter != lOther$filter) {
      return false;
    }
    final l$predicate = predicate;
    final lOther$predicate = other.predicate;
    if (l$predicate != lOther$predicate) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$arguments = arguments;
    final l$distinct = distinct;
    final l$filter = filter;
    final l$predicate = predicate;
    return Object.hashAll([
      _$data.containsKey('arguments')
          ? l$arguments == null
              ? null
              : Object.hashAll(l$arguments.map((v) => v))
          : const {},
      _$data.containsKey('distinct') ? l$distinct : const {},
      _$data.containsKey('filter') ? l$filter : const {},
      l$predicate,
    ]);
  }
}

abstract class CopyWith$Input$SoulWinningSession_aggregate_bool_exp_count<
    TRes> {
  factory CopyWith$Input$SoulWinningSession_aggregate_bool_exp_count(
    Input$SoulWinningSession_aggregate_bool_exp_count instance,
    TRes Function(Input$SoulWinningSession_aggregate_bool_exp_count) then,
  ) = _CopyWithImpl$Input$SoulWinningSession_aggregate_bool_exp_count;

  factory CopyWith$Input$SoulWinningSession_aggregate_bool_exp_count.stub(
          TRes res) =
      _CopyWithStubImpl$Input$SoulWinningSession_aggregate_bool_exp_count;

  TRes call({
    List<Enum$SoulWinningSession_select_column>? arguments,
    bool? distinct,
    Input$SoulWinningSession_bool_exp? filter,
    Input$Int_comparison_exp? predicate,
  });
  CopyWith$Input$SoulWinningSession_bool_exp<TRes> get filter;
  CopyWith$Input$Int_comparison_exp<TRes> get predicate;
}

class _CopyWithImpl$Input$SoulWinningSession_aggregate_bool_exp_count<TRes>
    implements
        CopyWith$Input$SoulWinningSession_aggregate_bool_exp_count<TRes> {
  _CopyWithImpl$Input$SoulWinningSession_aggregate_bool_exp_count(
    this._instance,
    this._then,
  );

  final Input$SoulWinningSession_aggregate_bool_exp_count _instance;

  final TRes Function(Input$SoulWinningSession_aggregate_bool_exp_count) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? arguments = _undefined,
    Object? distinct = _undefined,
    Object? filter = _undefined,
    Object? predicate = _undefined,
  }) =>
      _then(Input$SoulWinningSession_aggregate_bool_exp_count._({
        ..._instance._$data,
        if (arguments != _undefined)
          'arguments':
              (arguments as List<Enum$SoulWinningSession_select_column>?),
        if (distinct != _undefined) 'distinct': (distinct as bool?),
        if (filter != _undefined)
          'filter': (filter as Input$SoulWinningSession_bool_exp?),
        if (predicate != _undefined && predicate != null)
          'predicate': (predicate as Input$Int_comparison_exp),
      }));
  CopyWith$Input$SoulWinningSession_bool_exp<TRes> get filter {
    final local$filter = _instance.filter;
    return local$filter == null
        ? CopyWith$Input$SoulWinningSession_bool_exp.stub(_then(_instance))
        : CopyWith$Input$SoulWinningSession_bool_exp(
            local$filter, (e) => call(filter: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get predicate {
    final local$predicate = _instance.predicate;
    return CopyWith$Input$Int_comparison_exp(
        local$predicate, (e) => call(predicate: e));
  }
}

class _CopyWithStubImpl$Input$SoulWinningSession_aggregate_bool_exp_count<TRes>
    implements
        CopyWith$Input$SoulWinningSession_aggregate_bool_exp_count<TRes> {
  _CopyWithStubImpl$Input$SoulWinningSession_aggregate_bool_exp_count(
      this._res);

  TRes _res;

  call({
    List<Enum$SoulWinningSession_select_column>? arguments,
    bool? distinct,
    Input$SoulWinningSession_bool_exp? filter,
    Input$Int_comparison_exp? predicate,
  }) =>
      _res;
  CopyWith$Input$SoulWinningSession_bool_exp<TRes> get filter =>
      CopyWith$Input$SoulWinningSession_bool_exp.stub(_res);
  CopyWith$Input$Int_comparison_exp<TRes> get predicate =>
      CopyWith$Input$Int_comparison_exp.stub(_res);
}

class Input$SoulWinningSession_updates {
  factory Input$SoulWinningSession_updates({
    required Input$SoulWinningSession_bool_exp where,
    Input$SoulWinningSession_set_input? $_set,
  }) =>
      Input$SoulWinningSession_updates._({
        r'where': where,
        if ($_set != null) r'_set': $_set,
      });

  Input$SoulWinningSession_updates._(this._$data);

  factory Input$SoulWinningSession_updates.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$where = data['where'];
    result$data['where'] = Input$SoulWinningSession_bool_exp.fromJson(
        (l$where as Map<String, dynamic>));
    if (data.containsKey('_set')) {
      final l$$_set = data['_set'];
      result$data['_set'] = l$$_set == null
          ? null
          : Input$SoulWinningSession_set_input.fromJson(
              (l$$_set as Map<String, dynamic>));
    }
    return Input$SoulWinningSession_updates._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$SoulWinningSession_bool_exp get where =>
      (_$data['where'] as Input$SoulWinningSession_bool_exp);
  Input$SoulWinningSession_set_input? get $_set =>
      (_$data['_set'] as Input$SoulWinningSession_set_input?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$where = where;
    result$data['where'] = l$where.toJson();
    if (_$data.containsKey('_set')) {
      final l$$_set = $_set;
      result$data['_set'] = l$$_set?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$SoulWinningSession_updates<Input$SoulWinningSession_updates>
      get copyWith => CopyWith$Input$SoulWinningSession_updates(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SoulWinningSession_updates) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$where = where;
    final lOther$where = other.where;
    if (l$where != lOther$where) {
      return false;
    }
    final l$$_set = $_set;
    final lOther$$_set = other.$_set;
    if (_$data.containsKey('_set') != other._$data.containsKey('_set')) {
      return false;
    }
    if (l$$_set != lOther$$_set) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$where = where;
    final l$$_set = $_set;
    return Object.hashAll([
      l$where,
      _$data.containsKey('_set') ? l$$_set : const {},
    ]);
  }
}

abstract class CopyWith$Input$SoulWinningSession_updates<TRes> {
  factory CopyWith$Input$SoulWinningSession_updates(
    Input$SoulWinningSession_updates instance,
    TRes Function(Input$SoulWinningSession_updates) then,
  ) = _CopyWithImpl$Input$SoulWinningSession_updates;

  factory CopyWith$Input$SoulWinningSession_updates.stub(TRes res) =
      _CopyWithStubImpl$Input$SoulWinningSession_updates;

  TRes call({
    Input$SoulWinningSession_bool_exp? where,
    Input$SoulWinningSession_set_input? $_set,
  });
  CopyWith$Input$SoulWinningSession_bool_exp<TRes> get where;
  CopyWith$Input$SoulWinningSession_set_input<TRes> get $_set;
}

class _CopyWithImpl$Input$SoulWinningSession_updates<TRes>
    implements CopyWith$Input$SoulWinningSession_updates<TRes> {
  _CopyWithImpl$Input$SoulWinningSession_updates(
    this._instance,
    this._then,
  );

  final Input$SoulWinningSession_updates _instance;

  final TRes Function(Input$SoulWinningSession_updates) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? where = _undefined,
    Object? $_set = _undefined,
  }) =>
      _then(Input$SoulWinningSession_updates._({
        ..._instance._$data,
        if (where != _undefined && where != null)
          'where': (where as Input$SoulWinningSession_bool_exp),
        if ($_set != _undefined)
          '_set': ($_set as Input$SoulWinningSession_set_input?),
      }));
  CopyWith$Input$SoulWinningSession_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return CopyWith$Input$SoulWinningSession_bool_exp(
        local$where, (e) => call(where: e));
  }

  CopyWith$Input$SoulWinningSession_set_input<TRes> get $_set {
    final local$$_set = _instance.$_set;
    return local$$_set == null
        ? CopyWith$Input$SoulWinningSession_set_input.stub(_then(_instance))
        : CopyWith$Input$SoulWinningSession_set_input(
            local$$_set, (e) => call($_set: e));
  }
}

class _CopyWithStubImpl$Input$SoulWinningSession_updates<TRes>
    implements CopyWith$Input$SoulWinningSession_updates<TRes> {
  _CopyWithStubImpl$Input$SoulWinningSession_updates(this._res);

  TRes _res;

  call({
    Input$SoulWinningSession_bool_exp? where,
    Input$SoulWinningSession_set_input? $_set,
  }) =>
      _res;
  CopyWith$Input$SoulWinningSession_bool_exp<TRes> get where =>
      CopyWith$Input$SoulWinningSession_bool_exp.stub(_res);
  CopyWith$Input$SoulWinningSession_set_input<TRes> get $_set =>
      CopyWith$Input$SoulWinningSession_set_input.stub(_res);
}

class Input$User_updates {
  factory Input$User_updates({
    required Input$User_bool_exp where,
    Input$User_set_input? $_set,
  }) =>
      Input$User_updates._({
        r'where': where,
        if ($_set != null) r'_set': $_set,
      });

  Input$User_updates._(this._$data);

  factory Input$User_updates.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$where = data['where'];
    result$data['where'] =
        Input$User_bool_exp.fromJson((l$where as Map<String, dynamic>));
    if (data.containsKey('_set')) {
      final l$$_set = data['_set'];
      result$data['_set'] = l$$_set == null
          ? null
          : Input$User_set_input.fromJson((l$$_set as Map<String, dynamic>));
    }
    return Input$User_updates._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$User_bool_exp get where => (_$data['where'] as Input$User_bool_exp);
  Input$User_set_input? get $_set => (_$data['_set'] as Input$User_set_input?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$where = where;
    result$data['where'] = l$where.toJson();
    if (_$data.containsKey('_set')) {
      final l$$_set = $_set;
      result$data['_set'] = l$$_set?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$User_updates<Input$User_updates> get copyWith =>
      CopyWith$Input$User_updates(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$User_updates) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$where = where;
    final lOther$where = other.where;
    if (l$where != lOther$where) {
      return false;
    }
    final l$$_set = $_set;
    final lOther$$_set = other.$_set;
    if (_$data.containsKey('_set') != other._$data.containsKey('_set')) {
      return false;
    }
    if (l$$_set != lOther$$_set) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$where = where;
    final l$$_set = $_set;
    return Object.hashAll([
      l$where,
      _$data.containsKey('_set') ? l$$_set : const {},
    ]);
  }
}

abstract class CopyWith$Input$User_updates<TRes> {
  factory CopyWith$Input$User_updates(
    Input$User_updates instance,
    TRes Function(Input$User_updates) then,
  ) = _CopyWithImpl$Input$User_updates;

  factory CopyWith$Input$User_updates.stub(TRes res) =
      _CopyWithStubImpl$Input$User_updates;

  TRes call({
    Input$User_bool_exp? where,
    Input$User_set_input? $_set,
  });
  CopyWith$Input$User_bool_exp<TRes> get where;
  CopyWith$Input$User_set_input<TRes> get $_set;
}

class _CopyWithImpl$Input$User_updates<TRes>
    implements CopyWith$Input$User_updates<TRes> {
  _CopyWithImpl$Input$User_updates(
    this._instance,
    this._then,
  );

  final Input$User_updates _instance;

  final TRes Function(Input$User_updates) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? where = _undefined,
    Object? $_set = _undefined,
  }) =>
      _then(Input$User_updates._({
        ..._instance._$data,
        if (where != _undefined && where != null)
          'where': (where as Input$User_bool_exp),
        if ($_set != _undefined) '_set': ($_set as Input$User_set_input?),
      }));
  CopyWith$Input$User_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return CopyWith$Input$User_bool_exp(local$where, (e) => call(where: e));
  }

  CopyWith$Input$User_set_input<TRes> get $_set {
    final local$$_set = _instance.$_set;
    return local$$_set == null
        ? CopyWith$Input$User_set_input.stub(_then(_instance))
        : CopyWith$Input$User_set_input(local$$_set, (e) => call($_set: e));
  }
}

class _CopyWithStubImpl$Input$User_updates<TRes>
    implements CopyWith$Input$User_updates<TRes> {
  _CopyWithStubImpl$Input$User_updates(this._res);

  TRes _res;

  call({
    Input$User_bool_exp? where,
    Input$User_set_input? $_set,
  }) =>
      _res;
  CopyWith$Input$User_bool_exp<TRes> get where =>
      CopyWith$Input$User_bool_exp.stub(_res);
  CopyWith$Input$User_set_input<TRes> get $_set =>
      CopyWith$Input$User_set_input.stub(_res);
}

class Input$_Organization_adminsOfOrganization_aggregate_bool_exp {
  factory Input$_Organization_adminsOfOrganization_aggregate_bool_exp(
          {Input$_Organization_adminsOfOrganization_aggregate_bool_exp_count?
              count}) =>
      Input$_Organization_adminsOfOrganization_aggregate_bool_exp._({
        if (count != null) r'count': count,
      });

  Input$_Organization_adminsOfOrganization_aggregate_bool_exp._(this._$data);

  factory Input$_Organization_adminsOfOrganization_aggregate_bool_exp.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] = l$count == null
          ? null
          : Input$_Organization_adminsOfOrganization_aggregate_bool_exp_count
              .fromJson((l$count as Map<String, dynamic>));
    }
    return Input$_Organization_adminsOfOrganization_aggregate_bool_exp._(
        result$data);
  }

  Map<String, dynamic> _$data;

  Input$_Organization_adminsOfOrganization_aggregate_bool_exp_count?
      get count => (_$data['count']
          as Input$_Organization_adminsOfOrganization_aggregate_bool_exp_count?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] = l$count?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$_Organization_adminsOfOrganization_aggregate_bool_exp<
          Input$_Organization_adminsOfOrganization_aggregate_bool_exp>
      get copyWith =>
          CopyWith$Input$_Organization_adminsOfOrganization_aggregate_bool_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other
            is Input$_Organization_adminsOfOrganization_aggregate_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$count = count;
    return Object.hashAll([_$data.containsKey('count') ? l$count : const {}]);
  }
}

abstract class CopyWith$Input$_Organization_adminsOfOrganization_aggregate_bool_exp<
    TRes> {
  factory CopyWith$Input$_Organization_adminsOfOrganization_aggregate_bool_exp(
    Input$_Organization_adminsOfOrganization_aggregate_bool_exp instance,
    TRes Function(Input$_Organization_adminsOfOrganization_aggregate_bool_exp)
        then,
  ) = _CopyWithImpl$Input$_Organization_adminsOfOrganization_aggregate_bool_exp;

  factory CopyWith$Input$_Organization_adminsOfOrganization_aggregate_bool_exp.stub(
          TRes res) =
      _CopyWithStubImpl$Input$_Organization_adminsOfOrganization_aggregate_bool_exp;

  TRes call(
      {Input$_Organization_adminsOfOrganization_aggregate_bool_exp_count?
          count});
  CopyWith$Input$_Organization_adminsOfOrganization_aggregate_bool_exp_count<
      TRes> get count;
}

class _CopyWithImpl$Input$_Organization_adminsOfOrganization_aggregate_bool_exp<
        TRes>
    implements
        CopyWith$Input$_Organization_adminsOfOrganization_aggregate_bool_exp<
            TRes> {
  _CopyWithImpl$Input$_Organization_adminsOfOrganization_aggregate_bool_exp(
    this._instance,
    this._then,
  );

  final Input$_Organization_adminsOfOrganization_aggregate_bool_exp _instance;

  final TRes Function(
      Input$_Organization_adminsOfOrganization_aggregate_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? count = _undefined}) =>
      _then(Input$_Organization_adminsOfOrganization_aggregate_bool_exp._({
        ..._instance._$data,
        if (count != _undefined)
          'count': (count
              as Input$_Organization_adminsOfOrganization_aggregate_bool_exp_count?),
      }));
  CopyWith$Input$_Organization_adminsOfOrganization_aggregate_bool_exp_count<
      TRes> get count {
    final local$count = _instance.count;
    return local$count == null
        ? CopyWith$Input$_Organization_adminsOfOrganization_aggregate_bool_exp_count
            .stub(_then(_instance))
        : CopyWith$Input$_Organization_adminsOfOrganization_aggregate_bool_exp_count(
            local$count, (e) => call(count: e));
  }
}

class _CopyWithStubImpl$Input$_Organization_adminsOfOrganization_aggregate_bool_exp<
        TRes>
    implements
        CopyWith$Input$_Organization_adminsOfOrganization_aggregate_bool_exp<
            TRes> {
  _CopyWithStubImpl$Input$_Organization_adminsOfOrganization_aggregate_bool_exp(
      this._res);

  TRes _res;

  call(
          {Input$_Organization_adminsOfOrganization_aggregate_bool_exp_count?
              count}) =>
      _res;
  CopyWith$Input$_Organization_adminsOfOrganization_aggregate_bool_exp_count<
          TRes>
      get count =>
          CopyWith$Input$_Organization_adminsOfOrganization_aggregate_bool_exp_count
              .stub(_res);
}

class Input$_Organization_adminsOfOrganization_aggregate_bool_exp_count {
  factory Input$_Organization_adminsOfOrganization_aggregate_bool_exp_count({
    List<Enum$_Organization_adminsOfOrganization_select_column>? arguments,
    bool? distinct,
    Input$_Organization_adminsOfOrganization_bool_exp? filter,
    required Input$Int_comparison_exp predicate,
  }) =>
      Input$_Organization_adminsOfOrganization_aggregate_bool_exp_count._({
        if (arguments != null) r'arguments': arguments,
        if (distinct != null) r'distinct': distinct,
        if (filter != null) r'filter': filter,
        r'predicate': predicate,
      });

  Input$_Organization_adminsOfOrganization_aggregate_bool_exp_count._(
      this._$data);

  factory Input$_Organization_adminsOfOrganization_aggregate_bool_exp_count.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('arguments')) {
      final l$arguments = data['arguments'];
      result$data['arguments'] = (l$arguments as List<dynamic>?)
          ?.map((e) =>
              fromJson$Enum$_Organization_adminsOfOrganization_select_column(
                  (e as String)))
          .toList();
    }
    if (data.containsKey('distinct')) {
      final l$distinct = data['distinct'];
      result$data['distinct'] = (l$distinct as bool?);
    }
    if (data.containsKey('filter')) {
      final l$filter = data['filter'];
      result$data['filter'] = l$filter == null
          ? null
          : Input$_Organization_adminsOfOrganization_bool_exp.fromJson(
              (l$filter as Map<String, dynamic>));
    }
    final l$predicate = data['predicate'];
    result$data['predicate'] = Input$Int_comparison_exp.fromJson(
        (l$predicate as Map<String, dynamic>));
    return Input$_Organization_adminsOfOrganization_aggregate_bool_exp_count._(
        result$data);
  }

  Map<String, dynamic> _$data;

  List<Enum$_Organization_adminsOfOrganization_select_column>? get arguments =>
      (_$data['arguments']
          as List<Enum$_Organization_adminsOfOrganization_select_column>?);
  bool? get distinct => (_$data['distinct'] as bool?);
  Input$_Organization_adminsOfOrganization_bool_exp? get filter =>
      (_$data['filter'] as Input$_Organization_adminsOfOrganization_bool_exp?);
  Input$Int_comparison_exp get predicate =>
      (_$data['predicate'] as Input$Int_comparison_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('arguments')) {
      final l$arguments = arguments;
      result$data['arguments'] = l$arguments
          ?.map((e) =>
              toJson$Enum$_Organization_adminsOfOrganization_select_column(e))
          .toList();
    }
    if (_$data.containsKey('distinct')) {
      final l$distinct = distinct;
      result$data['distinct'] = l$distinct;
    }
    if (_$data.containsKey('filter')) {
      final l$filter = filter;
      result$data['filter'] = l$filter?.toJson();
    }
    final l$predicate = predicate;
    result$data['predicate'] = l$predicate.toJson();
    return result$data;
  }

  CopyWith$Input$_Organization_adminsOfOrganization_aggregate_bool_exp_count<
          Input$_Organization_adminsOfOrganization_aggregate_bool_exp_count>
      get copyWith =>
          CopyWith$Input$_Organization_adminsOfOrganization_aggregate_bool_exp_count(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other
            is Input$_Organization_adminsOfOrganization_aggregate_bool_exp_count) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$arguments = arguments;
    final lOther$arguments = other.arguments;
    if (_$data.containsKey('arguments') !=
        other._$data.containsKey('arguments')) {
      return false;
    }
    if (l$arguments != null && lOther$arguments != null) {
      if (l$arguments.length != lOther$arguments.length) {
        return false;
      }
      for (int i = 0; i < l$arguments.length; i++) {
        final l$arguments$entry = l$arguments[i];
        final lOther$arguments$entry = lOther$arguments[i];
        if (l$arguments$entry != lOther$arguments$entry) {
          return false;
        }
      }
    } else if (l$arguments != lOther$arguments) {
      return false;
    }
    final l$distinct = distinct;
    final lOther$distinct = other.distinct;
    if (_$data.containsKey('distinct') !=
        other._$data.containsKey('distinct')) {
      return false;
    }
    if (l$distinct != lOther$distinct) {
      return false;
    }
    final l$filter = filter;
    final lOther$filter = other.filter;
    if (_$data.containsKey('filter') != other._$data.containsKey('filter')) {
      return false;
    }
    if (l$filter != lOther$filter) {
      return false;
    }
    final l$predicate = predicate;
    final lOther$predicate = other.predicate;
    if (l$predicate != lOther$predicate) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$arguments = arguments;
    final l$distinct = distinct;
    final l$filter = filter;
    final l$predicate = predicate;
    return Object.hashAll([
      _$data.containsKey('arguments')
          ? l$arguments == null
              ? null
              : Object.hashAll(l$arguments.map((v) => v))
          : const {},
      _$data.containsKey('distinct') ? l$distinct : const {},
      _$data.containsKey('filter') ? l$filter : const {},
      l$predicate,
    ]);
  }
}

abstract class CopyWith$Input$_Organization_adminsOfOrganization_aggregate_bool_exp_count<
    TRes> {
  factory CopyWith$Input$_Organization_adminsOfOrganization_aggregate_bool_exp_count(
    Input$_Organization_adminsOfOrganization_aggregate_bool_exp_count instance,
    TRes Function(
            Input$_Organization_adminsOfOrganization_aggregate_bool_exp_count)
        then,
  ) = _CopyWithImpl$Input$_Organization_adminsOfOrganization_aggregate_bool_exp_count;

  factory CopyWith$Input$_Organization_adminsOfOrganization_aggregate_bool_exp_count.stub(
          TRes res) =
      _CopyWithStubImpl$Input$_Organization_adminsOfOrganization_aggregate_bool_exp_count;

  TRes call({
    List<Enum$_Organization_adminsOfOrganization_select_column>? arguments,
    bool? distinct,
    Input$_Organization_adminsOfOrganization_bool_exp? filter,
    Input$Int_comparison_exp? predicate,
  });
  CopyWith$Input$_Organization_adminsOfOrganization_bool_exp<TRes> get filter;
  CopyWith$Input$Int_comparison_exp<TRes> get predicate;
}

class _CopyWithImpl$Input$_Organization_adminsOfOrganization_aggregate_bool_exp_count<
        TRes>
    implements
        CopyWith$Input$_Organization_adminsOfOrganization_aggregate_bool_exp_count<
            TRes> {
  _CopyWithImpl$Input$_Organization_adminsOfOrganization_aggregate_bool_exp_count(
    this._instance,
    this._then,
  );

  final Input$_Organization_adminsOfOrganization_aggregate_bool_exp_count
      _instance;

  final TRes Function(
      Input$_Organization_adminsOfOrganization_aggregate_bool_exp_count) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? arguments = _undefined,
    Object? distinct = _undefined,
    Object? filter = _undefined,
    Object? predicate = _undefined,
  }) =>
      _then(
          Input$_Organization_adminsOfOrganization_aggregate_bool_exp_count._({
        ..._instance._$data,
        if (arguments != _undefined)
          'arguments': (arguments
              as List<Enum$_Organization_adminsOfOrganization_select_column>?),
        if (distinct != _undefined) 'distinct': (distinct as bool?),
        if (filter != _undefined)
          'filter':
              (filter as Input$_Organization_adminsOfOrganization_bool_exp?),
        if (predicate != _undefined && predicate != null)
          'predicate': (predicate as Input$Int_comparison_exp),
      }));
  CopyWith$Input$_Organization_adminsOfOrganization_bool_exp<TRes> get filter {
    final local$filter = _instance.filter;
    return local$filter == null
        ? CopyWith$Input$_Organization_adminsOfOrganization_bool_exp.stub(
            _then(_instance))
        : CopyWith$Input$_Organization_adminsOfOrganization_bool_exp(
            local$filter, (e) => call(filter: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get predicate {
    final local$predicate = _instance.predicate;
    return CopyWith$Input$Int_comparison_exp(
        local$predicate, (e) => call(predicate: e));
  }
}

class _CopyWithStubImpl$Input$_Organization_adminsOfOrganization_aggregate_bool_exp_count<
        TRes>
    implements
        CopyWith$Input$_Organization_adminsOfOrganization_aggregate_bool_exp_count<
            TRes> {
  _CopyWithStubImpl$Input$_Organization_adminsOfOrganization_aggregate_bool_exp_count(
      this._res);

  TRes _res;

  call({
    List<Enum$_Organization_adminsOfOrganization_select_column>? arguments,
    bool? distinct,
    Input$_Organization_adminsOfOrganization_bool_exp? filter,
    Input$Int_comparison_exp? predicate,
  }) =>
      _res;
  CopyWith$Input$_Organization_adminsOfOrganization_bool_exp<TRes> get filter =>
      CopyWith$Input$_Organization_adminsOfOrganization_bool_exp.stub(_res);
  CopyWith$Input$Int_comparison_exp<TRes> get predicate =>
      CopyWith$Input$Int_comparison_exp.stub(_res);
}

class Input$_Organization_adminsOfOrganization_updates {
  factory Input$_Organization_adminsOfOrganization_updates({
    required Input$_Organization_adminsOfOrganization_bool_exp where,
    Input$_Organization_adminsOfOrganization_set_input? $_set,
  }) =>
      Input$_Organization_adminsOfOrganization_updates._({
        r'where': where,
        if ($_set != null) r'_set': $_set,
      });

  Input$_Organization_adminsOfOrganization_updates._(this._$data);

  factory Input$_Organization_adminsOfOrganization_updates.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$where = data['where'];
    result$data['where'] =
        Input$_Organization_adminsOfOrganization_bool_exp.fromJson(
            (l$where as Map<String, dynamic>));
    if (data.containsKey('_set')) {
      final l$$_set = data['_set'];
      result$data['_set'] = l$$_set == null
          ? null
          : Input$_Organization_adminsOfOrganization_set_input.fromJson(
              (l$$_set as Map<String, dynamic>));
    }
    return Input$_Organization_adminsOfOrganization_updates._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$_Organization_adminsOfOrganization_bool_exp get where =>
      (_$data['where'] as Input$_Organization_adminsOfOrganization_bool_exp);
  Input$_Organization_adminsOfOrganization_set_input? get $_set =>
      (_$data['_set'] as Input$_Organization_adminsOfOrganization_set_input?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$where = where;
    result$data['where'] = l$where.toJson();
    if (_$data.containsKey('_set')) {
      final l$$_set = $_set;
      result$data['_set'] = l$$_set?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$_Organization_adminsOfOrganization_updates<
          Input$_Organization_adminsOfOrganization_updates>
      get copyWith => CopyWith$Input$_Organization_adminsOfOrganization_updates(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$_Organization_adminsOfOrganization_updates) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$where = where;
    final lOther$where = other.where;
    if (l$where != lOther$where) {
      return false;
    }
    final l$$_set = $_set;
    final lOther$$_set = other.$_set;
    if (_$data.containsKey('_set') != other._$data.containsKey('_set')) {
      return false;
    }
    if (l$$_set != lOther$$_set) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$where = where;
    final l$$_set = $_set;
    return Object.hashAll([
      l$where,
      _$data.containsKey('_set') ? l$$_set : const {},
    ]);
  }
}

abstract class CopyWith$Input$_Organization_adminsOfOrganization_updates<TRes> {
  factory CopyWith$Input$_Organization_adminsOfOrganization_updates(
    Input$_Organization_adminsOfOrganization_updates instance,
    TRes Function(Input$_Organization_adminsOfOrganization_updates) then,
  ) = _CopyWithImpl$Input$_Organization_adminsOfOrganization_updates;

  factory CopyWith$Input$_Organization_adminsOfOrganization_updates.stub(
          TRes res) =
      _CopyWithStubImpl$Input$_Organization_adminsOfOrganization_updates;

  TRes call({
    Input$_Organization_adminsOfOrganization_bool_exp? where,
    Input$_Organization_adminsOfOrganization_set_input? $_set,
  });
  CopyWith$Input$_Organization_adminsOfOrganization_bool_exp<TRes> get where;
  CopyWith$Input$_Organization_adminsOfOrganization_set_input<TRes> get $_set;
}

class _CopyWithImpl$Input$_Organization_adminsOfOrganization_updates<TRes>
    implements CopyWith$Input$_Organization_adminsOfOrganization_updates<TRes> {
  _CopyWithImpl$Input$_Organization_adminsOfOrganization_updates(
    this._instance,
    this._then,
  );

  final Input$_Organization_adminsOfOrganization_updates _instance;

  final TRes Function(Input$_Organization_adminsOfOrganization_updates) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? where = _undefined,
    Object? $_set = _undefined,
  }) =>
      _then(Input$_Organization_adminsOfOrganization_updates._({
        ..._instance._$data,
        if (where != _undefined && where != null)
          'where': (where as Input$_Organization_adminsOfOrganization_bool_exp),
        if ($_set != _undefined)
          '_set':
              ($_set as Input$_Organization_adminsOfOrganization_set_input?),
      }));
  CopyWith$Input$_Organization_adminsOfOrganization_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return CopyWith$Input$_Organization_adminsOfOrganization_bool_exp(
        local$where, (e) => call(where: e));
  }

  CopyWith$Input$_Organization_adminsOfOrganization_set_input<TRes> get $_set {
    final local$$_set = _instance.$_set;
    return local$$_set == null
        ? CopyWith$Input$_Organization_adminsOfOrganization_set_input.stub(
            _then(_instance))
        : CopyWith$Input$_Organization_adminsOfOrganization_set_input(
            local$$_set, (e) => call($_set: e));
  }
}

class _CopyWithStubImpl$Input$_Organization_adminsOfOrganization_updates<TRes>
    implements CopyWith$Input$_Organization_adminsOfOrganization_updates<TRes> {
  _CopyWithStubImpl$Input$_Organization_adminsOfOrganization_updates(this._res);

  TRes _res;

  call({
    Input$_Organization_adminsOfOrganization_bool_exp? where,
    Input$_Organization_adminsOfOrganization_set_input? $_set,
  }) =>
      _res;
  CopyWith$Input$_Organization_adminsOfOrganization_bool_exp<TRes> get where =>
      CopyWith$Input$_Organization_adminsOfOrganization_bool_exp.stub(_res);
  CopyWith$Input$_Organization_adminsOfOrganization_set_input<TRes> get $_set =>
      CopyWith$Input$_Organization_adminsOfOrganization_set_input.stub(_res);
}

class Input$_Organization_membersInOrganization_aggregate_bool_exp {
  factory Input$_Organization_membersInOrganization_aggregate_bool_exp(
          {Input$_Organization_membersInOrganization_aggregate_bool_exp_count?
              count}) =>
      Input$_Organization_membersInOrganization_aggregate_bool_exp._({
        if (count != null) r'count': count,
      });

  Input$_Organization_membersInOrganization_aggregate_bool_exp._(this._$data);

  factory Input$_Organization_membersInOrganization_aggregate_bool_exp.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] = l$count == null
          ? null
          : Input$_Organization_membersInOrganization_aggregate_bool_exp_count
              .fromJson((l$count as Map<String, dynamic>));
    }
    return Input$_Organization_membersInOrganization_aggregate_bool_exp._(
        result$data);
  }

  Map<String, dynamic> _$data;

  Input$_Organization_membersInOrganization_aggregate_bool_exp_count?
      get count => (_$data['count']
          as Input$_Organization_membersInOrganization_aggregate_bool_exp_count?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] = l$count?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$_Organization_membersInOrganization_aggregate_bool_exp<
          Input$_Organization_membersInOrganization_aggregate_bool_exp>
      get copyWith =>
          CopyWith$Input$_Organization_membersInOrganization_aggregate_bool_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other
            is Input$_Organization_membersInOrganization_aggregate_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$count = count;
    return Object.hashAll([_$data.containsKey('count') ? l$count : const {}]);
  }
}

abstract class CopyWith$Input$_Organization_membersInOrganization_aggregate_bool_exp<
    TRes> {
  factory CopyWith$Input$_Organization_membersInOrganization_aggregate_bool_exp(
    Input$_Organization_membersInOrganization_aggregate_bool_exp instance,
    TRes Function(Input$_Organization_membersInOrganization_aggregate_bool_exp)
        then,
  ) = _CopyWithImpl$Input$_Organization_membersInOrganization_aggregate_bool_exp;

  factory CopyWith$Input$_Organization_membersInOrganization_aggregate_bool_exp.stub(
          TRes res) =
      _CopyWithStubImpl$Input$_Organization_membersInOrganization_aggregate_bool_exp;

  TRes call(
      {Input$_Organization_membersInOrganization_aggregate_bool_exp_count?
          count});
  CopyWith$Input$_Organization_membersInOrganization_aggregate_bool_exp_count<
      TRes> get count;
}

class _CopyWithImpl$Input$_Organization_membersInOrganization_aggregate_bool_exp<
        TRes>
    implements
        CopyWith$Input$_Organization_membersInOrganization_aggregate_bool_exp<
            TRes> {
  _CopyWithImpl$Input$_Organization_membersInOrganization_aggregate_bool_exp(
    this._instance,
    this._then,
  );

  final Input$_Organization_membersInOrganization_aggregate_bool_exp _instance;

  final TRes Function(
      Input$_Organization_membersInOrganization_aggregate_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? count = _undefined}) =>
      _then(Input$_Organization_membersInOrganization_aggregate_bool_exp._({
        ..._instance._$data,
        if (count != _undefined)
          'count': (count
              as Input$_Organization_membersInOrganization_aggregate_bool_exp_count?),
      }));
  CopyWith$Input$_Organization_membersInOrganization_aggregate_bool_exp_count<
      TRes> get count {
    final local$count = _instance.count;
    return local$count == null
        ? CopyWith$Input$_Organization_membersInOrganization_aggregate_bool_exp_count
            .stub(_then(_instance))
        : CopyWith$Input$_Organization_membersInOrganization_aggregate_bool_exp_count(
            local$count, (e) => call(count: e));
  }
}

class _CopyWithStubImpl$Input$_Organization_membersInOrganization_aggregate_bool_exp<
        TRes>
    implements
        CopyWith$Input$_Organization_membersInOrganization_aggregate_bool_exp<
            TRes> {
  _CopyWithStubImpl$Input$_Organization_membersInOrganization_aggregate_bool_exp(
      this._res);

  TRes _res;

  call(
          {Input$_Organization_membersInOrganization_aggregate_bool_exp_count?
              count}) =>
      _res;
  CopyWith$Input$_Organization_membersInOrganization_aggregate_bool_exp_count<
          TRes>
      get count =>
          CopyWith$Input$_Organization_membersInOrganization_aggregate_bool_exp_count
              .stub(_res);
}

class Input$_Organization_membersInOrganization_aggregate_bool_exp_count {
  factory Input$_Organization_membersInOrganization_aggregate_bool_exp_count({
    List<Enum$_Organization_membersInOrganization_select_column>? arguments,
    bool? distinct,
    Input$_Organization_membersInOrganization_bool_exp? filter,
    required Input$Int_comparison_exp predicate,
  }) =>
      Input$_Organization_membersInOrganization_aggregate_bool_exp_count._({
        if (arguments != null) r'arguments': arguments,
        if (distinct != null) r'distinct': distinct,
        if (filter != null) r'filter': filter,
        r'predicate': predicate,
      });

  Input$_Organization_membersInOrganization_aggregate_bool_exp_count._(
      this._$data);

  factory Input$_Organization_membersInOrganization_aggregate_bool_exp_count.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('arguments')) {
      final l$arguments = data['arguments'];
      result$data['arguments'] = (l$arguments as List<dynamic>?)
          ?.map((e) =>
              fromJson$Enum$_Organization_membersInOrganization_select_column(
                  (e as String)))
          .toList();
    }
    if (data.containsKey('distinct')) {
      final l$distinct = data['distinct'];
      result$data['distinct'] = (l$distinct as bool?);
    }
    if (data.containsKey('filter')) {
      final l$filter = data['filter'];
      result$data['filter'] = l$filter == null
          ? null
          : Input$_Organization_membersInOrganization_bool_exp.fromJson(
              (l$filter as Map<String, dynamic>));
    }
    final l$predicate = data['predicate'];
    result$data['predicate'] = Input$Int_comparison_exp.fromJson(
        (l$predicate as Map<String, dynamic>));
    return Input$_Organization_membersInOrganization_aggregate_bool_exp_count._(
        result$data);
  }

  Map<String, dynamic> _$data;

  List<Enum$_Organization_membersInOrganization_select_column>? get arguments =>
      (_$data['arguments']
          as List<Enum$_Organization_membersInOrganization_select_column>?);
  bool? get distinct => (_$data['distinct'] as bool?);
  Input$_Organization_membersInOrganization_bool_exp? get filter =>
      (_$data['filter'] as Input$_Organization_membersInOrganization_bool_exp?);
  Input$Int_comparison_exp get predicate =>
      (_$data['predicate'] as Input$Int_comparison_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('arguments')) {
      final l$arguments = arguments;
      result$data['arguments'] = l$arguments
          ?.map((e) =>
              toJson$Enum$_Organization_membersInOrganization_select_column(e))
          .toList();
    }
    if (_$data.containsKey('distinct')) {
      final l$distinct = distinct;
      result$data['distinct'] = l$distinct;
    }
    if (_$data.containsKey('filter')) {
      final l$filter = filter;
      result$data['filter'] = l$filter?.toJson();
    }
    final l$predicate = predicate;
    result$data['predicate'] = l$predicate.toJson();
    return result$data;
  }

  CopyWith$Input$_Organization_membersInOrganization_aggregate_bool_exp_count<
          Input$_Organization_membersInOrganization_aggregate_bool_exp_count>
      get copyWith =>
          CopyWith$Input$_Organization_membersInOrganization_aggregate_bool_exp_count(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other
            is Input$_Organization_membersInOrganization_aggregate_bool_exp_count) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$arguments = arguments;
    final lOther$arguments = other.arguments;
    if (_$data.containsKey('arguments') !=
        other._$data.containsKey('arguments')) {
      return false;
    }
    if (l$arguments != null && lOther$arguments != null) {
      if (l$arguments.length != lOther$arguments.length) {
        return false;
      }
      for (int i = 0; i < l$arguments.length; i++) {
        final l$arguments$entry = l$arguments[i];
        final lOther$arguments$entry = lOther$arguments[i];
        if (l$arguments$entry != lOther$arguments$entry) {
          return false;
        }
      }
    } else if (l$arguments != lOther$arguments) {
      return false;
    }
    final l$distinct = distinct;
    final lOther$distinct = other.distinct;
    if (_$data.containsKey('distinct') !=
        other._$data.containsKey('distinct')) {
      return false;
    }
    if (l$distinct != lOther$distinct) {
      return false;
    }
    final l$filter = filter;
    final lOther$filter = other.filter;
    if (_$data.containsKey('filter') != other._$data.containsKey('filter')) {
      return false;
    }
    if (l$filter != lOther$filter) {
      return false;
    }
    final l$predicate = predicate;
    final lOther$predicate = other.predicate;
    if (l$predicate != lOther$predicate) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$arguments = arguments;
    final l$distinct = distinct;
    final l$filter = filter;
    final l$predicate = predicate;
    return Object.hashAll([
      _$data.containsKey('arguments')
          ? l$arguments == null
              ? null
              : Object.hashAll(l$arguments.map((v) => v))
          : const {},
      _$data.containsKey('distinct') ? l$distinct : const {},
      _$data.containsKey('filter') ? l$filter : const {},
      l$predicate,
    ]);
  }
}

abstract class CopyWith$Input$_Organization_membersInOrganization_aggregate_bool_exp_count<
    TRes> {
  factory CopyWith$Input$_Organization_membersInOrganization_aggregate_bool_exp_count(
    Input$_Organization_membersInOrganization_aggregate_bool_exp_count instance,
    TRes Function(
            Input$_Organization_membersInOrganization_aggregate_bool_exp_count)
        then,
  ) = _CopyWithImpl$Input$_Organization_membersInOrganization_aggregate_bool_exp_count;

  factory CopyWith$Input$_Organization_membersInOrganization_aggregate_bool_exp_count.stub(
          TRes res) =
      _CopyWithStubImpl$Input$_Organization_membersInOrganization_aggregate_bool_exp_count;

  TRes call({
    List<Enum$_Organization_membersInOrganization_select_column>? arguments,
    bool? distinct,
    Input$_Organization_membersInOrganization_bool_exp? filter,
    Input$Int_comparison_exp? predicate,
  });
  CopyWith$Input$_Organization_membersInOrganization_bool_exp<TRes> get filter;
  CopyWith$Input$Int_comparison_exp<TRes> get predicate;
}

class _CopyWithImpl$Input$_Organization_membersInOrganization_aggregate_bool_exp_count<
        TRes>
    implements
        CopyWith$Input$_Organization_membersInOrganization_aggregate_bool_exp_count<
            TRes> {
  _CopyWithImpl$Input$_Organization_membersInOrganization_aggregate_bool_exp_count(
    this._instance,
    this._then,
  );

  final Input$_Organization_membersInOrganization_aggregate_bool_exp_count
      _instance;

  final TRes Function(
      Input$_Organization_membersInOrganization_aggregate_bool_exp_count) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? arguments = _undefined,
    Object? distinct = _undefined,
    Object? filter = _undefined,
    Object? predicate = _undefined,
  }) =>
      _then(
          Input$_Organization_membersInOrganization_aggregate_bool_exp_count._({
        ..._instance._$data,
        if (arguments != _undefined)
          'arguments': (arguments
              as List<Enum$_Organization_membersInOrganization_select_column>?),
        if (distinct != _undefined) 'distinct': (distinct as bool?),
        if (filter != _undefined)
          'filter':
              (filter as Input$_Organization_membersInOrganization_bool_exp?),
        if (predicate != _undefined && predicate != null)
          'predicate': (predicate as Input$Int_comparison_exp),
      }));
  CopyWith$Input$_Organization_membersInOrganization_bool_exp<TRes> get filter {
    final local$filter = _instance.filter;
    return local$filter == null
        ? CopyWith$Input$_Organization_membersInOrganization_bool_exp.stub(
            _then(_instance))
        : CopyWith$Input$_Organization_membersInOrganization_bool_exp(
            local$filter, (e) => call(filter: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get predicate {
    final local$predicate = _instance.predicate;
    return CopyWith$Input$Int_comparison_exp(
        local$predicate, (e) => call(predicate: e));
  }
}

class _CopyWithStubImpl$Input$_Organization_membersInOrganization_aggregate_bool_exp_count<
        TRes>
    implements
        CopyWith$Input$_Organization_membersInOrganization_aggregate_bool_exp_count<
            TRes> {
  _CopyWithStubImpl$Input$_Organization_membersInOrganization_aggregate_bool_exp_count(
      this._res);

  TRes _res;

  call({
    List<Enum$_Organization_membersInOrganization_select_column>? arguments,
    bool? distinct,
    Input$_Organization_membersInOrganization_bool_exp? filter,
    Input$Int_comparison_exp? predicate,
  }) =>
      _res;
  CopyWith$Input$_Organization_membersInOrganization_bool_exp<TRes>
      get filter =>
          CopyWith$Input$_Organization_membersInOrganization_bool_exp.stub(
              _res);
  CopyWith$Input$Int_comparison_exp<TRes> get predicate =>
      CopyWith$Input$Int_comparison_exp.stub(_res);
}

class Input$_Organization_membersInOrganization_updates {
  factory Input$_Organization_membersInOrganization_updates({
    required Input$_Organization_membersInOrganization_bool_exp where,
    Input$_Organization_membersInOrganization_set_input? $_set,
  }) =>
      Input$_Organization_membersInOrganization_updates._({
        r'where': where,
        if ($_set != null) r'_set': $_set,
      });

  Input$_Organization_membersInOrganization_updates._(this._$data);

  factory Input$_Organization_membersInOrganization_updates.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$where = data['where'];
    result$data['where'] =
        Input$_Organization_membersInOrganization_bool_exp.fromJson(
            (l$where as Map<String, dynamic>));
    if (data.containsKey('_set')) {
      final l$$_set = data['_set'];
      result$data['_set'] = l$$_set == null
          ? null
          : Input$_Organization_membersInOrganization_set_input.fromJson(
              (l$$_set as Map<String, dynamic>));
    }
    return Input$_Organization_membersInOrganization_updates._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$_Organization_membersInOrganization_bool_exp get where =>
      (_$data['where'] as Input$_Organization_membersInOrganization_bool_exp);
  Input$_Organization_membersInOrganization_set_input? get $_set =>
      (_$data['_set'] as Input$_Organization_membersInOrganization_set_input?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$where = where;
    result$data['where'] = l$where.toJson();
    if (_$data.containsKey('_set')) {
      final l$$_set = $_set;
      result$data['_set'] = l$$_set?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$_Organization_membersInOrganization_updates<
          Input$_Organization_membersInOrganization_updates>
      get copyWith =>
          CopyWith$Input$_Organization_membersInOrganization_updates(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$_Organization_membersInOrganization_updates) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$where = where;
    final lOther$where = other.where;
    if (l$where != lOther$where) {
      return false;
    }
    final l$$_set = $_set;
    final lOther$$_set = other.$_set;
    if (_$data.containsKey('_set') != other._$data.containsKey('_set')) {
      return false;
    }
    if (l$$_set != lOther$$_set) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$where = where;
    final l$$_set = $_set;
    return Object.hashAll([
      l$where,
      _$data.containsKey('_set') ? l$$_set : const {},
    ]);
  }
}

abstract class CopyWith$Input$_Organization_membersInOrganization_updates<
    TRes> {
  factory CopyWith$Input$_Organization_membersInOrganization_updates(
    Input$_Organization_membersInOrganization_updates instance,
    TRes Function(Input$_Organization_membersInOrganization_updates) then,
  ) = _CopyWithImpl$Input$_Organization_membersInOrganization_updates;

  factory CopyWith$Input$_Organization_membersInOrganization_updates.stub(
          TRes res) =
      _CopyWithStubImpl$Input$_Organization_membersInOrganization_updates;

  TRes call({
    Input$_Organization_membersInOrganization_bool_exp? where,
    Input$_Organization_membersInOrganization_set_input? $_set,
  });
  CopyWith$Input$_Organization_membersInOrganization_bool_exp<TRes> get where;
  CopyWith$Input$_Organization_membersInOrganization_set_input<TRes> get $_set;
}

class _CopyWithImpl$Input$_Organization_membersInOrganization_updates<TRes>
    implements
        CopyWith$Input$_Organization_membersInOrganization_updates<TRes> {
  _CopyWithImpl$Input$_Organization_membersInOrganization_updates(
    this._instance,
    this._then,
  );

  final Input$_Organization_membersInOrganization_updates _instance;

  final TRes Function(Input$_Organization_membersInOrganization_updates) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? where = _undefined,
    Object? $_set = _undefined,
  }) =>
      _then(Input$_Organization_membersInOrganization_updates._({
        ..._instance._$data,
        if (where != _undefined && where != null)
          'where':
              (where as Input$_Organization_membersInOrganization_bool_exp),
        if ($_set != _undefined)
          '_set':
              ($_set as Input$_Organization_membersInOrganization_set_input?),
      }));
  CopyWith$Input$_Organization_membersInOrganization_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return CopyWith$Input$_Organization_membersInOrganization_bool_exp(
        local$where, (e) => call(where: e));
  }

  CopyWith$Input$_Organization_membersInOrganization_set_input<TRes> get $_set {
    final local$$_set = _instance.$_set;
    return local$$_set == null
        ? CopyWith$Input$_Organization_membersInOrganization_set_input.stub(
            _then(_instance))
        : CopyWith$Input$_Organization_membersInOrganization_set_input(
            local$$_set, (e) => call($_set: e));
  }
}

class _CopyWithStubImpl$Input$_Organization_membersInOrganization_updates<TRes>
    implements
        CopyWith$Input$_Organization_membersInOrganization_updates<TRes> {
  _CopyWithStubImpl$Input$_Organization_membersInOrganization_updates(
      this._res);

  TRes _res;

  call({
    Input$_Organization_membersInOrganization_bool_exp? where,
    Input$_Organization_membersInOrganization_set_input? $_set,
  }) =>
      _res;
  CopyWith$Input$_Organization_membersInOrganization_bool_exp<TRes> get where =>
      CopyWith$Input$_Organization_membersInOrganization_bool_exp.stub(_res);
  CopyWith$Input$_Organization_membersInOrganization_set_input<TRes>
      get $_set =>
          CopyWith$Input$_Organization_membersInOrganization_set_input.stub(
              _res);
}

class Input$_SoulWinningSessionGroup_members_aggregate_bool_exp {
  factory Input$_SoulWinningSessionGroup_members_aggregate_bool_exp(
          {Input$_SoulWinningSessionGroup_members_aggregate_bool_exp_count?
              count}) =>
      Input$_SoulWinningSessionGroup_members_aggregate_bool_exp._({
        if (count != null) r'count': count,
      });

  Input$_SoulWinningSessionGroup_members_aggregate_bool_exp._(this._$data);

  factory Input$_SoulWinningSessionGroup_members_aggregate_bool_exp.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] = l$count == null
          ? null
          : Input$_SoulWinningSessionGroup_members_aggregate_bool_exp_count
              .fromJson((l$count as Map<String, dynamic>));
    }
    return Input$_SoulWinningSessionGroup_members_aggregate_bool_exp._(
        result$data);
  }

  Map<String, dynamic> _$data;

  Input$_SoulWinningSessionGroup_members_aggregate_bool_exp_count? get count =>
      (_$data['count']
          as Input$_SoulWinningSessionGroup_members_aggregate_bool_exp_count?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] = l$count?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_bool_exp<
          Input$_SoulWinningSessionGroup_members_aggregate_bool_exp>
      get copyWith =>
          CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_bool_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$_SoulWinningSessionGroup_members_aggregate_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$count = count;
    return Object.hashAll([_$data.containsKey('count') ? l$count : const {}]);
  }
}

abstract class CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_bool_exp<
    TRes> {
  factory CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_bool_exp(
    Input$_SoulWinningSessionGroup_members_aggregate_bool_exp instance,
    TRes Function(Input$_SoulWinningSessionGroup_members_aggregate_bool_exp)
        then,
  ) = _CopyWithImpl$Input$_SoulWinningSessionGroup_members_aggregate_bool_exp;

  factory CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_bool_exp.stub(
          TRes res) =
      _CopyWithStubImpl$Input$_SoulWinningSessionGroup_members_aggregate_bool_exp;

  TRes call(
      {Input$_SoulWinningSessionGroup_members_aggregate_bool_exp_count? count});
  CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_bool_exp_count<TRes>
      get count;
}

class _CopyWithImpl$Input$_SoulWinningSessionGroup_members_aggregate_bool_exp<
        TRes>
    implements
        CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_bool_exp<
            TRes> {
  _CopyWithImpl$Input$_SoulWinningSessionGroup_members_aggregate_bool_exp(
    this._instance,
    this._then,
  );

  final Input$_SoulWinningSessionGroup_members_aggregate_bool_exp _instance;

  final TRes Function(Input$_SoulWinningSessionGroup_members_aggregate_bool_exp)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? count = _undefined}) =>
      _then(Input$_SoulWinningSessionGroup_members_aggregate_bool_exp._({
        ..._instance._$data,
        if (count != _undefined)
          'count': (count
              as Input$_SoulWinningSessionGroup_members_aggregate_bool_exp_count?),
      }));
  CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_bool_exp_count<TRes>
      get count {
    final local$count = _instance.count;
    return local$count == null
        ? CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_bool_exp_count
            .stub(_then(_instance))
        : CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_bool_exp_count(
            local$count, (e) => call(count: e));
  }
}

class _CopyWithStubImpl$Input$_SoulWinningSessionGroup_members_aggregate_bool_exp<
        TRes>
    implements
        CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_bool_exp<
            TRes> {
  _CopyWithStubImpl$Input$_SoulWinningSessionGroup_members_aggregate_bool_exp(
      this._res);

  TRes _res;

  call(
          {Input$_SoulWinningSessionGroup_members_aggregate_bool_exp_count?
              count}) =>
      _res;
  CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_bool_exp_count<TRes>
      get count =>
          CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_bool_exp_count
              .stub(_res);
}

class Input$_SoulWinningSessionGroup_members_aggregate_bool_exp_count {
  factory Input$_SoulWinningSessionGroup_members_aggregate_bool_exp_count({
    List<Enum$_SoulWinningSessionGroup_members_select_column>? arguments,
    bool? distinct,
    Input$_SoulWinningSessionGroup_members_bool_exp? filter,
    required Input$Int_comparison_exp predicate,
  }) =>
      Input$_SoulWinningSessionGroup_members_aggregate_bool_exp_count._({
        if (arguments != null) r'arguments': arguments,
        if (distinct != null) r'distinct': distinct,
        if (filter != null) r'filter': filter,
        r'predicate': predicate,
      });

  Input$_SoulWinningSessionGroup_members_aggregate_bool_exp_count._(
      this._$data);

  factory Input$_SoulWinningSessionGroup_members_aggregate_bool_exp_count.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('arguments')) {
      final l$arguments = data['arguments'];
      result$data['arguments'] = (l$arguments as List<dynamic>?)
          ?.map((e) =>
              fromJson$Enum$_SoulWinningSessionGroup_members_select_column(
                  (e as String)))
          .toList();
    }
    if (data.containsKey('distinct')) {
      final l$distinct = data['distinct'];
      result$data['distinct'] = (l$distinct as bool?);
    }
    if (data.containsKey('filter')) {
      final l$filter = data['filter'];
      result$data['filter'] = l$filter == null
          ? null
          : Input$_SoulWinningSessionGroup_members_bool_exp.fromJson(
              (l$filter as Map<String, dynamic>));
    }
    final l$predicate = data['predicate'];
    result$data['predicate'] = Input$Int_comparison_exp.fromJson(
        (l$predicate as Map<String, dynamic>));
    return Input$_SoulWinningSessionGroup_members_aggregate_bool_exp_count._(
        result$data);
  }

  Map<String, dynamic> _$data;

  List<Enum$_SoulWinningSessionGroup_members_select_column>? get arguments =>
      (_$data['arguments']
          as List<Enum$_SoulWinningSessionGroup_members_select_column>?);
  bool? get distinct => (_$data['distinct'] as bool?);
  Input$_SoulWinningSessionGroup_members_bool_exp? get filter =>
      (_$data['filter'] as Input$_SoulWinningSessionGroup_members_bool_exp?);
  Input$Int_comparison_exp get predicate =>
      (_$data['predicate'] as Input$Int_comparison_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('arguments')) {
      final l$arguments = arguments;
      result$data['arguments'] = l$arguments
          ?.map((e) =>
              toJson$Enum$_SoulWinningSessionGroup_members_select_column(e))
          .toList();
    }
    if (_$data.containsKey('distinct')) {
      final l$distinct = distinct;
      result$data['distinct'] = l$distinct;
    }
    if (_$data.containsKey('filter')) {
      final l$filter = filter;
      result$data['filter'] = l$filter?.toJson();
    }
    final l$predicate = predicate;
    result$data['predicate'] = l$predicate.toJson();
    return result$data;
  }

  CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_bool_exp_count<
          Input$_SoulWinningSessionGroup_members_aggregate_bool_exp_count>
      get copyWith =>
          CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_bool_exp_count(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other
            is Input$_SoulWinningSessionGroup_members_aggregate_bool_exp_count) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$arguments = arguments;
    final lOther$arguments = other.arguments;
    if (_$data.containsKey('arguments') !=
        other._$data.containsKey('arguments')) {
      return false;
    }
    if (l$arguments != null && lOther$arguments != null) {
      if (l$arguments.length != lOther$arguments.length) {
        return false;
      }
      for (int i = 0; i < l$arguments.length; i++) {
        final l$arguments$entry = l$arguments[i];
        final lOther$arguments$entry = lOther$arguments[i];
        if (l$arguments$entry != lOther$arguments$entry) {
          return false;
        }
      }
    } else if (l$arguments != lOther$arguments) {
      return false;
    }
    final l$distinct = distinct;
    final lOther$distinct = other.distinct;
    if (_$data.containsKey('distinct') !=
        other._$data.containsKey('distinct')) {
      return false;
    }
    if (l$distinct != lOther$distinct) {
      return false;
    }
    final l$filter = filter;
    final lOther$filter = other.filter;
    if (_$data.containsKey('filter') != other._$data.containsKey('filter')) {
      return false;
    }
    if (l$filter != lOther$filter) {
      return false;
    }
    final l$predicate = predicate;
    final lOther$predicate = other.predicate;
    if (l$predicate != lOther$predicate) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$arguments = arguments;
    final l$distinct = distinct;
    final l$filter = filter;
    final l$predicate = predicate;
    return Object.hashAll([
      _$data.containsKey('arguments')
          ? l$arguments == null
              ? null
              : Object.hashAll(l$arguments.map((v) => v))
          : const {},
      _$data.containsKey('distinct') ? l$distinct : const {},
      _$data.containsKey('filter') ? l$filter : const {},
      l$predicate,
    ]);
  }
}

abstract class CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_bool_exp_count<
    TRes> {
  factory CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_bool_exp_count(
    Input$_SoulWinningSessionGroup_members_aggregate_bool_exp_count instance,
    TRes Function(
            Input$_SoulWinningSessionGroup_members_aggregate_bool_exp_count)
        then,
  ) = _CopyWithImpl$Input$_SoulWinningSessionGroup_members_aggregate_bool_exp_count;

  factory CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_bool_exp_count.stub(
          TRes res) =
      _CopyWithStubImpl$Input$_SoulWinningSessionGroup_members_aggregate_bool_exp_count;

  TRes call({
    List<Enum$_SoulWinningSessionGroup_members_select_column>? arguments,
    bool? distinct,
    Input$_SoulWinningSessionGroup_members_bool_exp? filter,
    Input$Int_comparison_exp? predicate,
  });
  CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp<TRes> get filter;
  CopyWith$Input$Int_comparison_exp<TRes> get predicate;
}

class _CopyWithImpl$Input$_SoulWinningSessionGroup_members_aggregate_bool_exp_count<
        TRes>
    implements
        CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_bool_exp_count<
            TRes> {
  _CopyWithImpl$Input$_SoulWinningSessionGroup_members_aggregate_bool_exp_count(
    this._instance,
    this._then,
  );

  final Input$_SoulWinningSessionGroup_members_aggregate_bool_exp_count
      _instance;

  final TRes Function(
      Input$_SoulWinningSessionGroup_members_aggregate_bool_exp_count) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? arguments = _undefined,
    Object? distinct = _undefined,
    Object? filter = _undefined,
    Object? predicate = _undefined,
  }) =>
      _then(Input$_SoulWinningSessionGroup_members_aggregate_bool_exp_count._({
        ..._instance._$data,
        if (arguments != _undefined)
          'arguments': (arguments
              as List<Enum$_SoulWinningSessionGroup_members_select_column>?),
        if (distinct != _undefined) 'distinct': (distinct as bool?),
        if (filter != _undefined)
          'filter':
              (filter as Input$_SoulWinningSessionGroup_members_bool_exp?),
        if (predicate != _undefined && predicate != null)
          'predicate': (predicate as Input$Int_comparison_exp),
      }));
  CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp<TRes> get filter {
    final local$filter = _instance.filter;
    return local$filter == null
        ? CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp.stub(
            _then(_instance))
        : CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp(
            local$filter, (e) => call(filter: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get predicate {
    final local$predicate = _instance.predicate;
    return CopyWith$Input$Int_comparison_exp(
        local$predicate, (e) => call(predicate: e));
  }
}

class _CopyWithStubImpl$Input$_SoulWinningSessionGroup_members_aggregate_bool_exp_count<
        TRes>
    implements
        CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_bool_exp_count<
            TRes> {
  _CopyWithStubImpl$Input$_SoulWinningSessionGroup_members_aggregate_bool_exp_count(
      this._res);

  TRes _res;

  call({
    List<Enum$_SoulWinningSessionGroup_members_select_column>? arguments,
    bool? distinct,
    Input$_SoulWinningSessionGroup_members_bool_exp? filter,
    Input$Int_comparison_exp? predicate,
  }) =>
      _res;
  CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp<TRes> get filter =>
      CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp.stub(_res);
  CopyWith$Input$Int_comparison_exp<TRes> get predicate =>
      CopyWith$Input$Int_comparison_exp.stub(_res);
}

class Input$_SoulWinningSessionGroup_members_updates {
  factory Input$_SoulWinningSessionGroup_members_updates({
    required Input$_SoulWinningSessionGroup_members_bool_exp where,
    Input$_SoulWinningSessionGroup_members_set_input? $_set,
  }) =>
      Input$_SoulWinningSessionGroup_members_updates._({
        r'where': where,
        if ($_set != null) r'_set': $_set,
      });

  Input$_SoulWinningSessionGroup_members_updates._(this._$data);

  factory Input$_SoulWinningSessionGroup_members_updates.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$where = data['where'];
    result$data['where'] =
        Input$_SoulWinningSessionGroup_members_bool_exp.fromJson(
            (l$where as Map<String, dynamic>));
    if (data.containsKey('_set')) {
      final l$$_set = data['_set'];
      result$data['_set'] = l$$_set == null
          ? null
          : Input$_SoulWinningSessionGroup_members_set_input.fromJson(
              (l$$_set as Map<String, dynamic>));
    }
    return Input$_SoulWinningSessionGroup_members_updates._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$_SoulWinningSessionGroup_members_bool_exp get where =>
      (_$data['where'] as Input$_SoulWinningSessionGroup_members_bool_exp);
  Input$_SoulWinningSessionGroup_members_set_input? get $_set =>
      (_$data['_set'] as Input$_SoulWinningSessionGroup_members_set_input?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$where = where;
    result$data['where'] = l$where.toJson();
    if (_$data.containsKey('_set')) {
      final l$$_set = $_set;
      result$data['_set'] = l$$_set?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$_SoulWinningSessionGroup_members_updates<
          Input$_SoulWinningSessionGroup_members_updates>
      get copyWith => CopyWith$Input$_SoulWinningSessionGroup_members_updates(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$_SoulWinningSessionGroup_members_updates) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$where = where;
    final lOther$where = other.where;
    if (l$where != lOther$where) {
      return false;
    }
    final l$$_set = $_set;
    final lOther$$_set = other.$_set;
    if (_$data.containsKey('_set') != other._$data.containsKey('_set')) {
      return false;
    }
    if (l$$_set != lOther$$_set) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$where = where;
    final l$$_set = $_set;
    return Object.hashAll([
      l$where,
      _$data.containsKey('_set') ? l$$_set : const {},
    ]);
  }
}

abstract class CopyWith$Input$_SoulWinningSessionGroup_members_updates<TRes> {
  factory CopyWith$Input$_SoulWinningSessionGroup_members_updates(
    Input$_SoulWinningSessionGroup_members_updates instance,
    TRes Function(Input$_SoulWinningSessionGroup_members_updates) then,
  ) = _CopyWithImpl$Input$_SoulWinningSessionGroup_members_updates;

  factory CopyWith$Input$_SoulWinningSessionGroup_members_updates.stub(
          TRes res) =
      _CopyWithStubImpl$Input$_SoulWinningSessionGroup_members_updates;

  TRes call({
    Input$_SoulWinningSessionGroup_members_bool_exp? where,
    Input$_SoulWinningSessionGroup_members_set_input? $_set,
  });
  CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp<TRes> get where;
  CopyWith$Input$_SoulWinningSessionGroup_members_set_input<TRes> get $_set;
}

class _CopyWithImpl$Input$_SoulWinningSessionGroup_members_updates<TRes>
    implements CopyWith$Input$_SoulWinningSessionGroup_members_updates<TRes> {
  _CopyWithImpl$Input$_SoulWinningSessionGroup_members_updates(
    this._instance,
    this._then,
  );

  final Input$_SoulWinningSessionGroup_members_updates _instance;

  final TRes Function(Input$_SoulWinningSessionGroup_members_updates) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? where = _undefined,
    Object? $_set = _undefined,
  }) =>
      _then(Input$_SoulWinningSessionGroup_members_updates._({
        ..._instance._$data,
        if (where != _undefined && where != null)
          'where': (where as Input$_SoulWinningSessionGroup_members_bool_exp),
        if ($_set != _undefined)
          '_set': ($_set as Input$_SoulWinningSessionGroup_members_set_input?),
      }));
  CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp(
        local$where, (e) => call(where: e));
  }

  CopyWith$Input$_SoulWinningSessionGroup_members_set_input<TRes> get $_set {
    final local$$_set = _instance.$_set;
    return local$$_set == null
        ? CopyWith$Input$_SoulWinningSessionGroup_members_set_input.stub(
            _then(_instance))
        : CopyWith$Input$_SoulWinningSessionGroup_members_set_input(
            local$$_set, (e) => call($_set: e));
  }
}

class _CopyWithStubImpl$Input$_SoulWinningSessionGroup_members_updates<TRes>
    implements CopyWith$Input$_SoulWinningSessionGroup_members_updates<TRes> {
  _CopyWithStubImpl$Input$_SoulWinningSessionGroup_members_updates(this._res);

  TRes _res;

  call({
    Input$_SoulWinningSessionGroup_members_bool_exp? where,
    Input$_SoulWinningSessionGroup_members_set_input? $_set,
  }) =>
      _res;
  CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp<TRes> get where =>
      CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp.stub(_res);
  CopyWith$Input$_SoulWinningSessionGroup_members_set_input<TRes> get $_set =>
      CopyWith$Input$_SoulWinningSessionGroup_members_set_input.stub(_res);
}

class Input$jsonb_cast_exp {
  factory Input$jsonb_cast_exp({Input$String_comparison_exp? $String}) =>
      Input$jsonb_cast_exp._({
        if ($String != null) r'String': $String,
      });

  Input$jsonb_cast_exp._(this._$data);

  factory Input$jsonb_cast_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('String')) {
      final l$$String = data['String'];
      result$data['String'] = l$$String == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$$String as Map<String, dynamic>));
    }
    return Input$jsonb_cast_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$String_comparison_exp? get $String =>
      (_$data['String'] as Input$String_comparison_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('String')) {
      final l$$String = $String;
      result$data['String'] = l$$String?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$jsonb_cast_exp<Input$jsonb_cast_exp> get copyWith =>
      CopyWith$Input$jsonb_cast_exp(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$jsonb_cast_exp) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$$String = $String;
    final lOther$$String = other.$String;
    if (_$data.containsKey('String') != other._$data.containsKey('String')) {
      return false;
    }
    if (l$$String != lOther$$String) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$String = $String;
    return Object.hashAll(
        [_$data.containsKey('String') ? l$$String : const {}]);
  }
}

abstract class CopyWith$Input$jsonb_cast_exp<TRes> {
  factory CopyWith$Input$jsonb_cast_exp(
    Input$jsonb_cast_exp instance,
    TRes Function(Input$jsonb_cast_exp) then,
  ) = _CopyWithImpl$Input$jsonb_cast_exp;

  factory CopyWith$Input$jsonb_cast_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$jsonb_cast_exp;

  TRes call({Input$String_comparison_exp? $String});
  CopyWith$Input$String_comparison_exp<TRes> get $String;
}

class _CopyWithImpl$Input$jsonb_cast_exp<TRes>
    implements CopyWith$Input$jsonb_cast_exp<TRes> {
  _CopyWithImpl$Input$jsonb_cast_exp(
    this._instance,
    this._then,
  );

  final Input$jsonb_cast_exp _instance;

  final TRes Function(Input$jsonb_cast_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? $String = _undefined}) => _then(Input$jsonb_cast_exp._({
        ..._instance._$data,
        if ($String != _undefined)
          'String': ($String as Input$String_comparison_exp?),
      }));
  CopyWith$Input$String_comparison_exp<TRes> get $String {
    final local$$String = _instance.$String;
    return local$$String == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$$String, (e) => call($String: e));
  }
}

class _CopyWithStubImpl$Input$jsonb_cast_exp<TRes>
    implements CopyWith$Input$jsonb_cast_exp<TRes> {
  _CopyWithStubImpl$Input$jsonb_cast_exp(this._res);

  TRes _res;

  call({Input$String_comparison_exp? $String}) => _res;
  CopyWith$Input$String_comparison_exp<TRes> get $String =>
      CopyWith$Input$String_comparison_exp.stub(_res);
}

class Input$EncounterResultType_comparison_exp {
  factory Input$EncounterResultType_comparison_exp({
    String? $_eq,
    String? $_gt,
    String? $_gte,
    List<String>? $_in,
    bool? $_is_null,
    String? $_lt,
    String? $_lte,
    String? $_neq,
    List<String>? $_nin,
  }) =>
      Input$EncounterResultType_comparison_exp._({
        if ($_eq != null) r'_eq': $_eq,
        if ($_gt != null) r'_gt': $_gt,
        if ($_gte != null) r'_gte': $_gte,
        if ($_in != null) r'_in': $_in,
        if ($_is_null != null) r'_is_null': $_is_null,
        if ($_lt != null) r'_lt': $_lt,
        if ($_lte != null) r'_lte': $_lte,
        if ($_neq != null) r'_neq': $_neq,
        if ($_nin != null) r'_nin': $_nin,
      });

  Input$EncounterResultType_comparison_exp._(this._$data);

  factory Input$EncounterResultType_comparison_exp.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_eq')) {
      final l$$_eq = data['_eq'];
      result$data['_eq'] = (l$$_eq as String?);
    }
    if (data.containsKey('_gt')) {
      final l$$_gt = data['_gt'];
      result$data['_gt'] = (l$$_gt as String?);
    }
    if (data.containsKey('_gte')) {
      final l$$_gte = data['_gte'];
      result$data['_gte'] = (l$$_gte as String?);
    }
    if (data.containsKey('_in')) {
      final l$$_in = data['_in'];
      result$data['_in'] =
          (l$$_in as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('_is_null')) {
      final l$$_is_null = data['_is_null'];
      result$data['_is_null'] = (l$$_is_null as bool?);
    }
    if (data.containsKey('_lt')) {
      final l$$_lt = data['_lt'];
      result$data['_lt'] = (l$$_lt as String?);
    }
    if (data.containsKey('_lte')) {
      final l$$_lte = data['_lte'];
      result$data['_lte'] = (l$$_lte as String?);
    }
    if (data.containsKey('_neq')) {
      final l$$_neq = data['_neq'];
      result$data['_neq'] = (l$$_neq as String?);
    }
    if (data.containsKey('_nin')) {
      final l$$_nin = data['_nin'];
      result$data['_nin'] =
          (l$$_nin as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    return Input$EncounterResultType_comparison_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get $_eq => (_$data['_eq'] as String?);
  String? get $_gt => (_$data['_gt'] as String?);
  String? get $_gte => (_$data['_gte'] as String?);
  List<String>? get $_in => (_$data['_in'] as List<String>?);
  bool? get $_is_null => (_$data['_is_null'] as bool?);
  String? get $_lt => (_$data['_lt'] as String?);
  String? get $_lte => (_$data['_lte'] as String?);
  String? get $_neq => (_$data['_neq'] as String?);
  List<String>? get $_nin => (_$data['_nin'] as List<String>?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_eq')) {
      final l$$_eq = $_eq;
      result$data['_eq'] = l$$_eq;
    }
    if (_$data.containsKey('_gt')) {
      final l$$_gt = $_gt;
      result$data['_gt'] = l$$_gt;
    }
    if (_$data.containsKey('_gte')) {
      final l$$_gte = $_gte;
      result$data['_gte'] = l$$_gte;
    }
    if (_$data.containsKey('_in')) {
      final l$$_in = $_in;
      result$data['_in'] = l$$_in?.map((e) => e).toList();
    }
    if (_$data.containsKey('_is_null')) {
      final l$$_is_null = $_is_null;
      result$data['_is_null'] = l$$_is_null;
    }
    if (_$data.containsKey('_lt')) {
      final l$$_lt = $_lt;
      result$data['_lt'] = l$$_lt;
    }
    if (_$data.containsKey('_lte')) {
      final l$$_lte = $_lte;
      result$data['_lte'] = l$$_lte;
    }
    if (_$data.containsKey('_neq')) {
      final l$$_neq = $_neq;
      result$data['_neq'] = l$$_neq;
    }
    if (_$data.containsKey('_nin')) {
      final l$$_nin = $_nin;
      result$data['_nin'] = l$$_nin?.map((e) => e).toList();
    }
    return result$data;
  }

  CopyWith$Input$EncounterResultType_comparison_exp<
          Input$EncounterResultType_comparison_exp>
      get copyWith => CopyWith$Input$EncounterResultType_comparison_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$EncounterResultType_comparison_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_eq = $_eq;
    final lOther$$_eq = other.$_eq;
    if (_$data.containsKey('_eq') != other._$data.containsKey('_eq')) {
      return false;
    }
    if (l$$_eq != lOther$$_eq) {
      return false;
    }
    final l$$_gt = $_gt;
    final lOther$$_gt = other.$_gt;
    if (_$data.containsKey('_gt') != other._$data.containsKey('_gt')) {
      return false;
    }
    if (l$$_gt != lOther$$_gt) {
      return false;
    }
    final l$$_gte = $_gte;
    final lOther$$_gte = other.$_gte;
    if (_$data.containsKey('_gte') != other._$data.containsKey('_gte')) {
      return false;
    }
    if (l$$_gte != lOther$$_gte) {
      return false;
    }
    final l$$_in = $_in;
    final lOther$$_in = other.$_in;
    if (_$data.containsKey('_in') != other._$data.containsKey('_in')) {
      return false;
    }
    if (l$$_in != null && lOther$$_in != null) {
      if (l$$_in.length != lOther$$_in.length) {
        return false;
      }
      for (int i = 0; i < l$$_in.length; i++) {
        final l$$_in$entry = l$$_in[i];
        final lOther$$_in$entry = lOther$$_in[i];
        if (l$$_in$entry != lOther$$_in$entry) {
          return false;
        }
      }
    } else if (l$$_in != lOther$$_in) {
      return false;
    }
    final l$$_is_null = $_is_null;
    final lOther$$_is_null = other.$_is_null;
    if (_$data.containsKey('_is_null') !=
        other._$data.containsKey('_is_null')) {
      return false;
    }
    if (l$$_is_null != lOther$$_is_null) {
      return false;
    }
    final l$$_lt = $_lt;
    final lOther$$_lt = other.$_lt;
    if (_$data.containsKey('_lt') != other._$data.containsKey('_lt')) {
      return false;
    }
    if (l$$_lt != lOther$$_lt) {
      return false;
    }
    final l$$_lte = $_lte;
    final lOther$$_lte = other.$_lte;
    if (_$data.containsKey('_lte') != other._$data.containsKey('_lte')) {
      return false;
    }
    if (l$$_lte != lOther$$_lte) {
      return false;
    }
    final l$$_neq = $_neq;
    final lOther$$_neq = other.$_neq;
    if (_$data.containsKey('_neq') != other._$data.containsKey('_neq')) {
      return false;
    }
    if (l$$_neq != lOther$$_neq) {
      return false;
    }
    final l$$_nin = $_nin;
    final lOther$$_nin = other.$_nin;
    if (_$data.containsKey('_nin') != other._$data.containsKey('_nin')) {
      return false;
    }
    if (l$$_nin != null && lOther$$_nin != null) {
      if (l$$_nin.length != lOther$$_nin.length) {
        return false;
      }
      for (int i = 0; i < l$$_nin.length; i++) {
        final l$$_nin$entry = l$$_nin[i];
        final lOther$$_nin$entry = lOther$$_nin[i];
        if (l$$_nin$entry != lOther$$_nin$entry) {
          return false;
        }
      }
    } else if (l$$_nin != lOther$$_nin) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_eq = $_eq;
    final l$$_gt = $_gt;
    final l$$_gte = $_gte;
    final l$$_in = $_in;
    final l$$_is_null = $_is_null;
    final l$$_lt = $_lt;
    final l$$_lte = $_lte;
    final l$$_neq = $_neq;
    final l$$_nin = $_nin;
    return Object.hashAll([
      _$data.containsKey('_eq') ? l$$_eq : const {},
      _$data.containsKey('_gt') ? l$$_gt : const {},
      _$data.containsKey('_gte') ? l$$_gte : const {},
      _$data.containsKey('_in')
          ? l$$_in == null
              ? null
              : Object.hashAll(l$$_in.map((v) => v))
          : const {},
      _$data.containsKey('_is_null') ? l$$_is_null : const {},
      _$data.containsKey('_lt') ? l$$_lt : const {},
      _$data.containsKey('_lte') ? l$$_lte : const {},
      _$data.containsKey('_neq') ? l$$_neq : const {},
      _$data.containsKey('_nin')
          ? l$$_nin == null
              ? null
              : Object.hashAll(l$$_nin.map((v) => v))
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$EncounterResultType_comparison_exp<TRes> {
  factory CopyWith$Input$EncounterResultType_comparison_exp(
    Input$EncounterResultType_comparison_exp instance,
    TRes Function(Input$EncounterResultType_comparison_exp) then,
  ) = _CopyWithImpl$Input$EncounterResultType_comparison_exp;

  factory CopyWith$Input$EncounterResultType_comparison_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$EncounterResultType_comparison_exp;

  TRes call({
    String? $_eq,
    String? $_gt,
    String? $_gte,
    List<String>? $_in,
    bool? $_is_null,
    String? $_lt,
    String? $_lte,
    String? $_neq,
    List<String>? $_nin,
  });
}

class _CopyWithImpl$Input$EncounterResultType_comparison_exp<TRes>
    implements CopyWith$Input$EncounterResultType_comparison_exp<TRes> {
  _CopyWithImpl$Input$EncounterResultType_comparison_exp(
    this._instance,
    this._then,
  );

  final Input$EncounterResultType_comparison_exp _instance;

  final TRes Function(Input$EncounterResultType_comparison_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_eq = _undefined,
    Object? $_gt = _undefined,
    Object? $_gte = _undefined,
    Object? $_in = _undefined,
    Object? $_is_null = _undefined,
    Object? $_lt = _undefined,
    Object? $_lte = _undefined,
    Object? $_neq = _undefined,
    Object? $_nin = _undefined,
  }) =>
      _then(Input$EncounterResultType_comparison_exp._({
        ..._instance._$data,
        if ($_eq != _undefined) '_eq': ($_eq as String?),
        if ($_gt != _undefined) '_gt': ($_gt as String?),
        if ($_gte != _undefined) '_gte': ($_gte as String?),
        if ($_in != _undefined) '_in': ($_in as List<String>?),
        if ($_is_null != _undefined) '_is_null': ($_is_null as bool?),
        if ($_lt != _undefined) '_lt': ($_lt as String?),
        if ($_lte != _undefined) '_lte': ($_lte as String?),
        if ($_neq != _undefined) '_neq': ($_neq as String?),
        if ($_nin != _undefined) '_nin': ($_nin as List<String>?),
      }));
}

class _CopyWithStubImpl$Input$EncounterResultType_comparison_exp<TRes>
    implements CopyWith$Input$EncounterResultType_comparison_exp<TRes> {
  _CopyWithStubImpl$Input$EncounterResultType_comparison_exp(this._res);

  TRes _res;

  call({
    String? $_eq,
    String? $_gt,
    String? $_gte,
    List<String>? $_in,
    bool? $_is_null,
    String? $_lt,
    String? $_lte,
    String? $_neq,
    List<String>? $_nin,
  }) =>
      _res;
}

class Input$EventTypeType_comparison_exp {
  factory Input$EventTypeType_comparison_exp({
    String? $_eq,
    String? $_gt,
    String? $_gte,
    List<String>? $_in,
    bool? $_is_null,
    String? $_lt,
    String? $_lte,
    String? $_neq,
    List<String>? $_nin,
  }) =>
      Input$EventTypeType_comparison_exp._({
        if ($_eq != null) r'_eq': $_eq,
        if ($_gt != null) r'_gt': $_gt,
        if ($_gte != null) r'_gte': $_gte,
        if ($_in != null) r'_in': $_in,
        if ($_is_null != null) r'_is_null': $_is_null,
        if ($_lt != null) r'_lt': $_lt,
        if ($_lte != null) r'_lte': $_lte,
        if ($_neq != null) r'_neq': $_neq,
        if ($_nin != null) r'_nin': $_nin,
      });

  Input$EventTypeType_comparison_exp._(this._$data);

  factory Input$EventTypeType_comparison_exp.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_eq')) {
      final l$$_eq = data['_eq'];
      result$data['_eq'] = (l$$_eq as String?);
    }
    if (data.containsKey('_gt')) {
      final l$$_gt = data['_gt'];
      result$data['_gt'] = (l$$_gt as String?);
    }
    if (data.containsKey('_gte')) {
      final l$$_gte = data['_gte'];
      result$data['_gte'] = (l$$_gte as String?);
    }
    if (data.containsKey('_in')) {
      final l$$_in = data['_in'];
      result$data['_in'] =
          (l$$_in as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('_is_null')) {
      final l$$_is_null = data['_is_null'];
      result$data['_is_null'] = (l$$_is_null as bool?);
    }
    if (data.containsKey('_lt')) {
      final l$$_lt = data['_lt'];
      result$data['_lt'] = (l$$_lt as String?);
    }
    if (data.containsKey('_lte')) {
      final l$$_lte = data['_lte'];
      result$data['_lte'] = (l$$_lte as String?);
    }
    if (data.containsKey('_neq')) {
      final l$$_neq = data['_neq'];
      result$data['_neq'] = (l$$_neq as String?);
    }
    if (data.containsKey('_nin')) {
      final l$$_nin = data['_nin'];
      result$data['_nin'] =
          (l$$_nin as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    return Input$EventTypeType_comparison_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get $_eq => (_$data['_eq'] as String?);
  String? get $_gt => (_$data['_gt'] as String?);
  String? get $_gte => (_$data['_gte'] as String?);
  List<String>? get $_in => (_$data['_in'] as List<String>?);
  bool? get $_is_null => (_$data['_is_null'] as bool?);
  String? get $_lt => (_$data['_lt'] as String?);
  String? get $_lte => (_$data['_lte'] as String?);
  String? get $_neq => (_$data['_neq'] as String?);
  List<String>? get $_nin => (_$data['_nin'] as List<String>?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_eq')) {
      final l$$_eq = $_eq;
      result$data['_eq'] = l$$_eq;
    }
    if (_$data.containsKey('_gt')) {
      final l$$_gt = $_gt;
      result$data['_gt'] = l$$_gt;
    }
    if (_$data.containsKey('_gte')) {
      final l$$_gte = $_gte;
      result$data['_gte'] = l$$_gte;
    }
    if (_$data.containsKey('_in')) {
      final l$$_in = $_in;
      result$data['_in'] = l$$_in?.map((e) => e).toList();
    }
    if (_$data.containsKey('_is_null')) {
      final l$$_is_null = $_is_null;
      result$data['_is_null'] = l$$_is_null;
    }
    if (_$data.containsKey('_lt')) {
      final l$$_lt = $_lt;
      result$data['_lt'] = l$$_lt;
    }
    if (_$data.containsKey('_lte')) {
      final l$$_lte = $_lte;
      result$data['_lte'] = l$$_lte;
    }
    if (_$data.containsKey('_neq')) {
      final l$$_neq = $_neq;
      result$data['_neq'] = l$$_neq;
    }
    if (_$data.containsKey('_nin')) {
      final l$$_nin = $_nin;
      result$data['_nin'] = l$$_nin?.map((e) => e).toList();
    }
    return result$data;
  }

  CopyWith$Input$EventTypeType_comparison_exp<
          Input$EventTypeType_comparison_exp>
      get copyWith => CopyWith$Input$EventTypeType_comparison_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$EventTypeType_comparison_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_eq = $_eq;
    final lOther$$_eq = other.$_eq;
    if (_$data.containsKey('_eq') != other._$data.containsKey('_eq')) {
      return false;
    }
    if (l$$_eq != lOther$$_eq) {
      return false;
    }
    final l$$_gt = $_gt;
    final lOther$$_gt = other.$_gt;
    if (_$data.containsKey('_gt') != other._$data.containsKey('_gt')) {
      return false;
    }
    if (l$$_gt != lOther$$_gt) {
      return false;
    }
    final l$$_gte = $_gte;
    final lOther$$_gte = other.$_gte;
    if (_$data.containsKey('_gte') != other._$data.containsKey('_gte')) {
      return false;
    }
    if (l$$_gte != lOther$$_gte) {
      return false;
    }
    final l$$_in = $_in;
    final lOther$$_in = other.$_in;
    if (_$data.containsKey('_in') != other._$data.containsKey('_in')) {
      return false;
    }
    if (l$$_in != null && lOther$$_in != null) {
      if (l$$_in.length != lOther$$_in.length) {
        return false;
      }
      for (int i = 0; i < l$$_in.length; i++) {
        final l$$_in$entry = l$$_in[i];
        final lOther$$_in$entry = lOther$$_in[i];
        if (l$$_in$entry != lOther$$_in$entry) {
          return false;
        }
      }
    } else if (l$$_in != lOther$$_in) {
      return false;
    }
    final l$$_is_null = $_is_null;
    final lOther$$_is_null = other.$_is_null;
    if (_$data.containsKey('_is_null') !=
        other._$data.containsKey('_is_null')) {
      return false;
    }
    if (l$$_is_null != lOther$$_is_null) {
      return false;
    }
    final l$$_lt = $_lt;
    final lOther$$_lt = other.$_lt;
    if (_$data.containsKey('_lt') != other._$data.containsKey('_lt')) {
      return false;
    }
    if (l$$_lt != lOther$$_lt) {
      return false;
    }
    final l$$_lte = $_lte;
    final lOther$$_lte = other.$_lte;
    if (_$data.containsKey('_lte') != other._$data.containsKey('_lte')) {
      return false;
    }
    if (l$$_lte != lOther$$_lte) {
      return false;
    }
    final l$$_neq = $_neq;
    final lOther$$_neq = other.$_neq;
    if (_$data.containsKey('_neq') != other._$data.containsKey('_neq')) {
      return false;
    }
    if (l$$_neq != lOther$$_neq) {
      return false;
    }
    final l$$_nin = $_nin;
    final lOther$$_nin = other.$_nin;
    if (_$data.containsKey('_nin') != other._$data.containsKey('_nin')) {
      return false;
    }
    if (l$$_nin != null && lOther$$_nin != null) {
      if (l$$_nin.length != lOther$$_nin.length) {
        return false;
      }
      for (int i = 0; i < l$$_nin.length; i++) {
        final l$$_nin$entry = l$$_nin[i];
        final lOther$$_nin$entry = lOther$$_nin[i];
        if (l$$_nin$entry != lOther$$_nin$entry) {
          return false;
        }
      }
    } else if (l$$_nin != lOther$$_nin) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_eq = $_eq;
    final l$$_gt = $_gt;
    final l$$_gte = $_gte;
    final l$$_in = $_in;
    final l$$_is_null = $_is_null;
    final l$$_lt = $_lt;
    final l$$_lte = $_lte;
    final l$$_neq = $_neq;
    final l$$_nin = $_nin;
    return Object.hashAll([
      _$data.containsKey('_eq') ? l$$_eq : const {},
      _$data.containsKey('_gt') ? l$$_gt : const {},
      _$data.containsKey('_gte') ? l$$_gte : const {},
      _$data.containsKey('_in')
          ? l$$_in == null
              ? null
              : Object.hashAll(l$$_in.map((v) => v))
          : const {},
      _$data.containsKey('_is_null') ? l$$_is_null : const {},
      _$data.containsKey('_lt') ? l$$_lt : const {},
      _$data.containsKey('_lte') ? l$$_lte : const {},
      _$data.containsKey('_neq') ? l$$_neq : const {},
      _$data.containsKey('_nin')
          ? l$$_nin == null
              ? null
              : Object.hashAll(l$$_nin.map((v) => v))
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$EventTypeType_comparison_exp<TRes> {
  factory CopyWith$Input$EventTypeType_comparison_exp(
    Input$EventTypeType_comparison_exp instance,
    TRes Function(Input$EventTypeType_comparison_exp) then,
  ) = _CopyWithImpl$Input$EventTypeType_comparison_exp;

  factory CopyWith$Input$EventTypeType_comparison_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$EventTypeType_comparison_exp;

  TRes call({
    String? $_eq,
    String? $_gt,
    String? $_gte,
    List<String>? $_in,
    bool? $_is_null,
    String? $_lt,
    String? $_lte,
    String? $_neq,
    List<String>? $_nin,
  });
}

class _CopyWithImpl$Input$EventTypeType_comparison_exp<TRes>
    implements CopyWith$Input$EventTypeType_comparison_exp<TRes> {
  _CopyWithImpl$Input$EventTypeType_comparison_exp(
    this._instance,
    this._then,
  );

  final Input$EventTypeType_comparison_exp _instance;

  final TRes Function(Input$EventTypeType_comparison_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_eq = _undefined,
    Object? $_gt = _undefined,
    Object? $_gte = _undefined,
    Object? $_in = _undefined,
    Object? $_is_null = _undefined,
    Object? $_lt = _undefined,
    Object? $_lte = _undefined,
    Object? $_neq = _undefined,
    Object? $_nin = _undefined,
  }) =>
      _then(Input$EventTypeType_comparison_exp._({
        ..._instance._$data,
        if ($_eq != _undefined) '_eq': ($_eq as String?),
        if ($_gt != _undefined) '_gt': ($_gt as String?),
        if ($_gte != _undefined) '_gte': ($_gte as String?),
        if ($_in != _undefined) '_in': ($_in as List<String>?),
        if ($_is_null != _undefined) '_is_null': ($_is_null as bool?),
        if ($_lt != _undefined) '_lt': ($_lt as String?),
        if ($_lte != _undefined) '_lte': ($_lte as String?),
        if ($_neq != _undefined) '_neq': ($_neq as String?),
        if ($_nin != _undefined) '_nin': ($_nin as List<String>?),
      }));
}

class _CopyWithStubImpl$Input$EventTypeType_comparison_exp<TRes>
    implements CopyWith$Input$EventTypeType_comparison_exp<TRes> {
  _CopyWithStubImpl$Input$EventTypeType_comparison_exp(this._res);

  TRes _res;

  call({
    String? $_eq,
    String? $_gt,
    String? $_gte,
    List<String>? $_in,
    bool? $_is_null,
    String? $_lt,
    String? $_lte,
    String? $_neq,
    List<String>? $_nin,
  }) =>
      _res;
}

class Input$Int_comparison_exp {
  factory Input$Int_comparison_exp({
    int? $_eq,
    int? $_gt,
    int? $_gte,
    List<int>? $_in,
    bool? $_is_null,
    int? $_lt,
    int? $_lte,
    int? $_neq,
    List<int>? $_nin,
  }) =>
      Input$Int_comparison_exp._({
        if ($_eq != null) r'_eq': $_eq,
        if ($_gt != null) r'_gt': $_gt,
        if ($_gte != null) r'_gte': $_gte,
        if ($_in != null) r'_in': $_in,
        if ($_is_null != null) r'_is_null': $_is_null,
        if ($_lt != null) r'_lt': $_lt,
        if ($_lte != null) r'_lte': $_lte,
        if ($_neq != null) r'_neq': $_neq,
        if ($_nin != null) r'_nin': $_nin,
      });

  Input$Int_comparison_exp._(this._$data);

  factory Input$Int_comparison_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_eq')) {
      final l$$_eq = data['_eq'];
      result$data['_eq'] = (l$$_eq as int?);
    }
    if (data.containsKey('_gt')) {
      final l$$_gt = data['_gt'];
      result$data['_gt'] = (l$$_gt as int?);
    }
    if (data.containsKey('_gte')) {
      final l$$_gte = data['_gte'];
      result$data['_gte'] = (l$$_gte as int?);
    }
    if (data.containsKey('_in')) {
      final l$$_in = data['_in'];
      result$data['_in'] =
          (l$$_in as List<dynamic>?)?.map((e) => (e as int)).toList();
    }
    if (data.containsKey('_is_null')) {
      final l$$_is_null = data['_is_null'];
      result$data['_is_null'] = (l$$_is_null as bool?);
    }
    if (data.containsKey('_lt')) {
      final l$$_lt = data['_lt'];
      result$data['_lt'] = (l$$_lt as int?);
    }
    if (data.containsKey('_lte')) {
      final l$$_lte = data['_lte'];
      result$data['_lte'] = (l$$_lte as int?);
    }
    if (data.containsKey('_neq')) {
      final l$$_neq = data['_neq'];
      result$data['_neq'] = (l$$_neq as int?);
    }
    if (data.containsKey('_nin')) {
      final l$$_nin = data['_nin'];
      result$data['_nin'] =
          (l$$_nin as List<dynamic>?)?.map((e) => (e as int)).toList();
    }
    return Input$Int_comparison_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  int? get $_eq => (_$data['_eq'] as int?);
  int? get $_gt => (_$data['_gt'] as int?);
  int? get $_gte => (_$data['_gte'] as int?);
  List<int>? get $_in => (_$data['_in'] as List<int>?);
  bool? get $_is_null => (_$data['_is_null'] as bool?);
  int? get $_lt => (_$data['_lt'] as int?);
  int? get $_lte => (_$data['_lte'] as int?);
  int? get $_neq => (_$data['_neq'] as int?);
  List<int>? get $_nin => (_$data['_nin'] as List<int>?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_eq')) {
      final l$$_eq = $_eq;
      result$data['_eq'] = l$$_eq;
    }
    if (_$data.containsKey('_gt')) {
      final l$$_gt = $_gt;
      result$data['_gt'] = l$$_gt;
    }
    if (_$data.containsKey('_gte')) {
      final l$$_gte = $_gte;
      result$data['_gte'] = l$$_gte;
    }
    if (_$data.containsKey('_in')) {
      final l$$_in = $_in;
      result$data['_in'] = l$$_in?.map((e) => e).toList();
    }
    if (_$data.containsKey('_is_null')) {
      final l$$_is_null = $_is_null;
      result$data['_is_null'] = l$$_is_null;
    }
    if (_$data.containsKey('_lt')) {
      final l$$_lt = $_lt;
      result$data['_lt'] = l$$_lt;
    }
    if (_$data.containsKey('_lte')) {
      final l$$_lte = $_lte;
      result$data['_lte'] = l$$_lte;
    }
    if (_$data.containsKey('_neq')) {
      final l$$_neq = $_neq;
      result$data['_neq'] = l$$_neq;
    }
    if (_$data.containsKey('_nin')) {
      final l$$_nin = $_nin;
      result$data['_nin'] = l$$_nin?.map((e) => e).toList();
    }
    return result$data;
  }

  CopyWith$Input$Int_comparison_exp<Input$Int_comparison_exp> get copyWith =>
      CopyWith$Input$Int_comparison_exp(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Int_comparison_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_eq = $_eq;
    final lOther$$_eq = other.$_eq;
    if (_$data.containsKey('_eq') != other._$data.containsKey('_eq')) {
      return false;
    }
    if (l$$_eq != lOther$$_eq) {
      return false;
    }
    final l$$_gt = $_gt;
    final lOther$$_gt = other.$_gt;
    if (_$data.containsKey('_gt') != other._$data.containsKey('_gt')) {
      return false;
    }
    if (l$$_gt != lOther$$_gt) {
      return false;
    }
    final l$$_gte = $_gte;
    final lOther$$_gte = other.$_gte;
    if (_$data.containsKey('_gte') != other._$data.containsKey('_gte')) {
      return false;
    }
    if (l$$_gte != lOther$$_gte) {
      return false;
    }
    final l$$_in = $_in;
    final lOther$$_in = other.$_in;
    if (_$data.containsKey('_in') != other._$data.containsKey('_in')) {
      return false;
    }
    if (l$$_in != null && lOther$$_in != null) {
      if (l$$_in.length != lOther$$_in.length) {
        return false;
      }
      for (int i = 0; i < l$$_in.length; i++) {
        final l$$_in$entry = l$$_in[i];
        final lOther$$_in$entry = lOther$$_in[i];
        if (l$$_in$entry != lOther$$_in$entry) {
          return false;
        }
      }
    } else if (l$$_in != lOther$$_in) {
      return false;
    }
    final l$$_is_null = $_is_null;
    final lOther$$_is_null = other.$_is_null;
    if (_$data.containsKey('_is_null') !=
        other._$data.containsKey('_is_null')) {
      return false;
    }
    if (l$$_is_null != lOther$$_is_null) {
      return false;
    }
    final l$$_lt = $_lt;
    final lOther$$_lt = other.$_lt;
    if (_$data.containsKey('_lt') != other._$data.containsKey('_lt')) {
      return false;
    }
    if (l$$_lt != lOther$$_lt) {
      return false;
    }
    final l$$_lte = $_lte;
    final lOther$$_lte = other.$_lte;
    if (_$data.containsKey('_lte') != other._$data.containsKey('_lte')) {
      return false;
    }
    if (l$$_lte != lOther$$_lte) {
      return false;
    }
    final l$$_neq = $_neq;
    final lOther$$_neq = other.$_neq;
    if (_$data.containsKey('_neq') != other._$data.containsKey('_neq')) {
      return false;
    }
    if (l$$_neq != lOther$$_neq) {
      return false;
    }
    final l$$_nin = $_nin;
    final lOther$$_nin = other.$_nin;
    if (_$data.containsKey('_nin') != other._$data.containsKey('_nin')) {
      return false;
    }
    if (l$$_nin != null && lOther$$_nin != null) {
      if (l$$_nin.length != lOther$$_nin.length) {
        return false;
      }
      for (int i = 0; i < l$$_nin.length; i++) {
        final l$$_nin$entry = l$$_nin[i];
        final lOther$$_nin$entry = lOther$$_nin[i];
        if (l$$_nin$entry != lOther$$_nin$entry) {
          return false;
        }
      }
    } else if (l$$_nin != lOther$$_nin) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_eq = $_eq;
    final l$$_gt = $_gt;
    final l$$_gte = $_gte;
    final l$$_in = $_in;
    final l$$_is_null = $_is_null;
    final l$$_lt = $_lt;
    final l$$_lte = $_lte;
    final l$$_neq = $_neq;
    final l$$_nin = $_nin;
    return Object.hashAll([
      _$data.containsKey('_eq') ? l$$_eq : const {},
      _$data.containsKey('_gt') ? l$$_gt : const {},
      _$data.containsKey('_gte') ? l$$_gte : const {},
      _$data.containsKey('_in')
          ? l$$_in == null
              ? null
              : Object.hashAll(l$$_in.map((v) => v))
          : const {},
      _$data.containsKey('_is_null') ? l$$_is_null : const {},
      _$data.containsKey('_lt') ? l$$_lt : const {},
      _$data.containsKey('_lte') ? l$$_lte : const {},
      _$data.containsKey('_neq') ? l$$_neq : const {},
      _$data.containsKey('_nin')
          ? l$$_nin == null
              ? null
              : Object.hashAll(l$$_nin.map((v) => v))
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$Int_comparison_exp<TRes> {
  factory CopyWith$Input$Int_comparison_exp(
    Input$Int_comparison_exp instance,
    TRes Function(Input$Int_comparison_exp) then,
  ) = _CopyWithImpl$Input$Int_comparison_exp;

  factory CopyWith$Input$Int_comparison_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$Int_comparison_exp;

  TRes call({
    int? $_eq,
    int? $_gt,
    int? $_gte,
    List<int>? $_in,
    bool? $_is_null,
    int? $_lt,
    int? $_lte,
    int? $_neq,
    List<int>? $_nin,
  });
}

class _CopyWithImpl$Input$Int_comparison_exp<TRes>
    implements CopyWith$Input$Int_comparison_exp<TRes> {
  _CopyWithImpl$Input$Int_comparison_exp(
    this._instance,
    this._then,
  );

  final Input$Int_comparison_exp _instance;

  final TRes Function(Input$Int_comparison_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_eq = _undefined,
    Object? $_gt = _undefined,
    Object? $_gte = _undefined,
    Object? $_in = _undefined,
    Object? $_is_null = _undefined,
    Object? $_lt = _undefined,
    Object? $_lte = _undefined,
    Object? $_neq = _undefined,
    Object? $_nin = _undefined,
  }) =>
      _then(Input$Int_comparison_exp._({
        ..._instance._$data,
        if ($_eq != _undefined) '_eq': ($_eq as int?),
        if ($_gt != _undefined) '_gt': ($_gt as int?),
        if ($_gte != _undefined) '_gte': ($_gte as int?),
        if ($_in != _undefined) '_in': ($_in as List<int>?),
        if ($_is_null != _undefined) '_is_null': ($_is_null as bool?),
        if ($_lt != _undefined) '_lt': ($_lt as int?),
        if ($_lte != _undefined) '_lte': ($_lte as int?),
        if ($_neq != _undefined) '_neq': ($_neq as int?),
        if ($_nin != _undefined) '_nin': ($_nin as List<int>?),
      }));
}

class _CopyWithStubImpl$Input$Int_comparison_exp<TRes>
    implements CopyWith$Input$Int_comparison_exp<TRes> {
  _CopyWithStubImpl$Input$Int_comparison_exp(this._res);

  TRes _res;

  call({
    int? $_eq,
    int? $_gt,
    int? $_gte,
    List<int>? $_in,
    bool? $_is_null,
    int? $_lt,
    int? $_lte,
    int? $_neq,
    List<int>? $_nin,
  }) =>
      _res;
}

class Input$OrganizationTypeType_comparison_exp {
  factory Input$OrganizationTypeType_comparison_exp({
    String? $_eq,
    String? $_gt,
    String? $_gte,
    List<String>? $_in,
    bool? $_is_null,
    String? $_lt,
    String? $_lte,
    String? $_neq,
    List<String>? $_nin,
  }) =>
      Input$OrganizationTypeType_comparison_exp._({
        if ($_eq != null) r'_eq': $_eq,
        if ($_gt != null) r'_gt': $_gt,
        if ($_gte != null) r'_gte': $_gte,
        if ($_in != null) r'_in': $_in,
        if ($_is_null != null) r'_is_null': $_is_null,
        if ($_lt != null) r'_lt': $_lt,
        if ($_lte != null) r'_lte': $_lte,
        if ($_neq != null) r'_neq': $_neq,
        if ($_nin != null) r'_nin': $_nin,
      });

  Input$OrganizationTypeType_comparison_exp._(this._$data);

  factory Input$OrganizationTypeType_comparison_exp.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_eq')) {
      final l$$_eq = data['_eq'];
      result$data['_eq'] = (l$$_eq as String?);
    }
    if (data.containsKey('_gt')) {
      final l$$_gt = data['_gt'];
      result$data['_gt'] = (l$$_gt as String?);
    }
    if (data.containsKey('_gte')) {
      final l$$_gte = data['_gte'];
      result$data['_gte'] = (l$$_gte as String?);
    }
    if (data.containsKey('_in')) {
      final l$$_in = data['_in'];
      result$data['_in'] =
          (l$$_in as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('_is_null')) {
      final l$$_is_null = data['_is_null'];
      result$data['_is_null'] = (l$$_is_null as bool?);
    }
    if (data.containsKey('_lt')) {
      final l$$_lt = data['_lt'];
      result$data['_lt'] = (l$$_lt as String?);
    }
    if (data.containsKey('_lte')) {
      final l$$_lte = data['_lte'];
      result$data['_lte'] = (l$$_lte as String?);
    }
    if (data.containsKey('_neq')) {
      final l$$_neq = data['_neq'];
      result$data['_neq'] = (l$$_neq as String?);
    }
    if (data.containsKey('_nin')) {
      final l$$_nin = data['_nin'];
      result$data['_nin'] =
          (l$$_nin as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    return Input$OrganizationTypeType_comparison_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get $_eq => (_$data['_eq'] as String?);
  String? get $_gt => (_$data['_gt'] as String?);
  String? get $_gte => (_$data['_gte'] as String?);
  List<String>? get $_in => (_$data['_in'] as List<String>?);
  bool? get $_is_null => (_$data['_is_null'] as bool?);
  String? get $_lt => (_$data['_lt'] as String?);
  String? get $_lte => (_$data['_lte'] as String?);
  String? get $_neq => (_$data['_neq'] as String?);
  List<String>? get $_nin => (_$data['_nin'] as List<String>?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_eq')) {
      final l$$_eq = $_eq;
      result$data['_eq'] = l$$_eq;
    }
    if (_$data.containsKey('_gt')) {
      final l$$_gt = $_gt;
      result$data['_gt'] = l$$_gt;
    }
    if (_$data.containsKey('_gte')) {
      final l$$_gte = $_gte;
      result$data['_gte'] = l$$_gte;
    }
    if (_$data.containsKey('_in')) {
      final l$$_in = $_in;
      result$data['_in'] = l$$_in?.map((e) => e).toList();
    }
    if (_$data.containsKey('_is_null')) {
      final l$$_is_null = $_is_null;
      result$data['_is_null'] = l$$_is_null;
    }
    if (_$data.containsKey('_lt')) {
      final l$$_lt = $_lt;
      result$data['_lt'] = l$$_lt;
    }
    if (_$data.containsKey('_lte')) {
      final l$$_lte = $_lte;
      result$data['_lte'] = l$$_lte;
    }
    if (_$data.containsKey('_neq')) {
      final l$$_neq = $_neq;
      result$data['_neq'] = l$$_neq;
    }
    if (_$data.containsKey('_nin')) {
      final l$$_nin = $_nin;
      result$data['_nin'] = l$$_nin?.map((e) => e).toList();
    }
    return result$data;
  }

  CopyWith$Input$OrganizationTypeType_comparison_exp<
          Input$OrganizationTypeType_comparison_exp>
      get copyWith => CopyWith$Input$OrganizationTypeType_comparison_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$OrganizationTypeType_comparison_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_eq = $_eq;
    final lOther$$_eq = other.$_eq;
    if (_$data.containsKey('_eq') != other._$data.containsKey('_eq')) {
      return false;
    }
    if (l$$_eq != lOther$$_eq) {
      return false;
    }
    final l$$_gt = $_gt;
    final lOther$$_gt = other.$_gt;
    if (_$data.containsKey('_gt') != other._$data.containsKey('_gt')) {
      return false;
    }
    if (l$$_gt != lOther$$_gt) {
      return false;
    }
    final l$$_gte = $_gte;
    final lOther$$_gte = other.$_gte;
    if (_$data.containsKey('_gte') != other._$data.containsKey('_gte')) {
      return false;
    }
    if (l$$_gte != lOther$$_gte) {
      return false;
    }
    final l$$_in = $_in;
    final lOther$$_in = other.$_in;
    if (_$data.containsKey('_in') != other._$data.containsKey('_in')) {
      return false;
    }
    if (l$$_in != null && lOther$$_in != null) {
      if (l$$_in.length != lOther$$_in.length) {
        return false;
      }
      for (int i = 0; i < l$$_in.length; i++) {
        final l$$_in$entry = l$$_in[i];
        final lOther$$_in$entry = lOther$$_in[i];
        if (l$$_in$entry != lOther$$_in$entry) {
          return false;
        }
      }
    } else if (l$$_in != lOther$$_in) {
      return false;
    }
    final l$$_is_null = $_is_null;
    final lOther$$_is_null = other.$_is_null;
    if (_$data.containsKey('_is_null') !=
        other._$data.containsKey('_is_null')) {
      return false;
    }
    if (l$$_is_null != lOther$$_is_null) {
      return false;
    }
    final l$$_lt = $_lt;
    final lOther$$_lt = other.$_lt;
    if (_$data.containsKey('_lt') != other._$data.containsKey('_lt')) {
      return false;
    }
    if (l$$_lt != lOther$$_lt) {
      return false;
    }
    final l$$_lte = $_lte;
    final lOther$$_lte = other.$_lte;
    if (_$data.containsKey('_lte') != other._$data.containsKey('_lte')) {
      return false;
    }
    if (l$$_lte != lOther$$_lte) {
      return false;
    }
    final l$$_neq = $_neq;
    final lOther$$_neq = other.$_neq;
    if (_$data.containsKey('_neq') != other._$data.containsKey('_neq')) {
      return false;
    }
    if (l$$_neq != lOther$$_neq) {
      return false;
    }
    final l$$_nin = $_nin;
    final lOther$$_nin = other.$_nin;
    if (_$data.containsKey('_nin') != other._$data.containsKey('_nin')) {
      return false;
    }
    if (l$$_nin != null && lOther$$_nin != null) {
      if (l$$_nin.length != lOther$$_nin.length) {
        return false;
      }
      for (int i = 0; i < l$$_nin.length; i++) {
        final l$$_nin$entry = l$$_nin[i];
        final lOther$$_nin$entry = lOther$$_nin[i];
        if (l$$_nin$entry != lOther$$_nin$entry) {
          return false;
        }
      }
    } else if (l$$_nin != lOther$$_nin) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_eq = $_eq;
    final l$$_gt = $_gt;
    final l$$_gte = $_gte;
    final l$$_in = $_in;
    final l$$_is_null = $_is_null;
    final l$$_lt = $_lt;
    final l$$_lte = $_lte;
    final l$$_neq = $_neq;
    final l$$_nin = $_nin;
    return Object.hashAll([
      _$data.containsKey('_eq') ? l$$_eq : const {},
      _$data.containsKey('_gt') ? l$$_gt : const {},
      _$data.containsKey('_gte') ? l$$_gte : const {},
      _$data.containsKey('_in')
          ? l$$_in == null
              ? null
              : Object.hashAll(l$$_in.map((v) => v))
          : const {},
      _$data.containsKey('_is_null') ? l$$_is_null : const {},
      _$data.containsKey('_lt') ? l$$_lt : const {},
      _$data.containsKey('_lte') ? l$$_lte : const {},
      _$data.containsKey('_neq') ? l$$_neq : const {},
      _$data.containsKey('_nin')
          ? l$$_nin == null
              ? null
              : Object.hashAll(l$$_nin.map((v) => v))
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$OrganizationTypeType_comparison_exp<TRes> {
  factory CopyWith$Input$OrganizationTypeType_comparison_exp(
    Input$OrganizationTypeType_comparison_exp instance,
    TRes Function(Input$OrganizationTypeType_comparison_exp) then,
  ) = _CopyWithImpl$Input$OrganizationTypeType_comparison_exp;

  factory CopyWith$Input$OrganizationTypeType_comparison_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$OrganizationTypeType_comparison_exp;

  TRes call({
    String? $_eq,
    String? $_gt,
    String? $_gte,
    List<String>? $_in,
    bool? $_is_null,
    String? $_lt,
    String? $_lte,
    String? $_neq,
    List<String>? $_nin,
  });
}

class _CopyWithImpl$Input$OrganizationTypeType_comparison_exp<TRes>
    implements CopyWith$Input$OrganizationTypeType_comparison_exp<TRes> {
  _CopyWithImpl$Input$OrganizationTypeType_comparison_exp(
    this._instance,
    this._then,
  );

  final Input$OrganizationTypeType_comparison_exp _instance;

  final TRes Function(Input$OrganizationTypeType_comparison_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_eq = _undefined,
    Object? $_gt = _undefined,
    Object? $_gte = _undefined,
    Object? $_in = _undefined,
    Object? $_is_null = _undefined,
    Object? $_lt = _undefined,
    Object? $_lte = _undefined,
    Object? $_neq = _undefined,
    Object? $_nin = _undefined,
  }) =>
      _then(Input$OrganizationTypeType_comparison_exp._({
        ..._instance._$data,
        if ($_eq != _undefined) '_eq': ($_eq as String?),
        if ($_gt != _undefined) '_gt': ($_gt as String?),
        if ($_gte != _undefined) '_gte': ($_gte as String?),
        if ($_in != _undefined) '_in': ($_in as List<String>?),
        if ($_is_null != _undefined) '_is_null': ($_is_null as bool?),
        if ($_lt != _undefined) '_lt': ($_lt as String?),
        if ($_lte != _undefined) '_lte': ($_lte as String?),
        if ($_neq != _undefined) '_neq': ($_neq as String?),
        if ($_nin != _undefined) '_nin': ($_nin as List<String>?),
      }));
}

class _CopyWithStubImpl$Input$OrganizationTypeType_comparison_exp<TRes>
    implements CopyWith$Input$OrganizationTypeType_comparison_exp<TRes> {
  _CopyWithStubImpl$Input$OrganizationTypeType_comparison_exp(this._res);

  TRes _res;

  call({
    String? $_eq,
    String? $_gt,
    String? $_gte,
    List<String>? $_in,
    bool? $_is_null,
    String? $_lt,
    String? $_lte,
    String? $_neq,
    List<String>? $_nin,
  }) =>
      _res;
}

class Input$String_comparison_exp {
  factory Input$String_comparison_exp({
    String? $_eq,
    String? $_gt,
    String? $_gte,
    List<String>? $_in,
    bool? $_is_null,
    String? $_lt,
    String? $_lte,
    String? $_neq,
    List<String>? $_nin,
    String? $_niregex,
    String? $_nregex,
    String? $_nsimilar,
    String? $_nilike,
    String? $_nlike,
    String? $_iregex,
    String? $_regex,
    String? $_similar,
    String? $_ilike,
    String? $_like,
  }) =>
      Input$String_comparison_exp._({
        if ($_eq != null) r'_eq': $_eq,
        if ($_gt != null) r'_gt': $_gt,
        if ($_gte != null) r'_gte': $_gte,
        if ($_in != null) r'_in': $_in,
        if ($_is_null != null) r'_is_null': $_is_null,
        if ($_lt != null) r'_lt': $_lt,
        if ($_lte != null) r'_lte': $_lte,
        if ($_neq != null) r'_neq': $_neq,
        if ($_nin != null) r'_nin': $_nin,
        if ($_niregex != null) r'_niregex': $_niregex,
        if ($_nregex != null) r'_nregex': $_nregex,
        if ($_nsimilar != null) r'_nsimilar': $_nsimilar,
        if ($_nilike != null) r'_nilike': $_nilike,
        if ($_nlike != null) r'_nlike': $_nlike,
        if ($_iregex != null) r'_iregex': $_iregex,
        if ($_regex != null) r'_regex': $_regex,
        if ($_similar != null) r'_similar': $_similar,
        if ($_ilike != null) r'_ilike': $_ilike,
        if ($_like != null) r'_like': $_like,
      });

  Input$String_comparison_exp._(this._$data);

  factory Input$String_comparison_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_eq')) {
      final l$$_eq = data['_eq'];
      result$data['_eq'] = (l$$_eq as String?);
    }
    if (data.containsKey('_gt')) {
      final l$$_gt = data['_gt'];
      result$data['_gt'] = (l$$_gt as String?);
    }
    if (data.containsKey('_gte')) {
      final l$$_gte = data['_gte'];
      result$data['_gte'] = (l$$_gte as String?);
    }
    if (data.containsKey('_in')) {
      final l$$_in = data['_in'];
      result$data['_in'] =
          (l$$_in as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('_is_null')) {
      final l$$_is_null = data['_is_null'];
      result$data['_is_null'] = (l$$_is_null as bool?);
    }
    if (data.containsKey('_lt')) {
      final l$$_lt = data['_lt'];
      result$data['_lt'] = (l$$_lt as String?);
    }
    if (data.containsKey('_lte')) {
      final l$$_lte = data['_lte'];
      result$data['_lte'] = (l$$_lte as String?);
    }
    if (data.containsKey('_neq')) {
      final l$$_neq = data['_neq'];
      result$data['_neq'] = (l$$_neq as String?);
    }
    if (data.containsKey('_nin')) {
      final l$$_nin = data['_nin'];
      result$data['_nin'] =
          (l$$_nin as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('_niregex')) {
      final l$$_niregex = data['_niregex'];
      result$data['_niregex'] = (l$$_niregex as String?);
    }
    if (data.containsKey('_nregex')) {
      final l$$_nregex = data['_nregex'];
      result$data['_nregex'] = (l$$_nregex as String?);
    }
    if (data.containsKey('_nsimilar')) {
      final l$$_nsimilar = data['_nsimilar'];
      result$data['_nsimilar'] = (l$$_nsimilar as String?);
    }
    if (data.containsKey('_nilike')) {
      final l$$_nilike = data['_nilike'];
      result$data['_nilike'] = (l$$_nilike as String?);
    }
    if (data.containsKey('_nlike')) {
      final l$$_nlike = data['_nlike'];
      result$data['_nlike'] = (l$$_nlike as String?);
    }
    if (data.containsKey('_iregex')) {
      final l$$_iregex = data['_iregex'];
      result$data['_iregex'] = (l$$_iregex as String?);
    }
    if (data.containsKey('_regex')) {
      final l$$_regex = data['_regex'];
      result$data['_regex'] = (l$$_regex as String?);
    }
    if (data.containsKey('_similar')) {
      final l$$_similar = data['_similar'];
      result$data['_similar'] = (l$$_similar as String?);
    }
    if (data.containsKey('_ilike')) {
      final l$$_ilike = data['_ilike'];
      result$data['_ilike'] = (l$$_ilike as String?);
    }
    if (data.containsKey('_like')) {
      final l$$_like = data['_like'];
      result$data['_like'] = (l$$_like as String?);
    }
    return Input$String_comparison_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get $_eq => (_$data['_eq'] as String?);
  String? get $_gt => (_$data['_gt'] as String?);
  String? get $_gte => (_$data['_gte'] as String?);
  List<String>? get $_in => (_$data['_in'] as List<String>?);
  bool? get $_is_null => (_$data['_is_null'] as bool?);
  String? get $_lt => (_$data['_lt'] as String?);
  String? get $_lte => (_$data['_lte'] as String?);
  String? get $_neq => (_$data['_neq'] as String?);
  List<String>? get $_nin => (_$data['_nin'] as List<String>?);
  String? get $_niregex => (_$data['_niregex'] as String?);
  String? get $_nregex => (_$data['_nregex'] as String?);
  String? get $_nsimilar => (_$data['_nsimilar'] as String?);
  String? get $_nilike => (_$data['_nilike'] as String?);
  String? get $_nlike => (_$data['_nlike'] as String?);
  String? get $_iregex => (_$data['_iregex'] as String?);
  String? get $_regex => (_$data['_regex'] as String?);
  String? get $_similar => (_$data['_similar'] as String?);
  String? get $_ilike => (_$data['_ilike'] as String?);
  String? get $_like => (_$data['_like'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_eq')) {
      final l$$_eq = $_eq;
      result$data['_eq'] = l$$_eq;
    }
    if (_$data.containsKey('_gt')) {
      final l$$_gt = $_gt;
      result$data['_gt'] = l$$_gt;
    }
    if (_$data.containsKey('_gte')) {
      final l$$_gte = $_gte;
      result$data['_gte'] = l$$_gte;
    }
    if (_$data.containsKey('_in')) {
      final l$$_in = $_in;
      result$data['_in'] = l$$_in?.map((e) => e).toList();
    }
    if (_$data.containsKey('_is_null')) {
      final l$$_is_null = $_is_null;
      result$data['_is_null'] = l$$_is_null;
    }
    if (_$data.containsKey('_lt')) {
      final l$$_lt = $_lt;
      result$data['_lt'] = l$$_lt;
    }
    if (_$data.containsKey('_lte')) {
      final l$$_lte = $_lte;
      result$data['_lte'] = l$$_lte;
    }
    if (_$data.containsKey('_neq')) {
      final l$$_neq = $_neq;
      result$data['_neq'] = l$$_neq;
    }
    if (_$data.containsKey('_nin')) {
      final l$$_nin = $_nin;
      result$data['_nin'] = l$$_nin?.map((e) => e).toList();
    }
    if (_$data.containsKey('_niregex')) {
      final l$$_niregex = $_niregex;
      result$data['_niregex'] = l$$_niregex;
    }
    if (_$data.containsKey('_nregex')) {
      final l$$_nregex = $_nregex;
      result$data['_nregex'] = l$$_nregex;
    }
    if (_$data.containsKey('_nsimilar')) {
      final l$$_nsimilar = $_nsimilar;
      result$data['_nsimilar'] = l$$_nsimilar;
    }
    if (_$data.containsKey('_nilike')) {
      final l$$_nilike = $_nilike;
      result$data['_nilike'] = l$$_nilike;
    }
    if (_$data.containsKey('_nlike')) {
      final l$$_nlike = $_nlike;
      result$data['_nlike'] = l$$_nlike;
    }
    if (_$data.containsKey('_iregex')) {
      final l$$_iregex = $_iregex;
      result$data['_iregex'] = l$$_iregex;
    }
    if (_$data.containsKey('_regex')) {
      final l$$_regex = $_regex;
      result$data['_regex'] = l$$_regex;
    }
    if (_$data.containsKey('_similar')) {
      final l$$_similar = $_similar;
      result$data['_similar'] = l$$_similar;
    }
    if (_$data.containsKey('_ilike')) {
      final l$$_ilike = $_ilike;
      result$data['_ilike'] = l$$_ilike;
    }
    if (_$data.containsKey('_like')) {
      final l$$_like = $_like;
      result$data['_like'] = l$$_like;
    }
    return result$data;
  }

  CopyWith$Input$String_comparison_exp<Input$String_comparison_exp>
      get copyWith => CopyWith$Input$String_comparison_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$String_comparison_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_eq = $_eq;
    final lOther$$_eq = other.$_eq;
    if (_$data.containsKey('_eq') != other._$data.containsKey('_eq')) {
      return false;
    }
    if (l$$_eq != lOther$$_eq) {
      return false;
    }
    final l$$_gt = $_gt;
    final lOther$$_gt = other.$_gt;
    if (_$data.containsKey('_gt') != other._$data.containsKey('_gt')) {
      return false;
    }
    if (l$$_gt != lOther$$_gt) {
      return false;
    }
    final l$$_gte = $_gte;
    final lOther$$_gte = other.$_gte;
    if (_$data.containsKey('_gte') != other._$data.containsKey('_gte')) {
      return false;
    }
    if (l$$_gte != lOther$$_gte) {
      return false;
    }
    final l$$_in = $_in;
    final lOther$$_in = other.$_in;
    if (_$data.containsKey('_in') != other._$data.containsKey('_in')) {
      return false;
    }
    if (l$$_in != null && lOther$$_in != null) {
      if (l$$_in.length != lOther$$_in.length) {
        return false;
      }
      for (int i = 0; i < l$$_in.length; i++) {
        final l$$_in$entry = l$$_in[i];
        final lOther$$_in$entry = lOther$$_in[i];
        if (l$$_in$entry != lOther$$_in$entry) {
          return false;
        }
      }
    } else if (l$$_in != lOther$$_in) {
      return false;
    }
    final l$$_is_null = $_is_null;
    final lOther$$_is_null = other.$_is_null;
    if (_$data.containsKey('_is_null') !=
        other._$data.containsKey('_is_null')) {
      return false;
    }
    if (l$$_is_null != lOther$$_is_null) {
      return false;
    }
    final l$$_lt = $_lt;
    final lOther$$_lt = other.$_lt;
    if (_$data.containsKey('_lt') != other._$data.containsKey('_lt')) {
      return false;
    }
    if (l$$_lt != lOther$$_lt) {
      return false;
    }
    final l$$_lte = $_lte;
    final lOther$$_lte = other.$_lte;
    if (_$data.containsKey('_lte') != other._$data.containsKey('_lte')) {
      return false;
    }
    if (l$$_lte != lOther$$_lte) {
      return false;
    }
    final l$$_neq = $_neq;
    final lOther$$_neq = other.$_neq;
    if (_$data.containsKey('_neq') != other._$data.containsKey('_neq')) {
      return false;
    }
    if (l$$_neq != lOther$$_neq) {
      return false;
    }
    final l$$_nin = $_nin;
    final lOther$$_nin = other.$_nin;
    if (_$data.containsKey('_nin') != other._$data.containsKey('_nin')) {
      return false;
    }
    if (l$$_nin != null && lOther$$_nin != null) {
      if (l$$_nin.length != lOther$$_nin.length) {
        return false;
      }
      for (int i = 0; i < l$$_nin.length; i++) {
        final l$$_nin$entry = l$$_nin[i];
        final lOther$$_nin$entry = lOther$$_nin[i];
        if (l$$_nin$entry != lOther$$_nin$entry) {
          return false;
        }
      }
    } else if (l$$_nin != lOther$$_nin) {
      return false;
    }
    final l$$_niregex = $_niregex;
    final lOther$$_niregex = other.$_niregex;
    if (_$data.containsKey('_niregex') !=
        other._$data.containsKey('_niregex')) {
      return false;
    }
    if (l$$_niregex != lOther$$_niregex) {
      return false;
    }
    final l$$_nregex = $_nregex;
    final lOther$$_nregex = other.$_nregex;
    if (_$data.containsKey('_nregex') != other._$data.containsKey('_nregex')) {
      return false;
    }
    if (l$$_nregex != lOther$$_nregex) {
      return false;
    }
    final l$$_nsimilar = $_nsimilar;
    final lOther$$_nsimilar = other.$_nsimilar;
    if (_$data.containsKey('_nsimilar') !=
        other._$data.containsKey('_nsimilar')) {
      return false;
    }
    if (l$$_nsimilar != lOther$$_nsimilar) {
      return false;
    }
    final l$$_nilike = $_nilike;
    final lOther$$_nilike = other.$_nilike;
    if (_$data.containsKey('_nilike') != other._$data.containsKey('_nilike')) {
      return false;
    }
    if (l$$_nilike != lOther$$_nilike) {
      return false;
    }
    final l$$_nlike = $_nlike;
    final lOther$$_nlike = other.$_nlike;
    if (_$data.containsKey('_nlike') != other._$data.containsKey('_nlike')) {
      return false;
    }
    if (l$$_nlike != lOther$$_nlike) {
      return false;
    }
    final l$$_iregex = $_iregex;
    final lOther$$_iregex = other.$_iregex;
    if (_$data.containsKey('_iregex') != other._$data.containsKey('_iregex')) {
      return false;
    }
    if (l$$_iregex != lOther$$_iregex) {
      return false;
    }
    final l$$_regex = $_regex;
    final lOther$$_regex = other.$_regex;
    if (_$data.containsKey('_regex') != other._$data.containsKey('_regex')) {
      return false;
    }
    if (l$$_regex != lOther$$_regex) {
      return false;
    }
    final l$$_similar = $_similar;
    final lOther$$_similar = other.$_similar;
    if (_$data.containsKey('_similar') !=
        other._$data.containsKey('_similar')) {
      return false;
    }
    if (l$$_similar != lOther$$_similar) {
      return false;
    }
    final l$$_ilike = $_ilike;
    final lOther$$_ilike = other.$_ilike;
    if (_$data.containsKey('_ilike') != other._$data.containsKey('_ilike')) {
      return false;
    }
    if (l$$_ilike != lOther$$_ilike) {
      return false;
    }
    final l$$_like = $_like;
    final lOther$$_like = other.$_like;
    if (_$data.containsKey('_like') != other._$data.containsKey('_like')) {
      return false;
    }
    if (l$$_like != lOther$$_like) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_eq = $_eq;
    final l$$_gt = $_gt;
    final l$$_gte = $_gte;
    final l$$_in = $_in;
    final l$$_is_null = $_is_null;
    final l$$_lt = $_lt;
    final l$$_lte = $_lte;
    final l$$_neq = $_neq;
    final l$$_nin = $_nin;
    final l$$_niregex = $_niregex;
    final l$$_nregex = $_nregex;
    final l$$_nsimilar = $_nsimilar;
    final l$$_nilike = $_nilike;
    final l$$_nlike = $_nlike;
    final l$$_iregex = $_iregex;
    final l$$_regex = $_regex;
    final l$$_similar = $_similar;
    final l$$_ilike = $_ilike;
    final l$$_like = $_like;
    return Object.hashAll([
      _$data.containsKey('_eq') ? l$$_eq : const {},
      _$data.containsKey('_gt') ? l$$_gt : const {},
      _$data.containsKey('_gte') ? l$$_gte : const {},
      _$data.containsKey('_in')
          ? l$$_in == null
              ? null
              : Object.hashAll(l$$_in.map((v) => v))
          : const {},
      _$data.containsKey('_is_null') ? l$$_is_null : const {},
      _$data.containsKey('_lt') ? l$$_lt : const {},
      _$data.containsKey('_lte') ? l$$_lte : const {},
      _$data.containsKey('_neq') ? l$$_neq : const {},
      _$data.containsKey('_nin')
          ? l$$_nin == null
              ? null
              : Object.hashAll(l$$_nin.map((v) => v))
          : const {},
      _$data.containsKey('_niregex') ? l$$_niregex : const {},
      _$data.containsKey('_nregex') ? l$$_nregex : const {},
      _$data.containsKey('_nsimilar') ? l$$_nsimilar : const {},
      _$data.containsKey('_nilike') ? l$$_nilike : const {},
      _$data.containsKey('_nlike') ? l$$_nlike : const {},
      _$data.containsKey('_iregex') ? l$$_iregex : const {},
      _$data.containsKey('_regex') ? l$$_regex : const {},
      _$data.containsKey('_similar') ? l$$_similar : const {},
      _$data.containsKey('_ilike') ? l$$_ilike : const {},
      _$data.containsKey('_like') ? l$$_like : const {},
    ]);
  }
}

abstract class CopyWith$Input$String_comparison_exp<TRes> {
  factory CopyWith$Input$String_comparison_exp(
    Input$String_comparison_exp instance,
    TRes Function(Input$String_comparison_exp) then,
  ) = _CopyWithImpl$Input$String_comparison_exp;

  factory CopyWith$Input$String_comparison_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$String_comparison_exp;

  TRes call({
    String? $_eq,
    String? $_gt,
    String? $_gte,
    List<String>? $_in,
    bool? $_is_null,
    String? $_lt,
    String? $_lte,
    String? $_neq,
    List<String>? $_nin,
    String? $_niregex,
    String? $_nregex,
    String? $_nsimilar,
    String? $_nilike,
    String? $_nlike,
    String? $_iregex,
    String? $_regex,
    String? $_similar,
    String? $_ilike,
    String? $_like,
  });
}

class _CopyWithImpl$Input$String_comparison_exp<TRes>
    implements CopyWith$Input$String_comparison_exp<TRes> {
  _CopyWithImpl$Input$String_comparison_exp(
    this._instance,
    this._then,
  );

  final Input$String_comparison_exp _instance;

  final TRes Function(Input$String_comparison_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_eq = _undefined,
    Object? $_gt = _undefined,
    Object? $_gte = _undefined,
    Object? $_in = _undefined,
    Object? $_is_null = _undefined,
    Object? $_lt = _undefined,
    Object? $_lte = _undefined,
    Object? $_neq = _undefined,
    Object? $_nin = _undefined,
    Object? $_niregex = _undefined,
    Object? $_nregex = _undefined,
    Object? $_nsimilar = _undefined,
    Object? $_nilike = _undefined,
    Object? $_nlike = _undefined,
    Object? $_iregex = _undefined,
    Object? $_regex = _undefined,
    Object? $_similar = _undefined,
    Object? $_ilike = _undefined,
    Object? $_like = _undefined,
  }) =>
      _then(Input$String_comparison_exp._({
        ..._instance._$data,
        if ($_eq != _undefined) '_eq': ($_eq as String?),
        if ($_gt != _undefined) '_gt': ($_gt as String?),
        if ($_gte != _undefined) '_gte': ($_gte as String?),
        if ($_in != _undefined) '_in': ($_in as List<String>?),
        if ($_is_null != _undefined) '_is_null': ($_is_null as bool?),
        if ($_lt != _undefined) '_lt': ($_lt as String?),
        if ($_lte != _undefined) '_lte': ($_lte as String?),
        if ($_neq != _undefined) '_neq': ($_neq as String?),
        if ($_nin != _undefined) '_nin': ($_nin as List<String>?),
        if ($_niregex != _undefined) '_niregex': ($_niregex as String?),
        if ($_nregex != _undefined) '_nregex': ($_nregex as String?),
        if ($_nsimilar != _undefined) '_nsimilar': ($_nsimilar as String?),
        if ($_nilike != _undefined) '_nilike': ($_nilike as String?),
        if ($_nlike != _undefined) '_nlike': ($_nlike as String?),
        if ($_iregex != _undefined) '_iregex': ($_iregex as String?),
        if ($_regex != _undefined) '_regex': ($_regex as String?),
        if ($_similar != _undefined) '_similar': ($_similar as String?),
        if ($_ilike != _undefined) '_ilike': ($_ilike as String?),
        if ($_like != _undefined) '_like': ($_like as String?),
      }));
}

class _CopyWithStubImpl$Input$String_comparison_exp<TRes>
    implements CopyWith$Input$String_comparison_exp<TRes> {
  _CopyWithStubImpl$Input$String_comparison_exp(this._res);

  TRes _res;

  call({
    String? $_eq,
    String? $_gt,
    String? $_gte,
    List<String>? $_in,
    bool? $_is_null,
    String? $_lt,
    String? $_lte,
    String? $_neq,
    List<String>? $_nin,
    String? $_niregex,
    String? $_nregex,
    String? $_nsimilar,
    String? $_nilike,
    String? $_nlike,
    String? $_iregex,
    String? $_regex,
    String? $_similar,
    String? $_ilike,
    String? $_like,
  }) =>
      _res;
}

class Input$jsonb_comparison_exp {
  factory Input$jsonb_comparison_exp({
    Input$jsonb_cast_exp? $_cast,
    String? $_eq,
    String? $_gt,
    String? $_gte,
    List<String>? $_in,
    bool? $_is_null,
    String? $_lt,
    String? $_lte,
    String? $_neq,
    List<String>? $_nin,
    List<String>? $_has_keys_all,
    List<String>? $_has_keys_any,
    String? $_contains,
    String? $_has_key,
    String? $_contained_in,
  }) =>
      Input$jsonb_comparison_exp._({
        if ($_cast != null) r'_cast': $_cast,
        if ($_eq != null) r'_eq': $_eq,
        if ($_gt != null) r'_gt': $_gt,
        if ($_gte != null) r'_gte': $_gte,
        if ($_in != null) r'_in': $_in,
        if ($_is_null != null) r'_is_null': $_is_null,
        if ($_lt != null) r'_lt': $_lt,
        if ($_lte != null) r'_lte': $_lte,
        if ($_neq != null) r'_neq': $_neq,
        if ($_nin != null) r'_nin': $_nin,
        if ($_has_keys_all != null) r'_has_keys_all': $_has_keys_all,
        if ($_has_keys_any != null) r'_has_keys_any': $_has_keys_any,
        if ($_contains != null) r'_contains': $_contains,
        if ($_has_key != null) r'_has_key': $_has_key,
        if ($_contained_in != null) r'_contained_in': $_contained_in,
      });

  Input$jsonb_comparison_exp._(this._$data);

  factory Input$jsonb_comparison_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_cast')) {
      final l$$_cast = data['_cast'];
      result$data['_cast'] = l$$_cast == null
          ? null
          : Input$jsonb_cast_exp.fromJson((l$$_cast as Map<String, dynamic>));
    }
    if (data.containsKey('_eq')) {
      final l$$_eq = data['_eq'];
      result$data['_eq'] = (l$$_eq as String?);
    }
    if (data.containsKey('_gt')) {
      final l$$_gt = data['_gt'];
      result$data['_gt'] = (l$$_gt as String?);
    }
    if (data.containsKey('_gte')) {
      final l$$_gte = data['_gte'];
      result$data['_gte'] = (l$$_gte as String?);
    }
    if (data.containsKey('_in')) {
      final l$$_in = data['_in'];
      result$data['_in'] =
          (l$$_in as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('_is_null')) {
      final l$$_is_null = data['_is_null'];
      result$data['_is_null'] = (l$$_is_null as bool?);
    }
    if (data.containsKey('_lt')) {
      final l$$_lt = data['_lt'];
      result$data['_lt'] = (l$$_lt as String?);
    }
    if (data.containsKey('_lte')) {
      final l$$_lte = data['_lte'];
      result$data['_lte'] = (l$$_lte as String?);
    }
    if (data.containsKey('_neq')) {
      final l$$_neq = data['_neq'];
      result$data['_neq'] = (l$$_neq as String?);
    }
    if (data.containsKey('_nin')) {
      final l$$_nin = data['_nin'];
      result$data['_nin'] =
          (l$$_nin as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('_has_keys_all')) {
      final l$$_has_keys_all = data['_has_keys_all'];
      result$data['_has_keys_all'] = (l$$_has_keys_all as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('_has_keys_any')) {
      final l$$_has_keys_any = data['_has_keys_any'];
      result$data['_has_keys_any'] = (l$$_has_keys_any as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('_contains')) {
      final l$$_contains = data['_contains'];
      result$data['_contains'] = (l$$_contains as String?);
    }
    if (data.containsKey('_has_key')) {
      final l$$_has_key = data['_has_key'];
      result$data['_has_key'] = (l$$_has_key as String?);
    }
    if (data.containsKey('_contained_in')) {
      final l$$_contained_in = data['_contained_in'];
      result$data['_contained_in'] = (l$$_contained_in as String?);
    }
    return Input$jsonb_comparison_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$jsonb_cast_exp? get $_cast =>
      (_$data['_cast'] as Input$jsonb_cast_exp?);
  String? get $_eq => (_$data['_eq'] as String?);
  String? get $_gt => (_$data['_gt'] as String?);
  String? get $_gte => (_$data['_gte'] as String?);
  List<String>? get $_in => (_$data['_in'] as List<String>?);
  bool? get $_is_null => (_$data['_is_null'] as bool?);
  String? get $_lt => (_$data['_lt'] as String?);
  String? get $_lte => (_$data['_lte'] as String?);
  String? get $_neq => (_$data['_neq'] as String?);
  List<String>? get $_nin => (_$data['_nin'] as List<String>?);
  List<String>? get $_has_keys_all =>
      (_$data['_has_keys_all'] as List<String>?);
  List<String>? get $_has_keys_any =>
      (_$data['_has_keys_any'] as List<String>?);
  String? get $_contains => (_$data['_contains'] as String?);
  String? get $_has_key => (_$data['_has_key'] as String?);
  String? get $_contained_in => (_$data['_contained_in'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_cast')) {
      final l$$_cast = $_cast;
      result$data['_cast'] = l$$_cast?.toJson();
    }
    if (_$data.containsKey('_eq')) {
      final l$$_eq = $_eq;
      result$data['_eq'] = l$$_eq;
    }
    if (_$data.containsKey('_gt')) {
      final l$$_gt = $_gt;
      result$data['_gt'] = l$$_gt;
    }
    if (_$data.containsKey('_gte')) {
      final l$$_gte = $_gte;
      result$data['_gte'] = l$$_gte;
    }
    if (_$data.containsKey('_in')) {
      final l$$_in = $_in;
      result$data['_in'] = l$$_in?.map((e) => e).toList();
    }
    if (_$data.containsKey('_is_null')) {
      final l$$_is_null = $_is_null;
      result$data['_is_null'] = l$$_is_null;
    }
    if (_$data.containsKey('_lt')) {
      final l$$_lt = $_lt;
      result$data['_lt'] = l$$_lt;
    }
    if (_$data.containsKey('_lte')) {
      final l$$_lte = $_lte;
      result$data['_lte'] = l$$_lte;
    }
    if (_$data.containsKey('_neq')) {
      final l$$_neq = $_neq;
      result$data['_neq'] = l$$_neq;
    }
    if (_$data.containsKey('_nin')) {
      final l$$_nin = $_nin;
      result$data['_nin'] = l$$_nin?.map((e) => e).toList();
    }
    if (_$data.containsKey('_has_keys_all')) {
      final l$$_has_keys_all = $_has_keys_all;
      result$data['_has_keys_all'] = l$$_has_keys_all?.map((e) => e).toList();
    }
    if (_$data.containsKey('_has_keys_any')) {
      final l$$_has_keys_any = $_has_keys_any;
      result$data['_has_keys_any'] = l$$_has_keys_any?.map((e) => e).toList();
    }
    if (_$data.containsKey('_contains')) {
      final l$$_contains = $_contains;
      result$data['_contains'] = l$$_contains;
    }
    if (_$data.containsKey('_has_key')) {
      final l$$_has_key = $_has_key;
      result$data['_has_key'] = l$$_has_key;
    }
    if (_$data.containsKey('_contained_in')) {
      final l$$_contained_in = $_contained_in;
      result$data['_contained_in'] = l$$_contained_in;
    }
    return result$data;
  }

  CopyWith$Input$jsonb_comparison_exp<Input$jsonb_comparison_exp>
      get copyWith => CopyWith$Input$jsonb_comparison_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$jsonb_comparison_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_cast = $_cast;
    final lOther$$_cast = other.$_cast;
    if (_$data.containsKey('_cast') != other._$data.containsKey('_cast')) {
      return false;
    }
    if (l$$_cast != lOther$$_cast) {
      return false;
    }
    final l$$_eq = $_eq;
    final lOther$$_eq = other.$_eq;
    if (_$data.containsKey('_eq') != other._$data.containsKey('_eq')) {
      return false;
    }
    if (l$$_eq != lOther$$_eq) {
      return false;
    }
    final l$$_gt = $_gt;
    final lOther$$_gt = other.$_gt;
    if (_$data.containsKey('_gt') != other._$data.containsKey('_gt')) {
      return false;
    }
    if (l$$_gt != lOther$$_gt) {
      return false;
    }
    final l$$_gte = $_gte;
    final lOther$$_gte = other.$_gte;
    if (_$data.containsKey('_gte') != other._$data.containsKey('_gte')) {
      return false;
    }
    if (l$$_gte != lOther$$_gte) {
      return false;
    }
    final l$$_in = $_in;
    final lOther$$_in = other.$_in;
    if (_$data.containsKey('_in') != other._$data.containsKey('_in')) {
      return false;
    }
    if (l$$_in != null && lOther$$_in != null) {
      if (l$$_in.length != lOther$$_in.length) {
        return false;
      }
      for (int i = 0; i < l$$_in.length; i++) {
        final l$$_in$entry = l$$_in[i];
        final lOther$$_in$entry = lOther$$_in[i];
        if (l$$_in$entry != lOther$$_in$entry) {
          return false;
        }
      }
    } else if (l$$_in != lOther$$_in) {
      return false;
    }
    final l$$_is_null = $_is_null;
    final lOther$$_is_null = other.$_is_null;
    if (_$data.containsKey('_is_null') !=
        other._$data.containsKey('_is_null')) {
      return false;
    }
    if (l$$_is_null != lOther$$_is_null) {
      return false;
    }
    final l$$_lt = $_lt;
    final lOther$$_lt = other.$_lt;
    if (_$data.containsKey('_lt') != other._$data.containsKey('_lt')) {
      return false;
    }
    if (l$$_lt != lOther$$_lt) {
      return false;
    }
    final l$$_lte = $_lte;
    final lOther$$_lte = other.$_lte;
    if (_$data.containsKey('_lte') != other._$data.containsKey('_lte')) {
      return false;
    }
    if (l$$_lte != lOther$$_lte) {
      return false;
    }
    final l$$_neq = $_neq;
    final lOther$$_neq = other.$_neq;
    if (_$data.containsKey('_neq') != other._$data.containsKey('_neq')) {
      return false;
    }
    if (l$$_neq != lOther$$_neq) {
      return false;
    }
    final l$$_nin = $_nin;
    final lOther$$_nin = other.$_nin;
    if (_$data.containsKey('_nin') != other._$data.containsKey('_nin')) {
      return false;
    }
    if (l$$_nin != null && lOther$$_nin != null) {
      if (l$$_nin.length != lOther$$_nin.length) {
        return false;
      }
      for (int i = 0; i < l$$_nin.length; i++) {
        final l$$_nin$entry = l$$_nin[i];
        final lOther$$_nin$entry = lOther$$_nin[i];
        if (l$$_nin$entry != lOther$$_nin$entry) {
          return false;
        }
      }
    } else if (l$$_nin != lOther$$_nin) {
      return false;
    }
    final l$$_has_keys_all = $_has_keys_all;
    final lOther$$_has_keys_all = other.$_has_keys_all;
    if (_$data.containsKey('_has_keys_all') !=
        other._$data.containsKey('_has_keys_all')) {
      return false;
    }
    if (l$$_has_keys_all != null && lOther$$_has_keys_all != null) {
      if (l$$_has_keys_all.length != lOther$$_has_keys_all.length) {
        return false;
      }
      for (int i = 0; i < l$$_has_keys_all.length; i++) {
        final l$$_has_keys_all$entry = l$$_has_keys_all[i];
        final lOther$$_has_keys_all$entry = lOther$$_has_keys_all[i];
        if (l$$_has_keys_all$entry != lOther$$_has_keys_all$entry) {
          return false;
        }
      }
    } else if (l$$_has_keys_all != lOther$$_has_keys_all) {
      return false;
    }
    final l$$_has_keys_any = $_has_keys_any;
    final lOther$$_has_keys_any = other.$_has_keys_any;
    if (_$data.containsKey('_has_keys_any') !=
        other._$data.containsKey('_has_keys_any')) {
      return false;
    }
    if (l$$_has_keys_any != null && lOther$$_has_keys_any != null) {
      if (l$$_has_keys_any.length != lOther$$_has_keys_any.length) {
        return false;
      }
      for (int i = 0; i < l$$_has_keys_any.length; i++) {
        final l$$_has_keys_any$entry = l$$_has_keys_any[i];
        final lOther$$_has_keys_any$entry = lOther$$_has_keys_any[i];
        if (l$$_has_keys_any$entry != lOther$$_has_keys_any$entry) {
          return false;
        }
      }
    } else if (l$$_has_keys_any != lOther$$_has_keys_any) {
      return false;
    }
    final l$$_contains = $_contains;
    final lOther$$_contains = other.$_contains;
    if (_$data.containsKey('_contains') !=
        other._$data.containsKey('_contains')) {
      return false;
    }
    if (l$$_contains != lOther$$_contains) {
      return false;
    }
    final l$$_has_key = $_has_key;
    final lOther$$_has_key = other.$_has_key;
    if (_$data.containsKey('_has_key') !=
        other._$data.containsKey('_has_key')) {
      return false;
    }
    if (l$$_has_key != lOther$$_has_key) {
      return false;
    }
    final l$$_contained_in = $_contained_in;
    final lOther$$_contained_in = other.$_contained_in;
    if (_$data.containsKey('_contained_in') !=
        other._$data.containsKey('_contained_in')) {
      return false;
    }
    if (l$$_contained_in != lOther$$_contained_in) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_cast = $_cast;
    final l$$_eq = $_eq;
    final l$$_gt = $_gt;
    final l$$_gte = $_gte;
    final l$$_in = $_in;
    final l$$_is_null = $_is_null;
    final l$$_lt = $_lt;
    final l$$_lte = $_lte;
    final l$$_neq = $_neq;
    final l$$_nin = $_nin;
    final l$$_has_keys_all = $_has_keys_all;
    final l$$_has_keys_any = $_has_keys_any;
    final l$$_contains = $_contains;
    final l$$_has_key = $_has_key;
    final l$$_contained_in = $_contained_in;
    return Object.hashAll([
      _$data.containsKey('_cast') ? l$$_cast : const {},
      _$data.containsKey('_eq') ? l$$_eq : const {},
      _$data.containsKey('_gt') ? l$$_gt : const {},
      _$data.containsKey('_gte') ? l$$_gte : const {},
      _$data.containsKey('_in')
          ? l$$_in == null
              ? null
              : Object.hashAll(l$$_in.map((v) => v))
          : const {},
      _$data.containsKey('_is_null') ? l$$_is_null : const {},
      _$data.containsKey('_lt') ? l$$_lt : const {},
      _$data.containsKey('_lte') ? l$$_lte : const {},
      _$data.containsKey('_neq') ? l$$_neq : const {},
      _$data.containsKey('_nin')
          ? l$$_nin == null
              ? null
              : Object.hashAll(l$$_nin.map((v) => v))
          : const {},
      _$data.containsKey('_has_keys_all')
          ? l$$_has_keys_all == null
              ? null
              : Object.hashAll(l$$_has_keys_all.map((v) => v))
          : const {},
      _$data.containsKey('_has_keys_any')
          ? l$$_has_keys_any == null
              ? null
              : Object.hashAll(l$$_has_keys_any.map((v) => v))
          : const {},
      _$data.containsKey('_contains') ? l$$_contains : const {},
      _$data.containsKey('_has_key') ? l$$_has_key : const {},
      _$data.containsKey('_contained_in') ? l$$_contained_in : const {},
    ]);
  }
}

abstract class CopyWith$Input$jsonb_comparison_exp<TRes> {
  factory CopyWith$Input$jsonb_comparison_exp(
    Input$jsonb_comparison_exp instance,
    TRes Function(Input$jsonb_comparison_exp) then,
  ) = _CopyWithImpl$Input$jsonb_comparison_exp;

  factory CopyWith$Input$jsonb_comparison_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$jsonb_comparison_exp;

  TRes call({
    Input$jsonb_cast_exp? $_cast,
    String? $_eq,
    String? $_gt,
    String? $_gte,
    List<String>? $_in,
    bool? $_is_null,
    String? $_lt,
    String? $_lte,
    String? $_neq,
    List<String>? $_nin,
    List<String>? $_has_keys_all,
    List<String>? $_has_keys_any,
    String? $_contains,
    String? $_has_key,
    String? $_contained_in,
  });
  CopyWith$Input$jsonb_cast_exp<TRes> get $_cast;
}

class _CopyWithImpl$Input$jsonb_comparison_exp<TRes>
    implements CopyWith$Input$jsonb_comparison_exp<TRes> {
  _CopyWithImpl$Input$jsonb_comparison_exp(
    this._instance,
    this._then,
  );

  final Input$jsonb_comparison_exp _instance;

  final TRes Function(Input$jsonb_comparison_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_cast = _undefined,
    Object? $_eq = _undefined,
    Object? $_gt = _undefined,
    Object? $_gte = _undefined,
    Object? $_in = _undefined,
    Object? $_is_null = _undefined,
    Object? $_lt = _undefined,
    Object? $_lte = _undefined,
    Object? $_neq = _undefined,
    Object? $_nin = _undefined,
    Object? $_has_keys_all = _undefined,
    Object? $_has_keys_any = _undefined,
    Object? $_contains = _undefined,
    Object? $_has_key = _undefined,
    Object? $_contained_in = _undefined,
  }) =>
      _then(Input$jsonb_comparison_exp._({
        ..._instance._$data,
        if ($_cast != _undefined) '_cast': ($_cast as Input$jsonb_cast_exp?),
        if ($_eq != _undefined) '_eq': ($_eq as String?),
        if ($_gt != _undefined) '_gt': ($_gt as String?),
        if ($_gte != _undefined) '_gte': ($_gte as String?),
        if ($_in != _undefined) '_in': ($_in as List<String>?),
        if ($_is_null != _undefined) '_is_null': ($_is_null as bool?),
        if ($_lt != _undefined) '_lt': ($_lt as String?),
        if ($_lte != _undefined) '_lte': ($_lte as String?),
        if ($_neq != _undefined) '_neq': ($_neq as String?),
        if ($_nin != _undefined) '_nin': ($_nin as List<String>?),
        if ($_has_keys_all != _undefined)
          '_has_keys_all': ($_has_keys_all as List<String>?),
        if ($_has_keys_any != _undefined)
          '_has_keys_any': ($_has_keys_any as List<String>?),
        if ($_contains != _undefined) '_contains': ($_contains as String?),
        if ($_has_key != _undefined) '_has_key': ($_has_key as String?),
        if ($_contained_in != _undefined)
          '_contained_in': ($_contained_in as String?),
      }));
  CopyWith$Input$jsonb_cast_exp<TRes> get $_cast {
    final local$$_cast = _instance.$_cast;
    return local$$_cast == null
        ? CopyWith$Input$jsonb_cast_exp.stub(_then(_instance))
        : CopyWith$Input$jsonb_cast_exp(local$$_cast, (e) => call($_cast: e));
  }
}

class _CopyWithStubImpl$Input$jsonb_comparison_exp<TRes>
    implements CopyWith$Input$jsonb_comparison_exp<TRes> {
  _CopyWithStubImpl$Input$jsonb_comparison_exp(this._res);

  TRes _res;

  call({
    Input$jsonb_cast_exp? $_cast,
    String? $_eq,
    String? $_gt,
    String? $_gte,
    List<String>? $_in,
    bool? $_is_null,
    String? $_lt,
    String? $_lte,
    String? $_neq,
    List<String>? $_nin,
    List<String>? $_has_keys_all,
    List<String>? $_has_keys_any,
    String? $_contains,
    String? $_has_key,
    String? $_contained_in,
  }) =>
      _res;
  CopyWith$Input$jsonb_cast_exp<TRes> get $_cast =>
      CopyWith$Input$jsonb_cast_exp.stub(_res);
}

class Input$timestamp_comparison_exp {
  factory Input$timestamp_comparison_exp({
    String? $_eq,
    String? $_gt,
    String? $_gte,
    List<String>? $_in,
    bool? $_is_null,
    String? $_lt,
    String? $_lte,
    String? $_neq,
    List<String>? $_nin,
  }) =>
      Input$timestamp_comparison_exp._({
        if ($_eq != null) r'_eq': $_eq,
        if ($_gt != null) r'_gt': $_gt,
        if ($_gte != null) r'_gte': $_gte,
        if ($_in != null) r'_in': $_in,
        if ($_is_null != null) r'_is_null': $_is_null,
        if ($_lt != null) r'_lt': $_lt,
        if ($_lte != null) r'_lte': $_lte,
        if ($_neq != null) r'_neq': $_neq,
        if ($_nin != null) r'_nin': $_nin,
      });

  Input$timestamp_comparison_exp._(this._$data);

  factory Input$timestamp_comparison_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_eq')) {
      final l$$_eq = data['_eq'];
      result$data['_eq'] = (l$$_eq as String?);
    }
    if (data.containsKey('_gt')) {
      final l$$_gt = data['_gt'];
      result$data['_gt'] = (l$$_gt as String?);
    }
    if (data.containsKey('_gte')) {
      final l$$_gte = data['_gte'];
      result$data['_gte'] = (l$$_gte as String?);
    }
    if (data.containsKey('_in')) {
      final l$$_in = data['_in'];
      result$data['_in'] =
          (l$$_in as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('_is_null')) {
      final l$$_is_null = data['_is_null'];
      result$data['_is_null'] = (l$$_is_null as bool?);
    }
    if (data.containsKey('_lt')) {
      final l$$_lt = data['_lt'];
      result$data['_lt'] = (l$$_lt as String?);
    }
    if (data.containsKey('_lte')) {
      final l$$_lte = data['_lte'];
      result$data['_lte'] = (l$$_lte as String?);
    }
    if (data.containsKey('_neq')) {
      final l$$_neq = data['_neq'];
      result$data['_neq'] = (l$$_neq as String?);
    }
    if (data.containsKey('_nin')) {
      final l$$_nin = data['_nin'];
      result$data['_nin'] =
          (l$$_nin as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    return Input$timestamp_comparison_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get $_eq => (_$data['_eq'] as String?);
  String? get $_gt => (_$data['_gt'] as String?);
  String? get $_gte => (_$data['_gte'] as String?);
  List<String>? get $_in => (_$data['_in'] as List<String>?);
  bool? get $_is_null => (_$data['_is_null'] as bool?);
  String? get $_lt => (_$data['_lt'] as String?);
  String? get $_lte => (_$data['_lte'] as String?);
  String? get $_neq => (_$data['_neq'] as String?);
  List<String>? get $_nin => (_$data['_nin'] as List<String>?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_eq')) {
      final l$$_eq = $_eq;
      result$data['_eq'] = l$$_eq;
    }
    if (_$data.containsKey('_gt')) {
      final l$$_gt = $_gt;
      result$data['_gt'] = l$$_gt;
    }
    if (_$data.containsKey('_gte')) {
      final l$$_gte = $_gte;
      result$data['_gte'] = l$$_gte;
    }
    if (_$data.containsKey('_in')) {
      final l$$_in = $_in;
      result$data['_in'] = l$$_in?.map((e) => e).toList();
    }
    if (_$data.containsKey('_is_null')) {
      final l$$_is_null = $_is_null;
      result$data['_is_null'] = l$$_is_null;
    }
    if (_$data.containsKey('_lt')) {
      final l$$_lt = $_lt;
      result$data['_lt'] = l$$_lt;
    }
    if (_$data.containsKey('_lte')) {
      final l$$_lte = $_lte;
      result$data['_lte'] = l$$_lte;
    }
    if (_$data.containsKey('_neq')) {
      final l$$_neq = $_neq;
      result$data['_neq'] = l$$_neq;
    }
    if (_$data.containsKey('_nin')) {
      final l$$_nin = $_nin;
      result$data['_nin'] = l$$_nin?.map((e) => e).toList();
    }
    return result$data;
  }

  CopyWith$Input$timestamp_comparison_exp<Input$timestamp_comparison_exp>
      get copyWith => CopyWith$Input$timestamp_comparison_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$timestamp_comparison_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_eq = $_eq;
    final lOther$$_eq = other.$_eq;
    if (_$data.containsKey('_eq') != other._$data.containsKey('_eq')) {
      return false;
    }
    if (l$$_eq != lOther$$_eq) {
      return false;
    }
    final l$$_gt = $_gt;
    final lOther$$_gt = other.$_gt;
    if (_$data.containsKey('_gt') != other._$data.containsKey('_gt')) {
      return false;
    }
    if (l$$_gt != lOther$$_gt) {
      return false;
    }
    final l$$_gte = $_gte;
    final lOther$$_gte = other.$_gte;
    if (_$data.containsKey('_gte') != other._$data.containsKey('_gte')) {
      return false;
    }
    if (l$$_gte != lOther$$_gte) {
      return false;
    }
    final l$$_in = $_in;
    final lOther$$_in = other.$_in;
    if (_$data.containsKey('_in') != other._$data.containsKey('_in')) {
      return false;
    }
    if (l$$_in != null && lOther$$_in != null) {
      if (l$$_in.length != lOther$$_in.length) {
        return false;
      }
      for (int i = 0; i < l$$_in.length; i++) {
        final l$$_in$entry = l$$_in[i];
        final lOther$$_in$entry = lOther$$_in[i];
        if (l$$_in$entry != lOther$$_in$entry) {
          return false;
        }
      }
    } else if (l$$_in != lOther$$_in) {
      return false;
    }
    final l$$_is_null = $_is_null;
    final lOther$$_is_null = other.$_is_null;
    if (_$data.containsKey('_is_null') !=
        other._$data.containsKey('_is_null')) {
      return false;
    }
    if (l$$_is_null != lOther$$_is_null) {
      return false;
    }
    final l$$_lt = $_lt;
    final lOther$$_lt = other.$_lt;
    if (_$data.containsKey('_lt') != other._$data.containsKey('_lt')) {
      return false;
    }
    if (l$$_lt != lOther$$_lt) {
      return false;
    }
    final l$$_lte = $_lte;
    final lOther$$_lte = other.$_lte;
    if (_$data.containsKey('_lte') != other._$data.containsKey('_lte')) {
      return false;
    }
    if (l$$_lte != lOther$$_lte) {
      return false;
    }
    final l$$_neq = $_neq;
    final lOther$$_neq = other.$_neq;
    if (_$data.containsKey('_neq') != other._$data.containsKey('_neq')) {
      return false;
    }
    if (l$$_neq != lOther$$_neq) {
      return false;
    }
    final l$$_nin = $_nin;
    final lOther$$_nin = other.$_nin;
    if (_$data.containsKey('_nin') != other._$data.containsKey('_nin')) {
      return false;
    }
    if (l$$_nin != null && lOther$$_nin != null) {
      if (l$$_nin.length != lOther$$_nin.length) {
        return false;
      }
      for (int i = 0; i < l$$_nin.length; i++) {
        final l$$_nin$entry = l$$_nin[i];
        final lOther$$_nin$entry = lOther$$_nin[i];
        if (l$$_nin$entry != lOther$$_nin$entry) {
          return false;
        }
      }
    } else if (l$$_nin != lOther$$_nin) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_eq = $_eq;
    final l$$_gt = $_gt;
    final l$$_gte = $_gte;
    final l$$_in = $_in;
    final l$$_is_null = $_is_null;
    final l$$_lt = $_lt;
    final l$$_lte = $_lte;
    final l$$_neq = $_neq;
    final l$$_nin = $_nin;
    return Object.hashAll([
      _$data.containsKey('_eq') ? l$$_eq : const {},
      _$data.containsKey('_gt') ? l$$_gt : const {},
      _$data.containsKey('_gte') ? l$$_gte : const {},
      _$data.containsKey('_in')
          ? l$$_in == null
              ? null
              : Object.hashAll(l$$_in.map((v) => v))
          : const {},
      _$data.containsKey('_is_null') ? l$$_is_null : const {},
      _$data.containsKey('_lt') ? l$$_lt : const {},
      _$data.containsKey('_lte') ? l$$_lte : const {},
      _$data.containsKey('_neq') ? l$$_neq : const {},
      _$data.containsKey('_nin')
          ? l$$_nin == null
              ? null
              : Object.hashAll(l$$_nin.map((v) => v))
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$timestamp_comparison_exp<TRes> {
  factory CopyWith$Input$timestamp_comparison_exp(
    Input$timestamp_comparison_exp instance,
    TRes Function(Input$timestamp_comparison_exp) then,
  ) = _CopyWithImpl$Input$timestamp_comparison_exp;

  factory CopyWith$Input$timestamp_comparison_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$timestamp_comparison_exp;

  TRes call({
    String? $_eq,
    String? $_gt,
    String? $_gte,
    List<String>? $_in,
    bool? $_is_null,
    String? $_lt,
    String? $_lte,
    String? $_neq,
    List<String>? $_nin,
  });
}

class _CopyWithImpl$Input$timestamp_comparison_exp<TRes>
    implements CopyWith$Input$timestamp_comparison_exp<TRes> {
  _CopyWithImpl$Input$timestamp_comparison_exp(
    this._instance,
    this._then,
  );

  final Input$timestamp_comparison_exp _instance;

  final TRes Function(Input$timestamp_comparison_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_eq = _undefined,
    Object? $_gt = _undefined,
    Object? $_gte = _undefined,
    Object? $_in = _undefined,
    Object? $_is_null = _undefined,
    Object? $_lt = _undefined,
    Object? $_lte = _undefined,
    Object? $_neq = _undefined,
    Object? $_nin = _undefined,
  }) =>
      _then(Input$timestamp_comparison_exp._({
        ..._instance._$data,
        if ($_eq != _undefined) '_eq': ($_eq as String?),
        if ($_gt != _undefined) '_gt': ($_gt as String?),
        if ($_gte != _undefined) '_gte': ($_gte as String?),
        if ($_in != _undefined) '_in': ($_in as List<String>?),
        if ($_is_null != _undefined) '_is_null': ($_is_null as bool?),
        if ($_lt != _undefined) '_lt': ($_lt as String?),
        if ($_lte != _undefined) '_lte': ($_lte as String?),
        if ($_neq != _undefined) '_neq': ($_neq as String?),
        if ($_nin != _undefined) '_nin': ($_nin as List<String>?),
      }));
}

class _CopyWithStubImpl$Input$timestamp_comparison_exp<TRes>
    implements CopyWith$Input$timestamp_comparison_exp<TRes> {
  _CopyWithStubImpl$Input$timestamp_comparison_exp(this._res);

  TRes _res;

  call({
    String? $_eq,
    String? $_gt,
    String? $_gte,
    List<String>? $_in,
    bool? $_is_null,
    String? $_lt,
    String? $_lte,
    String? $_neq,
    List<String>? $_nin,
  }) =>
      _res;
}

class Input$Encounter_bool_exp {
  factory Input$Encounter_bool_exp({
    Input$SavedPerson_bool_exp? SavedPeople,
    Input$SavedPerson_aggregate_bool_exp? SavedPeople_aggregate,
    Input$SoulWinningSessionGroup_bool_exp? SoulWinningSessionGroup,
    List<Input$Encounter_bool_exp>? $_and,
    Input$Encounter_bool_exp? $_not,
    List<Input$Encounter_bool_exp>? $_or,
    Input$timestamp_comparison_exp? encounterTimeInUtc,
    Input$String_comparison_exp? group,
    Input$String_comparison_exp? houseAddress,
    Input$String_comparison_exp? id,
    Input$EncounterResultType_comparison_exp? result,
  }) =>
      Input$Encounter_bool_exp._({
        if (SavedPeople != null) r'SavedPeople': SavedPeople,
        if (SavedPeople_aggregate != null)
          r'SavedPeople_aggregate': SavedPeople_aggregate,
        if (SoulWinningSessionGroup != null)
          r'SoulWinningSessionGroup': SoulWinningSessionGroup,
        if ($_and != null) r'_and': $_and,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if (encounterTimeInUtc != null)
          r'encounterTimeInUtc': encounterTimeInUtc,
        if (group != null) r'group': group,
        if (houseAddress != null) r'houseAddress': houseAddress,
        if (id != null) r'id': id,
        if (result != null) r'result': result,
      });

  Input$Encounter_bool_exp._(this._$data);

  factory Input$Encounter_bool_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('SavedPeople')) {
      final l$SavedPeople = data['SavedPeople'];
      result$data['SavedPeople'] = l$SavedPeople == null
          ? null
          : Input$SavedPerson_bool_exp.fromJson(
              (l$SavedPeople as Map<String, dynamic>));
    }
    if (data.containsKey('SavedPeople_aggregate')) {
      final l$SavedPeople_aggregate = data['SavedPeople_aggregate'];
      result$data['SavedPeople_aggregate'] = l$SavedPeople_aggregate == null
          ? null
          : Input$SavedPerson_aggregate_bool_exp.fromJson(
              (l$SavedPeople_aggregate as Map<String, dynamic>));
    }
    if (data.containsKey('SoulWinningSessionGroup')) {
      final l$SoulWinningSessionGroup = data['SoulWinningSessionGroup'];
      result$data['SoulWinningSessionGroup'] = l$SoulWinningSessionGroup == null
          ? null
          : Input$SoulWinningSessionGroup_bool_exp.fromJson(
              (l$SoulWinningSessionGroup as Map<String, dynamic>));
    }
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) =>
              Input$Encounter_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = l$$_not == null
          ? null
          : Input$Encounter_bool_exp.fromJson(
              (l$$_not as Map<String, dynamic>));
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) =>
              Input$Encounter_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('encounterTimeInUtc')) {
      final l$encounterTimeInUtc = data['encounterTimeInUtc'];
      result$data['encounterTimeInUtc'] = l$encounterTimeInUtc == null
          ? null
          : Input$timestamp_comparison_exp.fromJson(
              (l$encounterTimeInUtc as Map<String, dynamic>));
    }
    if (data.containsKey('group')) {
      final l$group = data['group'];
      result$data['group'] = l$group == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$group as Map<String, dynamic>));
    }
    if (data.containsKey('houseAddress')) {
      final l$houseAddress = data['houseAddress'];
      result$data['houseAddress'] = l$houseAddress == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$houseAddress as Map<String, dynamic>));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$id as Map<String, dynamic>));
    }
    if (data.containsKey('result')) {
      final l$result = data['result'];
      result$data['result'] = l$result == null
          ? null
          : Input$EncounterResultType_comparison_exp.fromJson(
              (l$result as Map<String, dynamic>));
    }
    return Input$Encounter_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$SavedPerson_bool_exp? get SavedPeople =>
      (_$data['SavedPeople'] as Input$SavedPerson_bool_exp?);
  Input$SavedPerson_aggregate_bool_exp? get SavedPeople_aggregate =>
      (_$data['SavedPeople_aggregate']
          as Input$SavedPerson_aggregate_bool_exp?);
  Input$SoulWinningSessionGroup_bool_exp? get SoulWinningSessionGroup =>
      (_$data['SoulWinningSessionGroup']
          as Input$SoulWinningSessionGroup_bool_exp?);
  List<Input$Encounter_bool_exp>? get $_and =>
      (_$data['_and'] as List<Input$Encounter_bool_exp>?);
  Input$Encounter_bool_exp? get $_not =>
      (_$data['_not'] as Input$Encounter_bool_exp?);
  List<Input$Encounter_bool_exp>? get $_or =>
      (_$data['_or'] as List<Input$Encounter_bool_exp>?);
  Input$timestamp_comparison_exp? get encounterTimeInUtc =>
      (_$data['encounterTimeInUtc'] as Input$timestamp_comparison_exp?);
  Input$String_comparison_exp? get group =>
      (_$data['group'] as Input$String_comparison_exp?);
  Input$String_comparison_exp? get houseAddress =>
      (_$data['houseAddress'] as Input$String_comparison_exp?);
  Input$String_comparison_exp? get id =>
      (_$data['id'] as Input$String_comparison_exp?);
  Input$EncounterResultType_comparison_exp? get result =>
      (_$data['result'] as Input$EncounterResultType_comparison_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('SavedPeople')) {
      final l$SavedPeople = SavedPeople;
      result$data['SavedPeople'] = l$SavedPeople?.toJson();
    }
    if (_$data.containsKey('SavedPeople_aggregate')) {
      final l$SavedPeople_aggregate = SavedPeople_aggregate;
      result$data['SavedPeople_aggregate'] = l$SavedPeople_aggregate?.toJson();
    }
    if (_$data.containsKey('SoulWinningSessionGroup')) {
      final l$SoulWinningSessionGroup = SoulWinningSessionGroup;
      result$data['SoulWinningSessionGroup'] =
          l$SoulWinningSessionGroup?.toJson();
    }
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.toJson();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('encounterTimeInUtc')) {
      final l$encounterTimeInUtc = encounterTimeInUtc;
      result$data['encounterTimeInUtc'] = l$encounterTimeInUtc?.toJson();
    }
    if (_$data.containsKey('group')) {
      final l$group = group;
      result$data['group'] = l$group?.toJson();
    }
    if (_$data.containsKey('houseAddress')) {
      final l$houseAddress = houseAddress;
      result$data['houseAddress'] = l$houseAddress?.toJson();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id?.toJson();
    }
    if (_$data.containsKey('result')) {
      final l$result = result;
      result$data['result'] = l$result?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$Encounter_bool_exp<Input$Encounter_bool_exp> get copyWith =>
      CopyWith$Input$Encounter_bool_exp(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Encounter_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$SavedPeople = SavedPeople;
    final lOther$SavedPeople = other.SavedPeople;
    if (_$data.containsKey('SavedPeople') !=
        other._$data.containsKey('SavedPeople')) {
      return false;
    }
    if (l$SavedPeople != lOther$SavedPeople) {
      return false;
    }
    final l$SavedPeople_aggregate = SavedPeople_aggregate;
    final lOther$SavedPeople_aggregate = other.SavedPeople_aggregate;
    if (_$data.containsKey('SavedPeople_aggregate') !=
        other._$data.containsKey('SavedPeople_aggregate')) {
      return false;
    }
    if (l$SavedPeople_aggregate != lOther$SavedPeople_aggregate) {
      return false;
    }
    final l$SoulWinningSessionGroup = SoulWinningSessionGroup;
    final lOther$SoulWinningSessionGroup = other.SoulWinningSessionGroup;
    if (_$data.containsKey('SoulWinningSessionGroup') !=
        other._$data.containsKey('SoulWinningSessionGroup')) {
      return false;
    }
    if (l$SoulWinningSessionGroup != lOther$SoulWinningSessionGroup) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$encounterTimeInUtc = encounterTimeInUtc;
    final lOther$encounterTimeInUtc = other.encounterTimeInUtc;
    if (_$data.containsKey('encounterTimeInUtc') !=
        other._$data.containsKey('encounterTimeInUtc')) {
      return false;
    }
    if (l$encounterTimeInUtc != lOther$encounterTimeInUtc) {
      return false;
    }
    final l$group = group;
    final lOther$group = other.group;
    if (_$data.containsKey('group') != other._$data.containsKey('group')) {
      return false;
    }
    if (l$group != lOther$group) {
      return false;
    }
    final l$houseAddress = houseAddress;
    final lOther$houseAddress = other.houseAddress;
    if (_$data.containsKey('houseAddress') !=
        other._$data.containsKey('houseAddress')) {
      return false;
    }
    if (l$houseAddress != lOther$houseAddress) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$result = result;
    final lOther$result = other.result;
    if (_$data.containsKey('result') != other._$data.containsKey('result')) {
      return false;
    }
    if (l$result != lOther$result) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$SavedPeople = SavedPeople;
    final l$SavedPeople_aggregate = SavedPeople_aggregate;
    final l$SoulWinningSessionGroup = SoulWinningSessionGroup;
    final l$$_and = $_and;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$encounterTimeInUtc = encounterTimeInUtc;
    final l$group = group;
    final l$houseAddress = houseAddress;
    final l$id = id;
    final l$result = result;
    return Object.hashAll([
      _$data.containsKey('SavedPeople') ? l$SavedPeople : const {},
      _$data.containsKey('SavedPeople_aggregate')
          ? l$SavedPeople_aggregate
          : const {},
      _$data.containsKey('SoulWinningSessionGroup')
          ? l$SoulWinningSessionGroup
          : const {},
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_not') ? l$$_not : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('encounterTimeInUtc')
          ? l$encounterTimeInUtc
          : const {},
      _$data.containsKey('group') ? l$group : const {},
      _$data.containsKey('houseAddress') ? l$houseAddress : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('result') ? l$result : const {},
    ]);
  }
}

abstract class CopyWith$Input$Encounter_bool_exp<TRes> {
  factory CopyWith$Input$Encounter_bool_exp(
    Input$Encounter_bool_exp instance,
    TRes Function(Input$Encounter_bool_exp) then,
  ) = _CopyWithImpl$Input$Encounter_bool_exp;

  factory CopyWith$Input$Encounter_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$Encounter_bool_exp;

  TRes call({
    Input$SavedPerson_bool_exp? SavedPeople,
    Input$SavedPerson_aggregate_bool_exp? SavedPeople_aggregate,
    Input$SoulWinningSessionGroup_bool_exp? SoulWinningSessionGroup,
    List<Input$Encounter_bool_exp>? $_and,
    Input$Encounter_bool_exp? $_not,
    List<Input$Encounter_bool_exp>? $_or,
    Input$timestamp_comparison_exp? encounterTimeInUtc,
    Input$String_comparison_exp? group,
    Input$String_comparison_exp? houseAddress,
    Input$String_comparison_exp? id,
    Input$EncounterResultType_comparison_exp? result,
  });
  CopyWith$Input$SavedPerson_bool_exp<TRes> get SavedPeople;
  CopyWith$Input$SavedPerson_aggregate_bool_exp<TRes> get SavedPeople_aggregate;
  CopyWith$Input$SoulWinningSessionGroup_bool_exp<TRes>
      get SoulWinningSessionGroup;
  TRes $_and(
      Iterable<Input$Encounter_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$Encounter_bool_exp<Input$Encounter_bool_exp>>?)
          _fn);
  CopyWith$Input$Encounter_bool_exp<TRes> get $_not;
  TRes $_or(
      Iterable<Input$Encounter_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$Encounter_bool_exp<Input$Encounter_bool_exp>>?)
          _fn);
  CopyWith$Input$timestamp_comparison_exp<TRes> get encounterTimeInUtc;
  CopyWith$Input$String_comparison_exp<TRes> get group;
  CopyWith$Input$String_comparison_exp<TRes> get houseAddress;
  CopyWith$Input$String_comparison_exp<TRes> get id;
  CopyWith$Input$EncounterResultType_comparison_exp<TRes> get result;
}

class _CopyWithImpl$Input$Encounter_bool_exp<TRes>
    implements CopyWith$Input$Encounter_bool_exp<TRes> {
  _CopyWithImpl$Input$Encounter_bool_exp(
    this._instance,
    this._then,
  );

  final Input$Encounter_bool_exp _instance;

  final TRes Function(Input$Encounter_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? SavedPeople = _undefined,
    Object? SavedPeople_aggregate = _undefined,
    Object? SoulWinningSessionGroup = _undefined,
    Object? $_and = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? encounterTimeInUtc = _undefined,
    Object? group = _undefined,
    Object? houseAddress = _undefined,
    Object? id = _undefined,
    Object? result = _undefined,
  }) =>
      _then(Input$Encounter_bool_exp._({
        ..._instance._$data,
        if (SavedPeople != _undefined)
          'SavedPeople': (SavedPeople as Input$SavedPerson_bool_exp?),
        if (SavedPeople_aggregate != _undefined)
          'SavedPeople_aggregate':
              (SavedPeople_aggregate as Input$SavedPerson_aggregate_bool_exp?),
        if (SoulWinningSessionGroup != _undefined)
          'SoulWinningSessionGroup': (SoulWinningSessionGroup
              as Input$SoulWinningSessionGroup_bool_exp?),
        if ($_and != _undefined)
          '_and': ($_and as List<Input$Encounter_bool_exp>?),
        if ($_not != _undefined) '_not': ($_not as Input$Encounter_bool_exp?),
        if ($_or != _undefined)
          '_or': ($_or as List<Input$Encounter_bool_exp>?),
        if (encounterTimeInUtc != _undefined)
          'encounterTimeInUtc':
              (encounterTimeInUtc as Input$timestamp_comparison_exp?),
        if (group != _undefined)
          'group': (group as Input$String_comparison_exp?),
        if (houseAddress != _undefined)
          'houseAddress': (houseAddress as Input$String_comparison_exp?),
        if (id != _undefined) 'id': (id as Input$String_comparison_exp?),
        if (result != _undefined)
          'result': (result as Input$EncounterResultType_comparison_exp?),
      }));
  CopyWith$Input$SavedPerson_bool_exp<TRes> get SavedPeople {
    final local$SavedPeople = _instance.SavedPeople;
    return local$SavedPeople == null
        ? CopyWith$Input$SavedPerson_bool_exp.stub(_then(_instance))
        : CopyWith$Input$SavedPerson_bool_exp(
            local$SavedPeople, (e) => call(SavedPeople: e));
  }

  CopyWith$Input$SavedPerson_aggregate_bool_exp<TRes>
      get SavedPeople_aggregate {
    final local$SavedPeople_aggregate = _instance.SavedPeople_aggregate;
    return local$SavedPeople_aggregate == null
        ? CopyWith$Input$SavedPerson_aggregate_bool_exp.stub(_then(_instance))
        : CopyWith$Input$SavedPerson_aggregate_bool_exp(
            local$SavedPeople_aggregate, (e) => call(SavedPeople_aggregate: e));
  }

  CopyWith$Input$SoulWinningSessionGroup_bool_exp<TRes>
      get SoulWinningSessionGroup {
    final local$SoulWinningSessionGroup = _instance.SoulWinningSessionGroup;
    return local$SoulWinningSessionGroup == null
        ? CopyWith$Input$SoulWinningSessionGroup_bool_exp.stub(_then(_instance))
        : CopyWith$Input$SoulWinningSessionGroup_bool_exp(
            local$SoulWinningSessionGroup,
            (e) => call(SoulWinningSessionGroup: e));
  }

  TRes $_and(
          Iterable<Input$Encounter_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$Encounter_bool_exp<
                          Input$Encounter_bool_exp>>?)
              _fn) =>
      call(
          $_and:
              _fn(_instance.$_and?.map((e) => CopyWith$Input$Encounter_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());
  CopyWith$Input$Encounter_bool_exp<TRes> get $_not {
    final local$$_not = _instance.$_not;
    return local$$_not == null
        ? CopyWith$Input$Encounter_bool_exp.stub(_then(_instance))
        : CopyWith$Input$Encounter_bool_exp(local$$_not, (e) => call($_not: e));
  }

  TRes $_or(
          Iterable<Input$Encounter_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$Encounter_bool_exp<
                          Input$Encounter_bool_exp>>?)
              _fn) =>
      call(
          $_or:
              _fn(_instance.$_or?.map((e) => CopyWith$Input$Encounter_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());
  CopyWith$Input$timestamp_comparison_exp<TRes> get encounterTimeInUtc {
    final local$encounterTimeInUtc = _instance.encounterTimeInUtc;
    return local$encounterTimeInUtc == null
        ? CopyWith$Input$timestamp_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamp_comparison_exp(
            local$encounterTimeInUtc, (e) => call(encounterTimeInUtc: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get group {
    final local$group = _instance.group;
    return local$group == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$group, (e) => call(group: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get houseAddress {
    final local$houseAddress = _instance.houseAddress;
    return local$houseAddress == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$houseAddress, (e) => call(houseAddress: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get id {
    final local$id = _instance.id;
    return local$id == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(local$id, (e) => call(id: e));
  }

  CopyWith$Input$EncounterResultType_comparison_exp<TRes> get result {
    final local$result = _instance.result;
    return local$result == null
        ? CopyWith$Input$EncounterResultType_comparison_exp.stub(
            _then(_instance))
        : CopyWith$Input$EncounterResultType_comparison_exp(
            local$result, (e) => call(result: e));
  }
}

class _CopyWithStubImpl$Input$Encounter_bool_exp<TRes>
    implements CopyWith$Input$Encounter_bool_exp<TRes> {
  _CopyWithStubImpl$Input$Encounter_bool_exp(this._res);

  TRes _res;

  call({
    Input$SavedPerson_bool_exp? SavedPeople,
    Input$SavedPerson_aggregate_bool_exp? SavedPeople_aggregate,
    Input$SoulWinningSessionGroup_bool_exp? SoulWinningSessionGroup,
    List<Input$Encounter_bool_exp>? $_and,
    Input$Encounter_bool_exp? $_not,
    List<Input$Encounter_bool_exp>? $_or,
    Input$timestamp_comparison_exp? encounterTimeInUtc,
    Input$String_comparison_exp? group,
    Input$String_comparison_exp? houseAddress,
    Input$String_comparison_exp? id,
    Input$EncounterResultType_comparison_exp? result,
  }) =>
      _res;
  CopyWith$Input$SavedPerson_bool_exp<TRes> get SavedPeople =>
      CopyWith$Input$SavedPerson_bool_exp.stub(_res);
  CopyWith$Input$SavedPerson_aggregate_bool_exp<TRes>
      get SavedPeople_aggregate =>
          CopyWith$Input$SavedPerson_aggregate_bool_exp.stub(_res);
  CopyWith$Input$SoulWinningSessionGroup_bool_exp<TRes>
      get SoulWinningSessionGroup =>
          CopyWith$Input$SoulWinningSessionGroup_bool_exp.stub(_res);
  $_and(_fn) => _res;
  CopyWith$Input$Encounter_bool_exp<TRes> get $_not =>
      CopyWith$Input$Encounter_bool_exp.stub(_res);
  $_or(_fn) => _res;
  CopyWith$Input$timestamp_comparison_exp<TRes> get encounterTimeInUtc =>
      CopyWith$Input$timestamp_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get group =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get houseAddress =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get id =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$EncounterResultType_comparison_exp<TRes> get result =>
      CopyWith$Input$EncounterResultType_comparison_exp.stub(_res);
}

class Input$Event_bool_exp {
  factory Input$Event_bool_exp({
    Input$Organization_bool_exp? Organization,
    Input$SoulWinningSession_bool_exp? SoulWinningSessions,
    Input$SoulWinningSession_aggregate_bool_exp? SoulWinningSessions_aggregate,
    List<Input$Event_bool_exp>? $_and,
    Input$Event_bool_exp? $_not,
    List<Input$Event_bool_exp>? $_or,
    Input$String_comparison_exp? coverPhotoUrl,
    Input$String_comparison_exp? eventPlan,
    Input$String_comparison_exp? id,
    Input$String_comparison_exp? name,
    Input$String_comparison_exp? organization,
    Input$timestamp_comparison_exp? scheduledEndTimeInUtc,
    Input$timestamp_comparison_exp? scheduledStartTimeInUtc,
    Input$EventTypeType_comparison_exp? type,
    Input$String_comparison_exp? whatToExpect,
  }) =>
      Input$Event_bool_exp._({
        if (Organization != null) r'Organization': Organization,
        if (SoulWinningSessions != null)
          r'SoulWinningSessions': SoulWinningSessions,
        if (SoulWinningSessions_aggregate != null)
          r'SoulWinningSessions_aggregate': SoulWinningSessions_aggregate,
        if ($_and != null) r'_and': $_and,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if (coverPhotoUrl != null) r'coverPhotoUrl': coverPhotoUrl,
        if (eventPlan != null) r'eventPlan': eventPlan,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
        if (organization != null) r'organization': organization,
        if (scheduledEndTimeInUtc != null)
          r'scheduledEndTimeInUtc': scheduledEndTimeInUtc,
        if (scheduledStartTimeInUtc != null)
          r'scheduledStartTimeInUtc': scheduledStartTimeInUtc,
        if (type != null) r'type': type,
        if (whatToExpect != null) r'whatToExpect': whatToExpect,
      });

  Input$Event_bool_exp._(this._$data);

  factory Input$Event_bool_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Organization')) {
      final l$Organization = data['Organization'];
      result$data['Organization'] = l$Organization == null
          ? null
          : Input$Organization_bool_exp.fromJson(
              (l$Organization as Map<String, dynamic>));
    }
    if (data.containsKey('SoulWinningSessions')) {
      final l$SoulWinningSessions = data['SoulWinningSessions'];
      result$data['SoulWinningSessions'] = l$SoulWinningSessions == null
          ? null
          : Input$SoulWinningSession_bool_exp.fromJson(
              (l$SoulWinningSessions as Map<String, dynamic>));
    }
    if (data.containsKey('SoulWinningSessions_aggregate')) {
      final l$SoulWinningSessions_aggregate =
          data['SoulWinningSessions_aggregate'];
      result$data['SoulWinningSessions_aggregate'] =
          l$SoulWinningSessions_aggregate == null
              ? null
              : Input$SoulWinningSession_aggregate_bool_exp.fromJson(
                  (l$SoulWinningSessions_aggregate as Map<String, dynamic>));
    }
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map(
              (e) => Input$Event_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = l$$_not == null
          ? null
          : Input$Event_bool_exp.fromJson((l$$_not as Map<String, dynamic>));
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map(
              (e) => Input$Event_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('coverPhotoUrl')) {
      final l$coverPhotoUrl = data['coverPhotoUrl'];
      result$data['coverPhotoUrl'] = l$coverPhotoUrl == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$coverPhotoUrl as Map<String, dynamic>));
    }
    if (data.containsKey('eventPlan')) {
      final l$eventPlan = data['eventPlan'];
      result$data['eventPlan'] = l$eventPlan == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$eventPlan as Map<String, dynamic>));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$id as Map<String, dynamic>));
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] = l$name == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$name as Map<String, dynamic>));
    }
    if (data.containsKey('organization')) {
      final l$organization = data['organization'];
      result$data['organization'] = l$organization == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$organization as Map<String, dynamic>));
    }
    if (data.containsKey('scheduledEndTimeInUtc')) {
      final l$scheduledEndTimeInUtc = data['scheduledEndTimeInUtc'];
      result$data['scheduledEndTimeInUtc'] = l$scheduledEndTimeInUtc == null
          ? null
          : Input$timestamp_comparison_exp.fromJson(
              (l$scheduledEndTimeInUtc as Map<String, dynamic>));
    }
    if (data.containsKey('scheduledStartTimeInUtc')) {
      final l$scheduledStartTimeInUtc = data['scheduledStartTimeInUtc'];
      result$data['scheduledStartTimeInUtc'] = l$scheduledStartTimeInUtc == null
          ? null
          : Input$timestamp_comparison_exp.fromJson(
              (l$scheduledStartTimeInUtc as Map<String, dynamic>));
    }
    if (data.containsKey('type')) {
      final l$type = data['type'];
      result$data['type'] = l$type == null
          ? null
          : Input$EventTypeType_comparison_exp.fromJson(
              (l$type as Map<String, dynamic>));
    }
    if (data.containsKey('whatToExpect')) {
      final l$whatToExpect = data['whatToExpect'];
      result$data['whatToExpect'] = l$whatToExpect == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$whatToExpect as Map<String, dynamic>));
    }
    return Input$Event_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$Organization_bool_exp? get Organization =>
      (_$data['Organization'] as Input$Organization_bool_exp?);
  Input$SoulWinningSession_bool_exp? get SoulWinningSessions =>
      (_$data['SoulWinningSessions'] as Input$SoulWinningSession_bool_exp?);
  Input$SoulWinningSession_aggregate_bool_exp?
      get SoulWinningSessions_aggregate =>
          (_$data['SoulWinningSessions_aggregate']
              as Input$SoulWinningSession_aggregate_bool_exp?);
  List<Input$Event_bool_exp>? get $_and =>
      (_$data['_and'] as List<Input$Event_bool_exp>?);
  Input$Event_bool_exp? get $_not => (_$data['_not'] as Input$Event_bool_exp?);
  List<Input$Event_bool_exp>? get $_or =>
      (_$data['_or'] as List<Input$Event_bool_exp>?);
  Input$String_comparison_exp? get coverPhotoUrl =>
      (_$data['coverPhotoUrl'] as Input$String_comparison_exp?);
  Input$String_comparison_exp? get eventPlan =>
      (_$data['eventPlan'] as Input$String_comparison_exp?);
  Input$String_comparison_exp? get id =>
      (_$data['id'] as Input$String_comparison_exp?);
  Input$String_comparison_exp? get name =>
      (_$data['name'] as Input$String_comparison_exp?);
  Input$String_comparison_exp? get organization =>
      (_$data['organization'] as Input$String_comparison_exp?);
  Input$timestamp_comparison_exp? get scheduledEndTimeInUtc =>
      (_$data['scheduledEndTimeInUtc'] as Input$timestamp_comparison_exp?);
  Input$timestamp_comparison_exp? get scheduledStartTimeInUtc =>
      (_$data['scheduledStartTimeInUtc'] as Input$timestamp_comparison_exp?);
  Input$EventTypeType_comparison_exp? get type =>
      (_$data['type'] as Input$EventTypeType_comparison_exp?);
  Input$String_comparison_exp? get whatToExpect =>
      (_$data['whatToExpect'] as Input$String_comparison_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Organization')) {
      final l$Organization = Organization;
      result$data['Organization'] = l$Organization?.toJson();
    }
    if (_$data.containsKey('SoulWinningSessions')) {
      final l$SoulWinningSessions = SoulWinningSessions;
      result$data['SoulWinningSessions'] = l$SoulWinningSessions?.toJson();
    }
    if (_$data.containsKey('SoulWinningSessions_aggregate')) {
      final l$SoulWinningSessions_aggregate = SoulWinningSessions_aggregate;
      result$data['SoulWinningSessions_aggregate'] =
          l$SoulWinningSessions_aggregate?.toJson();
    }
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.toJson();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('coverPhotoUrl')) {
      final l$coverPhotoUrl = coverPhotoUrl;
      result$data['coverPhotoUrl'] = l$coverPhotoUrl?.toJson();
    }
    if (_$data.containsKey('eventPlan')) {
      final l$eventPlan = eventPlan;
      result$data['eventPlan'] = l$eventPlan?.toJson();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id?.toJson();
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] = l$name?.toJson();
    }
    if (_$data.containsKey('organization')) {
      final l$organization = organization;
      result$data['organization'] = l$organization?.toJson();
    }
    if (_$data.containsKey('scheduledEndTimeInUtc')) {
      final l$scheduledEndTimeInUtc = scheduledEndTimeInUtc;
      result$data['scheduledEndTimeInUtc'] = l$scheduledEndTimeInUtc?.toJson();
    }
    if (_$data.containsKey('scheduledStartTimeInUtc')) {
      final l$scheduledStartTimeInUtc = scheduledStartTimeInUtc;
      result$data['scheduledStartTimeInUtc'] =
          l$scheduledStartTimeInUtc?.toJson();
    }
    if (_$data.containsKey('type')) {
      final l$type = type;
      result$data['type'] = l$type?.toJson();
    }
    if (_$data.containsKey('whatToExpect')) {
      final l$whatToExpect = whatToExpect;
      result$data['whatToExpect'] = l$whatToExpect?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$Event_bool_exp<Input$Event_bool_exp> get copyWith =>
      CopyWith$Input$Event_bool_exp(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Event_bool_exp) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$Organization = Organization;
    final lOther$Organization = other.Organization;
    if (_$data.containsKey('Organization') !=
        other._$data.containsKey('Organization')) {
      return false;
    }
    if (l$Organization != lOther$Organization) {
      return false;
    }
    final l$SoulWinningSessions = SoulWinningSessions;
    final lOther$SoulWinningSessions = other.SoulWinningSessions;
    if (_$data.containsKey('SoulWinningSessions') !=
        other._$data.containsKey('SoulWinningSessions')) {
      return false;
    }
    if (l$SoulWinningSessions != lOther$SoulWinningSessions) {
      return false;
    }
    final l$SoulWinningSessions_aggregate = SoulWinningSessions_aggregate;
    final lOther$SoulWinningSessions_aggregate =
        other.SoulWinningSessions_aggregate;
    if (_$data.containsKey('SoulWinningSessions_aggregate') !=
        other._$data.containsKey('SoulWinningSessions_aggregate')) {
      return false;
    }
    if (l$SoulWinningSessions_aggregate !=
        lOther$SoulWinningSessions_aggregate) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$coverPhotoUrl = coverPhotoUrl;
    final lOther$coverPhotoUrl = other.coverPhotoUrl;
    if (_$data.containsKey('coverPhotoUrl') !=
        other._$data.containsKey('coverPhotoUrl')) {
      return false;
    }
    if (l$coverPhotoUrl != lOther$coverPhotoUrl) {
      return false;
    }
    final l$eventPlan = eventPlan;
    final lOther$eventPlan = other.eventPlan;
    if (_$data.containsKey('eventPlan') !=
        other._$data.containsKey('eventPlan')) {
      return false;
    }
    if (l$eventPlan != lOther$eventPlan) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$organization = organization;
    final lOther$organization = other.organization;
    if (_$data.containsKey('organization') !=
        other._$data.containsKey('organization')) {
      return false;
    }
    if (l$organization != lOther$organization) {
      return false;
    }
    final l$scheduledEndTimeInUtc = scheduledEndTimeInUtc;
    final lOther$scheduledEndTimeInUtc = other.scheduledEndTimeInUtc;
    if (_$data.containsKey('scheduledEndTimeInUtc') !=
        other._$data.containsKey('scheduledEndTimeInUtc')) {
      return false;
    }
    if (l$scheduledEndTimeInUtc != lOther$scheduledEndTimeInUtc) {
      return false;
    }
    final l$scheduledStartTimeInUtc = scheduledStartTimeInUtc;
    final lOther$scheduledStartTimeInUtc = other.scheduledStartTimeInUtc;
    if (_$data.containsKey('scheduledStartTimeInUtc') !=
        other._$data.containsKey('scheduledStartTimeInUtc')) {
      return false;
    }
    if (l$scheduledStartTimeInUtc != lOther$scheduledStartTimeInUtc) {
      return false;
    }
    final l$type = type;
    final lOther$type = other.type;
    if (_$data.containsKey('type') != other._$data.containsKey('type')) {
      return false;
    }
    if (l$type != lOther$type) {
      return false;
    }
    final l$whatToExpect = whatToExpect;
    final lOther$whatToExpect = other.whatToExpect;
    if (_$data.containsKey('whatToExpect') !=
        other._$data.containsKey('whatToExpect')) {
      return false;
    }
    if (l$whatToExpect != lOther$whatToExpect) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Organization = Organization;
    final l$SoulWinningSessions = SoulWinningSessions;
    final l$SoulWinningSessions_aggregate = SoulWinningSessions_aggregate;
    final l$$_and = $_and;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$coverPhotoUrl = coverPhotoUrl;
    final l$eventPlan = eventPlan;
    final l$id = id;
    final l$name = name;
    final l$organization = organization;
    final l$scheduledEndTimeInUtc = scheduledEndTimeInUtc;
    final l$scheduledStartTimeInUtc = scheduledStartTimeInUtc;
    final l$type = type;
    final l$whatToExpect = whatToExpect;
    return Object.hashAll([
      _$data.containsKey('Organization') ? l$Organization : const {},
      _$data.containsKey('SoulWinningSessions')
          ? l$SoulWinningSessions
          : const {},
      _$data.containsKey('SoulWinningSessions_aggregate')
          ? l$SoulWinningSessions_aggregate
          : const {},
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_not') ? l$$_not : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('coverPhotoUrl') ? l$coverPhotoUrl : const {},
      _$data.containsKey('eventPlan') ? l$eventPlan : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('organization') ? l$organization : const {},
      _$data.containsKey('scheduledEndTimeInUtc')
          ? l$scheduledEndTimeInUtc
          : const {},
      _$data.containsKey('scheduledStartTimeInUtc')
          ? l$scheduledStartTimeInUtc
          : const {},
      _$data.containsKey('type') ? l$type : const {},
      _$data.containsKey('whatToExpect') ? l$whatToExpect : const {},
    ]);
  }
}

abstract class CopyWith$Input$Event_bool_exp<TRes> {
  factory CopyWith$Input$Event_bool_exp(
    Input$Event_bool_exp instance,
    TRes Function(Input$Event_bool_exp) then,
  ) = _CopyWithImpl$Input$Event_bool_exp;

  factory CopyWith$Input$Event_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$Event_bool_exp;

  TRes call({
    Input$Organization_bool_exp? Organization,
    Input$SoulWinningSession_bool_exp? SoulWinningSessions,
    Input$SoulWinningSession_aggregate_bool_exp? SoulWinningSessions_aggregate,
    List<Input$Event_bool_exp>? $_and,
    Input$Event_bool_exp? $_not,
    List<Input$Event_bool_exp>? $_or,
    Input$String_comparison_exp? coverPhotoUrl,
    Input$String_comparison_exp? eventPlan,
    Input$String_comparison_exp? id,
    Input$String_comparison_exp? name,
    Input$String_comparison_exp? organization,
    Input$timestamp_comparison_exp? scheduledEndTimeInUtc,
    Input$timestamp_comparison_exp? scheduledStartTimeInUtc,
    Input$EventTypeType_comparison_exp? type,
    Input$String_comparison_exp? whatToExpect,
  });
  CopyWith$Input$Organization_bool_exp<TRes> get Organization;
  CopyWith$Input$SoulWinningSession_bool_exp<TRes> get SoulWinningSessions;
  CopyWith$Input$SoulWinningSession_aggregate_bool_exp<TRes>
      get SoulWinningSessions_aggregate;
  TRes $_and(
      Iterable<Input$Event_bool_exp>? Function(
              Iterable<CopyWith$Input$Event_bool_exp<Input$Event_bool_exp>>?)
          _fn);
  CopyWith$Input$Event_bool_exp<TRes> get $_not;
  TRes $_or(
      Iterable<Input$Event_bool_exp>? Function(
              Iterable<CopyWith$Input$Event_bool_exp<Input$Event_bool_exp>>?)
          _fn);
  CopyWith$Input$String_comparison_exp<TRes> get coverPhotoUrl;
  CopyWith$Input$String_comparison_exp<TRes> get eventPlan;
  CopyWith$Input$String_comparison_exp<TRes> get id;
  CopyWith$Input$String_comparison_exp<TRes> get name;
  CopyWith$Input$String_comparison_exp<TRes> get organization;
  CopyWith$Input$timestamp_comparison_exp<TRes> get scheduledEndTimeInUtc;
  CopyWith$Input$timestamp_comparison_exp<TRes> get scheduledStartTimeInUtc;
  CopyWith$Input$EventTypeType_comparison_exp<TRes> get type;
  CopyWith$Input$String_comparison_exp<TRes> get whatToExpect;
}

class _CopyWithImpl$Input$Event_bool_exp<TRes>
    implements CopyWith$Input$Event_bool_exp<TRes> {
  _CopyWithImpl$Input$Event_bool_exp(
    this._instance,
    this._then,
  );

  final Input$Event_bool_exp _instance;

  final TRes Function(Input$Event_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Organization = _undefined,
    Object? SoulWinningSessions = _undefined,
    Object? SoulWinningSessions_aggregate = _undefined,
    Object? $_and = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? coverPhotoUrl = _undefined,
    Object? eventPlan = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
    Object? organization = _undefined,
    Object? scheduledEndTimeInUtc = _undefined,
    Object? scheduledStartTimeInUtc = _undefined,
    Object? type = _undefined,
    Object? whatToExpect = _undefined,
  }) =>
      _then(Input$Event_bool_exp._({
        ..._instance._$data,
        if (Organization != _undefined)
          'Organization': (Organization as Input$Organization_bool_exp?),
        if (SoulWinningSessions != _undefined)
          'SoulWinningSessions':
              (SoulWinningSessions as Input$SoulWinningSession_bool_exp?),
        if (SoulWinningSessions_aggregate != _undefined)
          'SoulWinningSessions_aggregate': (SoulWinningSessions_aggregate
              as Input$SoulWinningSession_aggregate_bool_exp?),
        if ($_and != _undefined) '_and': ($_and as List<Input$Event_bool_exp>?),
        if ($_not != _undefined) '_not': ($_not as Input$Event_bool_exp?),
        if ($_or != _undefined) '_or': ($_or as List<Input$Event_bool_exp>?),
        if (coverPhotoUrl != _undefined)
          'coverPhotoUrl': (coverPhotoUrl as Input$String_comparison_exp?),
        if (eventPlan != _undefined)
          'eventPlan': (eventPlan as Input$String_comparison_exp?),
        if (id != _undefined) 'id': (id as Input$String_comparison_exp?),
        if (name != _undefined) 'name': (name as Input$String_comparison_exp?),
        if (organization != _undefined)
          'organization': (organization as Input$String_comparison_exp?),
        if (scheduledEndTimeInUtc != _undefined)
          'scheduledEndTimeInUtc':
              (scheduledEndTimeInUtc as Input$timestamp_comparison_exp?),
        if (scheduledStartTimeInUtc != _undefined)
          'scheduledStartTimeInUtc':
              (scheduledStartTimeInUtc as Input$timestamp_comparison_exp?),
        if (type != _undefined)
          'type': (type as Input$EventTypeType_comparison_exp?),
        if (whatToExpect != _undefined)
          'whatToExpect': (whatToExpect as Input$String_comparison_exp?),
      }));
  CopyWith$Input$Organization_bool_exp<TRes> get Organization {
    final local$Organization = _instance.Organization;
    return local$Organization == null
        ? CopyWith$Input$Organization_bool_exp.stub(_then(_instance))
        : CopyWith$Input$Organization_bool_exp(
            local$Organization, (e) => call(Organization: e));
  }

  CopyWith$Input$SoulWinningSession_bool_exp<TRes> get SoulWinningSessions {
    final local$SoulWinningSessions = _instance.SoulWinningSessions;
    return local$SoulWinningSessions == null
        ? CopyWith$Input$SoulWinningSession_bool_exp.stub(_then(_instance))
        : CopyWith$Input$SoulWinningSession_bool_exp(
            local$SoulWinningSessions, (e) => call(SoulWinningSessions: e));
  }

  CopyWith$Input$SoulWinningSession_aggregate_bool_exp<TRes>
      get SoulWinningSessions_aggregate {
    final local$SoulWinningSessions_aggregate =
        _instance.SoulWinningSessions_aggregate;
    return local$SoulWinningSessions_aggregate == null
        ? CopyWith$Input$SoulWinningSession_aggregate_bool_exp.stub(
            _then(_instance))
        : CopyWith$Input$SoulWinningSession_aggregate_bool_exp(
            local$SoulWinningSessions_aggregate,
            (e) => call(SoulWinningSessions_aggregate: e));
  }

  TRes $_and(
          Iterable<Input$Event_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$Event_bool_exp<Input$Event_bool_exp>>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and?.map((e) => CopyWith$Input$Event_bool_exp(
                e,
                (i) => i,
              )))?.toList());
  CopyWith$Input$Event_bool_exp<TRes> get $_not {
    final local$$_not = _instance.$_not;
    return local$$_not == null
        ? CopyWith$Input$Event_bool_exp.stub(_then(_instance))
        : CopyWith$Input$Event_bool_exp(local$$_not, (e) => call($_not: e));
  }

  TRes $_or(
          Iterable<Input$Event_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$Event_bool_exp<Input$Event_bool_exp>>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map((e) => CopyWith$Input$Event_bool_exp(
                e,
                (i) => i,
              )))?.toList());
  CopyWith$Input$String_comparison_exp<TRes> get coverPhotoUrl {
    final local$coverPhotoUrl = _instance.coverPhotoUrl;
    return local$coverPhotoUrl == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$coverPhotoUrl, (e) => call(coverPhotoUrl: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get eventPlan {
    final local$eventPlan = _instance.eventPlan;
    return local$eventPlan == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$eventPlan, (e) => call(eventPlan: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get id {
    final local$id = _instance.id;
    return local$id == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(local$id, (e) => call(id: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get name {
    final local$name = _instance.name;
    return local$name == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$name, (e) => call(name: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get organization {
    final local$organization = _instance.organization;
    return local$organization == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$organization, (e) => call(organization: e));
  }

  CopyWith$Input$timestamp_comparison_exp<TRes> get scheduledEndTimeInUtc {
    final local$scheduledEndTimeInUtc = _instance.scheduledEndTimeInUtc;
    return local$scheduledEndTimeInUtc == null
        ? CopyWith$Input$timestamp_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamp_comparison_exp(
            local$scheduledEndTimeInUtc, (e) => call(scheduledEndTimeInUtc: e));
  }

  CopyWith$Input$timestamp_comparison_exp<TRes> get scheduledStartTimeInUtc {
    final local$scheduledStartTimeInUtc = _instance.scheduledStartTimeInUtc;
    return local$scheduledStartTimeInUtc == null
        ? CopyWith$Input$timestamp_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamp_comparison_exp(local$scheduledStartTimeInUtc,
            (e) => call(scheduledStartTimeInUtc: e));
  }

  CopyWith$Input$EventTypeType_comparison_exp<TRes> get type {
    final local$type = _instance.type;
    return local$type == null
        ? CopyWith$Input$EventTypeType_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$EventTypeType_comparison_exp(
            local$type, (e) => call(type: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get whatToExpect {
    final local$whatToExpect = _instance.whatToExpect;
    return local$whatToExpect == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$whatToExpect, (e) => call(whatToExpect: e));
  }
}

class _CopyWithStubImpl$Input$Event_bool_exp<TRes>
    implements CopyWith$Input$Event_bool_exp<TRes> {
  _CopyWithStubImpl$Input$Event_bool_exp(this._res);

  TRes _res;

  call({
    Input$Organization_bool_exp? Organization,
    Input$SoulWinningSession_bool_exp? SoulWinningSessions,
    Input$SoulWinningSession_aggregate_bool_exp? SoulWinningSessions_aggregate,
    List<Input$Event_bool_exp>? $_and,
    Input$Event_bool_exp? $_not,
    List<Input$Event_bool_exp>? $_or,
    Input$String_comparison_exp? coverPhotoUrl,
    Input$String_comparison_exp? eventPlan,
    Input$String_comparison_exp? id,
    Input$String_comparison_exp? name,
    Input$String_comparison_exp? organization,
    Input$timestamp_comparison_exp? scheduledEndTimeInUtc,
    Input$timestamp_comparison_exp? scheduledStartTimeInUtc,
    Input$EventTypeType_comparison_exp? type,
    Input$String_comparison_exp? whatToExpect,
  }) =>
      _res;
  CopyWith$Input$Organization_bool_exp<TRes> get Organization =>
      CopyWith$Input$Organization_bool_exp.stub(_res);
  CopyWith$Input$SoulWinningSession_bool_exp<TRes> get SoulWinningSessions =>
      CopyWith$Input$SoulWinningSession_bool_exp.stub(_res);
  CopyWith$Input$SoulWinningSession_aggregate_bool_exp<TRes>
      get SoulWinningSessions_aggregate =>
          CopyWith$Input$SoulWinningSession_aggregate_bool_exp.stub(_res);
  $_and(_fn) => _res;
  CopyWith$Input$Event_bool_exp<TRes> get $_not =>
      CopyWith$Input$Event_bool_exp.stub(_res);
  $_or(_fn) => _res;
  CopyWith$Input$String_comparison_exp<TRes> get coverPhotoUrl =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get eventPlan =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get id =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get name =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get organization =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$timestamp_comparison_exp<TRes> get scheduledEndTimeInUtc =>
      CopyWith$Input$timestamp_comparison_exp.stub(_res);
  CopyWith$Input$timestamp_comparison_exp<TRes> get scheduledStartTimeInUtc =>
      CopyWith$Input$timestamp_comparison_exp.stub(_res);
  CopyWith$Input$EventTypeType_comparison_exp<TRes> get type =>
      CopyWith$Input$EventTypeType_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get whatToExpect =>
      CopyWith$Input$String_comparison_exp.stub(_res);
}

class Input$Map_bool_exp {
  factory Input$Map_bool_exp({
    Input$MapArea_bool_exp? MapAreas,
    Input$MapArea_aggregate_bool_exp? MapAreas_aggregate,
    Input$Organization_bool_exp? Organization,
    List<Input$Map_bool_exp>? $_and,
    Input$Map_bool_exp? $_not,
    List<Input$Map_bool_exp>? $_or,
    Input$String_comparison_exp? belongingOrganization,
    Input$String_comparison_exp? id,
    Input$String_comparison_exp? name,
  }) =>
      Input$Map_bool_exp._({
        if (MapAreas != null) r'MapAreas': MapAreas,
        if (MapAreas_aggregate != null)
          r'MapAreas_aggregate': MapAreas_aggregate,
        if (Organization != null) r'Organization': Organization,
        if ($_and != null) r'_and': $_and,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if (belongingOrganization != null)
          r'belongingOrganization': belongingOrganization,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
      });

  Input$Map_bool_exp._(this._$data);

  factory Input$Map_bool_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('MapAreas')) {
      final l$MapAreas = data['MapAreas'];
      result$data['MapAreas'] = l$MapAreas == null
          ? null
          : Input$MapArea_bool_exp.fromJson(
              (l$MapAreas as Map<String, dynamic>));
    }
    if (data.containsKey('MapAreas_aggregate')) {
      final l$MapAreas_aggregate = data['MapAreas_aggregate'];
      result$data['MapAreas_aggregate'] = l$MapAreas_aggregate == null
          ? null
          : Input$MapArea_aggregate_bool_exp.fromJson(
              (l$MapAreas_aggregate as Map<String, dynamic>));
    }
    if (data.containsKey('Organization')) {
      final l$Organization = data['Organization'];
      result$data['Organization'] = l$Organization == null
          ? null
          : Input$Organization_bool_exp.fromJson(
              (l$Organization as Map<String, dynamic>));
    }
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) => Input$Map_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = l$$_not == null
          ? null
          : Input$Map_bool_exp.fromJson((l$$_not as Map<String, dynamic>));
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) => Input$Map_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('belongingOrganization')) {
      final l$belongingOrganization = data['belongingOrganization'];
      result$data['belongingOrganization'] = l$belongingOrganization == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$belongingOrganization as Map<String, dynamic>));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$id as Map<String, dynamic>));
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] = l$name == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$name as Map<String, dynamic>));
    }
    return Input$Map_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$MapArea_bool_exp? get MapAreas =>
      (_$data['MapAreas'] as Input$MapArea_bool_exp?);
  Input$MapArea_aggregate_bool_exp? get MapAreas_aggregate =>
      (_$data['MapAreas_aggregate'] as Input$MapArea_aggregate_bool_exp?);
  Input$Organization_bool_exp? get Organization =>
      (_$data['Organization'] as Input$Organization_bool_exp?);
  List<Input$Map_bool_exp>? get $_and =>
      (_$data['_and'] as List<Input$Map_bool_exp>?);
  Input$Map_bool_exp? get $_not => (_$data['_not'] as Input$Map_bool_exp?);
  List<Input$Map_bool_exp>? get $_or =>
      (_$data['_or'] as List<Input$Map_bool_exp>?);
  Input$String_comparison_exp? get belongingOrganization =>
      (_$data['belongingOrganization'] as Input$String_comparison_exp?);
  Input$String_comparison_exp? get id =>
      (_$data['id'] as Input$String_comparison_exp?);
  Input$String_comparison_exp? get name =>
      (_$data['name'] as Input$String_comparison_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('MapAreas')) {
      final l$MapAreas = MapAreas;
      result$data['MapAreas'] = l$MapAreas?.toJson();
    }
    if (_$data.containsKey('MapAreas_aggregate')) {
      final l$MapAreas_aggregate = MapAreas_aggregate;
      result$data['MapAreas_aggregate'] = l$MapAreas_aggregate?.toJson();
    }
    if (_$data.containsKey('Organization')) {
      final l$Organization = Organization;
      result$data['Organization'] = l$Organization?.toJson();
    }
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.toJson();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('belongingOrganization')) {
      final l$belongingOrganization = belongingOrganization;
      result$data['belongingOrganization'] = l$belongingOrganization?.toJson();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id?.toJson();
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] = l$name?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$Map_bool_exp<Input$Map_bool_exp> get copyWith =>
      CopyWith$Input$Map_bool_exp(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Map_bool_exp) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$MapAreas = MapAreas;
    final lOther$MapAreas = other.MapAreas;
    if (_$data.containsKey('MapAreas') !=
        other._$data.containsKey('MapAreas')) {
      return false;
    }
    if (l$MapAreas != lOther$MapAreas) {
      return false;
    }
    final l$MapAreas_aggregate = MapAreas_aggregate;
    final lOther$MapAreas_aggregate = other.MapAreas_aggregate;
    if (_$data.containsKey('MapAreas_aggregate') !=
        other._$data.containsKey('MapAreas_aggregate')) {
      return false;
    }
    if (l$MapAreas_aggregate != lOther$MapAreas_aggregate) {
      return false;
    }
    final l$Organization = Organization;
    final lOther$Organization = other.Organization;
    if (_$data.containsKey('Organization') !=
        other._$data.containsKey('Organization')) {
      return false;
    }
    if (l$Organization != lOther$Organization) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$belongingOrganization = belongingOrganization;
    final lOther$belongingOrganization = other.belongingOrganization;
    if (_$data.containsKey('belongingOrganization') !=
        other._$data.containsKey('belongingOrganization')) {
      return false;
    }
    if (l$belongingOrganization != lOther$belongingOrganization) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$MapAreas = MapAreas;
    final l$MapAreas_aggregate = MapAreas_aggregate;
    final l$Organization = Organization;
    final l$$_and = $_and;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$belongingOrganization = belongingOrganization;
    final l$id = id;
    final l$name = name;
    return Object.hashAll([
      _$data.containsKey('MapAreas') ? l$MapAreas : const {},
      _$data.containsKey('MapAreas_aggregate')
          ? l$MapAreas_aggregate
          : const {},
      _$data.containsKey('Organization') ? l$Organization : const {},
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_not') ? l$$_not : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('belongingOrganization')
          ? l$belongingOrganization
          : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
    ]);
  }
}

abstract class CopyWith$Input$Map_bool_exp<TRes> {
  factory CopyWith$Input$Map_bool_exp(
    Input$Map_bool_exp instance,
    TRes Function(Input$Map_bool_exp) then,
  ) = _CopyWithImpl$Input$Map_bool_exp;

  factory CopyWith$Input$Map_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$Map_bool_exp;

  TRes call({
    Input$MapArea_bool_exp? MapAreas,
    Input$MapArea_aggregate_bool_exp? MapAreas_aggregate,
    Input$Organization_bool_exp? Organization,
    List<Input$Map_bool_exp>? $_and,
    Input$Map_bool_exp? $_not,
    List<Input$Map_bool_exp>? $_or,
    Input$String_comparison_exp? belongingOrganization,
    Input$String_comparison_exp? id,
    Input$String_comparison_exp? name,
  });
  CopyWith$Input$MapArea_bool_exp<TRes> get MapAreas;
  CopyWith$Input$MapArea_aggregate_bool_exp<TRes> get MapAreas_aggregate;
  CopyWith$Input$Organization_bool_exp<TRes> get Organization;
  TRes $_and(
      Iterable<Input$Map_bool_exp>? Function(
              Iterable<CopyWith$Input$Map_bool_exp<Input$Map_bool_exp>>?)
          _fn);
  CopyWith$Input$Map_bool_exp<TRes> get $_not;
  TRes $_or(
      Iterable<Input$Map_bool_exp>? Function(
              Iterable<CopyWith$Input$Map_bool_exp<Input$Map_bool_exp>>?)
          _fn);
  CopyWith$Input$String_comparison_exp<TRes> get belongingOrganization;
  CopyWith$Input$String_comparison_exp<TRes> get id;
  CopyWith$Input$String_comparison_exp<TRes> get name;
}

class _CopyWithImpl$Input$Map_bool_exp<TRes>
    implements CopyWith$Input$Map_bool_exp<TRes> {
  _CopyWithImpl$Input$Map_bool_exp(
    this._instance,
    this._then,
  );

  final Input$Map_bool_exp _instance;

  final TRes Function(Input$Map_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? MapAreas = _undefined,
    Object? MapAreas_aggregate = _undefined,
    Object? Organization = _undefined,
    Object? $_and = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? belongingOrganization = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
  }) =>
      _then(Input$Map_bool_exp._({
        ..._instance._$data,
        if (MapAreas != _undefined)
          'MapAreas': (MapAreas as Input$MapArea_bool_exp?),
        if (MapAreas_aggregate != _undefined)
          'MapAreas_aggregate':
              (MapAreas_aggregate as Input$MapArea_aggregate_bool_exp?),
        if (Organization != _undefined)
          'Organization': (Organization as Input$Organization_bool_exp?),
        if ($_and != _undefined) '_and': ($_and as List<Input$Map_bool_exp>?),
        if ($_not != _undefined) '_not': ($_not as Input$Map_bool_exp?),
        if ($_or != _undefined) '_or': ($_or as List<Input$Map_bool_exp>?),
        if (belongingOrganization != _undefined)
          'belongingOrganization':
              (belongingOrganization as Input$String_comparison_exp?),
        if (id != _undefined) 'id': (id as Input$String_comparison_exp?),
        if (name != _undefined) 'name': (name as Input$String_comparison_exp?),
      }));
  CopyWith$Input$MapArea_bool_exp<TRes> get MapAreas {
    final local$MapAreas = _instance.MapAreas;
    return local$MapAreas == null
        ? CopyWith$Input$MapArea_bool_exp.stub(_then(_instance))
        : CopyWith$Input$MapArea_bool_exp(
            local$MapAreas, (e) => call(MapAreas: e));
  }

  CopyWith$Input$MapArea_aggregate_bool_exp<TRes> get MapAreas_aggregate {
    final local$MapAreas_aggregate = _instance.MapAreas_aggregate;
    return local$MapAreas_aggregate == null
        ? CopyWith$Input$MapArea_aggregate_bool_exp.stub(_then(_instance))
        : CopyWith$Input$MapArea_aggregate_bool_exp(
            local$MapAreas_aggregate, (e) => call(MapAreas_aggregate: e));
  }

  CopyWith$Input$Organization_bool_exp<TRes> get Organization {
    final local$Organization = _instance.Organization;
    return local$Organization == null
        ? CopyWith$Input$Organization_bool_exp.stub(_then(_instance))
        : CopyWith$Input$Organization_bool_exp(
            local$Organization, (e) => call(Organization: e));
  }

  TRes $_and(
          Iterable<Input$Map_bool_exp>? Function(
                  Iterable<CopyWith$Input$Map_bool_exp<Input$Map_bool_exp>>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and?.map((e) => CopyWith$Input$Map_bool_exp(
                e,
                (i) => i,
              )))?.toList());
  CopyWith$Input$Map_bool_exp<TRes> get $_not {
    final local$$_not = _instance.$_not;
    return local$$_not == null
        ? CopyWith$Input$Map_bool_exp.stub(_then(_instance))
        : CopyWith$Input$Map_bool_exp(local$$_not, (e) => call($_not: e));
  }

  TRes $_or(
          Iterable<Input$Map_bool_exp>? Function(
                  Iterable<CopyWith$Input$Map_bool_exp<Input$Map_bool_exp>>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map((e) => CopyWith$Input$Map_bool_exp(
                e,
                (i) => i,
              )))?.toList());
  CopyWith$Input$String_comparison_exp<TRes> get belongingOrganization {
    final local$belongingOrganization = _instance.belongingOrganization;
    return local$belongingOrganization == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$belongingOrganization, (e) => call(belongingOrganization: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get id {
    final local$id = _instance.id;
    return local$id == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(local$id, (e) => call(id: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get name {
    final local$name = _instance.name;
    return local$name == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$name, (e) => call(name: e));
  }
}

class _CopyWithStubImpl$Input$Map_bool_exp<TRes>
    implements CopyWith$Input$Map_bool_exp<TRes> {
  _CopyWithStubImpl$Input$Map_bool_exp(this._res);

  TRes _res;

  call({
    Input$MapArea_bool_exp? MapAreas,
    Input$MapArea_aggregate_bool_exp? MapAreas_aggregate,
    Input$Organization_bool_exp? Organization,
    List<Input$Map_bool_exp>? $_and,
    Input$Map_bool_exp? $_not,
    List<Input$Map_bool_exp>? $_or,
    Input$String_comparison_exp? belongingOrganization,
    Input$String_comparison_exp? id,
    Input$String_comparison_exp? name,
  }) =>
      _res;
  CopyWith$Input$MapArea_bool_exp<TRes> get MapAreas =>
      CopyWith$Input$MapArea_bool_exp.stub(_res);
  CopyWith$Input$MapArea_aggregate_bool_exp<TRes> get MapAreas_aggregate =>
      CopyWith$Input$MapArea_aggregate_bool_exp.stub(_res);
  CopyWith$Input$Organization_bool_exp<TRes> get Organization =>
      CopyWith$Input$Organization_bool_exp.stub(_res);
  $_and(_fn) => _res;
  CopyWith$Input$Map_bool_exp<TRes> get $_not =>
      CopyWith$Input$Map_bool_exp.stub(_res);
  $_or(_fn) => _res;
  CopyWith$Input$String_comparison_exp<TRes> get belongingOrganization =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get id =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get name =>
      CopyWith$Input$String_comparison_exp.stub(_res);
}

class Input$MapArea_bool_exp {
  factory Input$MapArea_bool_exp({
    Input$Map_bool_exp? $Map,
    Input$SoulWinningSessionGroup_bool_exp? SoulWinningSessionGroups,
    Input$SoulWinningSessionGroup_aggregate_bool_exp?
        SoulWinningSessionGroups_aggregate,
    List<Input$MapArea_bool_exp>? $_and,
    Input$MapArea_bool_exp? $_not,
    List<Input$MapArea_bool_exp>? $_or,
    Input$String_comparison_exp? belongingMap,
    Input$String_comparison_exp? id,
    Input$String_comparison_exp? name,
    Input$jsonb_comparison_exp? polygonGeoJson,
  }) =>
      Input$MapArea_bool_exp._({
        if ($Map != null) r'Map': $Map,
        if (SoulWinningSessionGroups != null)
          r'SoulWinningSessionGroups': SoulWinningSessionGroups,
        if (SoulWinningSessionGroups_aggregate != null)
          r'SoulWinningSessionGroups_aggregate':
              SoulWinningSessionGroups_aggregate,
        if ($_and != null) r'_and': $_and,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if (belongingMap != null) r'belongingMap': belongingMap,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
        if (polygonGeoJson != null) r'polygonGeoJson': polygonGeoJson,
      });

  Input$MapArea_bool_exp._(this._$data);

  factory Input$MapArea_bool_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Map')) {
      final l$$Map = data['Map'];
      result$data['Map'] = l$$Map == null
          ? null
          : Input$Map_bool_exp.fromJson((l$$Map as Map<String, dynamic>));
    }
    if (data.containsKey('SoulWinningSessionGroups')) {
      final l$SoulWinningSessionGroups = data['SoulWinningSessionGroups'];
      result$data['SoulWinningSessionGroups'] =
          l$SoulWinningSessionGroups == null
              ? null
              : Input$SoulWinningSessionGroup_bool_exp.fromJson(
                  (l$SoulWinningSessionGroups as Map<String, dynamic>));
    }
    if (data.containsKey('SoulWinningSessionGroups_aggregate')) {
      final l$SoulWinningSessionGroups_aggregate =
          data['SoulWinningSessionGroups_aggregate'];
      result$data['SoulWinningSessionGroups_aggregate'] =
          l$SoulWinningSessionGroups_aggregate == null
              ? null
              : Input$SoulWinningSessionGroup_aggregate_bool_exp.fromJson(
                  (l$SoulWinningSessionGroups_aggregate
                      as Map<String, dynamic>));
    }
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) =>
              Input$MapArea_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = l$$_not == null
          ? null
          : Input$MapArea_bool_exp.fromJson((l$$_not as Map<String, dynamic>));
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) =>
              Input$MapArea_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('belongingMap')) {
      final l$belongingMap = data['belongingMap'];
      result$data['belongingMap'] = l$belongingMap == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$belongingMap as Map<String, dynamic>));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$id as Map<String, dynamic>));
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] = l$name == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$name as Map<String, dynamic>));
    }
    if (data.containsKey('polygonGeoJson')) {
      final l$polygonGeoJson = data['polygonGeoJson'];
      result$data['polygonGeoJson'] = l$polygonGeoJson == null
          ? null
          : Input$jsonb_comparison_exp.fromJson(
              (l$polygonGeoJson as Map<String, dynamic>));
    }
    return Input$MapArea_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$Map_bool_exp? get $Map => (_$data['Map'] as Input$Map_bool_exp?);
  Input$SoulWinningSessionGroup_bool_exp? get SoulWinningSessionGroups =>
      (_$data['SoulWinningSessionGroups']
          as Input$SoulWinningSessionGroup_bool_exp?);
  Input$SoulWinningSessionGroup_aggregate_bool_exp?
      get SoulWinningSessionGroups_aggregate =>
          (_$data['SoulWinningSessionGroups_aggregate']
              as Input$SoulWinningSessionGroup_aggregate_bool_exp?);
  List<Input$MapArea_bool_exp>? get $_and =>
      (_$data['_and'] as List<Input$MapArea_bool_exp>?);
  Input$MapArea_bool_exp? get $_not =>
      (_$data['_not'] as Input$MapArea_bool_exp?);
  List<Input$MapArea_bool_exp>? get $_or =>
      (_$data['_or'] as List<Input$MapArea_bool_exp>?);
  Input$String_comparison_exp? get belongingMap =>
      (_$data['belongingMap'] as Input$String_comparison_exp?);
  Input$String_comparison_exp? get id =>
      (_$data['id'] as Input$String_comparison_exp?);
  Input$String_comparison_exp? get name =>
      (_$data['name'] as Input$String_comparison_exp?);
  Input$jsonb_comparison_exp? get polygonGeoJson =>
      (_$data['polygonGeoJson'] as Input$jsonb_comparison_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Map')) {
      final l$$Map = $Map;
      result$data['Map'] = l$$Map?.toJson();
    }
    if (_$data.containsKey('SoulWinningSessionGroups')) {
      final l$SoulWinningSessionGroups = SoulWinningSessionGroups;
      result$data['SoulWinningSessionGroups'] =
          l$SoulWinningSessionGroups?.toJson();
    }
    if (_$data.containsKey('SoulWinningSessionGroups_aggregate')) {
      final l$SoulWinningSessionGroups_aggregate =
          SoulWinningSessionGroups_aggregate;
      result$data['SoulWinningSessionGroups_aggregate'] =
          l$SoulWinningSessionGroups_aggregate?.toJson();
    }
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.toJson();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('belongingMap')) {
      final l$belongingMap = belongingMap;
      result$data['belongingMap'] = l$belongingMap?.toJson();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id?.toJson();
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] = l$name?.toJson();
    }
    if (_$data.containsKey('polygonGeoJson')) {
      final l$polygonGeoJson = polygonGeoJson;
      result$data['polygonGeoJson'] = l$polygonGeoJson?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$MapArea_bool_exp<Input$MapArea_bool_exp> get copyWith =>
      CopyWith$Input$MapArea_bool_exp(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$MapArea_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$Map = $Map;
    final lOther$$Map = other.$Map;
    if (_$data.containsKey('Map') != other._$data.containsKey('Map')) {
      return false;
    }
    if (l$$Map != lOther$$Map) {
      return false;
    }
    final l$SoulWinningSessionGroups = SoulWinningSessionGroups;
    final lOther$SoulWinningSessionGroups = other.SoulWinningSessionGroups;
    if (_$data.containsKey('SoulWinningSessionGroups') !=
        other._$data.containsKey('SoulWinningSessionGroups')) {
      return false;
    }
    if (l$SoulWinningSessionGroups != lOther$SoulWinningSessionGroups) {
      return false;
    }
    final l$SoulWinningSessionGroups_aggregate =
        SoulWinningSessionGroups_aggregate;
    final lOther$SoulWinningSessionGroups_aggregate =
        other.SoulWinningSessionGroups_aggregate;
    if (_$data.containsKey('SoulWinningSessionGroups_aggregate') !=
        other._$data.containsKey('SoulWinningSessionGroups_aggregate')) {
      return false;
    }
    if (l$SoulWinningSessionGroups_aggregate !=
        lOther$SoulWinningSessionGroups_aggregate) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$belongingMap = belongingMap;
    final lOther$belongingMap = other.belongingMap;
    if (_$data.containsKey('belongingMap') !=
        other._$data.containsKey('belongingMap')) {
      return false;
    }
    if (l$belongingMap != lOther$belongingMap) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$polygonGeoJson = polygonGeoJson;
    final lOther$polygonGeoJson = other.polygonGeoJson;
    if (_$data.containsKey('polygonGeoJson') !=
        other._$data.containsKey('polygonGeoJson')) {
      return false;
    }
    if (l$polygonGeoJson != lOther$polygonGeoJson) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$Map = $Map;
    final l$SoulWinningSessionGroups = SoulWinningSessionGroups;
    final l$SoulWinningSessionGroups_aggregate =
        SoulWinningSessionGroups_aggregate;
    final l$$_and = $_and;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$belongingMap = belongingMap;
    final l$id = id;
    final l$name = name;
    final l$polygonGeoJson = polygonGeoJson;
    return Object.hashAll([
      _$data.containsKey('Map') ? l$$Map : const {},
      _$data.containsKey('SoulWinningSessionGroups')
          ? l$SoulWinningSessionGroups
          : const {},
      _$data.containsKey('SoulWinningSessionGroups_aggregate')
          ? l$SoulWinningSessionGroups_aggregate
          : const {},
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_not') ? l$$_not : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('belongingMap') ? l$belongingMap : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('polygonGeoJson') ? l$polygonGeoJson : const {},
    ]);
  }
}

abstract class CopyWith$Input$MapArea_bool_exp<TRes> {
  factory CopyWith$Input$MapArea_bool_exp(
    Input$MapArea_bool_exp instance,
    TRes Function(Input$MapArea_bool_exp) then,
  ) = _CopyWithImpl$Input$MapArea_bool_exp;

  factory CopyWith$Input$MapArea_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$MapArea_bool_exp;

  TRes call({
    Input$Map_bool_exp? $Map,
    Input$SoulWinningSessionGroup_bool_exp? SoulWinningSessionGroups,
    Input$SoulWinningSessionGroup_aggregate_bool_exp?
        SoulWinningSessionGroups_aggregate,
    List<Input$MapArea_bool_exp>? $_and,
    Input$MapArea_bool_exp? $_not,
    List<Input$MapArea_bool_exp>? $_or,
    Input$String_comparison_exp? belongingMap,
    Input$String_comparison_exp? id,
    Input$String_comparison_exp? name,
    Input$jsonb_comparison_exp? polygonGeoJson,
  });
  CopyWith$Input$Map_bool_exp<TRes> get $Map;
  CopyWith$Input$SoulWinningSessionGroup_bool_exp<TRes>
      get SoulWinningSessionGroups;
  CopyWith$Input$SoulWinningSessionGroup_aggregate_bool_exp<TRes>
      get SoulWinningSessionGroups_aggregate;
  TRes $_and(
      Iterable<Input$MapArea_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$MapArea_bool_exp<Input$MapArea_bool_exp>>?)
          _fn);
  CopyWith$Input$MapArea_bool_exp<TRes> get $_not;
  TRes $_or(
      Iterable<Input$MapArea_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$MapArea_bool_exp<Input$MapArea_bool_exp>>?)
          _fn);
  CopyWith$Input$String_comparison_exp<TRes> get belongingMap;
  CopyWith$Input$String_comparison_exp<TRes> get id;
  CopyWith$Input$String_comparison_exp<TRes> get name;
  CopyWith$Input$jsonb_comparison_exp<TRes> get polygonGeoJson;
}

class _CopyWithImpl$Input$MapArea_bool_exp<TRes>
    implements CopyWith$Input$MapArea_bool_exp<TRes> {
  _CopyWithImpl$Input$MapArea_bool_exp(
    this._instance,
    this._then,
  );

  final Input$MapArea_bool_exp _instance;

  final TRes Function(Input$MapArea_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $Map = _undefined,
    Object? SoulWinningSessionGroups = _undefined,
    Object? SoulWinningSessionGroups_aggregate = _undefined,
    Object? $_and = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? belongingMap = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
    Object? polygonGeoJson = _undefined,
  }) =>
      _then(Input$MapArea_bool_exp._({
        ..._instance._$data,
        if ($Map != _undefined) 'Map': ($Map as Input$Map_bool_exp?),
        if (SoulWinningSessionGroups != _undefined)
          'SoulWinningSessionGroups': (SoulWinningSessionGroups
              as Input$SoulWinningSessionGroup_bool_exp?),
        if (SoulWinningSessionGroups_aggregate != _undefined)
          'SoulWinningSessionGroups_aggregate':
              (SoulWinningSessionGroups_aggregate
                  as Input$SoulWinningSessionGroup_aggregate_bool_exp?),
        if ($_and != _undefined)
          '_and': ($_and as List<Input$MapArea_bool_exp>?),
        if ($_not != _undefined) '_not': ($_not as Input$MapArea_bool_exp?),
        if ($_or != _undefined) '_or': ($_or as List<Input$MapArea_bool_exp>?),
        if (belongingMap != _undefined)
          'belongingMap': (belongingMap as Input$String_comparison_exp?),
        if (id != _undefined) 'id': (id as Input$String_comparison_exp?),
        if (name != _undefined) 'name': (name as Input$String_comparison_exp?),
        if (polygonGeoJson != _undefined)
          'polygonGeoJson': (polygonGeoJson as Input$jsonb_comparison_exp?),
      }));
  CopyWith$Input$Map_bool_exp<TRes> get $Map {
    final local$$Map = _instance.$Map;
    return local$$Map == null
        ? CopyWith$Input$Map_bool_exp.stub(_then(_instance))
        : CopyWith$Input$Map_bool_exp(local$$Map, (e) => call($Map: e));
  }

  CopyWith$Input$SoulWinningSessionGroup_bool_exp<TRes>
      get SoulWinningSessionGroups {
    final local$SoulWinningSessionGroups = _instance.SoulWinningSessionGroups;
    return local$SoulWinningSessionGroups == null
        ? CopyWith$Input$SoulWinningSessionGroup_bool_exp.stub(_then(_instance))
        : CopyWith$Input$SoulWinningSessionGroup_bool_exp(
            local$SoulWinningSessionGroups,
            (e) => call(SoulWinningSessionGroups: e));
  }

  CopyWith$Input$SoulWinningSessionGroup_aggregate_bool_exp<TRes>
      get SoulWinningSessionGroups_aggregate {
    final local$SoulWinningSessionGroups_aggregate =
        _instance.SoulWinningSessionGroups_aggregate;
    return local$SoulWinningSessionGroups_aggregate == null
        ? CopyWith$Input$SoulWinningSessionGroup_aggregate_bool_exp.stub(
            _then(_instance))
        : CopyWith$Input$SoulWinningSessionGroup_aggregate_bool_exp(
            local$SoulWinningSessionGroups_aggregate,
            (e) => call(SoulWinningSessionGroups_aggregate: e));
  }

  TRes $_and(
          Iterable<Input$MapArea_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$MapArea_bool_exp<Input$MapArea_bool_exp>>?)
              _fn) =>
      call(
          $_and:
              _fn(_instance.$_and?.map((e) => CopyWith$Input$MapArea_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());
  CopyWith$Input$MapArea_bool_exp<TRes> get $_not {
    final local$$_not = _instance.$_not;
    return local$$_not == null
        ? CopyWith$Input$MapArea_bool_exp.stub(_then(_instance))
        : CopyWith$Input$MapArea_bool_exp(local$$_not, (e) => call($_not: e));
  }

  TRes $_or(
          Iterable<Input$MapArea_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$MapArea_bool_exp<Input$MapArea_bool_exp>>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map((e) => CopyWith$Input$MapArea_bool_exp(
                e,
                (i) => i,
              )))?.toList());
  CopyWith$Input$String_comparison_exp<TRes> get belongingMap {
    final local$belongingMap = _instance.belongingMap;
    return local$belongingMap == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$belongingMap, (e) => call(belongingMap: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get id {
    final local$id = _instance.id;
    return local$id == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(local$id, (e) => call(id: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get name {
    final local$name = _instance.name;
    return local$name == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$name, (e) => call(name: e));
  }

  CopyWith$Input$jsonb_comparison_exp<TRes> get polygonGeoJson {
    final local$polygonGeoJson = _instance.polygonGeoJson;
    return local$polygonGeoJson == null
        ? CopyWith$Input$jsonb_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$jsonb_comparison_exp(
            local$polygonGeoJson, (e) => call(polygonGeoJson: e));
  }
}

class _CopyWithStubImpl$Input$MapArea_bool_exp<TRes>
    implements CopyWith$Input$MapArea_bool_exp<TRes> {
  _CopyWithStubImpl$Input$MapArea_bool_exp(this._res);

  TRes _res;

  call({
    Input$Map_bool_exp? $Map,
    Input$SoulWinningSessionGroup_bool_exp? SoulWinningSessionGroups,
    Input$SoulWinningSessionGroup_aggregate_bool_exp?
        SoulWinningSessionGroups_aggregate,
    List<Input$MapArea_bool_exp>? $_and,
    Input$MapArea_bool_exp? $_not,
    List<Input$MapArea_bool_exp>? $_or,
    Input$String_comparison_exp? belongingMap,
    Input$String_comparison_exp? id,
    Input$String_comparison_exp? name,
    Input$jsonb_comparison_exp? polygonGeoJson,
  }) =>
      _res;
  CopyWith$Input$Map_bool_exp<TRes> get $Map =>
      CopyWith$Input$Map_bool_exp.stub(_res);
  CopyWith$Input$SoulWinningSessionGroup_bool_exp<TRes>
      get SoulWinningSessionGroups =>
          CopyWith$Input$SoulWinningSessionGroup_bool_exp.stub(_res);
  CopyWith$Input$SoulWinningSessionGroup_aggregate_bool_exp<TRes>
      get SoulWinningSessionGroups_aggregate =>
          CopyWith$Input$SoulWinningSessionGroup_aggregate_bool_exp.stub(_res);
  $_and(_fn) => _res;
  CopyWith$Input$MapArea_bool_exp<TRes> get $_not =>
      CopyWith$Input$MapArea_bool_exp.stub(_res);
  $_or(_fn) => _res;
  CopyWith$Input$String_comparison_exp<TRes> get belongingMap =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get id =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get name =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$jsonb_comparison_exp<TRes> get polygonGeoJson =>
      CopyWith$Input$jsonb_comparison_exp.stub(_res);
}

class Input$Organization_bool_exp {
  factory Input$Organization_bool_exp({
    Input$Event_bool_exp? Events,
    Input$Event_aggregate_bool_exp? Events_aggregate,
    Input$Map_bool_exp? Maps,
    Input$Map_aggregate_bool_exp? Maps_aggregate,
    Input$_Organization_adminsOfOrganization_bool_exp?
        $_Organization_adminsOfOrganizations,
    Input$_Organization_adminsOfOrganization_aggregate_bool_exp?
        $_Organization_adminsOfOrganizations_aggregate,
    Input$_Organization_membersInOrganization_bool_exp?
        $_Organization_membersInOrganizations,
    Input$_Organization_membersInOrganization_aggregate_bool_exp?
        $_Organization_membersInOrganizations_aggregate,
    List<Input$Organization_bool_exp>? $_and,
    Input$Organization_bool_exp? $_not,
    List<Input$Organization_bool_exp>? $_or,
    Input$String_comparison_exp? id,
    Input$String_comparison_exp? name,
    Input$OrganizationTypeType_comparison_exp? type,
  }) =>
      Input$Organization_bool_exp._({
        if (Events != null) r'Events': Events,
        if (Events_aggregate != null) r'Events_aggregate': Events_aggregate,
        if (Maps != null) r'Maps': Maps,
        if (Maps_aggregate != null) r'Maps_aggregate': Maps_aggregate,
        if ($_Organization_adminsOfOrganizations != null)
          r'_Organization_adminsOfOrganizations':
              $_Organization_adminsOfOrganizations,
        if ($_Organization_adminsOfOrganizations_aggregate != null)
          r'_Organization_adminsOfOrganizations_aggregate':
              $_Organization_adminsOfOrganizations_aggregate,
        if ($_Organization_membersInOrganizations != null)
          r'_Organization_membersInOrganizations':
              $_Organization_membersInOrganizations,
        if ($_Organization_membersInOrganizations_aggregate != null)
          r'_Organization_membersInOrganizations_aggregate':
              $_Organization_membersInOrganizations_aggregate,
        if ($_and != null) r'_and': $_and,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
        if (type != null) r'type': type,
      });

  Input$Organization_bool_exp._(this._$data);

  factory Input$Organization_bool_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Events')) {
      final l$Events = data['Events'];
      result$data['Events'] = l$Events == null
          ? null
          : Input$Event_bool_exp.fromJson((l$Events as Map<String, dynamic>));
    }
    if (data.containsKey('Events_aggregate')) {
      final l$Events_aggregate = data['Events_aggregate'];
      result$data['Events_aggregate'] = l$Events_aggregate == null
          ? null
          : Input$Event_aggregate_bool_exp.fromJson(
              (l$Events_aggregate as Map<String, dynamic>));
    }
    if (data.containsKey('Maps')) {
      final l$Maps = data['Maps'];
      result$data['Maps'] = l$Maps == null
          ? null
          : Input$Map_bool_exp.fromJson((l$Maps as Map<String, dynamic>));
    }
    if (data.containsKey('Maps_aggregate')) {
      final l$Maps_aggregate = data['Maps_aggregate'];
      result$data['Maps_aggregate'] = l$Maps_aggregate == null
          ? null
          : Input$Map_aggregate_bool_exp.fromJson(
              (l$Maps_aggregate as Map<String, dynamic>));
    }
    if (data.containsKey('_Organization_adminsOfOrganizations')) {
      final l$$_Organization_adminsOfOrganizations =
          data['_Organization_adminsOfOrganizations'];
      result$data['_Organization_adminsOfOrganizations'] =
          l$$_Organization_adminsOfOrganizations == null
              ? null
              : Input$_Organization_adminsOfOrganization_bool_exp.fromJson(
                  (l$$_Organization_adminsOfOrganizations
                      as Map<String, dynamic>));
    }
    if (data.containsKey('_Organization_adminsOfOrganizations_aggregate')) {
      final l$$_Organization_adminsOfOrganizations_aggregate =
          data['_Organization_adminsOfOrganizations_aggregate'];
      result$data['_Organization_adminsOfOrganizations_aggregate'] =
          l$$_Organization_adminsOfOrganizations_aggregate == null
              ? null
              : Input$_Organization_adminsOfOrganization_aggregate_bool_exp
                  .fromJson((l$$_Organization_adminsOfOrganizations_aggregate
                      as Map<String, dynamic>));
    }
    if (data.containsKey('_Organization_membersInOrganizations')) {
      final l$$_Organization_membersInOrganizations =
          data['_Organization_membersInOrganizations'];
      result$data['_Organization_membersInOrganizations'] =
          l$$_Organization_membersInOrganizations == null
              ? null
              : Input$_Organization_membersInOrganization_bool_exp.fromJson(
                  (l$$_Organization_membersInOrganizations
                      as Map<String, dynamic>));
    }
    if (data.containsKey('_Organization_membersInOrganizations_aggregate')) {
      final l$$_Organization_membersInOrganizations_aggregate =
          data['_Organization_membersInOrganizations_aggregate'];
      result$data['_Organization_membersInOrganizations_aggregate'] =
          l$$_Organization_membersInOrganizations_aggregate == null
              ? null
              : Input$_Organization_membersInOrganization_aggregate_bool_exp
                  .fromJson((l$$_Organization_membersInOrganizations_aggregate
                      as Map<String, dynamic>));
    }
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) =>
              Input$Organization_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = l$$_not == null
          ? null
          : Input$Organization_bool_exp.fromJson(
              (l$$_not as Map<String, dynamic>));
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) =>
              Input$Organization_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$id as Map<String, dynamic>));
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] = l$name == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$name as Map<String, dynamic>));
    }
    if (data.containsKey('type')) {
      final l$type = data['type'];
      result$data['type'] = l$type == null
          ? null
          : Input$OrganizationTypeType_comparison_exp.fromJson(
              (l$type as Map<String, dynamic>));
    }
    return Input$Organization_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$Event_bool_exp? get Events =>
      (_$data['Events'] as Input$Event_bool_exp?);
  Input$Event_aggregate_bool_exp? get Events_aggregate =>
      (_$data['Events_aggregate'] as Input$Event_aggregate_bool_exp?);
  Input$Map_bool_exp? get Maps => (_$data['Maps'] as Input$Map_bool_exp?);
  Input$Map_aggregate_bool_exp? get Maps_aggregate =>
      (_$data['Maps_aggregate'] as Input$Map_aggregate_bool_exp?);
  Input$_Organization_adminsOfOrganization_bool_exp?
      get $_Organization_adminsOfOrganizations =>
          (_$data['_Organization_adminsOfOrganizations']
              as Input$_Organization_adminsOfOrganization_bool_exp?);
  Input$_Organization_adminsOfOrganization_aggregate_bool_exp?
      get $_Organization_adminsOfOrganizations_aggregate =>
          (_$data['_Organization_adminsOfOrganizations_aggregate']
              as Input$_Organization_adminsOfOrganization_aggregate_bool_exp?);
  Input$_Organization_membersInOrganization_bool_exp?
      get $_Organization_membersInOrganizations =>
          (_$data['_Organization_membersInOrganizations']
              as Input$_Organization_membersInOrganization_bool_exp?);
  Input$_Organization_membersInOrganization_aggregate_bool_exp?
      get $_Organization_membersInOrganizations_aggregate =>
          (_$data['_Organization_membersInOrganizations_aggregate']
              as Input$_Organization_membersInOrganization_aggregate_bool_exp?);
  List<Input$Organization_bool_exp>? get $_and =>
      (_$data['_and'] as List<Input$Organization_bool_exp>?);
  Input$Organization_bool_exp? get $_not =>
      (_$data['_not'] as Input$Organization_bool_exp?);
  List<Input$Organization_bool_exp>? get $_or =>
      (_$data['_or'] as List<Input$Organization_bool_exp>?);
  Input$String_comparison_exp? get id =>
      (_$data['id'] as Input$String_comparison_exp?);
  Input$String_comparison_exp? get name =>
      (_$data['name'] as Input$String_comparison_exp?);
  Input$OrganizationTypeType_comparison_exp? get type =>
      (_$data['type'] as Input$OrganizationTypeType_comparison_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Events')) {
      final l$Events = Events;
      result$data['Events'] = l$Events?.toJson();
    }
    if (_$data.containsKey('Events_aggregate')) {
      final l$Events_aggregate = Events_aggregate;
      result$data['Events_aggregate'] = l$Events_aggregate?.toJson();
    }
    if (_$data.containsKey('Maps')) {
      final l$Maps = Maps;
      result$data['Maps'] = l$Maps?.toJson();
    }
    if (_$data.containsKey('Maps_aggregate')) {
      final l$Maps_aggregate = Maps_aggregate;
      result$data['Maps_aggregate'] = l$Maps_aggregate?.toJson();
    }
    if (_$data.containsKey('_Organization_adminsOfOrganizations')) {
      final l$$_Organization_adminsOfOrganizations =
          $_Organization_adminsOfOrganizations;
      result$data['_Organization_adminsOfOrganizations'] =
          l$$_Organization_adminsOfOrganizations?.toJson();
    }
    if (_$data.containsKey('_Organization_adminsOfOrganizations_aggregate')) {
      final l$$_Organization_adminsOfOrganizations_aggregate =
          $_Organization_adminsOfOrganizations_aggregate;
      result$data['_Organization_adminsOfOrganizations_aggregate'] =
          l$$_Organization_adminsOfOrganizations_aggregate?.toJson();
    }
    if (_$data.containsKey('_Organization_membersInOrganizations')) {
      final l$$_Organization_membersInOrganizations =
          $_Organization_membersInOrganizations;
      result$data['_Organization_membersInOrganizations'] =
          l$$_Organization_membersInOrganizations?.toJson();
    }
    if (_$data.containsKey('_Organization_membersInOrganizations_aggregate')) {
      final l$$_Organization_membersInOrganizations_aggregate =
          $_Organization_membersInOrganizations_aggregate;
      result$data['_Organization_membersInOrganizations_aggregate'] =
          l$$_Organization_membersInOrganizations_aggregate?.toJson();
    }
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.toJson();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id?.toJson();
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] = l$name?.toJson();
    }
    if (_$data.containsKey('type')) {
      final l$type = type;
      result$data['type'] = l$type?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$Organization_bool_exp<Input$Organization_bool_exp>
      get copyWith => CopyWith$Input$Organization_bool_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Organization_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Events = Events;
    final lOther$Events = other.Events;
    if (_$data.containsKey('Events') != other._$data.containsKey('Events')) {
      return false;
    }
    if (l$Events != lOther$Events) {
      return false;
    }
    final l$Events_aggregate = Events_aggregate;
    final lOther$Events_aggregate = other.Events_aggregate;
    if (_$data.containsKey('Events_aggregate') !=
        other._$data.containsKey('Events_aggregate')) {
      return false;
    }
    if (l$Events_aggregate != lOther$Events_aggregate) {
      return false;
    }
    final l$Maps = Maps;
    final lOther$Maps = other.Maps;
    if (_$data.containsKey('Maps') != other._$data.containsKey('Maps')) {
      return false;
    }
    if (l$Maps != lOther$Maps) {
      return false;
    }
    final l$Maps_aggregate = Maps_aggregate;
    final lOther$Maps_aggregate = other.Maps_aggregate;
    if (_$data.containsKey('Maps_aggregate') !=
        other._$data.containsKey('Maps_aggregate')) {
      return false;
    }
    if (l$Maps_aggregate != lOther$Maps_aggregate) {
      return false;
    }
    final l$$_Organization_adminsOfOrganizations =
        $_Organization_adminsOfOrganizations;
    final lOther$$_Organization_adminsOfOrganizations =
        other.$_Organization_adminsOfOrganizations;
    if (_$data.containsKey('_Organization_adminsOfOrganizations') !=
        other._$data.containsKey('_Organization_adminsOfOrganizations')) {
      return false;
    }
    if (l$$_Organization_adminsOfOrganizations !=
        lOther$$_Organization_adminsOfOrganizations) {
      return false;
    }
    final l$$_Organization_adminsOfOrganizations_aggregate =
        $_Organization_adminsOfOrganizations_aggregate;
    final lOther$$_Organization_adminsOfOrganizations_aggregate =
        other.$_Organization_adminsOfOrganizations_aggregate;
    if (_$data.containsKey('_Organization_adminsOfOrganizations_aggregate') !=
        other._$data
            .containsKey('_Organization_adminsOfOrganizations_aggregate')) {
      return false;
    }
    if (l$$_Organization_adminsOfOrganizations_aggregate !=
        lOther$$_Organization_adminsOfOrganizations_aggregate) {
      return false;
    }
    final l$$_Organization_membersInOrganizations =
        $_Organization_membersInOrganizations;
    final lOther$$_Organization_membersInOrganizations =
        other.$_Organization_membersInOrganizations;
    if (_$data.containsKey('_Organization_membersInOrganizations') !=
        other._$data.containsKey('_Organization_membersInOrganizations')) {
      return false;
    }
    if (l$$_Organization_membersInOrganizations !=
        lOther$$_Organization_membersInOrganizations) {
      return false;
    }
    final l$$_Organization_membersInOrganizations_aggregate =
        $_Organization_membersInOrganizations_aggregate;
    final lOther$$_Organization_membersInOrganizations_aggregate =
        other.$_Organization_membersInOrganizations_aggregate;
    if (_$data.containsKey('_Organization_membersInOrganizations_aggregate') !=
        other._$data
            .containsKey('_Organization_membersInOrganizations_aggregate')) {
      return false;
    }
    if (l$$_Organization_membersInOrganizations_aggregate !=
        lOther$$_Organization_membersInOrganizations_aggregate) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$type = type;
    final lOther$type = other.type;
    if (_$data.containsKey('type') != other._$data.containsKey('type')) {
      return false;
    }
    if (l$type != lOther$type) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Events = Events;
    final l$Events_aggregate = Events_aggregate;
    final l$Maps = Maps;
    final l$Maps_aggregate = Maps_aggregate;
    final l$$_Organization_adminsOfOrganizations =
        $_Organization_adminsOfOrganizations;
    final l$$_Organization_adminsOfOrganizations_aggregate =
        $_Organization_adminsOfOrganizations_aggregate;
    final l$$_Organization_membersInOrganizations =
        $_Organization_membersInOrganizations;
    final l$$_Organization_membersInOrganizations_aggregate =
        $_Organization_membersInOrganizations_aggregate;
    final l$$_and = $_and;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$id = id;
    final l$name = name;
    final l$type = type;
    return Object.hashAll([
      _$data.containsKey('Events') ? l$Events : const {},
      _$data.containsKey('Events_aggregate') ? l$Events_aggregate : const {},
      _$data.containsKey('Maps') ? l$Maps : const {},
      _$data.containsKey('Maps_aggregate') ? l$Maps_aggregate : const {},
      _$data.containsKey('_Organization_adminsOfOrganizations')
          ? l$$_Organization_adminsOfOrganizations
          : const {},
      _$data.containsKey('_Organization_adminsOfOrganizations_aggregate')
          ? l$$_Organization_adminsOfOrganizations_aggregate
          : const {},
      _$data.containsKey('_Organization_membersInOrganizations')
          ? l$$_Organization_membersInOrganizations
          : const {},
      _$data.containsKey('_Organization_membersInOrganizations_aggregate')
          ? l$$_Organization_membersInOrganizations_aggregate
          : const {},
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_not') ? l$$_not : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('type') ? l$type : const {},
    ]);
  }
}

abstract class CopyWith$Input$Organization_bool_exp<TRes> {
  factory CopyWith$Input$Organization_bool_exp(
    Input$Organization_bool_exp instance,
    TRes Function(Input$Organization_bool_exp) then,
  ) = _CopyWithImpl$Input$Organization_bool_exp;

  factory CopyWith$Input$Organization_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$Organization_bool_exp;

  TRes call({
    Input$Event_bool_exp? Events,
    Input$Event_aggregate_bool_exp? Events_aggregate,
    Input$Map_bool_exp? Maps,
    Input$Map_aggregate_bool_exp? Maps_aggregate,
    Input$_Organization_adminsOfOrganization_bool_exp?
        $_Organization_adminsOfOrganizations,
    Input$_Organization_adminsOfOrganization_aggregate_bool_exp?
        $_Organization_adminsOfOrganizations_aggregate,
    Input$_Organization_membersInOrganization_bool_exp?
        $_Organization_membersInOrganizations,
    Input$_Organization_membersInOrganization_aggregate_bool_exp?
        $_Organization_membersInOrganizations_aggregate,
    List<Input$Organization_bool_exp>? $_and,
    Input$Organization_bool_exp? $_not,
    List<Input$Organization_bool_exp>? $_or,
    Input$String_comparison_exp? id,
    Input$String_comparison_exp? name,
    Input$OrganizationTypeType_comparison_exp? type,
  });
  CopyWith$Input$Event_bool_exp<TRes> get Events;
  CopyWith$Input$Event_aggregate_bool_exp<TRes> get Events_aggregate;
  CopyWith$Input$Map_bool_exp<TRes> get Maps;
  CopyWith$Input$Map_aggregate_bool_exp<TRes> get Maps_aggregate;
  CopyWith$Input$_Organization_adminsOfOrganization_bool_exp<TRes>
      get $_Organization_adminsOfOrganizations;
  CopyWith$Input$_Organization_adminsOfOrganization_aggregate_bool_exp<TRes>
      get $_Organization_adminsOfOrganizations_aggregate;
  CopyWith$Input$_Organization_membersInOrganization_bool_exp<TRes>
      get $_Organization_membersInOrganizations;
  CopyWith$Input$_Organization_membersInOrganization_aggregate_bool_exp<TRes>
      get $_Organization_membersInOrganizations_aggregate;
  TRes $_and(
      Iterable<Input$Organization_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$Organization_bool_exp<
                      Input$Organization_bool_exp>>?)
          _fn);
  CopyWith$Input$Organization_bool_exp<TRes> get $_not;
  TRes $_or(
      Iterable<Input$Organization_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$Organization_bool_exp<
                      Input$Organization_bool_exp>>?)
          _fn);
  CopyWith$Input$String_comparison_exp<TRes> get id;
  CopyWith$Input$String_comparison_exp<TRes> get name;
  CopyWith$Input$OrganizationTypeType_comparison_exp<TRes> get type;
}

class _CopyWithImpl$Input$Organization_bool_exp<TRes>
    implements CopyWith$Input$Organization_bool_exp<TRes> {
  _CopyWithImpl$Input$Organization_bool_exp(
    this._instance,
    this._then,
  );

  final Input$Organization_bool_exp _instance;

  final TRes Function(Input$Organization_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Events = _undefined,
    Object? Events_aggregate = _undefined,
    Object? Maps = _undefined,
    Object? Maps_aggregate = _undefined,
    Object? $_Organization_adminsOfOrganizations = _undefined,
    Object? $_Organization_adminsOfOrganizations_aggregate = _undefined,
    Object? $_Organization_membersInOrganizations = _undefined,
    Object? $_Organization_membersInOrganizations_aggregate = _undefined,
    Object? $_and = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
    Object? type = _undefined,
  }) =>
      _then(Input$Organization_bool_exp._({
        ..._instance._$data,
        if (Events != _undefined) 'Events': (Events as Input$Event_bool_exp?),
        if (Events_aggregate != _undefined)
          'Events_aggregate':
              (Events_aggregate as Input$Event_aggregate_bool_exp?),
        if (Maps != _undefined) 'Maps': (Maps as Input$Map_bool_exp?),
        if (Maps_aggregate != _undefined)
          'Maps_aggregate': (Maps_aggregate as Input$Map_aggregate_bool_exp?),
        if ($_Organization_adminsOfOrganizations != _undefined)
          '_Organization_adminsOfOrganizations':
              ($_Organization_adminsOfOrganizations
                  as Input$_Organization_adminsOfOrganization_bool_exp?),
        if ($_Organization_adminsOfOrganizations_aggregate != _undefined)
          '_Organization_adminsOfOrganizations_aggregate':
              ($_Organization_adminsOfOrganizations_aggregate
                  as Input$_Organization_adminsOfOrganization_aggregate_bool_exp?),
        if ($_Organization_membersInOrganizations != _undefined)
          '_Organization_membersInOrganizations':
              ($_Organization_membersInOrganizations
                  as Input$_Organization_membersInOrganization_bool_exp?),
        if ($_Organization_membersInOrganizations_aggregate != _undefined)
          '_Organization_membersInOrganizations_aggregate':
              ($_Organization_membersInOrganizations_aggregate
                  as Input$_Organization_membersInOrganization_aggregate_bool_exp?),
        if ($_and != _undefined)
          '_and': ($_and as List<Input$Organization_bool_exp>?),
        if ($_not != _undefined)
          '_not': ($_not as Input$Organization_bool_exp?),
        if ($_or != _undefined)
          '_or': ($_or as List<Input$Organization_bool_exp>?),
        if (id != _undefined) 'id': (id as Input$String_comparison_exp?),
        if (name != _undefined) 'name': (name as Input$String_comparison_exp?),
        if (type != _undefined)
          'type': (type as Input$OrganizationTypeType_comparison_exp?),
      }));
  CopyWith$Input$Event_bool_exp<TRes> get Events {
    final local$Events = _instance.Events;
    return local$Events == null
        ? CopyWith$Input$Event_bool_exp.stub(_then(_instance))
        : CopyWith$Input$Event_bool_exp(local$Events, (e) => call(Events: e));
  }

  CopyWith$Input$Event_aggregate_bool_exp<TRes> get Events_aggregate {
    final local$Events_aggregate = _instance.Events_aggregate;
    return local$Events_aggregate == null
        ? CopyWith$Input$Event_aggregate_bool_exp.stub(_then(_instance))
        : CopyWith$Input$Event_aggregate_bool_exp(
            local$Events_aggregate, (e) => call(Events_aggregate: e));
  }

  CopyWith$Input$Map_bool_exp<TRes> get Maps {
    final local$Maps = _instance.Maps;
    return local$Maps == null
        ? CopyWith$Input$Map_bool_exp.stub(_then(_instance))
        : CopyWith$Input$Map_bool_exp(local$Maps, (e) => call(Maps: e));
  }

  CopyWith$Input$Map_aggregate_bool_exp<TRes> get Maps_aggregate {
    final local$Maps_aggregate = _instance.Maps_aggregate;
    return local$Maps_aggregate == null
        ? CopyWith$Input$Map_aggregate_bool_exp.stub(_then(_instance))
        : CopyWith$Input$Map_aggregate_bool_exp(
            local$Maps_aggregate, (e) => call(Maps_aggregate: e));
  }

  CopyWith$Input$_Organization_adminsOfOrganization_bool_exp<TRes>
      get $_Organization_adminsOfOrganizations {
    final local$$_Organization_adminsOfOrganizations =
        _instance.$_Organization_adminsOfOrganizations;
    return local$$_Organization_adminsOfOrganizations == null
        ? CopyWith$Input$_Organization_adminsOfOrganization_bool_exp.stub(
            _then(_instance))
        : CopyWith$Input$_Organization_adminsOfOrganization_bool_exp(
            local$$_Organization_adminsOfOrganizations,
            (e) => call($_Organization_adminsOfOrganizations: e));
  }

  CopyWith$Input$_Organization_adminsOfOrganization_aggregate_bool_exp<TRes>
      get $_Organization_adminsOfOrganizations_aggregate {
    final local$$_Organization_adminsOfOrganizations_aggregate =
        _instance.$_Organization_adminsOfOrganizations_aggregate;
    return local$$_Organization_adminsOfOrganizations_aggregate == null
        ? CopyWith$Input$_Organization_adminsOfOrganization_aggregate_bool_exp
            .stub(_then(_instance))
        : CopyWith$Input$_Organization_adminsOfOrganization_aggregate_bool_exp(
            local$$_Organization_adminsOfOrganizations_aggregate,
            (e) => call($_Organization_adminsOfOrganizations_aggregate: e));
  }

  CopyWith$Input$_Organization_membersInOrganization_bool_exp<TRes>
      get $_Organization_membersInOrganizations {
    final local$$_Organization_membersInOrganizations =
        _instance.$_Organization_membersInOrganizations;
    return local$$_Organization_membersInOrganizations == null
        ? CopyWith$Input$_Organization_membersInOrganization_bool_exp.stub(
            _then(_instance))
        : CopyWith$Input$_Organization_membersInOrganization_bool_exp(
            local$$_Organization_membersInOrganizations,
            (e) => call($_Organization_membersInOrganizations: e));
  }

  CopyWith$Input$_Organization_membersInOrganization_aggregate_bool_exp<TRes>
      get $_Organization_membersInOrganizations_aggregate {
    final local$$_Organization_membersInOrganizations_aggregate =
        _instance.$_Organization_membersInOrganizations_aggregate;
    return local$$_Organization_membersInOrganizations_aggregate == null
        ? CopyWith$Input$_Organization_membersInOrganization_aggregate_bool_exp
            .stub(_then(_instance))
        : CopyWith$Input$_Organization_membersInOrganization_aggregate_bool_exp(
            local$$_Organization_membersInOrganizations_aggregate,
            (e) => call($_Organization_membersInOrganizations_aggregate: e));
  }

  TRes $_and(
          Iterable<Input$Organization_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$Organization_bool_exp<
                          Input$Organization_bool_exp>>?)
              _fn) =>
      call(
          $_and: _fn(
              _instance.$_and?.map((e) => CopyWith$Input$Organization_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());
  CopyWith$Input$Organization_bool_exp<TRes> get $_not {
    final local$$_not = _instance.$_not;
    return local$$_not == null
        ? CopyWith$Input$Organization_bool_exp.stub(_then(_instance))
        : CopyWith$Input$Organization_bool_exp(
            local$$_not, (e) => call($_not: e));
  }

  TRes $_or(
          Iterable<Input$Organization_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$Organization_bool_exp<
                          Input$Organization_bool_exp>>?)
              _fn) =>
      call(
          $_or: _fn(
              _instance.$_or?.map((e) => CopyWith$Input$Organization_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());
  CopyWith$Input$String_comparison_exp<TRes> get id {
    final local$id = _instance.id;
    return local$id == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(local$id, (e) => call(id: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get name {
    final local$name = _instance.name;
    return local$name == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$name, (e) => call(name: e));
  }

  CopyWith$Input$OrganizationTypeType_comparison_exp<TRes> get type {
    final local$type = _instance.type;
    return local$type == null
        ? CopyWith$Input$OrganizationTypeType_comparison_exp.stub(
            _then(_instance))
        : CopyWith$Input$OrganizationTypeType_comparison_exp(
            local$type, (e) => call(type: e));
  }
}

class _CopyWithStubImpl$Input$Organization_bool_exp<TRes>
    implements CopyWith$Input$Organization_bool_exp<TRes> {
  _CopyWithStubImpl$Input$Organization_bool_exp(this._res);

  TRes _res;

  call({
    Input$Event_bool_exp? Events,
    Input$Event_aggregate_bool_exp? Events_aggregate,
    Input$Map_bool_exp? Maps,
    Input$Map_aggregate_bool_exp? Maps_aggregate,
    Input$_Organization_adminsOfOrganization_bool_exp?
        $_Organization_adminsOfOrganizations,
    Input$_Organization_adminsOfOrganization_aggregate_bool_exp?
        $_Organization_adminsOfOrganizations_aggregate,
    Input$_Organization_membersInOrganization_bool_exp?
        $_Organization_membersInOrganizations,
    Input$_Organization_membersInOrganization_aggregate_bool_exp?
        $_Organization_membersInOrganizations_aggregate,
    List<Input$Organization_bool_exp>? $_and,
    Input$Organization_bool_exp? $_not,
    List<Input$Organization_bool_exp>? $_or,
    Input$String_comparison_exp? id,
    Input$String_comparison_exp? name,
    Input$OrganizationTypeType_comparison_exp? type,
  }) =>
      _res;
  CopyWith$Input$Event_bool_exp<TRes> get Events =>
      CopyWith$Input$Event_bool_exp.stub(_res);
  CopyWith$Input$Event_aggregate_bool_exp<TRes> get Events_aggregate =>
      CopyWith$Input$Event_aggregate_bool_exp.stub(_res);
  CopyWith$Input$Map_bool_exp<TRes> get Maps =>
      CopyWith$Input$Map_bool_exp.stub(_res);
  CopyWith$Input$Map_aggregate_bool_exp<TRes> get Maps_aggregate =>
      CopyWith$Input$Map_aggregate_bool_exp.stub(_res);
  CopyWith$Input$_Organization_adminsOfOrganization_bool_exp<TRes>
      get $_Organization_adminsOfOrganizations =>
          CopyWith$Input$_Organization_adminsOfOrganization_bool_exp.stub(_res);
  CopyWith$Input$_Organization_adminsOfOrganization_aggregate_bool_exp<TRes>
      get $_Organization_adminsOfOrganizations_aggregate =>
          CopyWith$Input$_Organization_adminsOfOrganization_aggregate_bool_exp
              .stub(_res);
  CopyWith$Input$_Organization_membersInOrganization_bool_exp<TRes>
      get $_Organization_membersInOrganizations =>
          CopyWith$Input$_Organization_membersInOrganization_bool_exp.stub(
              _res);
  CopyWith$Input$_Organization_membersInOrganization_aggregate_bool_exp<TRes>
      get $_Organization_membersInOrganizations_aggregate =>
          CopyWith$Input$_Organization_membersInOrganization_aggregate_bool_exp
              .stub(_res);
  $_and(_fn) => _res;
  CopyWith$Input$Organization_bool_exp<TRes> get $_not =>
      CopyWith$Input$Organization_bool_exp.stub(_res);
  $_or(_fn) => _res;
  CopyWith$Input$String_comparison_exp<TRes> get id =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get name =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$OrganizationTypeType_comparison_exp<TRes> get type =>
      CopyWith$Input$OrganizationTypeType_comparison_exp.stub(_res);
}

class Input$SavedPerson_bool_exp {
  factory Input$SavedPerson_bool_exp({
    Input$Encounter_bool_exp? Encounter,
    List<Input$SavedPerson_bool_exp>? $_and,
    Input$SavedPerson_bool_exp? $_not,
    List<Input$SavedPerson_bool_exp>? $_or,
    Input$String_comparison_exp? email,
    Input$String_comparison_exp? id,
    Input$String_comparison_exp? name,
    Input$String_comparison_exp? phone,
    Input$String_comparison_exp? savingEncounter,
  }) =>
      Input$SavedPerson_bool_exp._({
        if (Encounter != null) r'Encounter': Encounter,
        if ($_and != null) r'_and': $_and,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if (email != null) r'email': email,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
        if (phone != null) r'phone': phone,
        if (savingEncounter != null) r'savingEncounter': savingEncounter,
      });

  Input$SavedPerson_bool_exp._(this._$data);

  factory Input$SavedPerson_bool_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Encounter')) {
      final l$Encounter = data['Encounter'];
      result$data['Encounter'] = l$Encounter == null
          ? null
          : Input$Encounter_bool_exp.fromJson(
              (l$Encounter as Map<String, dynamic>));
    }
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) =>
              Input$SavedPerson_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = l$$_not == null
          ? null
          : Input$SavedPerson_bool_exp.fromJson(
              (l$$_not as Map<String, dynamic>));
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) =>
              Input$SavedPerson_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('email')) {
      final l$email = data['email'];
      result$data['email'] = l$email == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$email as Map<String, dynamic>));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$id as Map<String, dynamic>));
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] = l$name == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$name as Map<String, dynamic>));
    }
    if (data.containsKey('phone')) {
      final l$phone = data['phone'];
      result$data['phone'] = l$phone == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$phone as Map<String, dynamic>));
    }
    if (data.containsKey('savingEncounter')) {
      final l$savingEncounter = data['savingEncounter'];
      result$data['savingEncounter'] = l$savingEncounter == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$savingEncounter as Map<String, dynamic>));
    }
    return Input$SavedPerson_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$Encounter_bool_exp? get Encounter =>
      (_$data['Encounter'] as Input$Encounter_bool_exp?);
  List<Input$SavedPerson_bool_exp>? get $_and =>
      (_$data['_and'] as List<Input$SavedPerson_bool_exp>?);
  Input$SavedPerson_bool_exp? get $_not =>
      (_$data['_not'] as Input$SavedPerson_bool_exp?);
  List<Input$SavedPerson_bool_exp>? get $_or =>
      (_$data['_or'] as List<Input$SavedPerson_bool_exp>?);
  Input$String_comparison_exp? get email =>
      (_$data['email'] as Input$String_comparison_exp?);
  Input$String_comparison_exp? get id =>
      (_$data['id'] as Input$String_comparison_exp?);
  Input$String_comparison_exp? get name =>
      (_$data['name'] as Input$String_comparison_exp?);
  Input$String_comparison_exp? get phone =>
      (_$data['phone'] as Input$String_comparison_exp?);
  Input$String_comparison_exp? get savingEncounter =>
      (_$data['savingEncounter'] as Input$String_comparison_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Encounter')) {
      final l$Encounter = Encounter;
      result$data['Encounter'] = l$Encounter?.toJson();
    }
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.toJson();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('email')) {
      final l$email = email;
      result$data['email'] = l$email?.toJson();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id?.toJson();
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] = l$name?.toJson();
    }
    if (_$data.containsKey('phone')) {
      final l$phone = phone;
      result$data['phone'] = l$phone?.toJson();
    }
    if (_$data.containsKey('savingEncounter')) {
      final l$savingEncounter = savingEncounter;
      result$data['savingEncounter'] = l$savingEncounter?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$SavedPerson_bool_exp<Input$SavedPerson_bool_exp>
      get copyWith => CopyWith$Input$SavedPerson_bool_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SavedPerson_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Encounter = Encounter;
    final lOther$Encounter = other.Encounter;
    if (_$data.containsKey('Encounter') !=
        other._$data.containsKey('Encounter')) {
      return false;
    }
    if (l$Encounter != lOther$Encounter) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$email = email;
    final lOther$email = other.email;
    if (_$data.containsKey('email') != other._$data.containsKey('email')) {
      return false;
    }
    if (l$email != lOther$email) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$phone = phone;
    final lOther$phone = other.phone;
    if (_$data.containsKey('phone') != other._$data.containsKey('phone')) {
      return false;
    }
    if (l$phone != lOther$phone) {
      return false;
    }
    final l$savingEncounter = savingEncounter;
    final lOther$savingEncounter = other.savingEncounter;
    if (_$data.containsKey('savingEncounter') !=
        other._$data.containsKey('savingEncounter')) {
      return false;
    }
    if (l$savingEncounter != lOther$savingEncounter) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Encounter = Encounter;
    final l$$_and = $_and;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$email = email;
    final l$id = id;
    final l$name = name;
    final l$phone = phone;
    final l$savingEncounter = savingEncounter;
    return Object.hashAll([
      _$data.containsKey('Encounter') ? l$Encounter : const {},
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_not') ? l$$_not : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('email') ? l$email : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('phone') ? l$phone : const {},
      _$data.containsKey('savingEncounter') ? l$savingEncounter : const {},
    ]);
  }
}

abstract class CopyWith$Input$SavedPerson_bool_exp<TRes> {
  factory CopyWith$Input$SavedPerson_bool_exp(
    Input$SavedPerson_bool_exp instance,
    TRes Function(Input$SavedPerson_bool_exp) then,
  ) = _CopyWithImpl$Input$SavedPerson_bool_exp;

  factory CopyWith$Input$SavedPerson_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$SavedPerson_bool_exp;

  TRes call({
    Input$Encounter_bool_exp? Encounter,
    List<Input$SavedPerson_bool_exp>? $_and,
    Input$SavedPerson_bool_exp? $_not,
    List<Input$SavedPerson_bool_exp>? $_or,
    Input$String_comparison_exp? email,
    Input$String_comparison_exp? id,
    Input$String_comparison_exp? name,
    Input$String_comparison_exp? phone,
    Input$String_comparison_exp? savingEncounter,
  });
  CopyWith$Input$Encounter_bool_exp<TRes> get Encounter;
  TRes $_and(
      Iterable<Input$SavedPerson_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$SavedPerson_bool_exp<
                      Input$SavedPerson_bool_exp>>?)
          _fn);
  CopyWith$Input$SavedPerson_bool_exp<TRes> get $_not;
  TRes $_or(
      Iterable<Input$SavedPerson_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$SavedPerson_bool_exp<
                      Input$SavedPerson_bool_exp>>?)
          _fn);
  CopyWith$Input$String_comparison_exp<TRes> get email;
  CopyWith$Input$String_comparison_exp<TRes> get id;
  CopyWith$Input$String_comparison_exp<TRes> get name;
  CopyWith$Input$String_comparison_exp<TRes> get phone;
  CopyWith$Input$String_comparison_exp<TRes> get savingEncounter;
}

class _CopyWithImpl$Input$SavedPerson_bool_exp<TRes>
    implements CopyWith$Input$SavedPerson_bool_exp<TRes> {
  _CopyWithImpl$Input$SavedPerson_bool_exp(
    this._instance,
    this._then,
  );

  final Input$SavedPerson_bool_exp _instance;

  final TRes Function(Input$SavedPerson_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Encounter = _undefined,
    Object? $_and = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? email = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
    Object? phone = _undefined,
    Object? savingEncounter = _undefined,
  }) =>
      _then(Input$SavedPerson_bool_exp._({
        ..._instance._$data,
        if (Encounter != _undefined)
          'Encounter': (Encounter as Input$Encounter_bool_exp?),
        if ($_and != _undefined)
          '_and': ($_and as List<Input$SavedPerson_bool_exp>?),
        if ($_not != _undefined) '_not': ($_not as Input$SavedPerson_bool_exp?),
        if ($_or != _undefined)
          '_or': ($_or as List<Input$SavedPerson_bool_exp>?),
        if (email != _undefined)
          'email': (email as Input$String_comparison_exp?),
        if (id != _undefined) 'id': (id as Input$String_comparison_exp?),
        if (name != _undefined) 'name': (name as Input$String_comparison_exp?),
        if (phone != _undefined)
          'phone': (phone as Input$String_comparison_exp?),
        if (savingEncounter != _undefined)
          'savingEncounter': (savingEncounter as Input$String_comparison_exp?),
      }));
  CopyWith$Input$Encounter_bool_exp<TRes> get Encounter {
    final local$Encounter = _instance.Encounter;
    return local$Encounter == null
        ? CopyWith$Input$Encounter_bool_exp.stub(_then(_instance))
        : CopyWith$Input$Encounter_bool_exp(
            local$Encounter, (e) => call(Encounter: e));
  }

  TRes $_and(
          Iterable<Input$SavedPerson_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$SavedPerson_bool_exp<
                          Input$SavedPerson_bool_exp>>?)
              _fn) =>
      call(
          $_and: _fn(
              _instance.$_and?.map((e) => CopyWith$Input$SavedPerson_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());
  CopyWith$Input$SavedPerson_bool_exp<TRes> get $_not {
    final local$$_not = _instance.$_not;
    return local$$_not == null
        ? CopyWith$Input$SavedPerson_bool_exp.stub(_then(_instance))
        : CopyWith$Input$SavedPerson_bool_exp(
            local$$_not, (e) => call($_not: e));
  }

  TRes $_or(
          Iterable<Input$SavedPerson_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$SavedPerson_bool_exp<
                          Input$SavedPerson_bool_exp>>?)
              _fn) =>
      call(
          $_or: _fn(
              _instance.$_or?.map((e) => CopyWith$Input$SavedPerson_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());
  CopyWith$Input$String_comparison_exp<TRes> get email {
    final local$email = _instance.email;
    return local$email == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$email, (e) => call(email: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get id {
    final local$id = _instance.id;
    return local$id == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(local$id, (e) => call(id: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get name {
    final local$name = _instance.name;
    return local$name == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$name, (e) => call(name: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get phone {
    final local$phone = _instance.phone;
    return local$phone == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$phone, (e) => call(phone: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get savingEncounter {
    final local$savingEncounter = _instance.savingEncounter;
    return local$savingEncounter == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$savingEncounter, (e) => call(savingEncounter: e));
  }
}

class _CopyWithStubImpl$Input$SavedPerson_bool_exp<TRes>
    implements CopyWith$Input$SavedPerson_bool_exp<TRes> {
  _CopyWithStubImpl$Input$SavedPerson_bool_exp(this._res);

  TRes _res;

  call({
    Input$Encounter_bool_exp? Encounter,
    List<Input$SavedPerson_bool_exp>? $_and,
    Input$SavedPerson_bool_exp? $_not,
    List<Input$SavedPerson_bool_exp>? $_or,
    Input$String_comparison_exp? email,
    Input$String_comparison_exp? id,
    Input$String_comparison_exp? name,
    Input$String_comparison_exp? phone,
    Input$String_comparison_exp? savingEncounter,
  }) =>
      _res;
  CopyWith$Input$Encounter_bool_exp<TRes> get Encounter =>
      CopyWith$Input$Encounter_bool_exp.stub(_res);
  $_and(_fn) => _res;
  CopyWith$Input$SavedPerson_bool_exp<TRes> get $_not =>
      CopyWith$Input$SavedPerson_bool_exp.stub(_res);
  $_or(_fn) => _res;
  CopyWith$Input$String_comparison_exp<TRes> get email =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get id =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get name =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get phone =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get savingEncounter =>
      CopyWith$Input$String_comparison_exp.stub(_res);
}

class Input$SoulWinningSession_bool_exp {
  factory Input$SoulWinningSession_bool_exp({
    Input$Event_bool_exp? Event,
    Input$SoulWinningSessionGroup_bool_exp? SoulWinningSessionGroups,
    Input$SoulWinningSessionGroup_aggregate_bool_exp?
        SoulWinningSessionGroups_aggregate,
    List<Input$SoulWinningSession_bool_exp>? $_and,
    Input$SoulWinningSession_bool_exp? $_not,
    List<Input$SoulWinningSession_bool_exp>? $_or,
    Input$String_comparison_exp? event,
    Input$String_comparison_exp? id,
    Input$String_comparison_exp? name,
    Input$timestamp_comparison_exp? scheduledEndTimeInUtc,
    Input$timestamp_comparison_exp? scheduledStartTimeInUtc,
  }) =>
      Input$SoulWinningSession_bool_exp._({
        if (Event != null) r'Event': Event,
        if (SoulWinningSessionGroups != null)
          r'SoulWinningSessionGroups': SoulWinningSessionGroups,
        if (SoulWinningSessionGroups_aggregate != null)
          r'SoulWinningSessionGroups_aggregate':
              SoulWinningSessionGroups_aggregate,
        if ($_and != null) r'_and': $_and,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if (event != null) r'event': event,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
        if (scheduledEndTimeInUtc != null)
          r'scheduledEndTimeInUtc': scheduledEndTimeInUtc,
        if (scheduledStartTimeInUtc != null)
          r'scheduledStartTimeInUtc': scheduledStartTimeInUtc,
      });

  Input$SoulWinningSession_bool_exp._(this._$data);

  factory Input$SoulWinningSession_bool_exp.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Event')) {
      final l$Event = data['Event'];
      result$data['Event'] = l$Event == null
          ? null
          : Input$Event_bool_exp.fromJson((l$Event as Map<String, dynamic>));
    }
    if (data.containsKey('SoulWinningSessionGroups')) {
      final l$SoulWinningSessionGroups = data['SoulWinningSessionGroups'];
      result$data['SoulWinningSessionGroups'] =
          l$SoulWinningSessionGroups == null
              ? null
              : Input$SoulWinningSessionGroup_bool_exp.fromJson(
                  (l$SoulWinningSessionGroups as Map<String, dynamic>));
    }
    if (data.containsKey('SoulWinningSessionGroups_aggregate')) {
      final l$SoulWinningSessionGroups_aggregate =
          data['SoulWinningSessionGroups_aggregate'];
      result$data['SoulWinningSessionGroups_aggregate'] =
          l$SoulWinningSessionGroups_aggregate == null
              ? null
              : Input$SoulWinningSessionGroup_aggregate_bool_exp.fromJson(
                  (l$SoulWinningSessionGroups_aggregate
                      as Map<String, dynamic>));
    }
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) => Input$SoulWinningSession_bool_exp.fromJson(
              (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = l$$_not == null
          ? null
          : Input$SoulWinningSession_bool_exp.fromJson(
              (l$$_not as Map<String, dynamic>));
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) => Input$SoulWinningSession_bool_exp.fromJson(
              (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('event')) {
      final l$event = data['event'];
      result$data['event'] = l$event == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$event as Map<String, dynamic>));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$id as Map<String, dynamic>));
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] = l$name == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$name as Map<String, dynamic>));
    }
    if (data.containsKey('scheduledEndTimeInUtc')) {
      final l$scheduledEndTimeInUtc = data['scheduledEndTimeInUtc'];
      result$data['scheduledEndTimeInUtc'] = l$scheduledEndTimeInUtc == null
          ? null
          : Input$timestamp_comparison_exp.fromJson(
              (l$scheduledEndTimeInUtc as Map<String, dynamic>));
    }
    if (data.containsKey('scheduledStartTimeInUtc')) {
      final l$scheduledStartTimeInUtc = data['scheduledStartTimeInUtc'];
      result$data['scheduledStartTimeInUtc'] = l$scheduledStartTimeInUtc == null
          ? null
          : Input$timestamp_comparison_exp.fromJson(
              (l$scheduledStartTimeInUtc as Map<String, dynamic>));
    }
    return Input$SoulWinningSession_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$Event_bool_exp? get Event => (_$data['Event'] as Input$Event_bool_exp?);
  Input$SoulWinningSessionGroup_bool_exp? get SoulWinningSessionGroups =>
      (_$data['SoulWinningSessionGroups']
          as Input$SoulWinningSessionGroup_bool_exp?);
  Input$SoulWinningSessionGroup_aggregate_bool_exp?
      get SoulWinningSessionGroups_aggregate =>
          (_$data['SoulWinningSessionGroups_aggregate']
              as Input$SoulWinningSessionGroup_aggregate_bool_exp?);
  List<Input$SoulWinningSession_bool_exp>? get $_and =>
      (_$data['_and'] as List<Input$SoulWinningSession_bool_exp>?);
  Input$SoulWinningSession_bool_exp? get $_not =>
      (_$data['_not'] as Input$SoulWinningSession_bool_exp?);
  List<Input$SoulWinningSession_bool_exp>? get $_or =>
      (_$data['_or'] as List<Input$SoulWinningSession_bool_exp>?);
  Input$String_comparison_exp? get event =>
      (_$data['event'] as Input$String_comparison_exp?);
  Input$String_comparison_exp? get id =>
      (_$data['id'] as Input$String_comparison_exp?);
  Input$String_comparison_exp? get name =>
      (_$data['name'] as Input$String_comparison_exp?);
  Input$timestamp_comparison_exp? get scheduledEndTimeInUtc =>
      (_$data['scheduledEndTimeInUtc'] as Input$timestamp_comparison_exp?);
  Input$timestamp_comparison_exp? get scheduledStartTimeInUtc =>
      (_$data['scheduledStartTimeInUtc'] as Input$timestamp_comparison_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Event')) {
      final l$Event = Event;
      result$data['Event'] = l$Event?.toJson();
    }
    if (_$data.containsKey('SoulWinningSessionGroups')) {
      final l$SoulWinningSessionGroups = SoulWinningSessionGroups;
      result$data['SoulWinningSessionGroups'] =
          l$SoulWinningSessionGroups?.toJson();
    }
    if (_$data.containsKey('SoulWinningSessionGroups_aggregate')) {
      final l$SoulWinningSessionGroups_aggregate =
          SoulWinningSessionGroups_aggregate;
      result$data['SoulWinningSessionGroups_aggregate'] =
          l$SoulWinningSessionGroups_aggregate?.toJson();
    }
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.toJson();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('event')) {
      final l$event = event;
      result$data['event'] = l$event?.toJson();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id?.toJson();
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] = l$name?.toJson();
    }
    if (_$data.containsKey('scheduledEndTimeInUtc')) {
      final l$scheduledEndTimeInUtc = scheduledEndTimeInUtc;
      result$data['scheduledEndTimeInUtc'] = l$scheduledEndTimeInUtc?.toJson();
    }
    if (_$data.containsKey('scheduledStartTimeInUtc')) {
      final l$scheduledStartTimeInUtc = scheduledStartTimeInUtc;
      result$data['scheduledStartTimeInUtc'] =
          l$scheduledStartTimeInUtc?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$SoulWinningSession_bool_exp<Input$SoulWinningSession_bool_exp>
      get copyWith => CopyWith$Input$SoulWinningSession_bool_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SoulWinningSession_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Event = Event;
    final lOther$Event = other.Event;
    if (_$data.containsKey('Event') != other._$data.containsKey('Event')) {
      return false;
    }
    if (l$Event != lOther$Event) {
      return false;
    }
    final l$SoulWinningSessionGroups = SoulWinningSessionGroups;
    final lOther$SoulWinningSessionGroups = other.SoulWinningSessionGroups;
    if (_$data.containsKey('SoulWinningSessionGroups') !=
        other._$data.containsKey('SoulWinningSessionGroups')) {
      return false;
    }
    if (l$SoulWinningSessionGroups != lOther$SoulWinningSessionGroups) {
      return false;
    }
    final l$SoulWinningSessionGroups_aggregate =
        SoulWinningSessionGroups_aggregate;
    final lOther$SoulWinningSessionGroups_aggregate =
        other.SoulWinningSessionGroups_aggregate;
    if (_$data.containsKey('SoulWinningSessionGroups_aggregate') !=
        other._$data.containsKey('SoulWinningSessionGroups_aggregate')) {
      return false;
    }
    if (l$SoulWinningSessionGroups_aggregate !=
        lOther$SoulWinningSessionGroups_aggregate) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$event = event;
    final lOther$event = other.event;
    if (_$data.containsKey('event') != other._$data.containsKey('event')) {
      return false;
    }
    if (l$event != lOther$event) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$scheduledEndTimeInUtc = scheduledEndTimeInUtc;
    final lOther$scheduledEndTimeInUtc = other.scheduledEndTimeInUtc;
    if (_$data.containsKey('scheduledEndTimeInUtc') !=
        other._$data.containsKey('scheduledEndTimeInUtc')) {
      return false;
    }
    if (l$scheduledEndTimeInUtc != lOther$scheduledEndTimeInUtc) {
      return false;
    }
    final l$scheduledStartTimeInUtc = scheduledStartTimeInUtc;
    final lOther$scheduledStartTimeInUtc = other.scheduledStartTimeInUtc;
    if (_$data.containsKey('scheduledStartTimeInUtc') !=
        other._$data.containsKey('scheduledStartTimeInUtc')) {
      return false;
    }
    if (l$scheduledStartTimeInUtc != lOther$scheduledStartTimeInUtc) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Event = Event;
    final l$SoulWinningSessionGroups = SoulWinningSessionGroups;
    final l$SoulWinningSessionGroups_aggregate =
        SoulWinningSessionGroups_aggregate;
    final l$$_and = $_and;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$event = event;
    final l$id = id;
    final l$name = name;
    final l$scheduledEndTimeInUtc = scheduledEndTimeInUtc;
    final l$scheduledStartTimeInUtc = scheduledStartTimeInUtc;
    return Object.hashAll([
      _$data.containsKey('Event') ? l$Event : const {},
      _$data.containsKey('SoulWinningSessionGroups')
          ? l$SoulWinningSessionGroups
          : const {},
      _$data.containsKey('SoulWinningSessionGroups_aggregate')
          ? l$SoulWinningSessionGroups_aggregate
          : const {},
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_not') ? l$$_not : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('event') ? l$event : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('scheduledEndTimeInUtc')
          ? l$scheduledEndTimeInUtc
          : const {},
      _$data.containsKey('scheduledStartTimeInUtc')
          ? l$scheduledStartTimeInUtc
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$SoulWinningSession_bool_exp<TRes> {
  factory CopyWith$Input$SoulWinningSession_bool_exp(
    Input$SoulWinningSession_bool_exp instance,
    TRes Function(Input$SoulWinningSession_bool_exp) then,
  ) = _CopyWithImpl$Input$SoulWinningSession_bool_exp;

  factory CopyWith$Input$SoulWinningSession_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$SoulWinningSession_bool_exp;

  TRes call({
    Input$Event_bool_exp? Event,
    Input$SoulWinningSessionGroup_bool_exp? SoulWinningSessionGroups,
    Input$SoulWinningSessionGroup_aggregate_bool_exp?
        SoulWinningSessionGroups_aggregate,
    List<Input$SoulWinningSession_bool_exp>? $_and,
    Input$SoulWinningSession_bool_exp? $_not,
    List<Input$SoulWinningSession_bool_exp>? $_or,
    Input$String_comparison_exp? event,
    Input$String_comparison_exp? id,
    Input$String_comparison_exp? name,
    Input$timestamp_comparison_exp? scheduledEndTimeInUtc,
    Input$timestamp_comparison_exp? scheduledStartTimeInUtc,
  });
  CopyWith$Input$Event_bool_exp<TRes> get Event;
  CopyWith$Input$SoulWinningSessionGroup_bool_exp<TRes>
      get SoulWinningSessionGroups;
  CopyWith$Input$SoulWinningSessionGroup_aggregate_bool_exp<TRes>
      get SoulWinningSessionGroups_aggregate;
  TRes $_and(
      Iterable<Input$SoulWinningSession_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$SoulWinningSession_bool_exp<
                      Input$SoulWinningSession_bool_exp>>?)
          _fn);
  CopyWith$Input$SoulWinningSession_bool_exp<TRes> get $_not;
  TRes $_or(
      Iterable<Input$SoulWinningSession_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$SoulWinningSession_bool_exp<
                      Input$SoulWinningSession_bool_exp>>?)
          _fn);
  CopyWith$Input$String_comparison_exp<TRes> get event;
  CopyWith$Input$String_comparison_exp<TRes> get id;
  CopyWith$Input$String_comparison_exp<TRes> get name;
  CopyWith$Input$timestamp_comparison_exp<TRes> get scheduledEndTimeInUtc;
  CopyWith$Input$timestamp_comparison_exp<TRes> get scheduledStartTimeInUtc;
}

class _CopyWithImpl$Input$SoulWinningSession_bool_exp<TRes>
    implements CopyWith$Input$SoulWinningSession_bool_exp<TRes> {
  _CopyWithImpl$Input$SoulWinningSession_bool_exp(
    this._instance,
    this._then,
  );

  final Input$SoulWinningSession_bool_exp _instance;

  final TRes Function(Input$SoulWinningSession_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Event = _undefined,
    Object? SoulWinningSessionGroups = _undefined,
    Object? SoulWinningSessionGroups_aggregate = _undefined,
    Object? $_and = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? event = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
    Object? scheduledEndTimeInUtc = _undefined,
    Object? scheduledStartTimeInUtc = _undefined,
  }) =>
      _then(Input$SoulWinningSession_bool_exp._({
        ..._instance._$data,
        if (Event != _undefined) 'Event': (Event as Input$Event_bool_exp?),
        if (SoulWinningSessionGroups != _undefined)
          'SoulWinningSessionGroups': (SoulWinningSessionGroups
              as Input$SoulWinningSessionGroup_bool_exp?),
        if (SoulWinningSessionGroups_aggregate != _undefined)
          'SoulWinningSessionGroups_aggregate':
              (SoulWinningSessionGroups_aggregate
                  as Input$SoulWinningSessionGroup_aggregate_bool_exp?),
        if ($_and != _undefined)
          '_and': ($_and as List<Input$SoulWinningSession_bool_exp>?),
        if ($_not != _undefined)
          '_not': ($_not as Input$SoulWinningSession_bool_exp?),
        if ($_or != _undefined)
          '_or': ($_or as List<Input$SoulWinningSession_bool_exp>?),
        if (event != _undefined)
          'event': (event as Input$String_comparison_exp?),
        if (id != _undefined) 'id': (id as Input$String_comparison_exp?),
        if (name != _undefined) 'name': (name as Input$String_comparison_exp?),
        if (scheduledEndTimeInUtc != _undefined)
          'scheduledEndTimeInUtc':
              (scheduledEndTimeInUtc as Input$timestamp_comparison_exp?),
        if (scheduledStartTimeInUtc != _undefined)
          'scheduledStartTimeInUtc':
              (scheduledStartTimeInUtc as Input$timestamp_comparison_exp?),
      }));
  CopyWith$Input$Event_bool_exp<TRes> get Event {
    final local$Event = _instance.Event;
    return local$Event == null
        ? CopyWith$Input$Event_bool_exp.stub(_then(_instance))
        : CopyWith$Input$Event_bool_exp(local$Event, (e) => call(Event: e));
  }

  CopyWith$Input$SoulWinningSessionGroup_bool_exp<TRes>
      get SoulWinningSessionGroups {
    final local$SoulWinningSessionGroups = _instance.SoulWinningSessionGroups;
    return local$SoulWinningSessionGroups == null
        ? CopyWith$Input$SoulWinningSessionGroup_bool_exp.stub(_then(_instance))
        : CopyWith$Input$SoulWinningSessionGroup_bool_exp(
            local$SoulWinningSessionGroups,
            (e) => call(SoulWinningSessionGroups: e));
  }

  CopyWith$Input$SoulWinningSessionGroup_aggregate_bool_exp<TRes>
      get SoulWinningSessionGroups_aggregate {
    final local$SoulWinningSessionGroups_aggregate =
        _instance.SoulWinningSessionGroups_aggregate;
    return local$SoulWinningSessionGroups_aggregate == null
        ? CopyWith$Input$SoulWinningSessionGroup_aggregate_bool_exp.stub(
            _then(_instance))
        : CopyWith$Input$SoulWinningSessionGroup_aggregate_bool_exp(
            local$SoulWinningSessionGroups_aggregate,
            (e) => call(SoulWinningSessionGroups_aggregate: e));
  }

  TRes $_and(
          Iterable<Input$SoulWinningSession_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$SoulWinningSession_bool_exp<
                          Input$SoulWinningSession_bool_exp>>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and
              ?.map((e) => CopyWith$Input$SoulWinningSession_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());
  CopyWith$Input$SoulWinningSession_bool_exp<TRes> get $_not {
    final local$$_not = _instance.$_not;
    return local$$_not == null
        ? CopyWith$Input$SoulWinningSession_bool_exp.stub(_then(_instance))
        : CopyWith$Input$SoulWinningSession_bool_exp(
            local$$_not, (e) => call($_not: e));
  }

  TRes $_or(
          Iterable<Input$SoulWinningSession_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$SoulWinningSession_bool_exp<
                          Input$SoulWinningSession_bool_exp>>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or
              ?.map((e) => CopyWith$Input$SoulWinningSession_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());
  CopyWith$Input$String_comparison_exp<TRes> get event {
    final local$event = _instance.event;
    return local$event == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$event, (e) => call(event: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get id {
    final local$id = _instance.id;
    return local$id == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(local$id, (e) => call(id: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get name {
    final local$name = _instance.name;
    return local$name == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$name, (e) => call(name: e));
  }

  CopyWith$Input$timestamp_comparison_exp<TRes> get scheduledEndTimeInUtc {
    final local$scheduledEndTimeInUtc = _instance.scheduledEndTimeInUtc;
    return local$scheduledEndTimeInUtc == null
        ? CopyWith$Input$timestamp_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamp_comparison_exp(
            local$scheduledEndTimeInUtc, (e) => call(scheduledEndTimeInUtc: e));
  }

  CopyWith$Input$timestamp_comparison_exp<TRes> get scheduledStartTimeInUtc {
    final local$scheduledStartTimeInUtc = _instance.scheduledStartTimeInUtc;
    return local$scheduledStartTimeInUtc == null
        ? CopyWith$Input$timestamp_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamp_comparison_exp(local$scheduledStartTimeInUtc,
            (e) => call(scheduledStartTimeInUtc: e));
  }
}

class _CopyWithStubImpl$Input$SoulWinningSession_bool_exp<TRes>
    implements CopyWith$Input$SoulWinningSession_bool_exp<TRes> {
  _CopyWithStubImpl$Input$SoulWinningSession_bool_exp(this._res);

  TRes _res;

  call({
    Input$Event_bool_exp? Event,
    Input$SoulWinningSessionGroup_bool_exp? SoulWinningSessionGroups,
    Input$SoulWinningSessionGroup_aggregate_bool_exp?
        SoulWinningSessionGroups_aggregate,
    List<Input$SoulWinningSession_bool_exp>? $_and,
    Input$SoulWinningSession_bool_exp? $_not,
    List<Input$SoulWinningSession_bool_exp>? $_or,
    Input$String_comparison_exp? event,
    Input$String_comparison_exp? id,
    Input$String_comparison_exp? name,
    Input$timestamp_comparison_exp? scheduledEndTimeInUtc,
    Input$timestamp_comparison_exp? scheduledStartTimeInUtc,
  }) =>
      _res;
  CopyWith$Input$Event_bool_exp<TRes> get Event =>
      CopyWith$Input$Event_bool_exp.stub(_res);
  CopyWith$Input$SoulWinningSessionGroup_bool_exp<TRes>
      get SoulWinningSessionGroups =>
          CopyWith$Input$SoulWinningSessionGroup_bool_exp.stub(_res);
  CopyWith$Input$SoulWinningSessionGroup_aggregate_bool_exp<TRes>
      get SoulWinningSessionGroups_aggregate =>
          CopyWith$Input$SoulWinningSessionGroup_aggregate_bool_exp.stub(_res);
  $_and(_fn) => _res;
  CopyWith$Input$SoulWinningSession_bool_exp<TRes> get $_not =>
      CopyWith$Input$SoulWinningSession_bool_exp.stub(_res);
  $_or(_fn) => _res;
  CopyWith$Input$String_comparison_exp<TRes> get event =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get id =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get name =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$timestamp_comparison_exp<TRes> get scheduledEndTimeInUtc =>
      CopyWith$Input$timestamp_comparison_exp.stub(_res);
  CopyWith$Input$timestamp_comparison_exp<TRes> get scheduledStartTimeInUtc =>
      CopyWith$Input$timestamp_comparison_exp.stub(_res);
}

class Input$SoulWinningSessionGroup_bool_exp {
  factory Input$SoulWinningSessionGroup_bool_exp({
    Input$Encounter_bool_exp? Encounters,
    Input$Encounter_aggregate_bool_exp? Encounters_aggregate,
    Input$MapArea_bool_exp? MapArea,
    Input$SoulWinningSession_bool_exp? SoulWinningSession,
    Input$_SoulWinningSessionGroup_members_bool_exp?
        $_SoulWinningSessionGroup_members,
    Input$_SoulWinningSessionGroup_members_aggregate_bool_exp?
        $_SoulWinningSessionGroup_members_aggregate,
    List<Input$SoulWinningSessionGroup_bool_exp>? $_and,
    Input$SoulWinningSessionGroup_bool_exp? $_not,
    List<Input$SoulWinningSessionGroup_bool_exp>? $_or,
    Input$String_comparison_exp? assignedMapArea,
    Input$String_comparison_exp? id,
    Input$String_comparison_exp? session,
  }) =>
      Input$SoulWinningSessionGroup_bool_exp._({
        if (Encounters != null) r'Encounters': Encounters,
        if (Encounters_aggregate != null)
          r'Encounters_aggregate': Encounters_aggregate,
        if (MapArea != null) r'MapArea': MapArea,
        if (SoulWinningSession != null)
          r'SoulWinningSession': SoulWinningSession,
        if ($_SoulWinningSessionGroup_members != null)
          r'_SoulWinningSessionGroup_members':
              $_SoulWinningSessionGroup_members,
        if ($_SoulWinningSessionGroup_members_aggregate != null)
          r'_SoulWinningSessionGroup_members_aggregate':
              $_SoulWinningSessionGroup_members_aggregate,
        if ($_and != null) r'_and': $_and,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if (assignedMapArea != null) r'assignedMapArea': assignedMapArea,
        if (id != null) r'id': id,
        if (session != null) r'session': session,
      });

  Input$SoulWinningSessionGroup_bool_exp._(this._$data);

  factory Input$SoulWinningSessionGroup_bool_exp.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Encounters')) {
      final l$Encounters = data['Encounters'];
      result$data['Encounters'] = l$Encounters == null
          ? null
          : Input$Encounter_bool_exp.fromJson(
              (l$Encounters as Map<String, dynamic>));
    }
    if (data.containsKey('Encounters_aggregate')) {
      final l$Encounters_aggregate = data['Encounters_aggregate'];
      result$data['Encounters_aggregate'] = l$Encounters_aggregate == null
          ? null
          : Input$Encounter_aggregate_bool_exp.fromJson(
              (l$Encounters_aggregate as Map<String, dynamic>));
    }
    if (data.containsKey('MapArea')) {
      final l$MapArea = data['MapArea'];
      result$data['MapArea'] = l$MapArea == null
          ? null
          : Input$MapArea_bool_exp.fromJson(
              (l$MapArea as Map<String, dynamic>));
    }
    if (data.containsKey('SoulWinningSession')) {
      final l$SoulWinningSession = data['SoulWinningSession'];
      result$data['SoulWinningSession'] = l$SoulWinningSession == null
          ? null
          : Input$SoulWinningSession_bool_exp.fromJson(
              (l$SoulWinningSession as Map<String, dynamic>));
    }
    if (data.containsKey('_SoulWinningSessionGroup_members')) {
      final l$$_SoulWinningSessionGroup_members =
          data['_SoulWinningSessionGroup_members'];
      result$data['_SoulWinningSessionGroup_members'] =
          l$$_SoulWinningSessionGroup_members == null
              ? null
              : Input$_SoulWinningSessionGroup_members_bool_exp.fromJson(
                  (l$$_SoulWinningSessionGroup_members
                      as Map<String, dynamic>));
    }
    if (data.containsKey('_SoulWinningSessionGroup_members_aggregate')) {
      final l$$_SoulWinningSessionGroup_members_aggregate =
          data['_SoulWinningSessionGroup_members_aggregate'];
      result$data['_SoulWinningSessionGroup_members_aggregate'] =
          l$$_SoulWinningSessionGroup_members_aggregate == null
              ? null
              : Input$_SoulWinningSessionGroup_members_aggregate_bool_exp
                  .fromJson((l$$_SoulWinningSessionGroup_members_aggregate
                      as Map<String, dynamic>));
    }
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) => Input$SoulWinningSessionGroup_bool_exp.fromJson(
              (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = l$$_not == null
          ? null
          : Input$SoulWinningSessionGroup_bool_exp.fromJson(
              (l$$_not as Map<String, dynamic>));
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) => Input$SoulWinningSessionGroup_bool_exp.fromJson(
              (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('assignedMapArea')) {
      final l$assignedMapArea = data['assignedMapArea'];
      result$data['assignedMapArea'] = l$assignedMapArea == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$assignedMapArea as Map<String, dynamic>));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$id as Map<String, dynamic>));
    }
    if (data.containsKey('session')) {
      final l$session = data['session'];
      result$data['session'] = l$session == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$session as Map<String, dynamic>));
    }
    return Input$SoulWinningSessionGroup_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$Encounter_bool_exp? get Encounters =>
      (_$data['Encounters'] as Input$Encounter_bool_exp?);
  Input$Encounter_aggregate_bool_exp? get Encounters_aggregate =>
      (_$data['Encounters_aggregate'] as Input$Encounter_aggregate_bool_exp?);
  Input$MapArea_bool_exp? get MapArea =>
      (_$data['MapArea'] as Input$MapArea_bool_exp?);
  Input$SoulWinningSession_bool_exp? get SoulWinningSession =>
      (_$data['SoulWinningSession'] as Input$SoulWinningSession_bool_exp?);
  Input$_SoulWinningSessionGroup_members_bool_exp?
      get $_SoulWinningSessionGroup_members =>
          (_$data['_SoulWinningSessionGroup_members']
              as Input$_SoulWinningSessionGroup_members_bool_exp?);
  Input$_SoulWinningSessionGroup_members_aggregate_bool_exp?
      get $_SoulWinningSessionGroup_members_aggregate =>
          (_$data['_SoulWinningSessionGroup_members_aggregate']
              as Input$_SoulWinningSessionGroup_members_aggregate_bool_exp?);
  List<Input$SoulWinningSessionGroup_bool_exp>? get $_and =>
      (_$data['_and'] as List<Input$SoulWinningSessionGroup_bool_exp>?);
  Input$SoulWinningSessionGroup_bool_exp? get $_not =>
      (_$data['_not'] as Input$SoulWinningSessionGroup_bool_exp?);
  List<Input$SoulWinningSessionGroup_bool_exp>? get $_or =>
      (_$data['_or'] as List<Input$SoulWinningSessionGroup_bool_exp>?);
  Input$String_comparison_exp? get assignedMapArea =>
      (_$data['assignedMapArea'] as Input$String_comparison_exp?);
  Input$String_comparison_exp? get id =>
      (_$data['id'] as Input$String_comparison_exp?);
  Input$String_comparison_exp? get session =>
      (_$data['session'] as Input$String_comparison_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Encounters')) {
      final l$Encounters = Encounters;
      result$data['Encounters'] = l$Encounters?.toJson();
    }
    if (_$data.containsKey('Encounters_aggregate')) {
      final l$Encounters_aggregate = Encounters_aggregate;
      result$data['Encounters_aggregate'] = l$Encounters_aggregate?.toJson();
    }
    if (_$data.containsKey('MapArea')) {
      final l$MapArea = MapArea;
      result$data['MapArea'] = l$MapArea?.toJson();
    }
    if (_$data.containsKey('SoulWinningSession')) {
      final l$SoulWinningSession = SoulWinningSession;
      result$data['SoulWinningSession'] = l$SoulWinningSession?.toJson();
    }
    if (_$data.containsKey('_SoulWinningSessionGroup_members')) {
      final l$$_SoulWinningSessionGroup_members =
          $_SoulWinningSessionGroup_members;
      result$data['_SoulWinningSessionGroup_members'] =
          l$$_SoulWinningSessionGroup_members?.toJson();
    }
    if (_$data.containsKey('_SoulWinningSessionGroup_members_aggregate')) {
      final l$$_SoulWinningSessionGroup_members_aggregate =
          $_SoulWinningSessionGroup_members_aggregate;
      result$data['_SoulWinningSessionGroup_members_aggregate'] =
          l$$_SoulWinningSessionGroup_members_aggregate?.toJson();
    }
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.toJson();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('assignedMapArea')) {
      final l$assignedMapArea = assignedMapArea;
      result$data['assignedMapArea'] = l$assignedMapArea?.toJson();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id?.toJson();
    }
    if (_$data.containsKey('session')) {
      final l$session = session;
      result$data['session'] = l$session?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$SoulWinningSessionGroup_bool_exp<
          Input$SoulWinningSessionGroup_bool_exp>
      get copyWith => CopyWith$Input$SoulWinningSessionGroup_bool_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SoulWinningSessionGroup_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Encounters = Encounters;
    final lOther$Encounters = other.Encounters;
    if (_$data.containsKey('Encounters') !=
        other._$data.containsKey('Encounters')) {
      return false;
    }
    if (l$Encounters != lOther$Encounters) {
      return false;
    }
    final l$Encounters_aggregate = Encounters_aggregate;
    final lOther$Encounters_aggregate = other.Encounters_aggregate;
    if (_$data.containsKey('Encounters_aggregate') !=
        other._$data.containsKey('Encounters_aggregate')) {
      return false;
    }
    if (l$Encounters_aggregate != lOther$Encounters_aggregate) {
      return false;
    }
    final l$MapArea = MapArea;
    final lOther$MapArea = other.MapArea;
    if (_$data.containsKey('MapArea') != other._$data.containsKey('MapArea')) {
      return false;
    }
    if (l$MapArea != lOther$MapArea) {
      return false;
    }
    final l$SoulWinningSession = SoulWinningSession;
    final lOther$SoulWinningSession = other.SoulWinningSession;
    if (_$data.containsKey('SoulWinningSession') !=
        other._$data.containsKey('SoulWinningSession')) {
      return false;
    }
    if (l$SoulWinningSession != lOther$SoulWinningSession) {
      return false;
    }
    final l$$_SoulWinningSessionGroup_members =
        $_SoulWinningSessionGroup_members;
    final lOther$$_SoulWinningSessionGroup_members =
        other.$_SoulWinningSessionGroup_members;
    if (_$data.containsKey('_SoulWinningSessionGroup_members') !=
        other._$data.containsKey('_SoulWinningSessionGroup_members')) {
      return false;
    }
    if (l$$_SoulWinningSessionGroup_members !=
        lOther$$_SoulWinningSessionGroup_members) {
      return false;
    }
    final l$$_SoulWinningSessionGroup_members_aggregate =
        $_SoulWinningSessionGroup_members_aggregate;
    final lOther$$_SoulWinningSessionGroup_members_aggregate =
        other.$_SoulWinningSessionGroup_members_aggregate;
    if (_$data.containsKey('_SoulWinningSessionGroup_members_aggregate') !=
        other._$data
            .containsKey('_SoulWinningSessionGroup_members_aggregate')) {
      return false;
    }
    if (l$$_SoulWinningSessionGroup_members_aggregate !=
        lOther$$_SoulWinningSessionGroup_members_aggregate) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$assignedMapArea = assignedMapArea;
    final lOther$assignedMapArea = other.assignedMapArea;
    if (_$data.containsKey('assignedMapArea') !=
        other._$data.containsKey('assignedMapArea')) {
      return false;
    }
    if (l$assignedMapArea != lOther$assignedMapArea) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$session = session;
    final lOther$session = other.session;
    if (_$data.containsKey('session') != other._$data.containsKey('session')) {
      return false;
    }
    if (l$session != lOther$session) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Encounters = Encounters;
    final l$Encounters_aggregate = Encounters_aggregate;
    final l$MapArea = MapArea;
    final l$SoulWinningSession = SoulWinningSession;
    final l$$_SoulWinningSessionGroup_members =
        $_SoulWinningSessionGroup_members;
    final l$$_SoulWinningSessionGroup_members_aggregate =
        $_SoulWinningSessionGroup_members_aggregate;
    final l$$_and = $_and;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$assignedMapArea = assignedMapArea;
    final l$id = id;
    final l$session = session;
    return Object.hashAll([
      _$data.containsKey('Encounters') ? l$Encounters : const {},
      _$data.containsKey('Encounters_aggregate')
          ? l$Encounters_aggregate
          : const {},
      _$data.containsKey('MapArea') ? l$MapArea : const {},
      _$data.containsKey('SoulWinningSession')
          ? l$SoulWinningSession
          : const {},
      _$data.containsKey('_SoulWinningSessionGroup_members')
          ? l$$_SoulWinningSessionGroup_members
          : const {},
      _$data.containsKey('_SoulWinningSessionGroup_members_aggregate')
          ? l$$_SoulWinningSessionGroup_members_aggregate
          : const {},
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_not') ? l$$_not : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('assignedMapArea') ? l$assignedMapArea : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('session') ? l$session : const {},
    ]);
  }
}

abstract class CopyWith$Input$SoulWinningSessionGroup_bool_exp<TRes> {
  factory CopyWith$Input$SoulWinningSessionGroup_bool_exp(
    Input$SoulWinningSessionGroup_bool_exp instance,
    TRes Function(Input$SoulWinningSessionGroup_bool_exp) then,
  ) = _CopyWithImpl$Input$SoulWinningSessionGroup_bool_exp;

  factory CopyWith$Input$SoulWinningSessionGroup_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$SoulWinningSessionGroup_bool_exp;

  TRes call({
    Input$Encounter_bool_exp? Encounters,
    Input$Encounter_aggregate_bool_exp? Encounters_aggregate,
    Input$MapArea_bool_exp? MapArea,
    Input$SoulWinningSession_bool_exp? SoulWinningSession,
    Input$_SoulWinningSessionGroup_members_bool_exp?
        $_SoulWinningSessionGroup_members,
    Input$_SoulWinningSessionGroup_members_aggregate_bool_exp?
        $_SoulWinningSessionGroup_members_aggregate,
    List<Input$SoulWinningSessionGroup_bool_exp>? $_and,
    Input$SoulWinningSessionGroup_bool_exp? $_not,
    List<Input$SoulWinningSessionGroup_bool_exp>? $_or,
    Input$String_comparison_exp? assignedMapArea,
    Input$String_comparison_exp? id,
    Input$String_comparison_exp? session,
  });
  CopyWith$Input$Encounter_bool_exp<TRes> get Encounters;
  CopyWith$Input$Encounter_aggregate_bool_exp<TRes> get Encounters_aggregate;
  CopyWith$Input$MapArea_bool_exp<TRes> get MapArea;
  CopyWith$Input$SoulWinningSession_bool_exp<TRes> get SoulWinningSession;
  CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp<TRes>
      get $_SoulWinningSessionGroup_members;
  CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_bool_exp<TRes>
      get $_SoulWinningSessionGroup_members_aggregate;
  TRes $_and(
      Iterable<Input$SoulWinningSessionGroup_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$SoulWinningSessionGroup_bool_exp<
                      Input$SoulWinningSessionGroup_bool_exp>>?)
          _fn);
  CopyWith$Input$SoulWinningSessionGroup_bool_exp<TRes> get $_not;
  TRes $_or(
      Iterable<Input$SoulWinningSessionGroup_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$SoulWinningSessionGroup_bool_exp<
                      Input$SoulWinningSessionGroup_bool_exp>>?)
          _fn);
  CopyWith$Input$String_comparison_exp<TRes> get assignedMapArea;
  CopyWith$Input$String_comparison_exp<TRes> get id;
  CopyWith$Input$String_comparison_exp<TRes> get session;
}

class _CopyWithImpl$Input$SoulWinningSessionGroup_bool_exp<TRes>
    implements CopyWith$Input$SoulWinningSessionGroup_bool_exp<TRes> {
  _CopyWithImpl$Input$SoulWinningSessionGroup_bool_exp(
    this._instance,
    this._then,
  );

  final Input$SoulWinningSessionGroup_bool_exp _instance;

  final TRes Function(Input$SoulWinningSessionGroup_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Encounters = _undefined,
    Object? Encounters_aggregate = _undefined,
    Object? MapArea = _undefined,
    Object? SoulWinningSession = _undefined,
    Object? $_SoulWinningSessionGroup_members = _undefined,
    Object? $_SoulWinningSessionGroup_members_aggregate = _undefined,
    Object? $_and = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? assignedMapArea = _undefined,
    Object? id = _undefined,
    Object? session = _undefined,
  }) =>
      _then(Input$SoulWinningSessionGroup_bool_exp._({
        ..._instance._$data,
        if (Encounters != _undefined)
          'Encounters': (Encounters as Input$Encounter_bool_exp?),
        if (Encounters_aggregate != _undefined)
          'Encounters_aggregate':
              (Encounters_aggregate as Input$Encounter_aggregate_bool_exp?),
        if (MapArea != _undefined)
          'MapArea': (MapArea as Input$MapArea_bool_exp?),
        if (SoulWinningSession != _undefined)
          'SoulWinningSession':
              (SoulWinningSession as Input$SoulWinningSession_bool_exp?),
        if ($_SoulWinningSessionGroup_members != _undefined)
          '_SoulWinningSessionGroup_members': ($_SoulWinningSessionGroup_members
              as Input$_SoulWinningSessionGroup_members_bool_exp?),
        if ($_SoulWinningSessionGroup_members_aggregate != _undefined)
          '_SoulWinningSessionGroup_members_aggregate':
              ($_SoulWinningSessionGroup_members_aggregate
                  as Input$_SoulWinningSessionGroup_members_aggregate_bool_exp?),
        if ($_and != _undefined)
          '_and': ($_and as List<Input$SoulWinningSessionGroup_bool_exp>?),
        if ($_not != _undefined)
          '_not': ($_not as Input$SoulWinningSessionGroup_bool_exp?),
        if ($_or != _undefined)
          '_or': ($_or as List<Input$SoulWinningSessionGroup_bool_exp>?),
        if (assignedMapArea != _undefined)
          'assignedMapArea': (assignedMapArea as Input$String_comparison_exp?),
        if (id != _undefined) 'id': (id as Input$String_comparison_exp?),
        if (session != _undefined)
          'session': (session as Input$String_comparison_exp?),
      }));
  CopyWith$Input$Encounter_bool_exp<TRes> get Encounters {
    final local$Encounters = _instance.Encounters;
    return local$Encounters == null
        ? CopyWith$Input$Encounter_bool_exp.stub(_then(_instance))
        : CopyWith$Input$Encounter_bool_exp(
            local$Encounters, (e) => call(Encounters: e));
  }

  CopyWith$Input$Encounter_aggregate_bool_exp<TRes> get Encounters_aggregate {
    final local$Encounters_aggregate = _instance.Encounters_aggregate;
    return local$Encounters_aggregate == null
        ? CopyWith$Input$Encounter_aggregate_bool_exp.stub(_then(_instance))
        : CopyWith$Input$Encounter_aggregate_bool_exp(
            local$Encounters_aggregate, (e) => call(Encounters_aggregate: e));
  }

  CopyWith$Input$MapArea_bool_exp<TRes> get MapArea {
    final local$MapArea = _instance.MapArea;
    return local$MapArea == null
        ? CopyWith$Input$MapArea_bool_exp.stub(_then(_instance))
        : CopyWith$Input$MapArea_bool_exp(
            local$MapArea, (e) => call(MapArea: e));
  }

  CopyWith$Input$SoulWinningSession_bool_exp<TRes> get SoulWinningSession {
    final local$SoulWinningSession = _instance.SoulWinningSession;
    return local$SoulWinningSession == null
        ? CopyWith$Input$SoulWinningSession_bool_exp.stub(_then(_instance))
        : CopyWith$Input$SoulWinningSession_bool_exp(
            local$SoulWinningSession, (e) => call(SoulWinningSession: e));
  }

  CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp<TRes>
      get $_SoulWinningSessionGroup_members {
    final local$$_SoulWinningSessionGroup_members =
        _instance.$_SoulWinningSessionGroup_members;
    return local$$_SoulWinningSessionGroup_members == null
        ? CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp.stub(
            _then(_instance))
        : CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp(
            local$$_SoulWinningSessionGroup_members,
            (e) => call($_SoulWinningSessionGroup_members: e));
  }

  CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_bool_exp<TRes>
      get $_SoulWinningSessionGroup_members_aggregate {
    final local$$_SoulWinningSessionGroup_members_aggregate =
        _instance.$_SoulWinningSessionGroup_members_aggregate;
    return local$$_SoulWinningSessionGroup_members_aggregate == null
        ? CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_bool_exp
            .stub(_then(_instance))
        : CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_bool_exp(
            local$$_SoulWinningSessionGroup_members_aggregate,
            (e) => call($_SoulWinningSessionGroup_members_aggregate: e));
  }

  TRes $_and(
          Iterable<Input$SoulWinningSessionGroup_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$SoulWinningSessionGroup_bool_exp<
                          Input$SoulWinningSessionGroup_bool_exp>>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and
              ?.map((e) => CopyWith$Input$SoulWinningSessionGroup_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());
  CopyWith$Input$SoulWinningSessionGroup_bool_exp<TRes> get $_not {
    final local$$_not = _instance.$_not;
    return local$$_not == null
        ? CopyWith$Input$SoulWinningSessionGroup_bool_exp.stub(_then(_instance))
        : CopyWith$Input$SoulWinningSessionGroup_bool_exp(
            local$$_not, (e) => call($_not: e));
  }

  TRes $_or(
          Iterable<Input$SoulWinningSessionGroup_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$SoulWinningSessionGroup_bool_exp<
                          Input$SoulWinningSessionGroup_bool_exp>>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or
              ?.map((e) => CopyWith$Input$SoulWinningSessionGroup_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());
  CopyWith$Input$String_comparison_exp<TRes> get assignedMapArea {
    final local$assignedMapArea = _instance.assignedMapArea;
    return local$assignedMapArea == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$assignedMapArea, (e) => call(assignedMapArea: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get id {
    final local$id = _instance.id;
    return local$id == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(local$id, (e) => call(id: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get session {
    final local$session = _instance.session;
    return local$session == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$session, (e) => call(session: e));
  }
}

class _CopyWithStubImpl$Input$SoulWinningSessionGroup_bool_exp<TRes>
    implements CopyWith$Input$SoulWinningSessionGroup_bool_exp<TRes> {
  _CopyWithStubImpl$Input$SoulWinningSessionGroup_bool_exp(this._res);

  TRes _res;

  call({
    Input$Encounter_bool_exp? Encounters,
    Input$Encounter_aggregate_bool_exp? Encounters_aggregate,
    Input$MapArea_bool_exp? MapArea,
    Input$SoulWinningSession_bool_exp? SoulWinningSession,
    Input$_SoulWinningSessionGroup_members_bool_exp?
        $_SoulWinningSessionGroup_members,
    Input$_SoulWinningSessionGroup_members_aggregate_bool_exp?
        $_SoulWinningSessionGroup_members_aggregate,
    List<Input$SoulWinningSessionGroup_bool_exp>? $_and,
    Input$SoulWinningSessionGroup_bool_exp? $_not,
    List<Input$SoulWinningSessionGroup_bool_exp>? $_or,
    Input$String_comparison_exp? assignedMapArea,
    Input$String_comparison_exp? id,
    Input$String_comparison_exp? session,
  }) =>
      _res;
  CopyWith$Input$Encounter_bool_exp<TRes> get Encounters =>
      CopyWith$Input$Encounter_bool_exp.stub(_res);
  CopyWith$Input$Encounter_aggregate_bool_exp<TRes> get Encounters_aggregate =>
      CopyWith$Input$Encounter_aggregate_bool_exp.stub(_res);
  CopyWith$Input$MapArea_bool_exp<TRes> get MapArea =>
      CopyWith$Input$MapArea_bool_exp.stub(_res);
  CopyWith$Input$SoulWinningSession_bool_exp<TRes> get SoulWinningSession =>
      CopyWith$Input$SoulWinningSession_bool_exp.stub(_res);
  CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp<TRes>
      get $_SoulWinningSessionGroup_members =>
          CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp.stub(_res);
  CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_bool_exp<TRes>
      get $_SoulWinningSessionGroup_members_aggregate =>
          CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_bool_exp
              .stub(_res);
  $_and(_fn) => _res;
  CopyWith$Input$SoulWinningSessionGroup_bool_exp<TRes> get $_not =>
      CopyWith$Input$SoulWinningSessionGroup_bool_exp.stub(_res);
  $_or(_fn) => _res;
  CopyWith$Input$String_comparison_exp<TRes> get assignedMapArea =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get id =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get session =>
      CopyWith$Input$String_comparison_exp.stub(_res);
}

class Input$User_bool_exp {
  factory Input$User_bool_exp({
    Input$_Organization_adminsOfOrganization_bool_exp?
        $_Organization_adminsOfOrganizations,
    Input$_Organization_adminsOfOrganization_aggregate_bool_exp?
        $_Organization_adminsOfOrganizations_aggregate,
    Input$_Organization_membersInOrganization_bool_exp?
        $_Organization_membersInOrganizations,
    Input$_Organization_membersInOrganization_aggregate_bool_exp?
        $_Organization_membersInOrganizations_aggregate,
    Input$_SoulWinningSessionGroup_members_bool_exp?
        $_SoulWinningSessionGroup_members,
    Input$_SoulWinningSessionGroup_members_aggregate_bool_exp?
        $_SoulWinningSessionGroup_members_aggregate,
    List<Input$User_bool_exp>? $_and,
    Input$User_bool_exp? $_not,
    List<Input$User_bool_exp>? $_or,
    Input$String_comparison_exp? adminUiPassword,
    Input$timestamp_comparison_exp? createdAt,
    Input$String_comparison_exp? email,
    Input$String_comparison_exp? id,
    Input$String_comparison_exp? name,
  }) =>
      Input$User_bool_exp._({
        if ($_Organization_adminsOfOrganizations != null)
          r'_Organization_adminsOfOrganizations':
              $_Organization_adminsOfOrganizations,
        if ($_Organization_adminsOfOrganizations_aggregate != null)
          r'_Organization_adminsOfOrganizations_aggregate':
              $_Organization_adminsOfOrganizations_aggregate,
        if ($_Organization_membersInOrganizations != null)
          r'_Organization_membersInOrganizations':
              $_Organization_membersInOrganizations,
        if ($_Organization_membersInOrganizations_aggregate != null)
          r'_Organization_membersInOrganizations_aggregate':
              $_Organization_membersInOrganizations_aggregate,
        if ($_SoulWinningSessionGroup_members != null)
          r'_SoulWinningSessionGroup_members':
              $_SoulWinningSessionGroup_members,
        if ($_SoulWinningSessionGroup_members_aggregate != null)
          r'_SoulWinningSessionGroup_members_aggregate':
              $_SoulWinningSessionGroup_members_aggregate,
        if ($_and != null) r'_and': $_and,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if (adminUiPassword != null) r'adminUiPassword': adminUiPassword,
        if (createdAt != null) r'createdAt': createdAt,
        if (email != null) r'email': email,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
      });

  Input$User_bool_exp._(this._$data);

  factory Input$User_bool_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_Organization_adminsOfOrganizations')) {
      final l$$_Organization_adminsOfOrganizations =
          data['_Organization_adminsOfOrganizations'];
      result$data['_Organization_adminsOfOrganizations'] =
          l$$_Organization_adminsOfOrganizations == null
              ? null
              : Input$_Organization_adminsOfOrganization_bool_exp.fromJson(
                  (l$$_Organization_adminsOfOrganizations
                      as Map<String, dynamic>));
    }
    if (data.containsKey('_Organization_adminsOfOrganizations_aggregate')) {
      final l$$_Organization_adminsOfOrganizations_aggregate =
          data['_Organization_adminsOfOrganizations_aggregate'];
      result$data['_Organization_adminsOfOrganizations_aggregate'] =
          l$$_Organization_adminsOfOrganizations_aggregate == null
              ? null
              : Input$_Organization_adminsOfOrganization_aggregate_bool_exp
                  .fromJson((l$$_Organization_adminsOfOrganizations_aggregate
                      as Map<String, dynamic>));
    }
    if (data.containsKey('_Organization_membersInOrganizations')) {
      final l$$_Organization_membersInOrganizations =
          data['_Organization_membersInOrganizations'];
      result$data['_Organization_membersInOrganizations'] =
          l$$_Organization_membersInOrganizations == null
              ? null
              : Input$_Organization_membersInOrganization_bool_exp.fromJson(
                  (l$$_Organization_membersInOrganizations
                      as Map<String, dynamic>));
    }
    if (data.containsKey('_Organization_membersInOrganizations_aggregate')) {
      final l$$_Organization_membersInOrganizations_aggregate =
          data['_Organization_membersInOrganizations_aggregate'];
      result$data['_Organization_membersInOrganizations_aggregate'] =
          l$$_Organization_membersInOrganizations_aggregate == null
              ? null
              : Input$_Organization_membersInOrganization_aggregate_bool_exp
                  .fromJson((l$$_Organization_membersInOrganizations_aggregate
                      as Map<String, dynamic>));
    }
    if (data.containsKey('_SoulWinningSessionGroup_members')) {
      final l$$_SoulWinningSessionGroup_members =
          data['_SoulWinningSessionGroup_members'];
      result$data['_SoulWinningSessionGroup_members'] =
          l$$_SoulWinningSessionGroup_members == null
              ? null
              : Input$_SoulWinningSessionGroup_members_bool_exp.fromJson(
                  (l$$_SoulWinningSessionGroup_members
                      as Map<String, dynamic>));
    }
    if (data.containsKey('_SoulWinningSessionGroup_members_aggregate')) {
      final l$$_SoulWinningSessionGroup_members_aggregate =
          data['_SoulWinningSessionGroup_members_aggregate'];
      result$data['_SoulWinningSessionGroup_members_aggregate'] =
          l$$_SoulWinningSessionGroup_members_aggregate == null
              ? null
              : Input$_SoulWinningSessionGroup_members_aggregate_bool_exp
                  .fromJson((l$$_SoulWinningSessionGroup_members_aggregate
                      as Map<String, dynamic>));
    }
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map(
              (e) => Input$User_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = l$$_not == null
          ? null
          : Input$User_bool_exp.fromJson((l$$_not as Map<String, dynamic>));
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map(
              (e) => Input$User_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('adminUiPassword')) {
      final l$adminUiPassword = data['adminUiPassword'];
      result$data['adminUiPassword'] = l$adminUiPassword == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$adminUiPassword as Map<String, dynamic>));
    }
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] = l$createdAt == null
          ? null
          : Input$timestamp_comparison_exp.fromJson(
              (l$createdAt as Map<String, dynamic>));
    }
    if (data.containsKey('email')) {
      final l$email = data['email'];
      result$data['email'] = l$email == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$email as Map<String, dynamic>));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$id as Map<String, dynamic>));
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] = l$name == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$name as Map<String, dynamic>));
    }
    return Input$User_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$_Organization_adminsOfOrganization_bool_exp?
      get $_Organization_adminsOfOrganizations =>
          (_$data['_Organization_adminsOfOrganizations']
              as Input$_Organization_adminsOfOrganization_bool_exp?);
  Input$_Organization_adminsOfOrganization_aggregate_bool_exp?
      get $_Organization_adminsOfOrganizations_aggregate =>
          (_$data['_Organization_adminsOfOrganizations_aggregate']
              as Input$_Organization_adminsOfOrganization_aggregate_bool_exp?);
  Input$_Organization_membersInOrganization_bool_exp?
      get $_Organization_membersInOrganizations =>
          (_$data['_Organization_membersInOrganizations']
              as Input$_Organization_membersInOrganization_bool_exp?);
  Input$_Organization_membersInOrganization_aggregate_bool_exp?
      get $_Organization_membersInOrganizations_aggregate =>
          (_$data['_Organization_membersInOrganizations_aggregate']
              as Input$_Organization_membersInOrganization_aggregate_bool_exp?);
  Input$_SoulWinningSessionGroup_members_bool_exp?
      get $_SoulWinningSessionGroup_members =>
          (_$data['_SoulWinningSessionGroup_members']
              as Input$_SoulWinningSessionGroup_members_bool_exp?);
  Input$_SoulWinningSessionGroup_members_aggregate_bool_exp?
      get $_SoulWinningSessionGroup_members_aggregate =>
          (_$data['_SoulWinningSessionGroup_members_aggregate']
              as Input$_SoulWinningSessionGroup_members_aggregate_bool_exp?);
  List<Input$User_bool_exp>? get $_and =>
      (_$data['_and'] as List<Input$User_bool_exp>?);
  Input$User_bool_exp? get $_not => (_$data['_not'] as Input$User_bool_exp?);
  List<Input$User_bool_exp>? get $_or =>
      (_$data['_or'] as List<Input$User_bool_exp>?);
  Input$String_comparison_exp? get adminUiPassword =>
      (_$data['adminUiPassword'] as Input$String_comparison_exp?);
  Input$timestamp_comparison_exp? get createdAt =>
      (_$data['createdAt'] as Input$timestamp_comparison_exp?);
  Input$String_comparison_exp? get email =>
      (_$data['email'] as Input$String_comparison_exp?);
  Input$String_comparison_exp? get id =>
      (_$data['id'] as Input$String_comparison_exp?);
  Input$String_comparison_exp? get name =>
      (_$data['name'] as Input$String_comparison_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_Organization_adminsOfOrganizations')) {
      final l$$_Organization_adminsOfOrganizations =
          $_Organization_adminsOfOrganizations;
      result$data['_Organization_adminsOfOrganizations'] =
          l$$_Organization_adminsOfOrganizations?.toJson();
    }
    if (_$data.containsKey('_Organization_adminsOfOrganizations_aggregate')) {
      final l$$_Organization_adminsOfOrganizations_aggregate =
          $_Organization_adminsOfOrganizations_aggregate;
      result$data['_Organization_adminsOfOrganizations_aggregate'] =
          l$$_Organization_adminsOfOrganizations_aggregate?.toJson();
    }
    if (_$data.containsKey('_Organization_membersInOrganizations')) {
      final l$$_Organization_membersInOrganizations =
          $_Organization_membersInOrganizations;
      result$data['_Organization_membersInOrganizations'] =
          l$$_Organization_membersInOrganizations?.toJson();
    }
    if (_$data.containsKey('_Organization_membersInOrganizations_aggregate')) {
      final l$$_Organization_membersInOrganizations_aggregate =
          $_Organization_membersInOrganizations_aggregate;
      result$data['_Organization_membersInOrganizations_aggregate'] =
          l$$_Organization_membersInOrganizations_aggregate?.toJson();
    }
    if (_$data.containsKey('_SoulWinningSessionGroup_members')) {
      final l$$_SoulWinningSessionGroup_members =
          $_SoulWinningSessionGroup_members;
      result$data['_SoulWinningSessionGroup_members'] =
          l$$_SoulWinningSessionGroup_members?.toJson();
    }
    if (_$data.containsKey('_SoulWinningSessionGroup_members_aggregate')) {
      final l$$_SoulWinningSessionGroup_members_aggregate =
          $_SoulWinningSessionGroup_members_aggregate;
      result$data['_SoulWinningSessionGroup_members_aggregate'] =
          l$$_SoulWinningSessionGroup_members_aggregate?.toJson();
    }
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.toJson();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('adminUiPassword')) {
      final l$adminUiPassword = adminUiPassword;
      result$data['adminUiPassword'] = l$adminUiPassword?.toJson();
    }
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] = l$createdAt?.toJson();
    }
    if (_$data.containsKey('email')) {
      final l$email = email;
      result$data['email'] = l$email?.toJson();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id?.toJson();
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] = l$name?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$User_bool_exp<Input$User_bool_exp> get copyWith =>
      CopyWith$Input$User_bool_exp(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$User_bool_exp) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_Organization_adminsOfOrganizations =
        $_Organization_adminsOfOrganizations;
    final lOther$$_Organization_adminsOfOrganizations =
        other.$_Organization_adminsOfOrganizations;
    if (_$data.containsKey('_Organization_adminsOfOrganizations') !=
        other._$data.containsKey('_Organization_adminsOfOrganizations')) {
      return false;
    }
    if (l$$_Organization_adminsOfOrganizations !=
        lOther$$_Organization_adminsOfOrganizations) {
      return false;
    }
    final l$$_Organization_adminsOfOrganizations_aggregate =
        $_Organization_adminsOfOrganizations_aggregate;
    final lOther$$_Organization_adminsOfOrganizations_aggregate =
        other.$_Organization_adminsOfOrganizations_aggregate;
    if (_$data.containsKey('_Organization_adminsOfOrganizations_aggregate') !=
        other._$data
            .containsKey('_Organization_adminsOfOrganizations_aggregate')) {
      return false;
    }
    if (l$$_Organization_adminsOfOrganizations_aggregate !=
        lOther$$_Organization_adminsOfOrganizations_aggregate) {
      return false;
    }
    final l$$_Organization_membersInOrganizations =
        $_Organization_membersInOrganizations;
    final lOther$$_Organization_membersInOrganizations =
        other.$_Organization_membersInOrganizations;
    if (_$data.containsKey('_Organization_membersInOrganizations') !=
        other._$data.containsKey('_Organization_membersInOrganizations')) {
      return false;
    }
    if (l$$_Organization_membersInOrganizations !=
        lOther$$_Organization_membersInOrganizations) {
      return false;
    }
    final l$$_Organization_membersInOrganizations_aggregate =
        $_Organization_membersInOrganizations_aggregate;
    final lOther$$_Organization_membersInOrganizations_aggregate =
        other.$_Organization_membersInOrganizations_aggregate;
    if (_$data.containsKey('_Organization_membersInOrganizations_aggregate') !=
        other._$data
            .containsKey('_Organization_membersInOrganizations_aggregate')) {
      return false;
    }
    if (l$$_Organization_membersInOrganizations_aggregate !=
        lOther$$_Organization_membersInOrganizations_aggregate) {
      return false;
    }
    final l$$_SoulWinningSessionGroup_members =
        $_SoulWinningSessionGroup_members;
    final lOther$$_SoulWinningSessionGroup_members =
        other.$_SoulWinningSessionGroup_members;
    if (_$data.containsKey('_SoulWinningSessionGroup_members') !=
        other._$data.containsKey('_SoulWinningSessionGroup_members')) {
      return false;
    }
    if (l$$_SoulWinningSessionGroup_members !=
        lOther$$_SoulWinningSessionGroup_members) {
      return false;
    }
    final l$$_SoulWinningSessionGroup_members_aggregate =
        $_SoulWinningSessionGroup_members_aggregate;
    final lOther$$_SoulWinningSessionGroup_members_aggregate =
        other.$_SoulWinningSessionGroup_members_aggregate;
    if (_$data.containsKey('_SoulWinningSessionGroup_members_aggregate') !=
        other._$data
            .containsKey('_SoulWinningSessionGroup_members_aggregate')) {
      return false;
    }
    if (l$$_SoulWinningSessionGroup_members_aggregate !=
        lOther$$_SoulWinningSessionGroup_members_aggregate) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$adminUiPassword = adminUiPassword;
    final lOther$adminUiPassword = other.adminUiPassword;
    if (_$data.containsKey('adminUiPassword') !=
        other._$data.containsKey('adminUiPassword')) {
      return false;
    }
    if (l$adminUiPassword != lOther$adminUiPassword) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$email = email;
    final lOther$email = other.email;
    if (_$data.containsKey('email') != other._$data.containsKey('email')) {
      return false;
    }
    if (l$email != lOther$email) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_Organization_adminsOfOrganizations =
        $_Organization_adminsOfOrganizations;
    final l$$_Organization_adminsOfOrganizations_aggregate =
        $_Organization_adminsOfOrganizations_aggregate;
    final l$$_Organization_membersInOrganizations =
        $_Organization_membersInOrganizations;
    final l$$_Organization_membersInOrganizations_aggregate =
        $_Organization_membersInOrganizations_aggregate;
    final l$$_SoulWinningSessionGroup_members =
        $_SoulWinningSessionGroup_members;
    final l$$_SoulWinningSessionGroup_members_aggregate =
        $_SoulWinningSessionGroup_members_aggregate;
    final l$$_and = $_and;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$adminUiPassword = adminUiPassword;
    final l$createdAt = createdAt;
    final l$email = email;
    final l$id = id;
    final l$name = name;
    return Object.hashAll([
      _$data.containsKey('_Organization_adminsOfOrganizations')
          ? l$$_Organization_adminsOfOrganizations
          : const {},
      _$data.containsKey('_Organization_adminsOfOrganizations_aggregate')
          ? l$$_Organization_adminsOfOrganizations_aggregate
          : const {},
      _$data.containsKey('_Organization_membersInOrganizations')
          ? l$$_Organization_membersInOrganizations
          : const {},
      _$data.containsKey('_Organization_membersInOrganizations_aggregate')
          ? l$$_Organization_membersInOrganizations_aggregate
          : const {},
      _$data.containsKey('_SoulWinningSessionGroup_members')
          ? l$$_SoulWinningSessionGroup_members
          : const {},
      _$data.containsKey('_SoulWinningSessionGroup_members_aggregate')
          ? l$$_SoulWinningSessionGroup_members_aggregate
          : const {},
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_not') ? l$$_not : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('adminUiPassword') ? l$adminUiPassword : const {},
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('email') ? l$email : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
    ]);
  }
}

abstract class CopyWith$Input$User_bool_exp<TRes> {
  factory CopyWith$Input$User_bool_exp(
    Input$User_bool_exp instance,
    TRes Function(Input$User_bool_exp) then,
  ) = _CopyWithImpl$Input$User_bool_exp;

  factory CopyWith$Input$User_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$User_bool_exp;

  TRes call({
    Input$_Organization_adminsOfOrganization_bool_exp?
        $_Organization_adminsOfOrganizations,
    Input$_Organization_adminsOfOrganization_aggregate_bool_exp?
        $_Organization_adminsOfOrganizations_aggregate,
    Input$_Organization_membersInOrganization_bool_exp?
        $_Organization_membersInOrganizations,
    Input$_Organization_membersInOrganization_aggregate_bool_exp?
        $_Organization_membersInOrganizations_aggregate,
    Input$_SoulWinningSessionGroup_members_bool_exp?
        $_SoulWinningSessionGroup_members,
    Input$_SoulWinningSessionGroup_members_aggregate_bool_exp?
        $_SoulWinningSessionGroup_members_aggregate,
    List<Input$User_bool_exp>? $_and,
    Input$User_bool_exp? $_not,
    List<Input$User_bool_exp>? $_or,
    Input$String_comparison_exp? adminUiPassword,
    Input$timestamp_comparison_exp? createdAt,
    Input$String_comparison_exp? email,
    Input$String_comparison_exp? id,
    Input$String_comparison_exp? name,
  });
  CopyWith$Input$_Organization_adminsOfOrganization_bool_exp<TRes>
      get $_Organization_adminsOfOrganizations;
  CopyWith$Input$_Organization_adminsOfOrganization_aggregate_bool_exp<TRes>
      get $_Organization_adminsOfOrganizations_aggregate;
  CopyWith$Input$_Organization_membersInOrganization_bool_exp<TRes>
      get $_Organization_membersInOrganizations;
  CopyWith$Input$_Organization_membersInOrganization_aggregate_bool_exp<TRes>
      get $_Organization_membersInOrganizations_aggregate;
  CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp<TRes>
      get $_SoulWinningSessionGroup_members;
  CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_bool_exp<TRes>
      get $_SoulWinningSessionGroup_members_aggregate;
  TRes $_and(
      Iterable<Input$User_bool_exp>? Function(
              Iterable<CopyWith$Input$User_bool_exp<Input$User_bool_exp>>?)
          _fn);
  CopyWith$Input$User_bool_exp<TRes> get $_not;
  TRes $_or(
      Iterable<Input$User_bool_exp>? Function(
              Iterable<CopyWith$Input$User_bool_exp<Input$User_bool_exp>>?)
          _fn);
  CopyWith$Input$String_comparison_exp<TRes> get adminUiPassword;
  CopyWith$Input$timestamp_comparison_exp<TRes> get createdAt;
  CopyWith$Input$String_comparison_exp<TRes> get email;
  CopyWith$Input$String_comparison_exp<TRes> get id;
  CopyWith$Input$String_comparison_exp<TRes> get name;
}

class _CopyWithImpl$Input$User_bool_exp<TRes>
    implements CopyWith$Input$User_bool_exp<TRes> {
  _CopyWithImpl$Input$User_bool_exp(
    this._instance,
    this._then,
  );

  final Input$User_bool_exp _instance;

  final TRes Function(Input$User_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_Organization_adminsOfOrganizations = _undefined,
    Object? $_Organization_adminsOfOrganizations_aggregate = _undefined,
    Object? $_Organization_membersInOrganizations = _undefined,
    Object? $_Organization_membersInOrganizations_aggregate = _undefined,
    Object? $_SoulWinningSessionGroup_members = _undefined,
    Object? $_SoulWinningSessionGroup_members_aggregate = _undefined,
    Object? $_and = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? adminUiPassword = _undefined,
    Object? createdAt = _undefined,
    Object? email = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
  }) =>
      _then(Input$User_bool_exp._({
        ..._instance._$data,
        if ($_Organization_adminsOfOrganizations != _undefined)
          '_Organization_adminsOfOrganizations':
              ($_Organization_adminsOfOrganizations
                  as Input$_Organization_adminsOfOrganization_bool_exp?),
        if ($_Organization_adminsOfOrganizations_aggregate != _undefined)
          '_Organization_adminsOfOrganizations_aggregate':
              ($_Organization_adminsOfOrganizations_aggregate
                  as Input$_Organization_adminsOfOrganization_aggregate_bool_exp?),
        if ($_Organization_membersInOrganizations != _undefined)
          '_Organization_membersInOrganizations':
              ($_Organization_membersInOrganizations
                  as Input$_Organization_membersInOrganization_bool_exp?),
        if ($_Organization_membersInOrganizations_aggregate != _undefined)
          '_Organization_membersInOrganizations_aggregate':
              ($_Organization_membersInOrganizations_aggregate
                  as Input$_Organization_membersInOrganization_aggregate_bool_exp?),
        if ($_SoulWinningSessionGroup_members != _undefined)
          '_SoulWinningSessionGroup_members': ($_SoulWinningSessionGroup_members
              as Input$_SoulWinningSessionGroup_members_bool_exp?),
        if ($_SoulWinningSessionGroup_members_aggregate != _undefined)
          '_SoulWinningSessionGroup_members_aggregate':
              ($_SoulWinningSessionGroup_members_aggregate
                  as Input$_SoulWinningSessionGroup_members_aggregate_bool_exp?),
        if ($_and != _undefined) '_and': ($_and as List<Input$User_bool_exp>?),
        if ($_not != _undefined) '_not': ($_not as Input$User_bool_exp?),
        if ($_or != _undefined) '_or': ($_or as List<Input$User_bool_exp>?),
        if (adminUiPassword != _undefined)
          'adminUiPassword': (adminUiPassword as Input$String_comparison_exp?),
        if (createdAt != _undefined)
          'createdAt': (createdAt as Input$timestamp_comparison_exp?),
        if (email != _undefined)
          'email': (email as Input$String_comparison_exp?),
        if (id != _undefined) 'id': (id as Input$String_comparison_exp?),
        if (name != _undefined) 'name': (name as Input$String_comparison_exp?),
      }));
  CopyWith$Input$_Organization_adminsOfOrganization_bool_exp<TRes>
      get $_Organization_adminsOfOrganizations {
    final local$$_Organization_adminsOfOrganizations =
        _instance.$_Organization_adminsOfOrganizations;
    return local$$_Organization_adminsOfOrganizations == null
        ? CopyWith$Input$_Organization_adminsOfOrganization_bool_exp.stub(
            _then(_instance))
        : CopyWith$Input$_Organization_adminsOfOrganization_bool_exp(
            local$$_Organization_adminsOfOrganizations,
            (e) => call($_Organization_adminsOfOrganizations: e));
  }

  CopyWith$Input$_Organization_adminsOfOrganization_aggregate_bool_exp<TRes>
      get $_Organization_adminsOfOrganizations_aggregate {
    final local$$_Organization_adminsOfOrganizations_aggregate =
        _instance.$_Organization_adminsOfOrganizations_aggregate;
    return local$$_Organization_adminsOfOrganizations_aggregate == null
        ? CopyWith$Input$_Organization_adminsOfOrganization_aggregate_bool_exp
            .stub(_then(_instance))
        : CopyWith$Input$_Organization_adminsOfOrganization_aggregate_bool_exp(
            local$$_Organization_adminsOfOrganizations_aggregate,
            (e) => call($_Organization_adminsOfOrganizations_aggregate: e));
  }

  CopyWith$Input$_Organization_membersInOrganization_bool_exp<TRes>
      get $_Organization_membersInOrganizations {
    final local$$_Organization_membersInOrganizations =
        _instance.$_Organization_membersInOrganizations;
    return local$$_Organization_membersInOrganizations == null
        ? CopyWith$Input$_Organization_membersInOrganization_bool_exp.stub(
            _then(_instance))
        : CopyWith$Input$_Organization_membersInOrganization_bool_exp(
            local$$_Organization_membersInOrganizations,
            (e) => call($_Organization_membersInOrganizations: e));
  }

  CopyWith$Input$_Organization_membersInOrganization_aggregate_bool_exp<TRes>
      get $_Organization_membersInOrganizations_aggregate {
    final local$$_Organization_membersInOrganizations_aggregate =
        _instance.$_Organization_membersInOrganizations_aggregate;
    return local$$_Organization_membersInOrganizations_aggregate == null
        ? CopyWith$Input$_Organization_membersInOrganization_aggregate_bool_exp
            .stub(_then(_instance))
        : CopyWith$Input$_Organization_membersInOrganization_aggregate_bool_exp(
            local$$_Organization_membersInOrganizations_aggregate,
            (e) => call($_Organization_membersInOrganizations_aggregate: e));
  }

  CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp<TRes>
      get $_SoulWinningSessionGroup_members {
    final local$$_SoulWinningSessionGroup_members =
        _instance.$_SoulWinningSessionGroup_members;
    return local$$_SoulWinningSessionGroup_members == null
        ? CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp.stub(
            _then(_instance))
        : CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp(
            local$$_SoulWinningSessionGroup_members,
            (e) => call($_SoulWinningSessionGroup_members: e));
  }

  CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_bool_exp<TRes>
      get $_SoulWinningSessionGroup_members_aggregate {
    final local$$_SoulWinningSessionGroup_members_aggregate =
        _instance.$_SoulWinningSessionGroup_members_aggregate;
    return local$$_SoulWinningSessionGroup_members_aggregate == null
        ? CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_bool_exp
            .stub(_then(_instance))
        : CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_bool_exp(
            local$$_SoulWinningSessionGroup_members_aggregate,
            (e) => call($_SoulWinningSessionGroup_members_aggregate: e));
  }

  TRes $_and(
          Iterable<Input$User_bool_exp>? Function(
                  Iterable<CopyWith$Input$User_bool_exp<Input$User_bool_exp>>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and?.map((e) => CopyWith$Input$User_bool_exp(
                e,
                (i) => i,
              )))?.toList());
  CopyWith$Input$User_bool_exp<TRes> get $_not {
    final local$$_not = _instance.$_not;
    return local$$_not == null
        ? CopyWith$Input$User_bool_exp.stub(_then(_instance))
        : CopyWith$Input$User_bool_exp(local$$_not, (e) => call($_not: e));
  }

  TRes $_or(
          Iterable<Input$User_bool_exp>? Function(
                  Iterable<CopyWith$Input$User_bool_exp<Input$User_bool_exp>>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map((e) => CopyWith$Input$User_bool_exp(
                e,
                (i) => i,
              )))?.toList());
  CopyWith$Input$String_comparison_exp<TRes> get adminUiPassword {
    final local$adminUiPassword = _instance.adminUiPassword;
    return local$adminUiPassword == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$adminUiPassword, (e) => call(adminUiPassword: e));
  }

  CopyWith$Input$timestamp_comparison_exp<TRes> get createdAt {
    final local$createdAt = _instance.createdAt;
    return local$createdAt == null
        ? CopyWith$Input$timestamp_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamp_comparison_exp(
            local$createdAt, (e) => call(createdAt: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get email {
    final local$email = _instance.email;
    return local$email == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$email, (e) => call(email: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get id {
    final local$id = _instance.id;
    return local$id == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(local$id, (e) => call(id: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get name {
    final local$name = _instance.name;
    return local$name == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$name, (e) => call(name: e));
  }
}

class _CopyWithStubImpl$Input$User_bool_exp<TRes>
    implements CopyWith$Input$User_bool_exp<TRes> {
  _CopyWithStubImpl$Input$User_bool_exp(this._res);

  TRes _res;

  call({
    Input$_Organization_adminsOfOrganization_bool_exp?
        $_Organization_adminsOfOrganizations,
    Input$_Organization_adminsOfOrganization_aggregate_bool_exp?
        $_Organization_adminsOfOrganizations_aggregate,
    Input$_Organization_membersInOrganization_bool_exp?
        $_Organization_membersInOrganizations,
    Input$_Organization_membersInOrganization_aggregate_bool_exp?
        $_Organization_membersInOrganizations_aggregate,
    Input$_SoulWinningSessionGroup_members_bool_exp?
        $_SoulWinningSessionGroup_members,
    Input$_SoulWinningSessionGroup_members_aggregate_bool_exp?
        $_SoulWinningSessionGroup_members_aggregate,
    List<Input$User_bool_exp>? $_and,
    Input$User_bool_exp? $_not,
    List<Input$User_bool_exp>? $_or,
    Input$String_comparison_exp? adminUiPassword,
    Input$timestamp_comparison_exp? createdAt,
    Input$String_comparison_exp? email,
    Input$String_comparison_exp? id,
    Input$String_comparison_exp? name,
  }) =>
      _res;
  CopyWith$Input$_Organization_adminsOfOrganization_bool_exp<TRes>
      get $_Organization_adminsOfOrganizations =>
          CopyWith$Input$_Organization_adminsOfOrganization_bool_exp.stub(_res);
  CopyWith$Input$_Organization_adminsOfOrganization_aggregate_bool_exp<TRes>
      get $_Organization_adminsOfOrganizations_aggregate =>
          CopyWith$Input$_Organization_adminsOfOrganization_aggregate_bool_exp
              .stub(_res);
  CopyWith$Input$_Organization_membersInOrganization_bool_exp<TRes>
      get $_Organization_membersInOrganizations =>
          CopyWith$Input$_Organization_membersInOrganization_bool_exp.stub(
              _res);
  CopyWith$Input$_Organization_membersInOrganization_aggregate_bool_exp<TRes>
      get $_Organization_membersInOrganizations_aggregate =>
          CopyWith$Input$_Organization_membersInOrganization_aggregate_bool_exp
              .stub(_res);
  CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp<TRes>
      get $_SoulWinningSessionGroup_members =>
          CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp.stub(_res);
  CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_bool_exp<TRes>
      get $_SoulWinningSessionGroup_members_aggregate =>
          CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_bool_exp
              .stub(_res);
  $_and(_fn) => _res;
  CopyWith$Input$User_bool_exp<TRes> get $_not =>
      CopyWith$Input$User_bool_exp.stub(_res);
  $_or(_fn) => _res;
  CopyWith$Input$String_comparison_exp<TRes> get adminUiPassword =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$timestamp_comparison_exp<TRes> get createdAt =>
      CopyWith$Input$timestamp_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get email =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get id =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get name =>
      CopyWith$Input$String_comparison_exp.stub(_res);
}

class Input$_Organization_adminsOfOrganization_bool_exp {
  factory Input$_Organization_adminsOfOrganization_bool_exp({
    Input$String_comparison_exp? A,
    Input$String_comparison_exp? B,
    Input$Organization_bool_exp? Organization,
    Input$User_bool_exp? User,
    List<Input$_Organization_adminsOfOrganization_bool_exp>? $_and,
    Input$_Organization_adminsOfOrganization_bool_exp? $_not,
    List<Input$_Organization_adminsOfOrganization_bool_exp>? $_or,
  }) =>
      Input$_Organization_adminsOfOrganization_bool_exp._({
        if (A != null) r'A': A,
        if (B != null) r'B': B,
        if (Organization != null) r'Organization': Organization,
        if (User != null) r'User': User,
        if ($_and != null) r'_and': $_and,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
      });

  Input$_Organization_adminsOfOrganization_bool_exp._(this._$data);

  factory Input$_Organization_adminsOfOrganization_bool_exp.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('A')) {
      final l$A = data['A'];
      result$data['A'] = l$A == null
          ? null
          : Input$String_comparison_exp.fromJson((l$A as Map<String, dynamic>));
    }
    if (data.containsKey('B')) {
      final l$B = data['B'];
      result$data['B'] = l$B == null
          ? null
          : Input$String_comparison_exp.fromJson((l$B as Map<String, dynamic>));
    }
    if (data.containsKey('Organization')) {
      final l$Organization = data['Organization'];
      result$data['Organization'] = l$Organization == null
          ? null
          : Input$Organization_bool_exp.fromJson(
              (l$Organization as Map<String, dynamic>));
    }
    if (data.containsKey('User')) {
      final l$User = data['User'];
      result$data['User'] = l$User == null
          ? null
          : Input$User_bool_exp.fromJson((l$User as Map<String, dynamic>));
    }
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) =>
              Input$_Organization_adminsOfOrganization_bool_exp.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = l$$_not == null
          ? null
          : Input$_Organization_adminsOfOrganization_bool_exp.fromJson(
              (l$$_not as Map<String, dynamic>));
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) =>
              Input$_Organization_adminsOfOrganization_bool_exp.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    return Input$_Organization_adminsOfOrganization_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$String_comparison_exp? get A =>
      (_$data['A'] as Input$String_comparison_exp?);
  Input$String_comparison_exp? get B =>
      (_$data['B'] as Input$String_comparison_exp?);
  Input$Organization_bool_exp? get Organization =>
      (_$data['Organization'] as Input$Organization_bool_exp?);
  Input$User_bool_exp? get User => (_$data['User'] as Input$User_bool_exp?);
  List<Input$_Organization_adminsOfOrganization_bool_exp>? get $_and =>
      (_$data['_and']
          as List<Input$_Organization_adminsOfOrganization_bool_exp>?);
  Input$_Organization_adminsOfOrganization_bool_exp? get $_not =>
      (_$data['_not'] as Input$_Organization_adminsOfOrganization_bool_exp?);
  List<Input$_Organization_adminsOfOrganization_bool_exp>? get $_or =>
      (_$data['_or']
          as List<Input$_Organization_adminsOfOrganization_bool_exp>?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('A')) {
      final l$A = A;
      result$data['A'] = l$A?.toJson();
    }
    if (_$data.containsKey('B')) {
      final l$B = B;
      result$data['B'] = l$B?.toJson();
    }
    if (_$data.containsKey('Organization')) {
      final l$Organization = Organization;
      result$data['Organization'] = l$Organization?.toJson();
    }
    if (_$data.containsKey('User')) {
      final l$User = User;
      result$data['User'] = l$User?.toJson();
    }
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.toJson();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e.toJson()).toList();
    }
    return result$data;
  }

  CopyWith$Input$_Organization_adminsOfOrganization_bool_exp<
          Input$_Organization_adminsOfOrganization_bool_exp>
      get copyWith =>
          CopyWith$Input$_Organization_adminsOfOrganization_bool_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$_Organization_adminsOfOrganization_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$A = A;
    final lOther$A = other.A;
    if (_$data.containsKey('A') != other._$data.containsKey('A')) {
      return false;
    }
    if (l$A != lOther$A) {
      return false;
    }
    final l$B = B;
    final lOther$B = other.B;
    if (_$data.containsKey('B') != other._$data.containsKey('B')) {
      return false;
    }
    if (l$B != lOther$B) {
      return false;
    }
    final l$Organization = Organization;
    final lOther$Organization = other.Organization;
    if (_$data.containsKey('Organization') !=
        other._$data.containsKey('Organization')) {
      return false;
    }
    if (l$Organization != lOther$Organization) {
      return false;
    }
    final l$User = User;
    final lOther$User = other.User;
    if (_$data.containsKey('User') != other._$data.containsKey('User')) {
      return false;
    }
    if (l$User != lOther$User) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$A = A;
    final l$B = B;
    final l$Organization = Organization;
    final l$User = User;
    final l$$_and = $_and;
    final l$$_not = $_not;
    final l$$_or = $_or;
    return Object.hashAll([
      _$data.containsKey('A') ? l$A : const {},
      _$data.containsKey('B') ? l$B : const {},
      _$data.containsKey('Organization') ? l$Organization : const {},
      _$data.containsKey('User') ? l$User : const {},
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_not') ? l$$_not : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$_Organization_adminsOfOrganization_bool_exp<
    TRes> {
  factory CopyWith$Input$_Organization_adminsOfOrganization_bool_exp(
    Input$_Organization_adminsOfOrganization_bool_exp instance,
    TRes Function(Input$_Organization_adminsOfOrganization_bool_exp) then,
  ) = _CopyWithImpl$Input$_Organization_adminsOfOrganization_bool_exp;

  factory CopyWith$Input$_Organization_adminsOfOrganization_bool_exp.stub(
          TRes res) =
      _CopyWithStubImpl$Input$_Organization_adminsOfOrganization_bool_exp;

  TRes call({
    Input$String_comparison_exp? A,
    Input$String_comparison_exp? B,
    Input$Organization_bool_exp? Organization,
    Input$User_bool_exp? User,
    List<Input$_Organization_adminsOfOrganization_bool_exp>? $_and,
    Input$_Organization_adminsOfOrganization_bool_exp? $_not,
    List<Input$_Organization_adminsOfOrganization_bool_exp>? $_or,
  });
  CopyWith$Input$String_comparison_exp<TRes> get A;
  CopyWith$Input$String_comparison_exp<TRes> get B;
  CopyWith$Input$Organization_bool_exp<TRes> get Organization;
  CopyWith$Input$User_bool_exp<TRes> get User;
  TRes $_and(
      Iterable<Input$_Organization_adminsOfOrganization_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$_Organization_adminsOfOrganization_bool_exp<
                      Input$_Organization_adminsOfOrganization_bool_exp>>?)
          _fn);
  CopyWith$Input$_Organization_adminsOfOrganization_bool_exp<TRes> get $_not;
  TRes $_or(
      Iterable<Input$_Organization_adminsOfOrganization_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$_Organization_adminsOfOrganization_bool_exp<
                      Input$_Organization_adminsOfOrganization_bool_exp>>?)
          _fn);
}

class _CopyWithImpl$Input$_Organization_adminsOfOrganization_bool_exp<TRes>
    implements
        CopyWith$Input$_Organization_adminsOfOrganization_bool_exp<TRes> {
  _CopyWithImpl$Input$_Organization_adminsOfOrganization_bool_exp(
    this._instance,
    this._then,
  );

  final Input$_Organization_adminsOfOrganization_bool_exp _instance;

  final TRes Function(Input$_Organization_adminsOfOrganization_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? A = _undefined,
    Object? B = _undefined,
    Object? Organization = _undefined,
    Object? User = _undefined,
    Object? $_and = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
  }) =>
      _then(Input$_Organization_adminsOfOrganization_bool_exp._({
        ..._instance._$data,
        if (A != _undefined) 'A': (A as Input$String_comparison_exp?),
        if (B != _undefined) 'B': (B as Input$String_comparison_exp?),
        if (Organization != _undefined)
          'Organization': (Organization as Input$Organization_bool_exp?),
        if (User != _undefined) 'User': (User as Input$User_bool_exp?),
        if ($_and != _undefined)
          '_and': ($_and
              as List<Input$_Organization_adminsOfOrganization_bool_exp>?),
        if ($_not != _undefined)
          '_not': ($_not as Input$_Organization_adminsOfOrganization_bool_exp?),
        if ($_or != _undefined)
          '_or': ($_or
              as List<Input$_Organization_adminsOfOrganization_bool_exp>?),
      }));
  CopyWith$Input$String_comparison_exp<TRes> get A {
    final local$A = _instance.A;
    return local$A == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(local$A, (e) => call(A: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get B {
    final local$B = _instance.B;
    return local$B == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(local$B, (e) => call(B: e));
  }

  CopyWith$Input$Organization_bool_exp<TRes> get Organization {
    final local$Organization = _instance.Organization;
    return local$Organization == null
        ? CopyWith$Input$Organization_bool_exp.stub(_then(_instance))
        : CopyWith$Input$Organization_bool_exp(
            local$Organization, (e) => call(Organization: e));
  }

  CopyWith$Input$User_bool_exp<TRes> get User {
    final local$User = _instance.User;
    return local$User == null
        ? CopyWith$Input$User_bool_exp.stub(_then(_instance))
        : CopyWith$Input$User_bool_exp(local$User, (e) => call(User: e));
  }

  TRes $_and(
          Iterable<Input$_Organization_adminsOfOrganization_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$_Organization_adminsOfOrganization_bool_exp<
                          Input$_Organization_adminsOfOrganization_bool_exp>>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and?.map(
              (e) => CopyWith$Input$_Organization_adminsOfOrganization_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());
  CopyWith$Input$_Organization_adminsOfOrganization_bool_exp<TRes> get $_not {
    final local$$_not = _instance.$_not;
    return local$$_not == null
        ? CopyWith$Input$_Organization_adminsOfOrganization_bool_exp.stub(
            _then(_instance))
        : CopyWith$Input$_Organization_adminsOfOrganization_bool_exp(
            local$$_not, (e) => call($_not: e));
  }

  TRes $_or(
          Iterable<Input$_Organization_adminsOfOrganization_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$_Organization_adminsOfOrganization_bool_exp<
                          Input$_Organization_adminsOfOrganization_bool_exp>>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map(
              (e) => CopyWith$Input$_Organization_adminsOfOrganization_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());
}

class _CopyWithStubImpl$Input$_Organization_adminsOfOrganization_bool_exp<TRes>
    implements
        CopyWith$Input$_Organization_adminsOfOrganization_bool_exp<TRes> {
  _CopyWithStubImpl$Input$_Organization_adminsOfOrganization_bool_exp(
      this._res);

  TRes _res;

  call({
    Input$String_comparison_exp? A,
    Input$String_comparison_exp? B,
    Input$Organization_bool_exp? Organization,
    Input$User_bool_exp? User,
    List<Input$_Organization_adminsOfOrganization_bool_exp>? $_and,
    Input$_Organization_adminsOfOrganization_bool_exp? $_not,
    List<Input$_Organization_adminsOfOrganization_bool_exp>? $_or,
  }) =>
      _res;
  CopyWith$Input$String_comparison_exp<TRes> get A =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get B =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$Organization_bool_exp<TRes> get Organization =>
      CopyWith$Input$Organization_bool_exp.stub(_res);
  CopyWith$Input$User_bool_exp<TRes> get User =>
      CopyWith$Input$User_bool_exp.stub(_res);
  $_and(_fn) => _res;
  CopyWith$Input$_Organization_adminsOfOrganization_bool_exp<TRes> get $_not =>
      CopyWith$Input$_Organization_adminsOfOrganization_bool_exp.stub(_res);
  $_or(_fn) => _res;
}

class Input$_Organization_membersInOrganization_bool_exp {
  factory Input$_Organization_membersInOrganization_bool_exp({
    Input$String_comparison_exp? A,
    Input$String_comparison_exp? B,
    Input$Organization_bool_exp? Organization,
    Input$User_bool_exp? User,
    List<Input$_Organization_membersInOrganization_bool_exp>? $_and,
    Input$_Organization_membersInOrganization_bool_exp? $_not,
    List<Input$_Organization_membersInOrganization_bool_exp>? $_or,
  }) =>
      Input$_Organization_membersInOrganization_bool_exp._({
        if (A != null) r'A': A,
        if (B != null) r'B': B,
        if (Organization != null) r'Organization': Organization,
        if (User != null) r'User': User,
        if ($_and != null) r'_and': $_and,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
      });

  Input$_Organization_membersInOrganization_bool_exp._(this._$data);

  factory Input$_Organization_membersInOrganization_bool_exp.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('A')) {
      final l$A = data['A'];
      result$data['A'] = l$A == null
          ? null
          : Input$String_comparison_exp.fromJson((l$A as Map<String, dynamic>));
    }
    if (data.containsKey('B')) {
      final l$B = data['B'];
      result$data['B'] = l$B == null
          ? null
          : Input$String_comparison_exp.fromJson((l$B as Map<String, dynamic>));
    }
    if (data.containsKey('Organization')) {
      final l$Organization = data['Organization'];
      result$data['Organization'] = l$Organization == null
          ? null
          : Input$Organization_bool_exp.fromJson(
              (l$Organization as Map<String, dynamic>));
    }
    if (data.containsKey('User')) {
      final l$User = data['User'];
      result$data['User'] = l$User == null
          ? null
          : Input$User_bool_exp.fromJson((l$User as Map<String, dynamic>));
    }
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) =>
              Input$_Organization_membersInOrganization_bool_exp.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = l$$_not == null
          ? null
          : Input$_Organization_membersInOrganization_bool_exp.fromJson(
              (l$$_not as Map<String, dynamic>));
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) =>
              Input$_Organization_membersInOrganization_bool_exp.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    return Input$_Organization_membersInOrganization_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$String_comparison_exp? get A =>
      (_$data['A'] as Input$String_comparison_exp?);
  Input$String_comparison_exp? get B =>
      (_$data['B'] as Input$String_comparison_exp?);
  Input$Organization_bool_exp? get Organization =>
      (_$data['Organization'] as Input$Organization_bool_exp?);
  Input$User_bool_exp? get User => (_$data['User'] as Input$User_bool_exp?);
  List<Input$_Organization_membersInOrganization_bool_exp>? get $_and =>
      (_$data['_and']
          as List<Input$_Organization_membersInOrganization_bool_exp>?);
  Input$_Organization_membersInOrganization_bool_exp? get $_not =>
      (_$data['_not'] as Input$_Organization_membersInOrganization_bool_exp?);
  List<Input$_Organization_membersInOrganization_bool_exp>? get $_or =>
      (_$data['_or']
          as List<Input$_Organization_membersInOrganization_bool_exp>?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('A')) {
      final l$A = A;
      result$data['A'] = l$A?.toJson();
    }
    if (_$data.containsKey('B')) {
      final l$B = B;
      result$data['B'] = l$B?.toJson();
    }
    if (_$data.containsKey('Organization')) {
      final l$Organization = Organization;
      result$data['Organization'] = l$Organization?.toJson();
    }
    if (_$data.containsKey('User')) {
      final l$User = User;
      result$data['User'] = l$User?.toJson();
    }
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.toJson();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e.toJson()).toList();
    }
    return result$data;
  }

  CopyWith$Input$_Organization_membersInOrganization_bool_exp<
          Input$_Organization_membersInOrganization_bool_exp>
      get copyWith =>
          CopyWith$Input$_Organization_membersInOrganization_bool_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$_Organization_membersInOrganization_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$A = A;
    final lOther$A = other.A;
    if (_$data.containsKey('A') != other._$data.containsKey('A')) {
      return false;
    }
    if (l$A != lOther$A) {
      return false;
    }
    final l$B = B;
    final lOther$B = other.B;
    if (_$data.containsKey('B') != other._$data.containsKey('B')) {
      return false;
    }
    if (l$B != lOther$B) {
      return false;
    }
    final l$Organization = Organization;
    final lOther$Organization = other.Organization;
    if (_$data.containsKey('Organization') !=
        other._$data.containsKey('Organization')) {
      return false;
    }
    if (l$Organization != lOther$Organization) {
      return false;
    }
    final l$User = User;
    final lOther$User = other.User;
    if (_$data.containsKey('User') != other._$data.containsKey('User')) {
      return false;
    }
    if (l$User != lOther$User) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$A = A;
    final l$B = B;
    final l$Organization = Organization;
    final l$User = User;
    final l$$_and = $_and;
    final l$$_not = $_not;
    final l$$_or = $_or;
    return Object.hashAll([
      _$data.containsKey('A') ? l$A : const {},
      _$data.containsKey('B') ? l$B : const {},
      _$data.containsKey('Organization') ? l$Organization : const {},
      _$data.containsKey('User') ? l$User : const {},
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_not') ? l$$_not : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$_Organization_membersInOrganization_bool_exp<
    TRes> {
  factory CopyWith$Input$_Organization_membersInOrganization_bool_exp(
    Input$_Organization_membersInOrganization_bool_exp instance,
    TRes Function(Input$_Organization_membersInOrganization_bool_exp) then,
  ) = _CopyWithImpl$Input$_Organization_membersInOrganization_bool_exp;

  factory CopyWith$Input$_Organization_membersInOrganization_bool_exp.stub(
          TRes res) =
      _CopyWithStubImpl$Input$_Organization_membersInOrganization_bool_exp;

  TRes call({
    Input$String_comparison_exp? A,
    Input$String_comparison_exp? B,
    Input$Organization_bool_exp? Organization,
    Input$User_bool_exp? User,
    List<Input$_Organization_membersInOrganization_bool_exp>? $_and,
    Input$_Organization_membersInOrganization_bool_exp? $_not,
    List<Input$_Organization_membersInOrganization_bool_exp>? $_or,
  });
  CopyWith$Input$String_comparison_exp<TRes> get A;
  CopyWith$Input$String_comparison_exp<TRes> get B;
  CopyWith$Input$Organization_bool_exp<TRes> get Organization;
  CopyWith$Input$User_bool_exp<TRes> get User;
  TRes $_and(
      Iterable<Input$_Organization_membersInOrganization_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$_Organization_membersInOrganization_bool_exp<
                      Input$_Organization_membersInOrganization_bool_exp>>?)
          _fn);
  CopyWith$Input$_Organization_membersInOrganization_bool_exp<TRes> get $_not;
  TRes $_or(
      Iterable<Input$_Organization_membersInOrganization_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$_Organization_membersInOrganization_bool_exp<
                      Input$_Organization_membersInOrganization_bool_exp>>?)
          _fn);
}

class _CopyWithImpl$Input$_Organization_membersInOrganization_bool_exp<TRes>
    implements
        CopyWith$Input$_Organization_membersInOrganization_bool_exp<TRes> {
  _CopyWithImpl$Input$_Organization_membersInOrganization_bool_exp(
    this._instance,
    this._then,
  );

  final Input$_Organization_membersInOrganization_bool_exp _instance;

  final TRes Function(Input$_Organization_membersInOrganization_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? A = _undefined,
    Object? B = _undefined,
    Object? Organization = _undefined,
    Object? User = _undefined,
    Object? $_and = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
  }) =>
      _then(Input$_Organization_membersInOrganization_bool_exp._({
        ..._instance._$data,
        if (A != _undefined) 'A': (A as Input$String_comparison_exp?),
        if (B != _undefined) 'B': (B as Input$String_comparison_exp?),
        if (Organization != _undefined)
          'Organization': (Organization as Input$Organization_bool_exp?),
        if (User != _undefined) 'User': (User as Input$User_bool_exp?),
        if ($_and != _undefined)
          '_and': ($_and
              as List<Input$_Organization_membersInOrganization_bool_exp>?),
        if ($_not != _undefined)
          '_not':
              ($_not as Input$_Organization_membersInOrganization_bool_exp?),
        if ($_or != _undefined)
          '_or': ($_or
              as List<Input$_Organization_membersInOrganization_bool_exp>?),
      }));
  CopyWith$Input$String_comparison_exp<TRes> get A {
    final local$A = _instance.A;
    return local$A == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(local$A, (e) => call(A: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get B {
    final local$B = _instance.B;
    return local$B == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(local$B, (e) => call(B: e));
  }

  CopyWith$Input$Organization_bool_exp<TRes> get Organization {
    final local$Organization = _instance.Organization;
    return local$Organization == null
        ? CopyWith$Input$Organization_bool_exp.stub(_then(_instance))
        : CopyWith$Input$Organization_bool_exp(
            local$Organization, (e) => call(Organization: e));
  }

  CopyWith$Input$User_bool_exp<TRes> get User {
    final local$User = _instance.User;
    return local$User == null
        ? CopyWith$Input$User_bool_exp.stub(_then(_instance))
        : CopyWith$Input$User_bool_exp(local$User, (e) => call(User: e));
  }

  TRes $_and(
          Iterable<Input$_Organization_membersInOrganization_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$_Organization_membersInOrganization_bool_exp<
                          Input$_Organization_membersInOrganization_bool_exp>>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and?.map((e) =>
              CopyWith$Input$_Organization_membersInOrganization_bool_exp(
                e,
                (i) => i,
              )))?.toList());
  CopyWith$Input$_Organization_membersInOrganization_bool_exp<TRes> get $_not {
    final local$$_not = _instance.$_not;
    return local$$_not == null
        ? CopyWith$Input$_Organization_membersInOrganization_bool_exp.stub(
            _then(_instance))
        : CopyWith$Input$_Organization_membersInOrganization_bool_exp(
            local$$_not, (e) => call($_not: e));
  }

  TRes $_or(
          Iterable<Input$_Organization_membersInOrganization_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$_Organization_membersInOrganization_bool_exp<
                          Input$_Organization_membersInOrganization_bool_exp>>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map((e) =>
              CopyWith$Input$_Organization_membersInOrganization_bool_exp(
                e,
                (i) => i,
              )))?.toList());
}

class _CopyWithStubImpl$Input$_Organization_membersInOrganization_bool_exp<TRes>
    implements
        CopyWith$Input$_Organization_membersInOrganization_bool_exp<TRes> {
  _CopyWithStubImpl$Input$_Organization_membersInOrganization_bool_exp(
      this._res);

  TRes _res;

  call({
    Input$String_comparison_exp? A,
    Input$String_comparison_exp? B,
    Input$Organization_bool_exp? Organization,
    Input$User_bool_exp? User,
    List<Input$_Organization_membersInOrganization_bool_exp>? $_and,
    Input$_Organization_membersInOrganization_bool_exp? $_not,
    List<Input$_Organization_membersInOrganization_bool_exp>? $_or,
  }) =>
      _res;
  CopyWith$Input$String_comparison_exp<TRes> get A =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get B =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$Organization_bool_exp<TRes> get Organization =>
      CopyWith$Input$Organization_bool_exp.stub(_res);
  CopyWith$Input$User_bool_exp<TRes> get User =>
      CopyWith$Input$User_bool_exp.stub(_res);
  $_and(_fn) => _res;
  CopyWith$Input$_Organization_membersInOrganization_bool_exp<TRes> get $_not =>
      CopyWith$Input$_Organization_membersInOrganization_bool_exp.stub(_res);
  $_or(_fn) => _res;
}

class Input$_SoulWinningSessionGroup_members_bool_exp {
  factory Input$_SoulWinningSessionGroup_members_bool_exp({
    Input$String_comparison_exp? A,
    Input$String_comparison_exp? B,
    Input$SoulWinningSessionGroup_bool_exp? SoulWinningSessionGroup,
    Input$User_bool_exp? User,
    List<Input$_SoulWinningSessionGroup_members_bool_exp>? $_and,
    Input$_SoulWinningSessionGroup_members_bool_exp? $_not,
    List<Input$_SoulWinningSessionGroup_members_bool_exp>? $_or,
  }) =>
      Input$_SoulWinningSessionGroup_members_bool_exp._({
        if (A != null) r'A': A,
        if (B != null) r'B': B,
        if (SoulWinningSessionGroup != null)
          r'SoulWinningSessionGroup': SoulWinningSessionGroup,
        if (User != null) r'User': User,
        if ($_and != null) r'_and': $_and,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
      });

  Input$_SoulWinningSessionGroup_members_bool_exp._(this._$data);

  factory Input$_SoulWinningSessionGroup_members_bool_exp.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('A')) {
      final l$A = data['A'];
      result$data['A'] = l$A == null
          ? null
          : Input$String_comparison_exp.fromJson((l$A as Map<String, dynamic>));
    }
    if (data.containsKey('B')) {
      final l$B = data['B'];
      result$data['B'] = l$B == null
          ? null
          : Input$String_comparison_exp.fromJson((l$B as Map<String, dynamic>));
    }
    if (data.containsKey('SoulWinningSessionGroup')) {
      final l$SoulWinningSessionGroup = data['SoulWinningSessionGroup'];
      result$data['SoulWinningSessionGroup'] = l$SoulWinningSessionGroup == null
          ? null
          : Input$SoulWinningSessionGroup_bool_exp.fromJson(
              (l$SoulWinningSessionGroup as Map<String, dynamic>));
    }
    if (data.containsKey('User')) {
      final l$User = data['User'];
      result$data['User'] = l$User == null
          ? null
          : Input$User_bool_exp.fromJson((l$User as Map<String, dynamic>));
    }
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) => Input$_SoulWinningSessionGroup_members_bool_exp.fromJson(
              (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = l$$_not == null
          ? null
          : Input$_SoulWinningSessionGroup_members_bool_exp.fromJson(
              (l$$_not as Map<String, dynamic>));
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) => Input$_SoulWinningSessionGroup_members_bool_exp.fromJson(
              (e as Map<String, dynamic>)))
          .toList();
    }
    return Input$_SoulWinningSessionGroup_members_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$String_comparison_exp? get A =>
      (_$data['A'] as Input$String_comparison_exp?);
  Input$String_comparison_exp? get B =>
      (_$data['B'] as Input$String_comparison_exp?);
  Input$SoulWinningSessionGroup_bool_exp? get SoulWinningSessionGroup =>
      (_$data['SoulWinningSessionGroup']
          as Input$SoulWinningSessionGroup_bool_exp?);
  Input$User_bool_exp? get User => (_$data['User'] as Input$User_bool_exp?);
  List<Input$_SoulWinningSessionGroup_members_bool_exp>? get $_and =>
      (_$data['_and']
          as List<Input$_SoulWinningSessionGroup_members_bool_exp>?);
  Input$_SoulWinningSessionGroup_members_bool_exp? get $_not =>
      (_$data['_not'] as Input$_SoulWinningSessionGroup_members_bool_exp?);
  List<Input$_SoulWinningSessionGroup_members_bool_exp>? get $_or =>
      (_$data['_or'] as List<Input$_SoulWinningSessionGroup_members_bool_exp>?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('A')) {
      final l$A = A;
      result$data['A'] = l$A?.toJson();
    }
    if (_$data.containsKey('B')) {
      final l$B = B;
      result$data['B'] = l$B?.toJson();
    }
    if (_$data.containsKey('SoulWinningSessionGroup')) {
      final l$SoulWinningSessionGroup = SoulWinningSessionGroup;
      result$data['SoulWinningSessionGroup'] =
          l$SoulWinningSessionGroup?.toJson();
    }
    if (_$data.containsKey('User')) {
      final l$User = User;
      result$data['User'] = l$User?.toJson();
    }
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.toJson();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e.toJson()).toList();
    }
    return result$data;
  }

  CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp<
          Input$_SoulWinningSessionGroup_members_bool_exp>
      get copyWith => CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$_SoulWinningSessionGroup_members_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$A = A;
    final lOther$A = other.A;
    if (_$data.containsKey('A') != other._$data.containsKey('A')) {
      return false;
    }
    if (l$A != lOther$A) {
      return false;
    }
    final l$B = B;
    final lOther$B = other.B;
    if (_$data.containsKey('B') != other._$data.containsKey('B')) {
      return false;
    }
    if (l$B != lOther$B) {
      return false;
    }
    final l$SoulWinningSessionGroup = SoulWinningSessionGroup;
    final lOther$SoulWinningSessionGroup = other.SoulWinningSessionGroup;
    if (_$data.containsKey('SoulWinningSessionGroup') !=
        other._$data.containsKey('SoulWinningSessionGroup')) {
      return false;
    }
    if (l$SoulWinningSessionGroup != lOther$SoulWinningSessionGroup) {
      return false;
    }
    final l$User = User;
    final lOther$User = other.User;
    if (_$data.containsKey('User') != other._$data.containsKey('User')) {
      return false;
    }
    if (l$User != lOther$User) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$A = A;
    final l$B = B;
    final l$SoulWinningSessionGroup = SoulWinningSessionGroup;
    final l$User = User;
    final l$$_and = $_and;
    final l$$_not = $_not;
    final l$$_or = $_or;
    return Object.hashAll([
      _$data.containsKey('A') ? l$A : const {},
      _$data.containsKey('B') ? l$B : const {},
      _$data.containsKey('SoulWinningSessionGroup')
          ? l$SoulWinningSessionGroup
          : const {},
      _$data.containsKey('User') ? l$User : const {},
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_not') ? l$$_not : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp<TRes> {
  factory CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp(
    Input$_SoulWinningSessionGroup_members_bool_exp instance,
    TRes Function(Input$_SoulWinningSessionGroup_members_bool_exp) then,
  ) = _CopyWithImpl$Input$_SoulWinningSessionGroup_members_bool_exp;

  factory CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp.stub(
          TRes res) =
      _CopyWithStubImpl$Input$_SoulWinningSessionGroup_members_bool_exp;

  TRes call({
    Input$String_comparison_exp? A,
    Input$String_comparison_exp? B,
    Input$SoulWinningSessionGroup_bool_exp? SoulWinningSessionGroup,
    Input$User_bool_exp? User,
    List<Input$_SoulWinningSessionGroup_members_bool_exp>? $_and,
    Input$_SoulWinningSessionGroup_members_bool_exp? $_not,
    List<Input$_SoulWinningSessionGroup_members_bool_exp>? $_or,
  });
  CopyWith$Input$String_comparison_exp<TRes> get A;
  CopyWith$Input$String_comparison_exp<TRes> get B;
  CopyWith$Input$SoulWinningSessionGroup_bool_exp<TRes>
      get SoulWinningSessionGroup;
  CopyWith$Input$User_bool_exp<TRes> get User;
  TRes $_and(
      Iterable<Input$_SoulWinningSessionGroup_members_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp<
                      Input$_SoulWinningSessionGroup_members_bool_exp>>?)
          _fn);
  CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp<TRes> get $_not;
  TRes $_or(
      Iterable<Input$_SoulWinningSessionGroup_members_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp<
                      Input$_SoulWinningSessionGroup_members_bool_exp>>?)
          _fn);
}

class _CopyWithImpl$Input$_SoulWinningSessionGroup_members_bool_exp<TRes>
    implements CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp<TRes> {
  _CopyWithImpl$Input$_SoulWinningSessionGroup_members_bool_exp(
    this._instance,
    this._then,
  );

  final Input$_SoulWinningSessionGroup_members_bool_exp _instance;

  final TRes Function(Input$_SoulWinningSessionGroup_members_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? A = _undefined,
    Object? B = _undefined,
    Object? SoulWinningSessionGroup = _undefined,
    Object? User = _undefined,
    Object? $_and = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
  }) =>
      _then(Input$_SoulWinningSessionGroup_members_bool_exp._({
        ..._instance._$data,
        if (A != _undefined) 'A': (A as Input$String_comparison_exp?),
        if (B != _undefined) 'B': (B as Input$String_comparison_exp?),
        if (SoulWinningSessionGroup != _undefined)
          'SoulWinningSessionGroup': (SoulWinningSessionGroup
              as Input$SoulWinningSessionGroup_bool_exp?),
        if (User != _undefined) 'User': (User as Input$User_bool_exp?),
        if ($_and != _undefined)
          '_and':
              ($_and as List<Input$_SoulWinningSessionGroup_members_bool_exp>?),
        if ($_not != _undefined)
          '_not': ($_not as Input$_SoulWinningSessionGroup_members_bool_exp?),
        if ($_or != _undefined)
          '_or':
              ($_or as List<Input$_SoulWinningSessionGroup_members_bool_exp>?),
      }));
  CopyWith$Input$String_comparison_exp<TRes> get A {
    final local$A = _instance.A;
    return local$A == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(local$A, (e) => call(A: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get B {
    final local$B = _instance.B;
    return local$B == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(local$B, (e) => call(B: e));
  }

  CopyWith$Input$SoulWinningSessionGroup_bool_exp<TRes>
      get SoulWinningSessionGroup {
    final local$SoulWinningSessionGroup = _instance.SoulWinningSessionGroup;
    return local$SoulWinningSessionGroup == null
        ? CopyWith$Input$SoulWinningSessionGroup_bool_exp.stub(_then(_instance))
        : CopyWith$Input$SoulWinningSessionGroup_bool_exp(
            local$SoulWinningSessionGroup,
            (e) => call(SoulWinningSessionGroup: e));
  }

  CopyWith$Input$User_bool_exp<TRes> get User {
    final local$User = _instance.User;
    return local$User == null
        ? CopyWith$Input$User_bool_exp.stub(_then(_instance))
        : CopyWith$Input$User_bool_exp(local$User, (e) => call(User: e));
  }

  TRes $_and(
          Iterable<Input$_SoulWinningSessionGroup_members_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp<
                          Input$_SoulWinningSessionGroup_members_bool_exp>>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and?.map(
              (e) => CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());
  CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp<TRes> get $_not {
    final local$$_not = _instance.$_not;
    return local$$_not == null
        ? CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp.stub(
            _then(_instance))
        : CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp(
            local$$_not, (e) => call($_not: e));
  }

  TRes $_or(
          Iterable<Input$_SoulWinningSessionGroup_members_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp<
                          Input$_SoulWinningSessionGroup_members_bool_exp>>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map(
              (e) => CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());
}

class _CopyWithStubImpl$Input$_SoulWinningSessionGroup_members_bool_exp<TRes>
    implements CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp<TRes> {
  _CopyWithStubImpl$Input$_SoulWinningSessionGroup_members_bool_exp(this._res);

  TRes _res;

  call({
    Input$String_comparison_exp? A,
    Input$String_comparison_exp? B,
    Input$SoulWinningSessionGroup_bool_exp? SoulWinningSessionGroup,
    Input$User_bool_exp? User,
    List<Input$_SoulWinningSessionGroup_members_bool_exp>? $_and,
    Input$_SoulWinningSessionGroup_members_bool_exp? $_not,
    List<Input$_SoulWinningSessionGroup_members_bool_exp>? $_or,
  }) =>
      _res;
  CopyWith$Input$String_comparison_exp<TRes> get A =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get B =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$SoulWinningSessionGroup_bool_exp<TRes>
      get SoulWinningSessionGroup =>
          CopyWith$Input$SoulWinningSessionGroup_bool_exp.stub(_res);
  CopyWith$Input$User_bool_exp<TRes> get User =>
      CopyWith$Input$User_bool_exp.stub(_res);
  $_and(_fn) => _res;
  CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp<TRes> get $_not =>
      CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp.stub(_res);
  $_or(_fn) => _res;
}

class Input$Encounter_stream_cursor_value_input {
  factory Input$Encounter_stream_cursor_value_input({
    String? encounterTimeInUtc,
    String? group,
    String? houseAddress,
    String? id,
    String? result,
  }) =>
      Input$Encounter_stream_cursor_value_input._({
        if (encounterTimeInUtc != null)
          r'encounterTimeInUtc': encounterTimeInUtc,
        if (group != null) r'group': group,
        if (houseAddress != null) r'houseAddress': houseAddress,
        if (id != null) r'id': id,
        if (result != null) r'result': result,
      });

  Input$Encounter_stream_cursor_value_input._(this._$data);

  factory Input$Encounter_stream_cursor_value_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('encounterTimeInUtc')) {
      final l$encounterTimeInUtc = data['encounterTimeInUtc'];
      result$data['encounterTimeInUtc'] = (l$encounterTimeInUtc as String?);
    }
    if (data.containsKey('group')) {
      final l$group = data['group'];
      result$data['group'] = (l$group as String?);
    }
    if (data.containsKey('houseAddress')) {
      final l$houseAddress = data['houseAddress'];
      result$data['houseAddress'] = (l$houseAddress as String?);
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as String?);
    }
    if (data.containsKey('result')) {
      final l$result = data['result'];
      result$data['result'] = (l$result as String?);
    }
    return Input$Encounter_stream_cursor_value_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get encounterTimeInUtc => (_$data['encounterTimeInUtc'] as String?);
  String? get group => (_$data['group'] as String?);
  String? get houseAddress => (_$data['houseAddress'] as String?);
  String? get id => (_$data['id'] as String?);
  String? get result => (_$data['result'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('encounterTimeInUtc')) {
      final l$encounterTimeInUtc = encounterTimeInUtc;
      result$data['encounterTimeInUtc'] = l$encounterTimeInUtc;
    }
    if (_$data.containsKey('group')) {
      final l$group = group;
      result$data['group'] = l$group;
    }
    if (_$data.containsKey('houseAddress')) {
      final l$houseAddress = houseAddress;
      result$data['houseAddress'] = l$houseAddress;
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('result')) {
      final l$result = result;
      result$data['result'] = l$result;
    }
    return result$data;
  }

  CopyWith$Input$Encounter_stream_cursor_value_input<
          Input$Encounter_stream_cursor_value_input>
      get copyWith => CopyWith$Input$Encounter_stream_cursor_value_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Encounter_stream_cursor_value_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$encounterTimeInUtc = encounterTimeInUtc;
    final lOther$encounterTimeInUtc = other.encounterTimeInUtc;
    if (_$data.containsKey('encounterTimeInUtc') !=
        other._$data.containsKey('encounterTimeInUtc')) {
      return false;
    }
    if (l$encounterTimeInUtc != lOther$encounterTimeInUtc) {
      return false;
    }
    final l$group = group;
    final lOther$group = other.group;
    if (_$data.containsKey('group') != other._$data.containsKey('group')) {
      return false;
    }
    if (l$group != lOther$group) {
      return false;
    }
    final l$houseAddress = houseAddress;
    final lOther$houseAddress = other.houseAddress;
    if (_$data.containsKey('houseAddress') !=
        other._$data.containsKey('houseAddress')) {
      return false;
    }
    if (l$houseAddress != lOther$houseAddress) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$result = result;
    final lOther$result = other.result;
    if (_$data.containsKey('result') != other._$data.containsKey('result')) {
      return false;
    }
    if (l$result != lOther$result) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$encounterTimeInUtc = encounterTimeInUtc;
    final l$group = group;
    final l$houseAddress = houseAddress;
    final l$id = id;
    final l$result = result;
    return Object.hashAll([
      _$data.containsKey('encounterTimeInUtc')
          ? l$encounterTimeInUtc
          : const {},
      _$data.containsKey('group') ? l$group : const {},
      _$data.containsKey('houseAddress') ? l$houseAddress : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('result') ? l$result : const {},
    ]);
  }
}

abstract class CopyWith$Input$Encounter_stream_cursor_value_input<TRes> {
  factory CopyWith$Input$Encounter_stream_cursor_value_input(
    Input$Encounter_stream_cursor_value_input instance,
    TRes Function(Input$Encounter_stream_cursor_value_input) then,
  ) = _CopyWithImpl$Input$Encounter_stream_cursor_value_input;

  factory CopyWith$Input$Encounter_stream_cursor_value_input.stub(TRes res) =
      _CopyWithStubImpl$Input$Encounter_stream_cursor_value_input;

  TRes call({
    String? encounterTimeInUtc,
    String? group,
    String? houseAddress,
    String? id,
    String? result,
  });
}

class _CopyWithImpl$Input$Encounter_stream_cursor_value_input<TRes>
    implements CopyWith$Input$Encounter_stream_cursor_value_input<TRes> {
  _CopyWithImpl$Input$Encounter_stream_cursor_value_input(
    this._instance,
    this._then,
  );

  final Input$Encounter_stream_cursor_value_input _instance;

  final TRes Function(Input$Encounter_stream_cursor_value_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? encounterTimeInUtc = _undefined,
    Object? group = _undefined,
    Object? houseAddress = _undefined,
    Object? id = _undefined,
    Object? result = _undefined,
  }) =>
      _then(Input$Encounter_stream_cursor_value_input._({
        ..._instance._$data,
        if (encounterTimeInUtc != _undefined)
          'encounterTimeInUtc': (encounterTimeInUtc as String?),
        if (group != _undefined) 'group': (group as String?),
        if (houseAddress != _undefined)
          'houseAddress': (houseAddress as String?),
        if (id != _undefined) 'id': (id as String?),
        if (result != _undefined) 'result': (result as String?),
      }));
}

class _CopyWithStubImpl$Input$Encounter_stream_cursor_value_input<TRes>
    implements CopyWith$Input$Encounter_stream_cursor_value_input<TRes> {
  _CopyWithStubImpl$Input$Encounter_stream_cursor_value_input(this._res);

  TRes _res;

  call({
    String? encounterTimeInUtc,
    String? group,
    String? houseAddress,
    String? id,
    String? result,
  }) =>
      _res;
}

class Input$Event_stream_cursor_value_input {
  factory Input$Event_stream_cursor_value_input({
    String? coverPhotoUrl,
    String? eventPlan,
    String? id,
    String? name,
    String? organization,
    String? scheduledEndTimeInUtc,
    String? scheduledStartTimeInUtc,
    String? type,
    String? whatToExpect,
  }) =>
      Input$Event_stream_cursor_value_input._({
        if (coverPhotoUrl != null) r'coverPhotoUrl': coverPhotoUrl,
        if (eventPlan != null) r'eventPlan': eventPlan,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
        if (organization != null) r'organization': organization,
        if (scheduledEndTimeInUtc != null)
          r'scheduledEndTimeInUtc': scheduledEndTimeInUtc,
        if (scheduledStartTimeInUtc != null)
          r'scheduledStartTimeInUtc': scheduledStartTimeInUtc,
        if (type != null) r'type': type,
        if (whatToExpect != null) r'whatToExpect': whatToExpect,
      });

  Input$Event_stream_cursor_value_input._(this._$data);

  factory Input$Event_stream_cursor_value_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('coverPhotoUrl')) {
      final l$coverPhotoUrl = data['coverPhotoUrl'];
      result$data['coverPhotoUrl'] = (l$coverPhotoUrl as String?);
    }
    if (data.containsKey('eventPlan')) {
      final l$eventPlan = data['eventPlan'];
      result$data['eventPlan'] = (l$eventPlan as String?);
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as String?);
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] = (l$name as String?);
    }
    if (data.containsKey('organization')) {
      final l$organization = data['organization'];
      result$data['organization'] = (l$organization as String?);
    }
    if (data.containsKey('scheduledEndTimeInUtc')) {
      final l$scheduledEndTimeInUtc = data['scheduledEndTimeInUtc'];
      result$data['scheduledEndTimeInUtc'] =
          (l$scheduledEndTimeInUtc as String?);
    }
    if (data.containsKey('scheduledStartTimeInUtc')) {
      final l$scheduledStartTimeInUtc = data['scheduledStartTimeInUtc'];
      result$data['scheduledStartTimeInUtc'] =
          (l$scheduledStartTimeInUtc as String?);
    }
    if (data.containsKey('type')) {
      final l$type = data['type'];
      result$data['type'] = (l$type as String?);
    }
    if (data.containsKey('whatToExpect')) {
      final l$whatToExpect = data['whatToExpect'];
      result$data['whatToExpect'] = (l$whatToExpect as String?);
    }
    return Input$Event_stream_cursor_value_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get coverPhotoUrl => (_$data['coverPhotoUrl'] as String?);
  String? get eventPlan => (_$data['eventPlan'] as String?);
  String? get id => (_$data['id'] as String?);
  String? get name => (_$data['name'] as String?);
  String? get organization => (_$data['organization'] as String?);
  String? get scheduledEndTimeInUtc =>
      (_$data['scheduledEndTimeInUtc'] as String?);
  String? get scheduledStartTimeInUtc =>
      (_$data['scheduledStartTimeInUtc'] as String?);
  String? get type => (_$data['type'] as String?);
  String? get whatToExpect => (_$data['whatToExpect'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('coverPhotoUrl')) {
      final l$coverPhotoUrl = coverPhotoUrl;
      result$data['coverPhotoUrl'] = l$coverPhotoUrl;
    }
    if (_$data.containsKey('eventPlan')) {
      final l$eventPlan = eventPlan;
      result$data['eventPlan'] = l$eventPlan;
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] = l$name;
    }
    if (_$data.containsKey('organization')) {
      final l$organization = organization;
      result$data['organization'] = l$organization;
    }
    if (_$data.containsKey('scheduledEndTimeInUtc')) {
      final l$scheduledEndTimeInUtc = scheduledEndTimeInUtc;
      result$data['scheduledEndTimeInUtc'] = l$scheduledEndTimeInUtc;
    }
    if (_$data.containsKey('scheduledStartTimeInUtc')) {
      final l$scheduledStartTimeInUtc = scheduledStartTimeInUtc;
      result$data['scheduledStartTimeInUtc'] = l$scheduledStartTimeInUtc;
    }
    if (_$data.containsKey('type')) {
      final l$type = type;
      result$data['type'] = l$type;
    }
    if (_$data.containsKey('whatToExpect')) {
      final l$whatToExpect = whatToExpect;
      result$data['whatToExpect'] = l$whatToExpect;
    }
    return result$data;
  }

  CopyWith$Input$Event_stream_cursor_value_input<
          Input$Event_stream_cursor_value_input>
      get copyWith => CopyWith$Input$Event_stream_cursor_value_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Event_stream_cursor_value_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$coverPhotoUrl = coverPhotoUrl;
    final lOther$coverPhotoUrl = other.coverPhotoUrl;
    if (_$data.containsKey('coverPhotoUrl') !=
        other._$data.containsKey('coverPhotoUrl')) {
      return false;
    }
    if (l$coverPhotoUrl != lOther$coverPhotoUrl) {
      return false;
    }
    final l$eventPlan = eventPlan;
    final lOther$eventPlan = other.eventPlan;
    if (_$data.containsKey('eventPlan') !=
        other._$data.containsKey('eventPlan')) {
      return false;
    }
    if (l$eventPlan != lOther$eventPlan) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$organization = organization;
    final lOther$organization = other.organization;
    if (_$data.containsKey('organization') !=
        other._$data.containsKey('organization')) {
      return false;
    }
    if (l$organization != lOther$organization) {
      return false;
    }
    final l$scheduledEndTimeInUtc = scheduledEndTimeInUtc;
    final lOther$scheduledEndTimeInUtc = other.scheduledEndTimeInUtc;
    if (_$data.containsKey('scheduledEndTimeInUtc') !=
        other._$data.containsKey('scheduledEndTimeInUtc')) {
      return false;
    }
    if (l$scheduledEndTimeInUtc != lOther$scheduledEndTimeInUtc) {
      return false;
    }
    final l$scheduledStartTimeInUtc = scheduledStartTimeInUtc;
    final lOther$scheduledStartTimeInUtc = other.scheduledStartTimeInUtc;
    if (_$data.containsKey('scheduledStartTimeInUtc') !=
        other._$data.containsKey('scheduledStartTimeInUtc')) {
      return false;
    }
    if (l$scheduledStartTimeInUtc != lOther$scheduledStartTimeInUtc) {
      return false;
    }
    final l$type = type;
    final lOther$type = other.type;
    if (_$data.containsKey('type') != other._$data.containsKey('type')) {
      return false;
    }
    if (l$type != lOther$type) {
      return false;
    }
    final l$whatToExpect = whatToExpect;
    final lOther$whatToExpect = other.whatToExpect;
    if (_$data.containsKey('whatToExpect') !=
        other._$data.containsKey('whatToExpect')) {
      return false;
    }
    if (l$whatToExpect != lOther$whatToExpect) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$coverPhotoUrl = coverPhotoUrl;
    final l$eventPlan = eventPlan;
    final l$id = id;
    final l$name = name;
    final l$organization = organization;
    final l$scheduledEndTimeInUtc = scheduledEndTimeInUtc;
    final l$scheduledStartTimeInUtc = scheduledStartTimeInUtc;
    final l$type = type;
    final l$whatToExpect = whatToExpect;
    return Object.hashAll([
      _$data.containsKey('coverPhotoUrl') ? l$coverPhotoUrl : const {},
      _$data.containsKey('eventPlan') ? l$eventPlan : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('organization') ? l$organization : const {},
      _$data.containsKey('scheduledEndTimeInUtc')
          ? l$scheduledEndTimeInUtc
          : const {},
      _$data.containsKey('scheduledStartTimeInUtc')
          ? l$scheduledStartTimeInUtc
          : const {},
      _$data.containsKey('type') ? l$type : const {},
      _$data.containsKey('whatToExpect') ? l$whatToExpect : const {},
    ]);
  }
}

abstract class CopyWith$Input$Event_stream_cursor_value_input<TRes> {
  factory CopyWith$Input$Event_stream_cursor_value_input(
    Input$Event_stream_cursor_value_input instance,
    TRes Function(Input$Event_stream_cursor_value_input) then,
  ) = _CopyWithImpl$Input$Event_stream_cursor_value_input;

  factory CopyWith$Input$Event_stream_cursor_value_input.stub(TRes res) =
      _CopyWithStubImpl$Input$Event_stream_cursor_value_input;

  TRes call({
    String? coverPhotoUrl,
    String? eventPlan,
    String? id,
    String? name,
    String? organization,
    String? scheduledEndTimeInUtc,
    String? scheduledStartTimeInUtc,
    String? type,
    String? whatToExpect,
  });
}

class _CopyWithImpl$Input$Event_stream_cursor_value_input<TRes>
    implements CopyWith$Input$Event_stream_cursor_value_input<TRes> {
  _CopyWithImpl$Input$Event_stream_cursor_value_input(
    this._instance,
    this._then,
  );

  final Input$Event_stream_cursor_value_input _instance;

  final TRes Function(Input$Event_stream_cursor_value_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? coverPhotoUrl = _undefined,
    Object? eventPlan = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
    Object? organization = _undefined,
    Object? scheduledEndTimeInUtc = _undefined,
    Object? scheduledStartTimeInUtc = _undefined,
    Object? type = _undefined,
    Object? whatToExpect = _undefined,
  }) =>
      _then(Input$Event_stream_cursor_value_input._({
        ..._instance._$data,
        if (coverPhotoUrl != _undefined)
          'coverPhotoUrl': (coverPhotoUrl as String?),
        if (eventPlan != _undefined) 'eventPlan': (eventPlan as String?),
        if (id != _undefined) 'id': (id as String?),
        if (name != _undefined) 'name': (name as String?),
        if (organization != _undefined)
          'organization': (organization as String?),
        if (scheduledEndTimeInUtc != _undefined)
          'scheduledEndTimeInUtc': (scheduledEndTimeInUtc as String?),
        if (scheduledStartTimeInUtc != _undefined)
          'scheduledStartTimeInUtc': (scheduledStartTimeInUtc as String?),
        if (type != _undefined) 'type': (type as String?),
        if (whatToExpect != _undefined)
          'whatToExpect': (whatToExpect as String?),
      }));
}

class _CopyWithStubImpl$Input$Event_stream_cursor_value_input<TRes>
    implements CopyWith$Input$Event_stream_cursor_value_input<TRes> {
  _CopyWithStubImpl$Input$Event_stream_cursor_value_input(this._res);

  TRes _res;

  call({
    String? coverPhotoUrl,
    String? eventPlan,
    String? id,
    String? name,
    String? organization,
    String? scheduledEndTimeInUtc,
    String? scheduledStartTimeInUtc,
    String? type,
    String? whatToExpect,
  }) =>
      _res;
}

class Input$MapArea_stream_cursor_value_input {
  factory Input$MapArea_stream_cursor_value_input({
    String? belongingMap,
    String? id,
    String? name,
    String? polygonGeoJson,
  }) =>
      Input$MapArea_stream_cursor_value_input._({
        if (belongingMap != null) r'belongingMap': belongingMap,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
        if (polygonGeoJson != null) r'polygonGeoJson': polygonGeoJson,
      });

  Input$MapArea_stream_cursor_value_input._(this._$data);

  factory Input$MapArea_stream_cursor_value_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('belongingMap')) {
      final l$belongingMap = data['belongingMap'];
      result$data['belongingMap'] = (l$belongingMap as String?);
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as String?);
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] = (l$name as String?);
    }
    if (data.containsKey('polygonGeoJson')) {
      final l$polygonGeoJson = data['polygonGeoJson'];
      result$data['polygonGeoJson'] = (l$polygonGeoJson as String?);
    }
    return Input$MapArea_stream_cursor_value_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get belongingMap => (_$data['belongingMap'] as String?);
  String? get id => (_$data['id'] as String?);
  String? get name => (_$data['name'] as String?);
  String? get polygonGeoJson => (_$data['polygonGeoJson'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('belongingMap')) {
      final l$belongingMap = belongingMap;
      result$data['belongingMap'] = l$belongingMap;
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] = l$name;
    }
    if (_$data.containsKey('polygonGeoJson')) {
      final l$polygonGeoJson = polygonGeoJson;
      result$data['polygonGeoJson'] = l$polygonGeoJson;
    }
    return result$data;
  }

  CopyWith$Input$MapArea_stream_cursor_value_input<
          Input$MapArea_stream_cursor_value_input>
      get copyWith => CopyWith$Input$MapArea_stream_cursor_value_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$MapArea_stream_cursor_value_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$belongingMap = belongingMap;
    final lOther$belongingMap = other.belongingMap;
    if (_$data.containsKey('belongingMap') !=
        other._$data.containsKey('belongingMap')) {
      return false;
    }
    if (l$belongingMap != lOther$belongingMap) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$polygonGeoJson = polygonGeoJson;
    final lOther$polygonGeoJson = other.polygonGeoJson;
    if (_$data.containsKey('polygonGeoJson') !=
        other._$data.containsKey('polygonGeoJson')) {
      return false;
    }
    if (l$polygonGeoJson != lOther$polygonGeoJson) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$belongingMap = belongingMap;
    final l$id = id;
    final l$name = name;
    final l$polygonGeoJson = polygonGeoJson;
    return Object.hashAll([
      _$data.containsKey('belongingMap') ? l$belongingMap : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('polygonGeoJson') ? l$polygonGeoJson : const {},
    ]);
  }
}

abstract class CopyWith$Input$MapArea_stream_cursor_value_input<TRes> {
  factory CopyWith$Input$MapArea_stream_cursor_value_input(
    Input$MapArea_stream_cursor_value_input instance,
    TRes Function(Input$MapArea_stream_cursor_value_input) then,
  ) = _CopyWithImpl$Input$MapArea_stream_cursor_value_input;

  factory CopyWith$Input$MapArea_stream_cursor_value_input.stub(TRes res) =
      _CopyWithStubImpl$Input$MapArea_stream_cursor_value_input;

  TRes call({
    String? belongingMap,
    String? id,
    String? name,
    String? polygonGeoJson,
  });
}

class _CopyWithImpl$Input$MapArea_stream_cursor_value_input<TRes>
    implements CopyWith$Input$MapArea_stream_cursor_value_input<TRes> {
  _CopyWithImpl$Input$MapArea_stream_cursor_value_input(
    this._instance,
    this._then,
  );

  final Input$MapArea_stream_cursor_value_input _instance;

  final TRes Function(Input$MapArea_stream_cursor_value_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? belongingMap = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
    Object? polygonGeoJson = _undefined,
  }) =>
      _then(Input$MapArea_stream_cursor_value_input._({
        ..._instance._$data,
        if (belongingMap != _undefined)
          'belongingMap': (belongingMap as String?),
        if (id != _undefined) 'id': (id as String?),
        if (name != _undefined) 'name': (name as String?),
        if (polygonGeoJson != _undefined)
          'polygonGeoJson': (polygonGeoJson as String?),
      }));
}

class _CopyWithStubImpl$Input$MapArea_stream_cursor_value_input<TRes>
    implements CopyWith$Input$MapArea_stream_cursor_value_input<TRes> {
  _CopyWithStubImpl$Input$MapArea_stream_cursor_value_input(this._res);

  TRes _res;

  call({
    String? belongingMap,
    String? id,
    String? name,
    String? polygonGeoJson,
  }) =>
      _res;
}

class Input$Map_stream_cursor_value_input {
  factory Input$Map_stream_cursor_value_input({
    String? belongingOrganization,
    String? id,
    String? name,
  }) =>
      Input$Map_stream_cursor_value_input._({
        if (belongingOrganization != null)
          r'belongingOrganization': belongingOrganization,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
      });

  Input$Map_stream_cursor_value_input._(this._$data);

  factory Input$Map_stream_cursor_value_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('belongingOrganization')) {
      final l$belongingOrganization = data['belongingOrganization'];
      result$data['belongingOrganization'] =
          (l$belongingOrganization as String?);
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as String?);
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] = (l$name as String?);
    }
    return Input$Map_stream_cursor_value_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get belongingOrganization =>
      (_$data['belongingOrganization'] as String?);
  String? get id => (_$data['id'] as String?);
  String? get name => (_$data['name'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('belongingOrganization')) {
      final l$belongingOrganization = belongingOrganization;
      result$data['belongingOrganization'] = l$belongingOrganization;
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] = l$name;
    }
    return result$data;
  }

  CopyWith$Input$Map_stream_cursor_value_input<
          Input$Map_stream_cursor_value_input>
      get copyWith => CopyWith$Input$Map_stream_cursor_value_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Map_stream_cursor_value_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$belongingOrganization = belongingOrganization;
    final lOther$belongingOrganization = other.belongingOrganization;
    if (_$data.containsKey('belongingOrganization') !=
        other._$data.containsKey('belongingOrganization')) {
      return false;
    }
    if (l$belongingOrganization != lOther$belongingOrganization) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$belongingOrganization = belongingOrganization;
    final l$id = id;
    final l$name = name;
    return Object.hashAll([
      _$data.containsKey('belongingOrganization')
          ? l$belongingOrganization
          : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
    ]);
  }
}

abstract class CopyWith$Input$Map_stream_cursor_value_input<TRes> {
  factory CopyWith$Input$Map_stream_cursor_value_input(
    Input$Map_stream_cursor_value_input instance,
    TRes Function(Input$Map_stream_cursor_value_input) then,
  ) = _CopyWithImpl$Input$Map_stream_cursor_value_input;

  factory CopyWith$Input$Map_stream_cursor_value_input.stub(TRes res) =
      _CopyWithStubImpl$Input$Map_stream_cursor_value_input;

  TRes call({
    String? belongingOrganization,
    String? id,
    String? name,
  });
}

class _CopyWithImpl$Input$Map_stream_cursor_value_input<TRes>
    implements CopyWith$Input$Map_stream_cursor_value_input<TRes> {
  _CopyWithImpl$Input$Map_stream_cursor_value_input(
    this._instance,
    this._then,
  );

  final Input$Map_stream_cursor_value_input _instance;

  final TRes Function(Input$Map_stream_cursor_value_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? belongingOrganization = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
  }) =>
      _then(Input$Map_stream_cursor_value_input._({
        ..._instance._$data,
        if (belongingOrganization != _undefined)
          'belongingOrganization': (belongingOrganization as String?),
        if (id != _undefined) 'id': (id as String?),
        if (name != _undefined) 'name': (name as String?),
      }));
}

class _CopyWithStubImpl$Input$Map_stream_cursor_value_input<TRes>
    implements CopyWith$Input$Map_stream_cursor_value_input<TRes> {
  _CopyWithStubImpl$Input$Map_stream_cursor_value_input(this._res);

  TRes _res;

  call({
    String? belongingOrganization,
    String? id,
    String? name,
  }) =>
      _res;
}

class Input$Organization_stream_cursor_value_input {
  factory Input$Organization_stream_cursor_value_input({
    String? id,
    String? name,
    String? type,
  }) =>
      Input$Organization_stream_cursor_value_input._({
        if (id != null) r'id': id,
        if (name != null) r'name': name,
        if (type != null) r'type': type,
      });

  Input$Organization_stream_cursor_value_input._(this._$data);

  factory Input$Organization_stream_cursor_value_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as String?);
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] = (l$name as String?);
    }
    if (data.containsKey('type')) {
      final l$type = data['type'];
      result$data['type'] = (l$type as String?);
    }
    return Input$Organization_stream_cursor_value_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get id => (_$data['id'] as String?);
  String? get name => (_$data['name'] as String?);
  String? get type => (_$data['type'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] = l$name;
    }
    if (_$data.containsKey('type')) {
      final l$type = type;
      result$data['type'] = l$type;
    }
    return result$data;
  }

  CopyWith$Input$Organization_stream_cursor_value_input<
          Input$Organization_stream_cursor_value_input>
      get copyWith => CopyWith$Input$Organization_stream_cursor_value_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Organization_stream_cursor_value_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$type = type;
    final lOther$type = other.type;
    if (_$data.containsKey('type') != other._$data.containsKey('type')) {
      return false;
    }
    if (l$type != lOther$type) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$type = type;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('type') ? l$type : const {},
    ]);
  }
}

abstract class CopyWith$Input$Organization_stream_cursor_value_input<TRes> {
  factory CopyWith$Input$Organization_stream_cursor_value_input(
    Input$Organization_stream_cursor_value_input instance,
    TRes Function(Input$Organization_stream_cursor_value_input) then,
  ) = _CopyWithImpl$Input$Organization_stream_cursor_value_input;

  factory CopyWith$Input$Organization_stream_cursor_value_input.stub(TRes res) =
      _CopyWithStubImpl$Input$Organization_stream_cursor_value_input;

  TRes call({
    String? id,
    String? name,
    String? type,
  });
}

class _CopyWithImpl$Input$Organization_stream_cursor_value_input<TRes>
    implements CopyWith$Input$Organization_stream_cursor_value_input<TRes> {
  _CopyWithImpl$Input$Organization_stream_cursor_value_input(
    this._instance,
    this._then,
  );

  final Input$Organization_stream_cursor_value_input _instance;

  final TRes Function(Input$Organization_stream_cursor_value_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? type = _undefined,
  }) =>
      _then(Input$Organization_stream_cursor_value_input._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as String?),
        if (name != _undefined) 'name': (name as String?),
        if (type != _undefined) 'type': (type as String?),
      }));
}

class _CopyWithStubImpl$Input$Organization_stream_cursor_value_input<TRes>
    implements CopyWith$Input$Organization_stream_cursor_value_input<TRes> {
  _CopyWithStubImpl$Input$Organization_stream_cursor_value_input(this._res);

  TRes _res;

  call({
    String? id,
    String? name,
    String? type,
  }) =>
      _res;
}

class Input$SavedPerson_stream_cursor_value_input {
  factory Input$SavedPerson_stream_cursor_value_input({
    String? email,
    String? id,
    String? name,
    String? phone,
    String? savingEncounter,
  }) =>
      Input$SavedPerson_stream_cursor_value_input._({
        if (email != null) r'email': email,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
        if (phone != null) r'phone': phone,
        if (savingEncounter != null) r'savingEncounter': savingEncounter,
      });

  Input$SavedPerson_stream_cursor_value_input._(this._$data);

  factory Input$SavedPerson_stream_cursor_value_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('email')) {
      final l$email = data['email'];
      result$data['email'] = (l$email as String?);
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as String?);
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] = (l$name as String?);
    }
    if (data.containsKey('phone')) {
      final l$phone = data['phone'];
      result$data['phone'] = (l$phone as String?);
    }
    if (data.containsKey('savingEncounter')) {
      final l$savingEncounter = data['savingEncounter'];
      result$data['savingEncounter'] = (l$savingEncounter as String?);
    }
    return Input$SavedPerson_stream_cursor_value_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get email => (_$data['email'] as String?);
  String? get id => (_$data['id'] as String?);
  String? get name => (_$data['name'] as String?);
  String? get phone => (_$data['phone'] as String?);
  String? get savingEncounter => (_$data['savingEncounter'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('email')) {
      final l$email = email;
      result$data['email'] = l$email;
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] = l$name;
    }
    if (_$data.containsKey('phone')) {
      final l$phone = phone;
      result$data['phone'] = l$phone;
    }
    if (_$data.containsKey('savingEncounter')) {
      final l$savingEncounter = savingEncounter;
      result$data['savingEncounter'] = l$savingEncounter;
    }
    return result$data;
  }

  CopyWith$Input$SavedPerson_stream_cursor_value_input<
          Input$SavedPerson_stream_cursor_value_input>
      get copyWith => CopyWith$Input$SavedPerson_stream_cursor_value_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SavedPerson_stream_cursor_value_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$email = email;
    final lOther$email = other.email;
    if (_$data.containsKey('email') != other._$data.containsKey('email')) {
      return false;
    }
    if (l$email != lOther$email) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$phone = phone;
    final lOther$phone = other.phone;
    if (_$data.containsKey('phone') != other._$data.containsKey('phone')) {
      return false;
    }
    if (l$phone != lOther$phone) {
      return false;
    }
    final l$savingEncounter = savingEncounter;
    final lOther$savingEncounter = other.savingEncounter;
    if (_$data.containsKey('savingEncounter') !=
        other._$data.containsKey('savingEncounter')) {
      return false;
    }
    if (l$savingEncounter != lOther$savingEncounter) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$email = email;
    final l$id = id;
    final l$name = name;
    final l$phone = phone;
    final l$savingEncounter = savingEncounter;
    return Object.hashAll([
      _$data.containsKey('email') ? l$email : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('phone') ? l$phone : const {},
      _$data.containsKey('savingEncounter') ? l$savingEncounter : const {},
    ]);
  }
}

abstract class CopyWith$Input$SavedPerson_stream_cursor_value_input<TRes> {
  factory CopyWith$Input$SavedPerson_stream_cursor_value_input(
    Input$SavedPerson_stream_cursor_value_input instance,
    TRes Function(Input$SavedPerson_stream_cursor_value_input) then,
  ) = _CopyWithImpl$Input$SavedPerson_stream_cursor_value_input;

  factory CopyWith$Input$SavedPerson_stream_cursor_value_input.stub(TRes res) =
      _CopyWithStubImpl$Input$SavedPerson_stream_cursor_value_input;

  TRes call({
    String? email,
    String? id,
    String? name,
    String? phone,
    String? savingEncounter,
  });
}

class _CopyWithImpl$Input$SavedPerson_stream_cursor_value_input<TRes>
    implements CopyWith$Input$SavedPerson_stream_cursor_value_input<TRes> {
  _CopyWithImpl$Input$SavedPerson_stream_cursor_value_input(
    this._instance,
    this._then,
  );

  final Input$SavedPerson_stream_cursor_value_input _instance;

  final TRes Function(Input$SavedPerson_stream_cursor_value_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? email = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
    Object? phone = _undefined,
    Object? savingEncounter = _undefined,
  }) =>
      _then(Input$SavedPerson_stream_cursor_value_input._({
        ..._instance._$data,
        if (email != _undefined) 'email': (email as String?),
        if (id != _undefined) 'id': (id as String?),
        if (name != _undefined) 'name': (name as String?),
        if (phone != _undefined) 'phone': (phone as String?),
        if (savingEncounter != _undefined)
          'savingEncounter': (savingEncounter as String?),
      }));
}

class _CopyWithStubImpl$Input$SavedPerson_stream_cursor_value_input<TRes>
    implements CopyWith$Input$SavedPerson_stream_cursor_value_input<TRes> {
  _CopyWithStubImpl$Input$SavedPerson_stream_cursor_value_input(this._res);

  TRes _res;

  call({
    String? email,
    String? id,
    String? name,
    String? phone,
    String? savingEncounter,
  }) =>
      _res;
}

class Input$SoulWinningSessionGroup_stream_cursor_value_input {
  factory Input$SoulWinningSessionGroup_stream_cursor_value_input({
    String? assignedMapArea,
    String? id,
    String? session,
  }) =>
      Input$SoulWinningSessionGroup_stream_cursor_value_input._({
        if (assignedMapArea != null) r'assignedMapArea': assignedMapArea,
        if (id != null) r'id': id,
        if (session != null) r'session': session,
      });

  Input$SoulWinningSessionGroup_stream_cursor_value_input._(this._$data);

  factory Input$SoulWinningSessionGroup_stream_cursor_value_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('assignedMapArea')) {
      final l$assignedMapArea = data['assignedMapArea'];
      result$data['assignedMapArea'] = (l$assignedMapArea as String?);
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as String?);
    }
    if (data.containsKey('session')) {
      final l$session = data['session'];
      result$data['session'] = (l$session as String?);
    }
    return Input$SoulWinningSessionGroup_stream_cursor_value_input._(
        result$data);
  }

  Map<String, dynamic> _$data;

  String? get assignedMapArea => (_$data['assignedMapArea'] as String?);
  String? get id => (_$data['id'] as String?);
  String? get session => (_$data['session'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('assignedMapArea')) {
      final l$assignedMapArea = assignedMapArea;
      result$data['assignedMapArea'] = l$assignedMapArea;
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('session')) {
      final l$session = session;
      result$data['session'] = l$session;
    }
    return result$data;
  }

  CopyWith$Input$SoulWinningSessionGroup_stream_cursor_value_input<
          Input$SoulWinningSessionGroup_stream_cursor_value_input>
      get copyWith =>
          CopyWith$Input$SoulWinningSessionGroup_stream_cursor_value_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SoulWinningSessionGroup_stream_cursor_value_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$assignedMapArea = assignedMapArea;
    final lOther$assignedMapArea = other.assignedMapArea;
    if (_$data.containsKey('assignedMapArea') !=
        other._$data.containsKey('assignedMapArea')) {
      return false;
    }
    if (l$assignedMapArea != lOther$assignedMapArea) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$session = session;
    final lOther$session = other.session;
    if (_$data.containsKey('session') != other._$data.containsKey('session')) {
      return false;
    }
    if (l$session != lOther$session) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$assignedMapArea = assignedMapArea;
    final l$id = id;
    final l$session = session;
    return Object.hashAll([
      _$data.containsKey('assignedMapArea') ? l$assignedMapArea : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('session') ? l$session : const {},
    ]);
  }
}

abstract class CopyWith$Input$SoulWinningSessionGroup_stream_cursor_value_input<
    TRes> {
  factory CopyWith$Input$SoulWinningSessionGroup_stream_cursor_value_input(
    Input$SoulWinningSessionGroup_stream_cursor_value_input instance,
    TRes Function(Input$SoulWinningSessionGroup_stream_cursor_value_input) then,
  ) = _CopyWithImpl$Input$SoulWinningSessionGroup_stream_cursor_value_input;

  factory CopyWith$Input$SoulWinningSessionGroup_stream_cursor_value_input.stub(
          TRes res) =
      _CopyWithStubImpl$Input$SoulWinningSessionGroup_stream_cursor_value_input;

  TRes call({
    String? assignedMapArea,
    String? id,
    String? session,
  });
}

class _CopyWithImpl$Input$SoulWinningSessionGroup_stream_cursor_value_input<
        TRes>
    implements
        CopyWith$Input$SoulWinningSessionGroup_stream_cursor_value_input<TRes> {
  _CopyWithImpl$Input$SoulWinningSessionGroup_stream_cursor_value_input(
    this._instance,
    this._then,
  );

  final Input$SoulWinningSessionGroup_stream_cursor_value_input _instance;

  final TRes Function(Input$SoulWinningSessionGroup_stream_cursor_value_input)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? assignedMapArea = _undefined,
    Object? id = _undefined,
    Object? session = _undefined,
  }) =>
      _then(Input$SoulWinningSessionGroup_stream_cursor_value_input._({
        ..._instance._$data,
        if (assignedMapArea != _undefined)
          'assignedMapArea': (assignedMapArea as String?),
        if (id != _undefined) 'id': (id as String?),
        if (session != _undefined) 'session': (session as String?),
      }));
}

class _CopyWithStubImpl$Input$SoulWinningSessionGroup_stream_cursor_value_input<
        TRes>
    implements
        CopyWith$Input$SoulWinningSessionGroup_stream_cursor_value_input<TRes> {
  _CopyWithStubImpl$Input$SoulWinningSessionGroup_stream_cursor_value_input(
      this._res);

  TRes _res;

  call({
    String? assignedMapArea,
    String? id,
    String? session,
  }) =>
      _res;
}

class Input$SoulWinningSession_stream_cursor_value_input {
  factory Input$SoulWinningSession_stream_cursor_value_input({
    String? event,
    String? id,
    String? name,
    String? scheduledEndTimeInUtc,
    String? scheduledStartTimeInUtc,
  }) =>
      Input$SoulWinningSession_stream_cursor_value_input._({
        if (event != null) r'event': event,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
        if (scheduledEndTimeInUtc != null)
          r'scheduledEndTimeInUtc': scheduledEndTimeInUtc,
        if (scheduledStartTimeInUtc != null)
          r'scheduledStartTimeInUtc': scheduledStartTimeInUtc,
      });

  Input$SoulWinningSession_stream_cursor_value_input._(this._$data);

  factory Input$SoulWinningSession_stream_cursor_value_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('event')) {
      final l$event = data['event'];
      result$data['event'] = (l$event as String?);
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as String?);
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] = (l$name as String?);
    }
    if (data.containsKey('scheduledEndTimeInUtc')) {
      final l$scheduledEndTimeInUtc = data['scheduledEndTimeInUtc'];
      result$data['scheduledEndTimeInUtc'] =
          (l$scheduledEndTimeInUtc as String?);
    }
    if (data.containsKey('scheduledStartTimeInUtc')) {
      final l$scheduledStartTimeInUtc = data['scheduledStartTimeInUtc'];
      result$data['scheduledStartTimeInUtc'] =
          (l$scheduledStartTimeInUtc as String?);
    }
    return Input$SoulWinningSession_stream_cursor_value_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get event => (_$data['event'] as String?);
  String? get id => (_$data['id'] as String?);
  String? get name => (_$data['name'] as String?);
  String? get scheduledEndTimeInUtc =>
      (_$data['scheduledEndTimeInUtc'] as String?);
  String? get scheduledStartTimeInUtc =>
      (_$data['scheduledStartTimeInUtc'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('event')) {
      final l$event = event;
      result$data['event'] = l$event;
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] = l$name;
    }
    if (_$data.containsKey('scheduledEndTimeInUtc')) {
      final l$scheduledEndTimeInUtc = scheduledEndTimeInUtc;
      result$data['scheduledEndTimeInUtc'] = l$scheduledEndTimeInUtc;
    }
    if (_$data.containsKey('scheduledStartTimeInUtc')) {
      final l$scheduledStartTimeInUtc = scheduledStartTimeInUtc;
      result$data['scheduledStartTimeInUtc'] = l$scheduledStartTimeInUtc;
    }
    return result$data;
  }

  CopyWith$Input$SoulWinningSession_stream_cursor_value_input<
          Input$SoulWinningSession_stream_cursor_value_input>
      get copyWith =>
          CopyWith$Input$SoulWinningSession_stream_cursor_value_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SoulWinningSession_stream_cursor_value_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$event = event;
    final lOther$event = other.event;
    if (_$data.containsKey('event') != other._$data.containsKey('event')) {
      return false;
    }
    if (l$event != lOther$event) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$scheduledEndTimeInUtc = scheduledEndTimeInUtc;
    final lOther$scheduledEndTimeInUtc = other.scheduledEndTimeInUtc;
    if (_$data.containsKey('scheduledEndTimeInUtc') !=
        other._$data.containsKey('scheduledEndTimeInUtc')) {
      return false;
    }
    if (l$scheduledEndTimeInUtc != lOther$scheduledEndTimeInUtc) {
      return false;
    }
    final l$scheduledStartTimeInUtc = scheduledStartTimeInUtc;
    final lOther$scheduledStartTimeInUtc = other.scheduledStartTimeInUtc;
    if (_$data.containsKey('scheduledStartTimeInUtc') !=
        other._$data.containsKey('scheduledStartTimeInUtc')) {
      return false;
    }
    if (l$scheduledStartTimeInUtc != lOther$scheduledStartTimeInUtc) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$event = event;
    final l$id = id;
    final l$name = name;
    final l$scheduledEndTimeInUtc = scheduledEndTimeInUtc;
    final l$scheduledStartTimeInUtc = scheduledStartTimeInUtc;
    return Object.hashAll([
      _$data.containsKey('event') ? l$event : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('scheduledEndTimeInUtc')
          ? l$scheduledEndTimeInUtc
          : const {},
      _$data.containsKey('scheduledStartTimeInUtc')
          ? l$scheduledStartTimeInUtc
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$SoulWinningSession_stream_cursor_value_input<
    TRes> {
  factory CopyWith$Input$SoulWinningSession_stream_cursor_value_input(
    Input$SoulWinningSession_stream_cursor_value_input instance,
    TRes Function(Input$SoulWinningSession_stream_cursor_value_input) then,
  ) = _CopyWithImpl$Input$SoulWinningSession_stream_cursor_value_input;

  factory CopyWith$Input$SoulWinningSession_stream_cursor_value_input.stub(
          TRes res) =
      _CopyWithStubImpl$Input$SoulWinningSession_stream_cursor_value_input;

  TRes call({
    String? event,
    String? id,
    String? name,
    String? scheduledEndTimeInUtc,
    String? scheduledStartTimeInUtc,
  });
}

class _CopyWithImpl$Input$SoulWinningSession_stream_cursor_value_input<TRes>
    implements
        CopyWith$Input$SoulWinningSession_stream_cursor_value_input<TRes> {
  _CopyWithImpl$Input$SoulWinningSession_stream_cursor_value_input(
    this._instance,
    this._then,
  );

  final Input$SoulWinningSession_stream_cursor_value_input _instance;

  final TRes Function(Input$SoulWinningSession_stream_cursor_value_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? event = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
    Object? scheduledEndTimeInUtc = _undefined,
    Object? scheduledStartTimeInUtc = _undefined,
  }) =>
      _then(Input$SoulWinningSession_stream_cursor_value_input._({
        ..._instance._$data,
        if (event != _undefined) 'event': (event as String?),
        if (id != _undefined) 'id': (id as String?),
        if (name != _undefined) 'name': (name as String?),
        if (scheduledEndTimeInUtc != _undefined)
          'scheduledEndTimeInUtc': (scheduledEndTimeInUtc as String?),
        if (scheduledStartTimeInUtc != _undefined)
          'scheduledStartTimeInUtc': (scheduledStartTimeInUtc as String?),
      }));
}

class _CopyWithStubImpl$Input$SoulWinningSession_stream_cursor_value_input<TRes>
    implements
        CopyWith$Input$SoulWinningSession_stream_cursor_value_input<TRes> {
  _CopyWithStubImpl$Input$SoulWinningSession_stream_cursor_value_input(
      this._res);

  TRes _res;

  call({
    String? event,
    String? id,
    String? name,
    String? scheduledEndTimeInUtc,
    String? scheduledStartTimeInUtc,
  }) =>
      _res;
}

class Input$User_stream_cursor_value_input {
  factory Input$User_stream_cursor_value_input({
    String? adminUiPassword,
    String? createdAt,
    String? email,
    String? id,
    String? name,
  }) =>
      Input$User_stream_cursor_value_input._({
        if (adminUiPassword != null) r'adminUiPassword': adminUiPassword,
        if (createdAt != null) r'createdAt': createdAt,
        if (email != null) r'email': email,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
      });

  Input$User_stream_cursor_value_input._(this._$data);

  factory Input$User_stream_cursor_value_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('adminUiPassword')) {
      final l$adminUiPassword = data['adminUiPassword'];
      result$data['adminUiPassword'] = (l$adminUiPassword as String?);
    }
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] = (l$createdAt as String?);
    }
    if (data.containsKey('email')) {
      final l$email = data['email'];
      result$data['email'] = (l$email as String?);
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as String?);
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] = (l$name as String?);
    }
    return Input$User_stream_cursor_value_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get adminUiPassword => (_$data['adminUiPassword'] as String?);
  String? get createdAt => (_$data['createdAt'] as String?);
  String? get email => (_$data['email'] as String?);
  String? get id => (_$data['id'] as String?);
  String? get name => (_$data['name'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('adminUiPassword')) {
      final l$adminUiPassword = adminUiPassword;
      result$data['adminUiPassword'] = l$adminUiPassword;
    }
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] = l$createdAt;
    }
    if (_$data.containsKey('email')) {
      final l$email = email;
      result$data['email'] = l$email;
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] = l$name;
    }
    return result$data;
  }

  CopyWith$Input$User_stream_cursor_value_input<
          Input$User_stream_cursor_value_input>
      get copyWith => CopyWith$Input$User_stream_cursor_value_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$User_stream_cursor_value_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$adminUiPassword = adminUiPassword;
    final lOther$adminUiPassword = other.adminUiPassword;
    if (_$data.containsKey('adminUiPassword') !=
        other._$data.containsKey('adminUiPassword')) {
      return false;
    }
    if (l$adminUiPassword != lOther$adminUiPassword) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$email = email;
    final lOther$email = other.email;
    if (_$data.containsKey('email') != other._$data.containsKey('email')) {
      return false;
    }
    if (l$email != lOther$email) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$adminUiPassword = adminUiPassword;
    final l$createdAt = createdAt;
    final l$email = email;
    final l$id = id;
    final l$name = name;
    return Object.hashAll([
      _$data.containsKey('adminUiPassword') ? l$adminUiPassword : const {},
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('email') ? l$email : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
    ]);
  }
}

abstract class CopyWith$Input$User_stream_cursor_value_input<TRes> {
  factory CopyWith$Input$User_stream_cursor_value_input(
    Input$User_stream_cursor_value_input instance,
    TRes Function(Input$User_stream_cursor_value_input) then,
  ) = _CopyWithImpl$Input$User_stream_cursor_value_input;

  factory CopyWith$Input$User_stream_cursor_value_input.stub(TRes res) =
      _CopyWithStubImpl$Input$User_stream_cursor_value_input;

  TRes call({
    String? adminUiPassword,
    String? createdAt,
    String? email,
    String? id,
    String? name,
  });
}

class _CopyWithImpl$Input$User_stream_cursor_value_input<TRes>
    implements CopyWith$Input$User_stream_cursor_value_input<TRes> {
  _CopyWithImpl$Input$User_stream_cursor_value_input(
    this._instance,
    this._then,
  );

  final Input$User_stream_cursor_value_input _instance;

  final TRes Function(Input$User_stream_cursor_value_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? adminUiPassword = _undefined,
    Object? createdAt = _undefined,
    Object? email = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
  }) =>
      _then(Input$User_stream_cursor_value_input._({
        ..._instance._$data,
        if (adminUiPassword != _undefined)
          'adminUiPassword': (adminUiPassword as String?),
        if (createdAt != _undefined) 'createdAt': (createdAt as String?),
        if (email != _undefined) 'email': (email as String?),
        if (id != _undefined) 'id': (id as String?),
        if (name != _undefined) 'name': (name as String?),
      }));
}

class _CopyWithStubImpl$Input$User_stream_cursor_value_input<TRes>
    implements CopyWith$Input$User_stream_cursor_value_input<TRes> {
  _CopyWithStubImpl$Input$User_stream_cursor_value_input(this._res);

  TRes _res;

  call({
    String? adminUiPassword,
    String? createdAt,
    String? email,
    String? id,
    String? name,
  }) =>
      _res;
}

class Input$_Organization_adminsOfOrganization_stream_cursor_value_input {
  factory Input$_Organization_adminsOfOrganization_stream_cursor_value_input({
    String? A,
    String? B,
  }) =>
      Input$_Organization_adminsOfOrganization_stream_cursor_value_input._({
        if (A != null) r'A': A,
        if (B != null) r'B': B,
      });

  Input$_Organization_adminsOfOrganization_stream_cursor_value_input._(
      this._$data);

  factory Input$_Organization_adminsOfOrganization_stream_cursor_value_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('A')) {
      final l$A = data['A'];
      result$data['A'] = (l$A as String?);
    }
    if (data.containsKey('B')) {
      final l$B = data['B'];
      result$data['B'] = (l$B as String?);
    }
    return Input$_Organization_adminsOfOrganization_stream_cursor_value_input._(
        result$data);
  }

  Map<String, dynamic> _$data;

  String? get A => (_$data['A'] as String?);
  String? get B => (_$data['B'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('A')) {
      final l$A = A;
      result$data['A'] = l$A;
    }
    if (_$data.containsKey('B')) {
      final l$B = B;
      result$data['B'] = l$B;
    }
    return result$data;
  }

  CopyWith$Input$_Organization_adminsOfOrganization_stream_cursor_value_input<
          Input$_Organization_adminsOfOrganization_stream_cursor_value_input>
      get copyWith =>
          CopyWith$Input$_Organization_adminsOfOrganization_stream_cursor_value_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other
            is Input$_Organization_adminsOfOrganization_stream_cursor_value_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$A = A;
    final lOther$A = other.A;
    if (_$data.containsKey('A') != other._$data.containsKey('A')) {
      return false;
    }
    if (l$A != lOther$A) {
      return false;
    }
    final l$B = B;
    final lOther$B = other.B;
    if (_$data.containsKey('B') != other._$data.containsKey('B')) {
      return false;
    }
    if (l$B != lOther$B) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$A = A;
    final l$B = B;
    return Object.hashAll([
      _$data.containsKey('A') ? l$A : const {},
      _$data.containsKey('B') ? l$B : const {},
    ]);
  }
}

abstract class CopyWith$Input$_Organization_adminsOfOrganization_stream_cursor_value_input<
    TRes> {
  factory CopyWith$Input$_Organization_adminsOfOrganization_stream_cursor_value_input(
    Input$_Organization_adminsOfOrganization_stream_cursor_value_input instance,
    TRes Function(
            Input$_Organization_adminsOfOrganization_stream_cursor_value_input)
        then,
  ) = _CopyWithImpl$Input$_Organization_adminsOfOrganization_stream_cursor_value_input;

  factory CopyWith$Input$_Organization_adminsOfOrganization_stream_cursor_value_input.stub(
          TRes res) =
      _CopyWithStubImpl$Input$_Organization_adminsOfOrganization_stream_cursor_value_input;

  TRes call({
    String? A,
    String? B,
  });
}

class _CopyWithImpl$Input$_Organization_adminsOfOrganization_stream_cursor_value_input<
        TRes>
    implements
        CopyWith$Input$_Organization_adminsOfOrganization_stream_cursor_value_input<
            TRes> {
  _CopyWithImpl$Input$_Organization_adminsOfOrganization_stream_cursor_value_input(
    this._instance,
    this._then,
  );

  final Input$_Organization_adminsOfOrganization_stream_cursor_value_input
      _instance;

  final TRes Function(
      Input$_Organization_adminsOfOrganization_stream_cursor_value_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? A = _undefined,
    Object? B = _undefined,
  }) =>
      _then(
          Input$_Organization_adminsOfOrganization_stream_cursor_value_input._({
        ..._instance._$data,
        if (A != _undefined) 'A': (A as String?),
        if (B != _undefined) 'B': (B as String?),
      }));
}

class _CopyWithStubImpl$Input$_Organization_adminsOfOrganization_stream_cursor_value_input<
        TRes>
    implements
        CopyWith$Input$_Organization_adminsOfOrganization_stream_cursor_value_input<
            TRes> {
  _CopyWithStubImpl$Input$_Organization_adminsOfOrganization_stream_cursor_value_input(
      this._res);

  TRes _res;

  call({
    String? A,
    String? B,
  }) =>
      _res;
}

class Input$_Organization_membersInOrganization_stream_cursor_value_input {
  factory Input$_Organization_membersInOrganization_stream_cursor_value_input({
    String? A,
    String? B,
  }) =>
      Input$_Organization_membersInOrganization_stream_cursor_value_input._({
        if (A != null) r'A': A,
        if (B != null) r'B': B,
      });

  Input$_Organization_membersInOrganization_stream_cursor_value_input._(
      this._$data);

  factory Input$_Organization_membersInOrganization_stream_cursor_value_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('A')) {
      final l$A = data['A'];
      result$data['A'] = (l$A as String?);
    }
    if (data.containsKey('B')) {
      final l$B = data['B'];
      result$data['B'] = (l$B as String?);
    }
    return Input$_Organization_membersInOrganization_stream_cursor_value_input
        ._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get A => (_$data['A'] as String?);
  String? get B => (_$data['B'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('A')) {
      final l$A = A;
      result$data['A'] = l$A;
    }
    if (_$data.containsKey('B')) {
      final l$B = B;
      result$data['B'] = l$B;
    }
    return result$data;
  }

  CopyWith$Input$_Organization_membersInOrganization_stream_cursor_value_input<
          Input$_Organization_membersInOrganization_stream_cursor_value_input>
      get copyWith =>
          CopyWith$Input$_Organization_membersInOrganization_stream_cursor_value_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other
            is Input$_Organization_membersInOrganization_stream_cursor_value_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$A = A;
    final lOther$A = other.A;
    if (_$data.containsKey('A') != other._$data.containsKey('A')) {
      return false;
    }
    if (l$A != lOther$A) {
      return false;
    }
    final l$B = B;
    final lOther$B = other.B;
    if (_$data.containsKey('B') != other._$data.containsKey('B')) {
      return false;
    }
    if (l$B != lOther$B) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$A = A;
    final l$B = B;
    return Object.hashAll([
      _$data.containsKey('A') ? l$A : const {},
      _$data.containsKey('B') ? l$B : const {},
    ]);
  }
}

abstract class CopyWith$Input$_Organization_membersInOrganization_stream_cursor_value_input<
    TRes> {
  factory CopyWith$Input$_Organization_membersInOrganization_stream_cursor_value_input(
    Input$_Organization_membersInOrganization_stream_cursor_value_input
        instance,
    TRes Function(
            Input$_Organization_membersInOrganization_stream_cursor_value_input)
        then,
  ) = _CopyWithImpl$Input$_Organization_membersInOrganization_stream_cursor_value_input;

  factory CopyWith$Input$_Organization_membersInOrganization_stream_cursor_value_input.stub(
          TRes res) =
      _CopyWithStubImpl$Input$_Organization_membersInOrganization_stream_cursor_value_input;

  TRes call({
    String? A,
    String? B,
  });
}

class _CopyWithImpl$Input$_Organization_membersInOrganization_stream_cursor_value_input<
        TRes>
    implements
        CopyWith$Input$_Organization_membersInOrganization_stream_cursor_value_input<
            TRes> {
  _CopyWithImpl$Input$_Organization_membersInOrganization_stream_cursor_value_input(
    this._instance,
    this._then,
  );

  final Input$_Organization_membersInOrganization_stream_cursor_value_input
      _instance;

  final TRes Function(
          Input$_Organization_membersInOrganization_stream_cursor_value_input)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? A = _undefined,
    Object? B = _undefined,
  }) =>
      _then(Input$_Organization_membersInOrganization_stream_cursor_value_input
          ._({
        ..._instance._$data,
        if (A != _undefined) 'A': (A as String?),
        if (B != _undefined) 'B': (B as String?),
      }));
}

class _CopyWithStubImpl$Input$_Organization_membersInOrganization_stream_cursor_value_input<
        TRes>
    implements
        CopyWith$Input$_Organization_membersInOrganization_stream_cursor_value_input<
            TRes> {
  _CopyWithStubImpl$Input$_Organization_membersInOrganization_stream_cursor_value_input(
      this._res);

  TRes _res;

  call({
    String? A,
    String? B,
  }) =>
      _res;
}

class Input$_SoulWinningSessionGroup_members_stream_cursor_value_input {
  factory Input$_SoulWinningSessionGroup_members_stream_cursor_value_input({
    String? A,
    String? B,
  }) =>
      Input$_SoulWinningSessionGroup_members_stream_cursor_value_input._({
        if (A != null) r'A': A,
        if (B != null) r'B': B,
      });

  Input$_SoulWinningSessionGroup_members_stream_cursor_value_input._(
      this._$data);

  factory Input$_SoulWinningSessionGroup_members_stream_cursor_value_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('A')) {
      final l$A = data['A'];
      result$data['A'] = (l$A as String?);
    }
    if (data.containsKey('B')) {
      final l$B = data['B'];
      result$data['B'] = (l$B as String?);
    }
    return Input$_SoulWinningSessionGroup_members_stream_cursor_value_input._(
        result$data);
  }

  Map<String, dynamic> _$data;

  String? get A => (_$data['A'] as String?);
  String? get B => (_$data['B'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('A')) {
      final l$A = A;
      result$data['A'] = l$A;
    }
    if (_$data.containsKey('B')) {
      final l$B = B;
      result$data['B'] = l$B;
    }
    return result$data;
  }

  CopyWith$Input$_SoulWinningSessionGroup_members_stream_cursor_value_input<
          Input$_SoulWinningSessionGroup_members_stream_cursor_value_input>
      get copyWith =>
          CopyWith$Input$_SoulWinningSessionGroup_members_stream_cursor_value_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other
            is Input$_SoulWinningSessionGroup_members_stream_cursor_value_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$A = A;
    final lOther$A = other.A;
    if (_$data.containsKey('A') != other._$data.containsKey('A')) {
      return false;
    }
    if (l$A != lOther$A) {
      return false;
    }
    final l$B = B;
    final lOther$B = other.B;
    if (_$data.containsKey('B') != other._$data.containsKey('B')) {
      return false;
    }
    if (l$B != lOther$B) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$A = A;
    final l$B = B;
    return Object.hashAll([
      _$data.containsKey('A') ? l$A : const {},
      _$data.containsKey('B') ? l$B : const {},
    ]);
  }
}

abstract class CopyWith$Input$_SoulWinningSessionGroup_members_stream_cursor_value_input<
    TRes> {
  factory CopyWith$Input$_SoulWinningSessionGroup_members_stream_cursor_value_input(
    Input$_SoulWinningSessionGroup_members_stream_cursor_value_input instance,
    TRes Function(
            Input$_SoulWinningSessionGroup_members_stream_cursor_value_input)
        then,
  ) = _CopyWithImpl$Input$_SoulWinningSessionGroup_members_stream_cursor_value_input;

  factory CopyWith$Input$_SoulWinningSessionGroup_members_stream_cursor_value_input.stub(
          TRes res) =
      _CopyWithStubImpl$Input$_SoulWinningSessionGroup_members_stream_cursor_value_input;

  TRes call({
    String? A,
    String? B,
  });
}

class _CopyWithImpl$Input$_SoulWinningSessionGroup_members_stream_cursor_value_input<
        TRes>
    implements
        CopyWith$Input$_SoulWinningSessionGroup_members_stream_cursor_value_input<
            TRes> {
  _CopyWithImpl$Input$_SoulWinningSessionGroup_members_stream_cursor_value_input(
    this._instance,
    this._then,
  );

  final Input$_SoulWinningSessionGroup_members_stream_cursor_value_input
      _instance;

  final TRes Function(
      Input$_SoulWinningSessionGroup_members_stream_cursor_value_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? A = _undefined,
    Object? B = _undefined,
  }) =>
      _then(Input$_SoulWinningSessionGroup_members_stream_cursor_value_input._({
        ..._instance._$data,
        if (A != _undefined) 'A': (A as String?),
        if (B != _undefined) 'B': (B as String?),
      }));
}

class _CopyWithStubImpl$Input$_SoulWinningSessionGroup_members_stream_cursor_value_input<
        TRes>
    implements
        CopyWith$Input$_SoulWinningSessionGroup_members_stream_cursor_value_input<
            TRes> {
  _CopyWithStubImpl$Input$_SoulWinningSessionGroup_members_stream_cursor_value_input(
      this._res);

  TRes _res;

  call({
    String? A,
    String? B,
  }) =>
      _res;
}

class Input$Encounter_order_by {
  factory Input$Encounter_order_by({
    Input$SavedPerson_aggregate_order_by? SavedPeople_aggregate,
    Input$SoulWinningSessionGroup_order_by? SoulWinningSessionGroup,
    Enum$order_by? encounterTimeInUtc,
    Enum$order_by? group,
    Enum$order_by? houseAddress,
    Enum$order_by? id,
    Enum$order_by? result,
  }) =>
      Input$Encounter_order_by._({
        if (SavedPeople_aggregate != null)
          r'SavedPeople_aggregate': SavedPeople_aggregate,
        if (SoulWinningSessionGroup != null)
          r'SoulWinningSessionGroup': SoulWinningSessionGroup,
        if (encounterTimeInUtc != null)
          r'encounterTimeInUtc': encounterTimeInUtc,
        if (group != null) r'group': group,
        if (houseAddress != null) r'houseAddress': houseAddress,
        if (id != null) r'id': id,
        if (result != null) r'result': result,
      });

  Input$Encounter_order_by._(this._$data);

  factory Input$Encounter_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('SavedPeople_aggregate')) {
      final l$SavedPeople_aggregate = data['SavedPeople_aggregate'];
      result$data['SavedPeople_aggregate'] = l$SavedPeople_aggregate == null
          ? null
          : Input$SavedPerson_aggregate_order_by.fromJson(
              (l$SavedPeople_aggregate as Map<String, dynamic>));
    }
    if (data.containsKey('SoulWinningSessionGroup')) {
      final l$SoulWinningSessionGroup = data['SoulWinningSessionGroup'];
      result$data['SoulWinningSessionGroup'] = l$SoulWinningSessionGroup == null
          ? null
          : Input$SoulWinningSessionGroup_order_by.fromJson(
              (l$SoulWinningSessionGroup as Map<String, dynamic>));
    }
    if (data.containsKey('encounterTimeInUtc')) {
      final l$encounterTimeInUtc = data['encounterTimeInUtc'];
      result$data['encounterTimeInUtc'] = l$encounterTimeInUtc == null
          ? null
          : fromJson$Enum$order_by((l$encounterTimeInUtc as String));
    }
    if (data.containsKey('group')) {
      final l$group = data['group'];
      result$data['group'] =
          l$group == null ? null : fromJson$Enum$order_by((l$group as String));
    }
    if (data.containsKey('houseAddress')) {
      final l$houseAddress = data['houseAddress'];
      result$data['houseAddress'] = l$houseAddress == null
          ? null
          : fromJson$Enum$order_by((l$houseAddress as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('result')) {
      final l$result = data['result'];
      result$data['result'] = l$result == null
          ? null
          : fromJson$Enum$order_by((l$result as String));
    }
    return Input$Encounter_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$SavedPerson_aggregate_order_by? get SavedPeople_aggregate =>
      (_$data['SavedPeople_aggregate']
          as Input$SavedPerson_aggregate_order_by?);
  Input$SoulWinningSessionGroup_order_by? get SoulWinningSessionGroup =>
      (_$data['SoulWinningSessionGroup']
          as Input$SoulWinningSessionGroup_order_by?);
  Enum$order_by? get encounterTimeInUtc =>
      (_$data['encounterTimeInUtc'] as Enum$order_by?);
  Enum$order_by? get group => (_$data['group'] as Enum$order_by?);
  Enum$order_by? get houseAddress => (_$data['houseAddress'] as Enum$order_by?);
  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);
  Enum$order_by? get result => (_$data['result'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('SavedPeople_aggregate')) {
      final l$SavedPeople_aggregate = SavedPeople_aggregate;
      result$data['SavedPeople_aggregate'] = l$SavedPeople_aggregate?.toJson();
    }
    if (_$data.containsKey('SoulWinningSessionGroup')) {
      final l$SoulWinningSessionGroup = SoulWinningSessionGroup;
      result$data['SoulWinningSessionGroup'] =
          l$SoulWinningSessionGroup?.toJson();
    }
    if (_$data.containsKey('encounterTimeInUtc')) {
      final l$encounterTimeInUtc = encounterTimeInUtc;
      result$data['encounterTimeInUtc'] = l$encounterTimeInUtc == null
          ? null
          : toJson$Enum$order_by(l$encounterTimeInUtc);
    }
    if (_$data.containsKey('group')) {
      final l$group = group;
      result$data['group'] =
          l$group == null ? null : toJson$Enum$order_by(l$group);
    }
    if (_$data.containsKey('houseAddress')) {
      final l$houseAddress = houseAddress;
      result$data['houseAddress'] =
          l$houseAddress == null ? null : toJson$Enum$order_by(l$houseAddress);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('result')) {
      final l$result = result;
      result$data['result'] =
          l$result == null ? null : toJson$Enum$order_by(l$result);
    }
    return result$data;
  }

  CopyWith$Input$Encounter_order_by<Input$Encounter_order_by> get copyWith =>
      CopyWith$Input$Encounter_order_by(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Encounter_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$SavedPeople_aggregate = SavedPeople_aggregate;
    final lOther$SavedPeople_aggregate = other.SavedPeople_aggregate;
    if (_$data.containsKey('SavedPeople_aggregate') !=
        other._$data.containsKey('SavedPeople_aggregate')) {
      return false;
    }
    if (l$SavedPeople_aggregate != lOther$SavedPeople_aggregate) {
      return false;
    }
    final l$SoulWinningSessionGroup = SoulWinningSessionGroup;
    final lOther$SoulWinningSessionGroup = other.SoulWinningSessionGroup;
    if (_$data.containsKey('SoulWinningSessionGroup') !=
        other._$data.containsKey('SoulWinningSessionGroup')) {
      return false;
    }
    if (l$SoulWinningSessionGroup != lOther$SoulWinningSessionGroup) {
      return false;
    }
    final l$encounterTimeInUtc = encounterTimeInUtc;
    final lOther$encounterTimeInUtc = other.encounterTimeInUtc;
    if (_$data.containsKey('encounterTimeInUtc') !=
        other._$data.containsKey('encounterTimeInUtc')) {
      return false;
    }
    if (l$encounterTimeInUtc != lOther$encounterTimeInUtc) {
      return false;
    }
    final l$group = group;
    final lOther$group = other.group;
    if (_$data.containsKey('group') != other._$data.containsKey('group')) {
      return false;
    }
    if (l$group != lOther$group) {
      return false;
    }
    final l$houseAddress = houseAddress;
    final lOther$houseAddress = other.houseAddress;
    if (_$data.containsKey('houseAddress') !=
        other._$data.containsKey('houseAddress')) {
      return false;
    }
    if (l$houseAddress != lOther$houseAddress) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$result = result;
    final lOther$result = other.result;
    if (_$data.containsKey('result') != other._$data.containsKey('result')) {
      return false;
    }
    if (l$result != lOther$result) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$SavedPeople_aggregate = SavedPeople_aggregate;
    final l$SoulWinningSessionGroup = SoulWinningSessionGroup;
    final l$encounterTimeInUtc = encounterTimeInUtc;
    final l$group = group;
    final l$houseAddress = houseAddress;
    final l$id = id;
    final l$result = result;
    return Object.hashAll([
      _$data.containsKey('SavedPeople_aggregate')
          ? l$SavedPeople_aggregate
          : const {},
      _$data.containsKey('SoulWinningSessionGroup')
          ? l$SoulWinningSessionGroup
          : const {},
      _$data.containsKey('encounterTimeInUtc')
          ? l$encounterTimeInUtc
          : const {},
      _$data.containsKey('group') ? l$group : const {},
      _$data.containsKey('houseAddress') ? l$houseAddress : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('result') ? l$result : const {},
    ]);
  }
}

abstract class CopyWith$Input$Encounter_order_by<TRes> {
  factory CopyWith$Input$Encounter_order_by(
    Input$Encounter_order_by instance,
    TRes Function(Input$Encounter_order_by) then,
  ) = _CopyWithImpl$Input$Encounter_order_by;

  factory CopyWith$Input$Encounter_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$Encounter_order_by;

  TRes call({
    Input$SavedPerson_aggregate_order_by? SavedPeople_aggregate,
    Input$SoulWinningSessionGroup_order_by? SoulWinningSessionGroup,
    Enum$order_by? encounterTimeInUtc,
    Enum$order_by? group,
    Enum$order_by? houseAddress,
    Enum$order_by? id,
    Enum$order_by? result,
  });
  CopyWith$Input$SavedPerson_aggregate_order_by<TRes> get SavedPeople_aggregate;
  CopyWith$Input$SoulWinningSessionGroup_order_by<TRes>
      get SoulWinningSessionGroup;
}

class _CopyWithImpl$Input$Encounter_order_by<TRes>
    implements CopyWith$Input$Encounter_order_by<TRes> {
  _CopyWithImpl$Input$Encounter_order_by(
    this._instance,
    this._then,
  );

  final Input$Encounter_order_by _instance;

  final TRes Function(Input$Encounter_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? SavedPeople_aggregate = _undefined,
    Object? SoulWinningSessionGroup = _undefined,
    Object? encounterTimeInUtc = _undefined,
    Object? group = _undefined,
    Object? houseAddress = _undefined,
    Object? id = _undefined,
    Object? result = _undefined,
  }) =>
      _then(Input$Encounter_order_by._({
        ..._instance._$data,
        if (SavedPeople_aggregate != _undefined)
          'SavedPeople_aggregate':
              (SavedPeople_aggregate as Input$SavedPerson_aggregate_order_by?),
        if (SoulWinningSessionGroup != _undefined)
          'SoulWinningSessionGroup': (SoulWinningSessionGroup
              as Input$SoulWinningSessionGroup_order_by?),
        if (encounterTimeInUtc != _undefined)
          'encounterTimeInUtc': (encounterTimeInUtc as Enum$order_by?),
        if (group != _undefined) 'group': (group as Enum$order_by?),
        if (houseAddress != _undefined)
          'houseAddress': (houseAddress as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (result != _undefined) 'result': (result as Enum$order_by?),
      }));
  CopyWith$Input$SavedPerson_aggregate_order_by<TRes>
      get SavedPeople_aggregate {
    final local$SavedPeople_aggregate = _instance.SavedPeople_aggregate;
    return local$SavedPeople_aggregate == null
        ? CopyWith$Input$SavedPerson_aggregate_order_by.stub(_then(_instance))
        : CopyWith$Input$SavedPerson_aggregate_order_by(
            local$SavedPeople_aggregate, (e) => call(SavedPeople_aggregate: e));
  }

  CopyWith$Input$SoulWinningSessionGroup_order_by<TRes>
      get SoulWinningSessionGroup {
    final local$SoulWinningSessionGroup = _instance.SoulWinningSessionGroup;
    return local$SoulWinningSessionGroup == null
        ? CopyWith$Input$SoulWinningSessionGroup_order_by.stub(_then(_instance))
        : CopyWith$Input$SoulWinningSessionGroup_order_by(
            local$SoulWinningSessionGroup,
            (e) => call(SoulWinningSessionGroup: e));
  }
}

class _CopyWithStubImpl$Input$Encounter_order_by<TRes>
    implements CopyWith$Input$Encounter_order_by<TRes> {
  _CopyWithStubImpl$Input$Encounter_order_by(this._res);

  TRes _res;

  call({
    Input$SavedPerson_aggregate_order_by? SavedPeople_aggregate,
    Input$SoulWinningSessionGroup_order_by? SoulWinningSessionGroup,
    Enum$order_by? encounterTimeInUtc,
    Enum$order_by? group,
    Enum$order_by? houseAddress,
    Enum$order_by? id,
    Enum$order_by? result,
  }) =>
      _res;
  CopyWith$Input$SavedPerson_aggregate_order_by<TRes>
      get SavedPeople_aggregate =>
          CopyWith$Input$SavedPerson_aggregate_order_by.stub(_res);
  CopyWith$Input$SoulWinningSessionGroup_order_by<TRes>
      get SoulWinningSessionGroup =>
          CopyWith$Input$SoulWinningSessionGroup_order_by.stub(_res);
}

class Input$Event_order_by {
  factory Input$Event_order_by({
    Input$Organization_order_by? Organization,
    Input$SoulWinningSession_aggregate_order_by? SoulWinningSessions_aggregate,
    Enum$order_by? coverPhotoUrl,
    Enum$order_by? eventPlan,
    Enum$order_by? id,
    Enum$order_by? name,
    Enum$order_by? organization,
    Enum$order_by? scheduledEndTimeInUtc,
    Enum$order_by? scheduledStartTimeInUtc,
    Enum$order_by? type,
    Enum$order_by? whatToExpect,
  }) =>
      Input$Event_order_by._({
        if (Organization != null) r'Organization': Organization,
        if (SoulWinningSessions_aggregate != null)
          r'SoulWinningSessions_aggregate': SoulWinningSessions_aggregate,
        if (coverPhotoUrl != null) r'coverPhotoUrl': coverPhotoUrl,
        if (eventPlan != null) r'eventPlan': eventPlan,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
        if (organization != null) r'organization': organization,
        if (scheduledEndTimeInUtc != null)
          r'scheduledEndTimeInUtc': scheduledEndTimeInUtc,
        if (scheduledStartTimeInUtc != null)
          r'scheduledStartTimeInUtc': scheduledStartTimeInUtc,
        if (type != null) r'type': type,
        if (whatToExpect != null) r'whatToExpect': whatToExpect,
      });

  Input$Event_order_by._(this._$data);

  factory Input$Event_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Organization')) {
      final l$Organization = data['Organization'];
      result$data['Organization'] = l$Organization == null
          ? null
          : Input$Organization_order_by.fromJson(
              (l$Organization as Map<String, dynamic>));
    }
    if (data.containsKey('SoulWinningSessions_aggregate')) {
      final l$SoulWinningSessions_aggregate =
          data['SoulWinningSessions_aggregate'];
      result$data['SoulWinningSessions_aggregate'] =
          l$SoulWinningSessions_aggregate == null
              ? null
              : Input$SoulWinningSession_aggregate_order_by.fromJson(
                  (l$SoulWinningSessions_aggregate as Map<String, dynamic>));
    }
    if (data.containsKey('coverPhotoUrl')) {
      final l$coverPhotoUrl = data['coverPhotoUrl'];
      result$data['coverPhotoUrl'] = l$coverPhotoUrl == null
          ? null
          : fromJson$Enum$order_by((l$coverPhotoUrl as String));
    }
    if (data.containsKey('eventPlan')) {
      final l$eventPlan = data['eventPlan'];
      result$data['eventPlan'] = l$eventPlan == null
          ? null
          : fromJson$Enum$order_by((l$eventPlan as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] =
          l$name == null ? null : fromJson$Enum$order_by((l$name as String));
    }
    if (data.containsKey('organization')) {
      final l$organization = data['organization'];
      result$data['organization'] = l$organization == null
          ? null
          : fromJson$Enum$order_by((l$organization as String));
    }
    if (data.containsKey('scheduledEndTimeInUtc')) {
      final l$scheduledEndTimeInUtc = data['scheduledEndTimeInUtc'];
      result$data['scheduledEndTimeInUtc'] = l$scheduledEndTimeInUtc == null
          ? null
          : fromJson$Enum$order_by((l$scheduledEndTimeInUtc as String));
    }
    if (data.containsKey('scheduledStartTimeInUtc')) {
      final l$scheduledStartTimeInUtc = data['scheduledStartTimeInUtc'];
      result$data['scheduledStartTimeInUtc'] = l$scheduledStartTimeInUtc == null
          ? null
          : fromJson$Enum$order_by((l$scheduledStartTimeInUtc as String));
    }
    if (data.containsKey('type')) {
      final l$type = data['type'];
      result$data['type'] =
          l$type == null ? null : fromJson$Enum$order_by((l$type as String));
    }
    if (data.containsKey('whatToExpect')) {
      final l$whatToExpect = data['whatToExpect'];
      result$data['whatToExpect'] = l$whatToExpect == null
          ? null
          : fromJson$Enum$order_by((l$whatToExpect as String));
    }
    return Input$Event_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$Organization_order_by? get Organization =>
      (_$data['Organization'] as Input$Organization_order_by?);
  Input$SoulWinningSession_aggregate_order_by?
      get SoulWinningSessions_aggregate =>
          (_$data['SoulWinningSessions_aggregate']
              as Input$SoulWinningSession_aggregate_order_by?);
  Enum$order_by? get coverPhotoUrl =>
      (_$data['coverPhotoUrl'] as Enum$order_by?);
  Enum$order_by? get eventPlan => (_$data['eventPlan'] as Enum$order_by?);
  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);
  Enum$order_by? get name => (_$data['name'] as Enum$order_by?);
  Enum$order_by? get organization => (_$data['organization'] as Enum$order_by?);
  Enum$order_by? get scheduledEndTimeInUtc =>
      (_$data['scheduledEndTimeInUtc'] as Enum$order_by?);
  Enum$order_by? get scheduledStartTimeInUtc =>
      (_$data['scheduledStartTimeInUtc'] as Enum$order_by?);
  Enum$order_by? get type => (_$data['type'] as Enum$order_by?);
  Enum$order_by? get whatToExpect => (_$data['whatToExpect'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Organization')) {
      final l$Organization = Organization;
      result$data['Organization'] = l$Organization?.toJson();
    }
    if (_$data.containsKey('SoulWinningSessions_aggregate')) {
      final l$SoulWinningSessions_aggregate = SoulWinningSessions_aggregate;
      result$data['SoulWinningSessions_aggregate'] =
          l$SoulWinningSessions_aggregate?.toJson();
    }
    if (_$data.containsKey('coverPhotoUrl')) {
      final l$coverPhotoUrl = coverPhotoUrl;
      result$data['coverPhotoUrl'] = l$coverPhotoUrl == null
          ? null
          : toJson$Enum$order_by(l$coverPhotoUrl);
    }
    if (_$data.containsKey('eventPlan')) {
      final l$eventPlan = eventPlan;
      result$data['eventPlan'] =
          l$eventPlan == null ? null : toJson$Enum$order_by(l$eventPlan);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] =
          l$name == null ? null : toJson$Enum$order_by(l$name);
    }
    if (_$data.containsKey('organization')) {
      final l$organization = organization;
      result$data['organization'] =
          l$organization == null ? null : toJson$Enum$order_by(l$organization);
    }
    if (_$data.containsKey('scheduledEndTimeInUtc')) {
      final l$scheduledEndTimeInUtc = scheduledEndTimeInUtc;
      result$data['scheduledEndTimeInUtc'] = l$scheduledEndTimeInUtc == null
          ? null
          : toJson$Enum$order_by(l$scheduledEndTimeInUtc);
    }
    if (_$data.containsKey('scheduledStartTimeInUtc')) {
      final l$scheduledStartTimeInUtc = scheduledStartTimeInUtc;
      result$data['scheduledStartTimeInUtc'] = l$scheduledStartTimeInUtc == null
          ? null
          : toJson$Enum$order_by(l$scheduledStartTimeInUtc);
    }
    if (_$data.containsKey('type')) {
      final l$type = type;
      result$data['type'] =
          l$type == null ? null : toJson$Enum$order_by(l$type);
    }
    if (_$data.containsKey('whatToExpect')) {
      final l$whatToExpect = whatToExpect;
      result$data['whatToExpect'] =
          l$whatToExpect == null ? null : toJson$Enum$order_by(l$whatToExpect);
    }
    return result$data;
  }

  CopyWith$Input$Event_order_by<Input$Event_order_by> get copyWith =>
      CopyWith$Input$Event_order_by(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Event_order_by) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$Organization = Organization;
    final lOther$Organization = other.Organization;
    if (_$data.containsKey('Organization') !=
        other._$data.containsKey('Organization')) {
      return false;
    }
    if (l$Organization != lOther$Organization) {
      return false;
    }
    final l$SoulWinningSessions_aggregate = SoulWinningSessions_aggregate;
    final lOther$SoulWinningSessions_aggregate =
        other.SoulWinningSessions_aggregate;
    if (_$data.containsKey('SoulWinningSessions_aggregate') !=
        other._$data.containsKey('SoulWinningSessions_aggregate')) {
      return false;
    }
    if (l$SoulWinningSessions_aggregate !=
        lOther$SoulWinningSessions_aggregate) {
      return false;
    }
    final l$coverPhotoUrl = coverPhotoUrl;
    final lOther$coverPhotoUrl = other.coverPhotoUrl;
    if (_$data.containsKey('coverPhotoUrl') !=
        other._$data.containsKey('coverPhotoUrl')) {
      return false;
    }
    if (l$coverPhotoUrl != lOther$coverPhotoUrl) {
      return false;
    }
    final l$eventPlan = eventPlan;
    final lOther$eventPlan = other.eventPlan;
    if (_$data.containsKey('eventPlan') !=
        other._$data.containsKey('eventPlan')) {
      return false;
    }
    if (l$eventPlan != lOther$eventPlan) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$organization = organization;
    final lOther$organization = other.organization;
    if (_$data.containsKey('organization') !=
        other._$data.containsKey('organization')) {
      return false;
    }
    if (l$organization != lOther$organization) {
      return false;
    }
    final l$scheduledEndTimeInUtc = scheduledEndTimeInUtc;
    final lOther$scheduledEndTimeInUtc = other.scheduledEndTimeInUtc;
    if (_$data.containsKey('scheduledEndTimeInUtc') !=
        other._$data.containsKey('scheduledEndTimeInUtc')) {
      return false;
    }
    if (l$scheduledEndTimeInUtc != lOther$scheduledEndTimeInUtc) {
      return false;
    }
    final l$scheduledStartTimeInUtc = scheduledStartTimeInUtc;
    final lOther$scheduledStartTimeInUtc = other.scheduledStartTimeInUtc;
    if (_$data.containsKey('scheduledStartTimeInUtc') !=
        other._$data.containsKey('scheduledStartTimeInUtc')) {
      return false;
    }
    if (l$scheduledStartTimeInUtc != lOther$scheduledStartTimeInUtc) {
      return false;
    }
    final l$type = type;
    final lOther$type = other.type;
    if (_$data.containsKey('type') != other._$data.containsKey('type')) {
      return false;
    }
    if (l$type != lOther$type) {
      return false;
    }
    final l$whatToExpect = whatToExpect;
    final lOther$whatToExpect = other.whatToExpect;
    if (_$data.containsKey('whatToExpect') !=
        other._$data.containsKey('whatToExpect')) {
      return false;
    }
    if (l$whatToExpect != lOther$whatToExpect) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Organization = Organization;
    final l$SoulWinningSessions_aggregate = SoulWinningSessions_aggregate;
    final l$coverPhotoUrl = coverPhotoUrl;
    final l$eventPlan = eventPlan;
    final l$id = id;
    final l$name = name;
    final l$organization = organization;
    final l$scheduledEndTimeInUtc = scheduledEndTimeInUtc;
    final l$scheduledStartTimeInUtc = scheduledStartTimeInUtc;
    final l$type = type;
    final l$whatToExpect = whatToExpect;
    return Object.hashAll([
      _$data.containsKey('Organization') ? l$Organization : const {},
      _$data.containsKey('SoulWinningSessions_aggregate')
          ? l$SoulWinningSessions_aggregate
          : const {},
      _$data.containsKey('coverPhotoUrl') ? l$coverPhotoUrl : const {},
      _$data.containsKey('eventPlan') ? l$eventPlan : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('organization') ? l$organization : const {},
      _$data.containsKey('scheduledEndTimeInUtc')
          ? l$scheduledEndTimeInUtc
          : const {},
      _$data.containsKey('scheduledStartTimeInUtc')
          ? l$scheduledStartTimeInUtc
          : const {},
      _$data.containsKey('type') ? l$type : const {},
      _$data.containsKey('whatToExpect') ? l$whatToExpect : const {},
    ]);
  }
}

abstract class CopyWith$Input$Event_order_by<TRes> {
  factory CopyWith$Input$Event_order_by(
    Input$Event_order_by instance,
    TRes Function(Input$Event_order_by) then,
  ) = _CopyWithImpl$Input$Event_order_by;

  factory CopyWith$Input$Event_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$Event_order_by;

  TRes call({
    Input$Organization_order_by? Organization,
    Input$SoulWinningSession_aggregate_order_by? SoulWinningSessions_aggregate,
    Enum$order_by? coverPhotoUrl,
    Enum$order_by? eventPlan,
    Enum$order_by? id,
    Enum$order_by? name,
    Enum$order_by? organization,
    Enum$order_by? scheduledEndTimeInUtc,
    Enum$order_by? scheduledStartTimeInUtc,
    Enum$order_by? type,
    Enum$order_by? whatToExpect,
  });
  CopyWith$Input$Organization_order_by<TRes> get Organization;
  CopyWith$Input$SoulWinningSession_aggregate_order_by<TRes>
      get SoulWinningSessions_aggregate;
}

class _CopyWithImpl$Input$Event_order_by<TRes>
    implements CopyWith$Input$Event_order_by<TRes> {
  _CopyWithImpl$Input$Event_order_by(
    this._instance,
    this._then,
  );

  final Input$Event_order_by _instance;

  final TRes Function(Input$Event_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Organization = _undefined,
    Object? SoulWinningSessions_aggregate = _undefined,
    Object? coverPhotoUrl = _undefined,
    Object? eventPlan = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
    Object? organization = _undefined,
    Object? scheduledEndTimeInUtc = _undefined,
    Object? scheduledStartTimeInUtc = _undefined,
    Object? type = _undefined,
    Object? whatToExpect = _undefined,
  }) =>
      _then(Input$Event_order_by._({
        ..._instance._$data,
        if (Organization != _undefined)
          'Organization': (Organization as Input$Organization_order_by?),
        if (SoulWinningSessions_aggregate != _undefined)
          'SoulWinningSessions_aggregate': (SoulWinningSessions_aggregate
              as Input$SoulWinningSession_aggregate_order_by?),
        if (coverPhotoUrl != _undefined)
          'coverPhotoUrl': (coverPhotoUrl as Enum$order_by?),
        if (eventPlan != _undefined) 'eventPlan': (eventPlan as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (name != _undefined) 'name': (name as Enum$order_by?),
        if (organization != _undefined)
          'organization': (organization as Enum$order_by?),
        if (scheduledEndTimeInUtc != _undefined)
          'scheduledEndTimeInUtc': (scheduledEndTimeInUtc as Enum$order_by?),
        if (scheduledStartTimeInUtc != _undefined)
          'scheduledStartTimeInUtc':
              (scheduledStartTimeInUtc as Enum$order_by?),
        if (type != _undefined) 'type': (type as Enum$order_by?),
        if (whatToExpect != _undefined)
          'whatToExpect': (whatToExpect as Enum$order_by?),
      }));
  CopyWith$Input$Organization_order_by<TRes> get Organization {
    final local$Organization = _instance.Organization;
    return local$Organization == null
        ? CopyWith$Input$Organization_order_by.stub(_then(_instance))
        : CopyWith$Input$Organization_order_by(
            local$Organization, (e) => call(Organization: e));
  }

  CopyWith$Input$SoulWinningSession_aggregate_order_by<TRes>
      get SoulWinningSessions_aggregate {
    final local$SoulWinningSessions_aggregate =
        _instance.SoulWinningSessions_aggregate;
    return local$SoulWinningSessions_aggregate == null
        ? CopyWith$Input$SoulWinningSession_aggregate_order_by.stub(
            _then(_instance))
        : CopyWith$Input$SoulWinningSession_aggregate_order_by(
            local$SoulWinningSessions_aggregate,
            (e) => call(SoulWinningSessions_aggregate: e));
  }
}

class _CopyWithStubImpl$Input$Event_order_by<TRes>
    implements CopyWith$Input$Event_order_by<TRes> {
  _CopyWithStubImpl$Input$Event_order_by(this._res);

  TRes _res;

  call({
    Input$Organization_order_by? Organization,
    Input$SoulWinningSession_aggregate_order_by? SoulWinningSessions_aggregate,
    Enum$order_by? coverPhotoUrl,
    Enum$order_by? eventPlan,
    Enum$order_by? id,
    Enum$order_by? name,
    Enum$order_by? organization,
    Enum$order_by? scheduledEndTimeInUtc,
    Enum$order_by? scheduledStartTimeInUtc,
    Enum$order_by? type,
    Enum$order_by? whatToExpect,
  }) =>
      _res;
  CopyWith$Input$Organization_order_by<TRes> get Organization =>
      CopyWith$Input$Organization_order_by.stub(_res);
  CopyWith$Input$SoulWinningSession_aggregate_order_by<TRes>
      get SoulWinningSessions_aggregate =>
          CopyWith$Input$SoulWinningSession_aggregate_order_by.stub(_res);
}

class Input$Map_order_by {
  factory Input$Map_order_by({
    Input$MapArea_aggregate_order_by? MapAreas_aggregate,
    Input$Organization_order_by? Organization,
    Enum$order_by? belongingOrganization,
    Enum$order_by? id,
    Enum$order_by? name,
  }) =>
      Input$Map_order_by._({
        if (MapAreas_aggregate != null)
          r'MapAreas_aggregate': MapAreas_aggregate,
        if (Organization != null) r'Organization': Organization,
        if (belongingOrganization != null)
          r'belongingOrganization': belongingOrganization,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
      });

  Input$Map_order_by._(this._$data);

  factory Input$Map_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('MapAreas_aggregate')) {
      final l$MapAreas_aggregate = data['MapAreas_aggregate'];
      result$data['MapAreas_aggregate'] = l$MapAreas_aggregate == null
          ? null
          : Input$MapArea_aggregate_order_by.fromJson(
              (l$MapAreas_aggregate as Map<String, dynamic>));
    }
    if (data.containsKey('Organization')) {
      final l$Organization = data['Organization'];
      result$data['Organization'] = l$Organization == null
          ? null
          : Input$Organization_order_by.fromJson(
              (l$Organization as Map<String, dynamic>));
    }
    if (data.containsKey('belongingOrganization')) {
      final l$belongingOrganization = data['belongingOrganization'];
      result$data['belongingOrganization'] = l$belongingOrganization == null
          ? null
          : fromJson$Enum$order_by((l$belongingOrganization as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] =
          l$name == null ? null : fromJson$Enum$order_by((l$name as String));
    }
    return Input$Map_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$MapArea_aggregate_order_by? get MapAreas_aggregate =>
      (_$data['MapAreas_aggregate'] as Input$MapArea_aggregate_order_by?);
  Input$Organization_order_by? get Organization =>
      (_$data['Organization'] as Input$Organization_order_by?);
  Enum$order_by? get belongingOrganization =>
      (_$data['belongingOrganization'] as Enum$order_by?);
  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);
  Enum$order_by? get name => (_$data['name'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('MapAreas_aggregate')) {
      final l$MapAreas_aggregate = MapAreas_aggregate;
      result$data['MapAreas_aggregate'] = l$MapAreas_aggregate?.toJson();
    }
    if (_$data.containsKey('Organization')) {
      final l$Organization = Organization;
      result$data['Organization'] = l$Organization?.toJson();
    }
    if (_$data.containsKey('belongingOrganization')) {
      final l$belongingOrganization = belongingOrganization;
      result$data['belongingOrganization'] = l$belongingOrganization == null
          ? null
          : toJson$Enum$order_by(l$belongingOrganization);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] =
          l$name == null ? null : toJson$Enum$order_by(l$name);
    }
    return result$data;
  }

  CopyWith$Input$Map_order_by<Input$Map_order_by> get copyWith =>
      CopyWith$Input$Map_order_by(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Map_order_by) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$MapAreas_aggregate = MapAreas_aggregate;
    final lOther$MapAreas_aggregate = other.MapAreas_aggregate;
    if (_$data.containsKey('MapAreas_aggregate') !=
        other._$data.containsKey('MapAreas_aggregate')) {
      return false;
    }
    if (l$MapAreas_aggregate != lOther$MapAreas_aggregate) {
      return false;
    }
    final l$Organization = Organization;
    final lOther$Organization = other.Organization;
    if (_$data.containsKey('Organization') !=
        other._$data.containsKey('Organization')) {
      return false;
    }
    if (l$Organization != lOther$Organization) {
      return false;
    }
    final l$belongingOrganization = belongingOrganization;
    final lOther$belongingOrganization = other.belongingOrganization;
    if (_$data.containsKey('belongingOrganization') !=
        other._$data.containsKey('belongingOrganization')) {
      return false;
    }
    if (l$belongingOrganization != lOther$belongingOrganization) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$MapAreas_aggregate = MapAreas_aggregate;
    final l$Organization = Organization;
    final l$belongingOrganization = belongingOrganization;
    final l$id = id;
    final l$name = name;
    return Object.hashAll([
      _$data.containsKey('MapAreas_aggregate')
          ? l$MapAreas_aggregate
          : const {},
      _$data.containsKey('Organization') ? l$Organization : const {},
      _$data.containsKey('belongingOrganization')
          ? l$belongingOrganization
          : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
    ]);
  }
}

abstract class CopyWith$Input$Map_order_by<TRes> {
  factory CopyWith$Input$Map_order_by(
    Input$Map_order_by instance,
    TRes Function(Input$Map_order_by) then,
  ) = _CopyWithImpl$Input$Map_order_by;

  factory CopyWith$Input$Map_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$Map_order_by;

  TRes call({
    Input$MapArea_aggregate_order_by? MapAreas_aggregate,
    Input$Organization_order_by? Organization,
    Enum$order_by? belongingOrganization,
    Enum$order_by? id,
    Enum$order_by? name,
  });
  CopyWith$Input$MapArea_aggregate_order_by<TRes> get MapAreas_aggregate;
  CopyWith$Input$Organization_order_by<TRes> get Organization;
}

class _CopyWithImpl$Input$Map_order_by<TRes>
    implements CopyWith$Input$Map_order_by<TRes> {
  _CopyWithImpl$Input$Map_order_by(
    this._instance,
    this._then,
  );

  final Input$Map_order_by _instance;

  final TRes Function(Input$Map_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? MapAreas_aggregate = _undefined,
    Object? Organization = _undefined,
    Object? belongingOrganization = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
  }) =>
      _then(Input$Map_order_by._({
        ..._instance._$data,
        if (MapAreas_aggregate != _undefined)
          'MapAreas_aggregate':
              (MapAreas_aggregate as Input$MapArea_aggregate_order_by?),
        if (Organization != _undefined)
          'Organization': (Organization as Input$Organization_order_by?),
        if (belongingOrganization != _undefined)
          'belongingOrganization': (belongingOrganization as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (name != _undefined) 'name': (name as Enum$order_by?),
      }));
  CopyWith$Input$MapArea_aggregate_order_by<TRes> get MapAreas_aggregate {
    final local$MapAreas_aggregate = _instance.MapAreas_aggregate;
    return local$MapAreas_aggregate == null
        ? CopyWith$Input$MapArea_aggregate_order_by.stub(_then(_instance))
        : CopyWith$Input$MapArea_aggregate_order_by(
            local$MapAreas_aggregate, (e) => call(MapAreas_aggregate: e));
  }

  CopyWith$Input$Organization_order_by<TRes> get Organization {
    final local$Organization = _instance.Organization;
    return local$Organization == null
        ? CopyWith$Input$Organization_order_by.stub(_then(_instance))
        : CopyWith$Input$Organization_order_by(
            local$Organization, (e) => call(Organization: e));
  }
}

class _CopyWithStubImpl$Input$Map_order_by<TRes>
    implements CopyWith$Input$Map_order_by<TRes> {
  _CopyWithStubImpl$Input$Map_order_by(this._res);

  TRes _res;

  call({
    Input$MapArea_aggregate_order_by? MapAreas_aggregate,
    Input$Organization_order_by? Organization,
    Enum$order_by? belongingOrganization,
    Enum$order_by? id,
    Enum$order_by? name,
  }) =>
      _res;
  CopyWith$Input$MapArea_aggregate_order_by<TRes> get MapAreas_aggregate =>
      CopyWith$Input$MapArea_aggregate_order_by.stub(_res);
  CopyWith$Input$Organization_order_by<TRes> get Organization =>
      CopyWith$Input$Organization_order_by.stub(_res);
}

class Input$MapArea_order_by {
  factory Input$MapArea_order_by({
    Input$Map_order_by? $Map,
    Input$SoulWinningSessionGroup_aggregate_order_by?
        SoulWinningSessionGroups_aggregate,
    Enum$order_by? belongingMap,
    Enum$order_by? id,
    Enum$order_by? name,
    Enum$order_by? polygonGeoJson,
  }) =>
      Input$MapArea_order_by._({
        if ($Map != null) r'Map': $Map,
        if (SoulWinningSessionGroups_aggregate != null)
          r'SoulWinningSessionGroups_aggregate':
              SoulWinningSessionGroups_aggregate,
        if (belongingMap != null) r'belongingMap': belongingMap,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
        if (polygonGeoJson != null) r'polygonGeoJson': polygonGeoJson,
      });

  Input$MapArea_order_by._(this._$data);

  factory Input$MapArea_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Map')) {
      final l$$Map = data['Map'];
      result$data['Map'] = l$$Map == null
          ? null
          : Input$Map_order_by.fromJson((l$$Map as Map<String, dynamic>));
    }
    if (data.containsKey('SoulWinningSessionGroups_aggregate')) {
      final l$SoulWinningSessionGroups_aggregate =
          data['SoulWinningSessionGroups_aggregate'];
      result$data['SoulWinningSessionGroups_aggregate'] =
          l$SoulWinningSessionGroups_aggregate == null
              ? null
              : Input$SoulWinningSessionGroup_aggregate_order_by.fromJson(
                  (l$SoulWinningSessionGroups_aggregate
                      as Map<String, dynamic>));
    }
    if (data.containsKey('belongingMap')) {
      final l$belongingMap = data['belongingMap'];
      result$data['belongingMap'] = l$belongingMap == null
          ? null
          : fromJson$Enum$order_by((l$belongingMap as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] =
          l$name == null ? null : fromJson$Enum$order_by((l$name as String));
    }
    if (data.containsKey('polygonGeoJson')) {
      final l$polygonGeoJson = data['polygonGeoJson'];
      result$data['polygonGeoJson'] = l$polygonGeoJson == null
          ? null
          : fromJson$Enum$order_by((l$polygonGeoJson as String));
    }
    return Input$MapArea_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$Map_order_by? get $Map => (_$data['Map'] as Input$Map_order_by?);
  Input$SoulWinningSessionGroup_aggregate_order_by?
      get SoulWinningSessionGroups_aggregate =>
          (_$data['SoulWinningSessionGroups_aggregate']
              as Input$SoulWinningSessionGroup_aggregate_order_by?);
  Enum$order_by? get belongingMap => (_$data['belongingMap'] as Enum$order_by?);
  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);
  Enum$order_by? get name => (_$data['name'] as Enum$order_by?);
  Enum$order_by? get polygonGeoJson =>
      (_$data['polygonGeoJson'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Map')) {
      final l$$Map = $Map;
      result$data['Map'] = l$$Map?.toJson();
    }
    if (_$data.containsKey('SoulWinningSessionGroups_aggregate')) {
      final l$SoulWinningSessionGroups_aggregate =
          SoulWinningSessionGroups_aggregate;
      result$data['SoulWinningSessionGroups_aggregate'] =
          l$SoulWinningSessionGroups_aggregate?.toJson();
    }
    if (_$data.containsKey('belongingMap')) {
      final l$belongingMap = belongingMap;
      result$data['belongingMap'] =
          l$belongingMap == null ? null : toJson$Enum$order_by(l$belongingMap);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] =
          l$name == null ? null : toJson$Enum$order_by(l$name);
    }
    if (_$data.containsKey('polygonGeoJson')) {
      final l$polygonGeoJson = polygonGeoJson;
      result$data['polygonGeoJson'] = l$polygonGeoJson == null
          ? null
          : toJson$Enum$order_by(l$polygonGeoJson);
    }
    return result$data;
  }

  CopyWith$Input$MapArea_order_by<Input$MapArea_order_by> get copyWith =>
      CopyWith$Input$MapArea_order_by(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$MapArea_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$Map = $Map;
    final lOther$$Map = other.$Map;
    if (_$data.containsKey('Map') != other._$data.containsKey('Map')) {
      return false;
    }
    if (l$$Map != lOther$$Map) {
      return false;
    }
    final l$SoulWinningSessionGroups_aggregate =
        SoulWinningSessionGroups_aggregate;
    final lOther$SoulWinningSessionGroups_aggregate =
        other.SoulWinningSessionGroups_aggregate;
    if (_$data.containsKey('SoulWinningSessionGroups_aggregate') !=
        other._$data.containsKey('SoulWinningSessionGroups_aggregate')) {
      return false;
    }
    if (l$SoulWinningSessionGroups_aggregate !=
        lOther$SoulWinningSessionGroups_aggregate) {
      return false;
    }
    final l$belongingMap = belongingMap;
    final lOther$belongingMap = other.belongingMap;
    if (_$data.containsKey('belongingMap') !=
        other._$data.containsKey('belongingMap')) {
      return false;
    }
    if (l$belongingMap != lOther$belongingMap) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$polygonGeoJson = polygonGeoJson;
    final lOther$polygonGeoJson = other.polygonGeoJson;
    if (_$data.containsKey('polygonGeoJson') !=
        other._$data.containsKey('polygonGeoJson')) {
      return false;
    }
    if (l$polygonGeoJson != lOther$polygonGeoJson) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$Map = $Map;
    final l$SoulWinningSessionGroups_aggregate =
        SoulWinningSessionGroups_aggregate;
    final l$belongingMap = belongingMap;
    final l$id = id;
    final l$name = name;
    final l$polygonGeoJson = polygonGeoJson;
    return Object.hashAll([
      _$data.containsKey('Map') ? l$$Map : const {},
      _$data.containsKey('SoulWinningSessionGroups_aggregate')
          ? l$SoulWinningSessionGroups_aggregate
          : const {},
      _$data.containsKey('belongingMap') ? l$belongingMap : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('polygonGeoJson') ? l$polygonGeoJson : const {},
    ]);
  }
}

abstract class CopyWith$Input$MapArea_order_by<TRes> {
  factory CopyWith$Input$MapArea_order_by(
    Input$MapArea_order_by instance,
    TRes Function(Input$MapArea_order_by) then,
  ) = _CopyWithImpl$Input$MapArea_order_by;

  factory CopyWith$Input$MapArea_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$MapArea_order_by;

  TRes call({
    Input$Map_order_by? $Map,
    Input$SoulWinningSessionGroup_aggregate_order_by?
        SoulWinningSessionGroups_aggregate,
    Enum$order_by? belongingMap,
    Enum$order_by? id,
    Enum$order_by? name,
    Enum$order_by? polygonGeoJson,
  });
  CopyWith$Input$Map_order_by<TRes> get $Map;
  CopyWith$Input$SoulWinningSessionGroup_aggregate_order_by<TRes>
      get SoulWinningSessionGroups_aggregate;
}

class _CopyWithImpl$Input$MapArea_order_by<TRes>
    implements CopyWith$Input$MapArea_order_by<TRes> {
  _CopyWithImpl$Input$MapArea_order_by(
    this._instance,
    this._then,
  );

  final Input$MapArea_order_by _instance;

  final TRes Function(Input$MapArea_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $Map = _undefined,
    Object? SoulWinningSessionGroups_aggregate = _undefined,
    Object? belongingMap = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
    Object? polygonGeoJson = _undefined,
  }) =>
      _then(Input$MapArea_order_by._({
        ..._instance._$data,
        if ($Map != _undefined) 'Map': ($Map as Input$Map_order_by?),
        if (SoulWinningSessionGroups_aggregate != _undefined)
          'SoulWinningSessionGroups_aggregate':
              (SoulWinningSessionGroups_aggregate
                  as Input$SoulWinningSessionGroup_aggregate_order_by?),
        if (belongingMap != _undefined)
          'belongingMap': (belongingMap as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (name != _undefined) 'name': (name as Enum$order_by?),
        if (polygonGeoJson != _undefined)
          'polygonGeoJson': (polygonGeoJson as Enum$order_by?),
      }));
  CopyWith$Input$Map_order_by<TRes> get $Map {
    final local$$Map = _instance.$Map;
    return local$$Map == null
        ? CopyWith$Input$Map_order_by.stub(_then(_instance))
        : CopyWith$Input$Map_order_by(local$$Map, (e) => call($Map: e));
  }

  CopyWith$Input$SoulWinningSessionGroup_aggregate_order_by<TRes>
      get SoulWinningSessionGroups_aggregate {
    final local$SoulWinningSessionGroups_aggregate =
        _instance.SoulWinningSessionGroups_aggregate;
    return local$SoulWinningSessionGroups_aggregate == null
        ? CopyWith$Input$SoulWinningSessionGroup_aggregate_order_by.stub(
            _then(_instance))
        : CopyWith$Input$SoulWinningSessionGroup_aggregate_order_by(
            local$SoulWinningSessionGroups_aggregate,
            (e) => call(SoulWinningSessionGroups_aggregate: e));
  }
}

class _CopyWithStubImpl$Input$MapArea_order_by<TRes>
    implements CopyWith$Input$MapArea_order_by<TRes> {
  _CopyWithStubImpl$Input$MapArea_order_by(this._res);

  TRes _res;

  call({
    Input$Map_order_by? $Map,
    Input$SoulWinningSessionGroup_aggregate_order_by?
        SoulWinningSessionGroups_aggregate,
    Enum$order_by? belongingMap,
    Enum$order_by? id,
    Enum$order_by? name,
    Enum$order_by? polygonGeoJson,
  }) =>
      _res;
  CopyWith$Input$Map_order_by<TRes> get $Map =>
      CopyWith$Input$Map_order_by.stub(_res);
  CopyWith$Input$SoulWinningSessionGroup_aggregate_order_by<TRes>
      get SoulWinningSessionGroups_aggregate =>
          CopyWith$Input$SoulWinningSessionGroup_aggregate_order_by.stub(_res);
}

class Input$Organization_order_by {
  factory Input$Organization_order_by({
    Input$Event_aggregate_order_by? Events_aggregate,
    Input$Map_aggregate_order_by? Maps_aggregate,
    Input$_Organization_adminsOfOrganization_aggregate_order_by?
        $_Organization_adminsOfOrganizations_aggregate,
    Input$_Organization_membersInOrganization_aggregate_order_by?
        $_Organization_membersInOrganizations_aggregate,
    Enum$order_by? id,
    Enum$order_by? name,
    Enum$order_by? type,
  }) =>
      Input$Organization_order_by._({
        if (Events_aggregate != null) r'Events_aggregate': Events_aggregate,
        if (Maps_aggregate != null) r'Maps_aggregate': Maps_aggregate,
        if ($_Organization_adminsOfOrganizations_aggregate != null)
          r'_Organization_adminsOfOrganizations_aggregate':
              $_Organization_adminsOfOrganizations_aggregate,
        if ($_Organization_membersInOrganizations_aggregate != null)
          r'_Organization_membersInOrganizations_aggregate':
              $_Organization_membersInOrganizations_aggregate,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
        if (type != null) r'type': type,
      });

  Input$Organization_order_by._(this._$data);

  factory Input$Organization_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Events_aggregate')) {
      final l$Events_aggregate = data['Events_aggregate'];
      result$data['Events_aggregate'] = l$Events_aggregate == null
          ? null
          : Input$Event_aggregate_order_by.fromJson(
              (l$Events_aggregate as Map<String, dynamic>));
    }
    if (data.containsKey('Maps_aggregate')) {
      final l$Maps_aggregate = data['Maps_aggregate'];
      result$data['Maps_aggregate'] = l$Maps_aggregate == null
          ? null
          : Input$Map_aggregate_order_by.fromJson(
              (l$Maps_aggregate as Map<String, dynamic>));
    }
    if (data.containsKey('_Organization_adminsOfOrganizations_aggregate')) {
      final l$$_Organization_adminsOfOrganizations_aggregate =
          data['_Organization_adminsOfOrganizations_aggregate'];
      result$data['_Organization_adminsOfOrganizations_aggregate'] =
          l$$_Organization_adminsOfOrganizations_aggregate == null
              ? null
              : Input$_Organization_adminsOfOrganization_aggregate_order_by
                  .fromJson((l$$_Organization_adminsOfOrganizations_aggregate
                      as Map<String, dynamic>));
    }
    if (data.containsKey('_Organization_membersInOrganizations_aggregate')) {
      final l$$_Organization_membersInOrganizations_aggregate =
          data['_Organization_membersInOrganizations_aggregate'];
      result$data['_Organization_membersInOrganizations_aggregate'] =
          l$$_Organization_membersInOrganizations_aggregate == null
              ? null
              : Input$_Organization_membersInOrganization_aggregate_order_by
                  .fromJson((l$$_Organization_membersInOrganizations_aggregate
                      as Map<String, dynamic>));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] =
          l$name == null ? null : fromJson$Enum$order_by((l$name as String));
    }
    if (data.containsKey('type')) {
      final l$type = data['type'];
      result$data['type'] =
          l$type == null ? null : fromJson$Enum$order_by((l$type as String));
    }
    return Input$Organization_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$Event_aggregate_order_by? get Events_aggregate =>
      (_$data['Events_aggregate'] as Input$Event_aggregate_order_by?);
  Input$Map_aggregate_order_by? get Maps_aggregate =>
      (_$data['Maps_aggregate'] as Input$Map_aggregate_order_by?);
  Input$_Organization_adminsOfOrganization_aggregate_order_by?
      get $_Organization_adminsOfOrganizations_aggregate =>
          (_$data['_Organization_adminsOfOrganizations_aggregate']
              as Input$_Organization_adminsOfOrganization_aggregate_order_by?);
  Input$_Organization_membersInOrganization_aggregate_order_by?
      get $_Organization_membersInOrganizations_aggregate =>
          (_$data['_Organization_membersInOrganizations_aggregate']
              as Input$_Organization_membersInOrganization_aggregate_order_by?);
  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);
  Enum$order_by? get name => (_$data['name'] as Enum$order_by?);
  Enum$order_by? get type => (_$data['type'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Events_aggregate')) {
      final l$Events_aggregate = Events_aggregate;
      result$data['Events_aggregate'] = l$Events_aggregate?.toJson();
    }
    if (_$data.containsKey('Maps_aggregate')) {
      final l$Maps_aggregate = Maps_aggregate;
      result$data['Maps_aggregate'] = l$Maps_aggregate?.toJson();
    }
    if (_$data.containsKey('_Organization_adminsOfOrganizations_aggregate')) {
      final l$$_Organization_adminsOfOrganizations_aggregate =
          $_Organization_adminsOfOrganizations_aggregate;
      result$data['_Organization_adminsOfOrganizations_aggregate'] =
          l$$_Organization_adminsOfOrganizations_aggregate?.toJson();
    }
    if (_$data.containsKey('_Organization_membersInOrganizations_aggregate')) {
      final l$$_Organization_membersInOrganizations_aggregate =
          $_Organization_membersInOrganizations_aggregate;
      result$data['_Organization_membersInOrganizations_aggregate'] =
          l$$_Organization_membersInOrganizations_aggregate?.toJson();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] =
          l$name == null ? null : toJson$Enum$order_by(l$name);
    }
    if (_$data.containsKey('type')) {
      final l$type = type;
      result$data['type'] =
          l$type == null ? null : toJson$Enum$order_by(l$type);
    }
    return result$data;
  }

  CopyWith$Input$Organization_order_by<Input$Organization_order_by>
      get copyWith => CopyWith$Input$Organization_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Organization_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Events_aggregate = Events_aggregate;
    final lOther$Events_aggregate = other.Events_aggregate;
    if (_$data.containsKey('Events_aggregate') !=
        other._$data.containsKey('Events_aggregate')) {
      return false;
    }
    if (l$Events_aggregate != lOther$Events_aggregate) {
      return false;
    }
    final l$Maps_aggregate = Maps_aggregate;
    final lOther$Maps_aggregate = other.Maps_aggregate;
    if (_$data.containsKey('Maps_aggregate') !=
        other._$data.containsKey('Maps_aggregate')) {
      return false;
    }
    if (l$Maps_aggregate != lOther$Maps_aggregate) {
      return false;
    }
    final l$$_Organization_adminsOfOrganizations_aggregate =
        $_Organization_adminsOfOrganizations_aggregate;
    final lOther$$_Organization_adminsOfOrganizations_aggregate =
        other.$_Organization_adminsOfOrganizations_aggregate;
    if (_$data.containsKey('_Organization_adminsOfOrganizations_aggregate') !=
        other._$data
            .containsKey('_Organization_adminsOfOrganizations_aggregate')) {
      return false;
    }
    if (l$$_Organization_adminsOfOrganizations_aggregate !=
        lOther$$_Organization_adminsOfOrganizations_aggregate) {
      return false;
    }
    final l$$_Organization_membersInOrganizations_aggregate =
        $_Organization_membersInOrganizations_aggregate;
    final lOther$$_Organization_membersInOrganizations_aggregate =
        other.$_Organization_membersInOrganizations_aggregate;
    if (_$data.containsKey('_Organization_membersInOrganizations_aggregate') !=
        other._$data
            .containsKey('_Organization_membersInOrganizations_aggregate')) {
      return false;
    }
    if (l$$_Organization_membersInOrganizations_aggregate !=
        lOther$$_Organization_membersInOrganizations_aggregate) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$type = type;
    final lOther$type = other.type;
    if (_$data.containsKey('type') != other._$data.containsKey('type')) {
      return false;
    }
    if (l$type != lOther$type) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Events_aggregate = Events_aggregate;
    final l$Maps_aggregate = Maps_aggregate;
    final l$$_Organization_adminsOfOrganizations_aggregate =
        $_Organization_adminsOfOrganizations_aggregate;
    final l$$_Organization_membersInOrganizations_aggregate =
        $_Organization_membersInOrganizations_aggregate;
    final l$id = id;
    final l$name = name;
    final l$type = type;
    return Object.hashAll([
      _$data.containsKey('Events_aggregate') ? l$Events_aggregate : const {},
      _$data.containsKey('Maps_aggregate') ? l$Maps_aggregate : const {},
      _$data.containsKey('_Organization_adminsOfOrganizations_aggregate')
          ? l$$_Organization_adminsOfOrganizations_aggregate
          : const {},
      _$data.containsKey('_Organization_membersInOrganizations_aggregate')
          ? l$$_Organization_membersInOrganizations_aggregate
          : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('type') ? l$type : const {},
    ]);
  }
}

abstract class CopyWith$Input$Organization_order_by<TRes> {
  factory CopyWith$Input$Organization_order_by(
    Input$Organization_order_by instance,
    TRes Function(Input$Organization_order_by) then,
  ) = _CopyWithImpl$Input$Organization_order_by;

  factory CopyWith$Input$Organization_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$Organization_order_by;

  TRes call({
    Input$Event_aggregate_order_by? Events_aggregate,
    Input$Map_aggregate_order_by? Maps_aggregate,
    Input$_Organization_adminsOfOrganization_aggregate_order_by?
        $_Organization_adminsOfOrganizations_aggregate,
    Input$_Organization_membersInOrganization_aggregate_order_by?
        $_Organization_membersInOrganizations_aggregate,
    Enum$order_by? id,
    Enum$order_by? name,
    Enum$order_by? type,
  });
  CopyWith$Input$Event_aggregate_order_by<TRes> get Events_aggregate;
  CopyWith$Input$Map_aggregate_order_by<TRes> get Maps_aggregate;
  CopyWith$Input$_Organization_adminsOfOrganization_aggregate_order_by<TRes>
      get $_Organization_adminsOfOrganizations_aggregate;
  CopyWith$Input$_Organization_membersInOrganization_aggregate_order_by<TRes>
      get $_Organization_membersInOrganizations_aggregate;
}

class _CopyWithImpl$Input$Organization_order_by<TRes>
    implements CopyWith$Input$Organization_order_by<TRes> {
  _CopyWithImpl$Input$Organization_order_by(
    this._instance,
    this._then,
  );

  final Input$Organization_order_by _instance;

  final TRes Function(Input$Organization_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Events_aggregate = _undefined,
    Object? Maps_aggregate = _undefined,
    Object? $_Organization_adminsOfOrganizations_aggregate = _undefined,
    Object? $_Organization_membersInOrganizations_aggregate = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
    Object? type = _undefined,
  }) =>
      _then(Input$Organization_order_by._({
        ..._instance._$data,
        if (Events_aggregate != _undefined)
          'Events_aggregate':
              (Events_aggregate as Input$Event_aggregate_order_by?),
        if (Maps_aggregate != _undefined)
          'Maps_aggregate': (Maps_aggregate as Input$Map_aggregate_order_by?),
        if ($_Organization_adminsOfOrganizations_aggregate != _undefined)
          '_Organization_adminsOfOrganizations_aggregate':
              ($_Organization_adminsOfOrganizations_aggregate
                  as Input$_Organization_adminsOfOrganization_aggregate_order_by?),
        if ($_Organization_membersInOrganizations_aggregate != _undefined)
          '_Organization_membersInOrganizations_aggregate':
              ($_Organization_membersInOrganizations_aggregate
                  as Input$_Organization_membersInOrganization_aggregate_order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (name != _undefined) 'name': (name as Enum$order_by?),
        if (type != _undefined) 'type': (type as Enum$order_by?),
      }));
  CopyWith$Input$Event_aggregate_order_by<TRes> get Events_aggregate {
    final local$Events_aggregate = _instance.Events_aggregate;
    return local$Events_aggregate == null
        ? CopyWith$Input$Event_aggregate_order_by.stub(_then(_instance))
        : CopyWith$Input$Event_aggregate_order_by(
            local$Events_aggregate, (e) => call(Events_aggregate: e));
  }

  CopyWith$Input$Map_aggregate_order_by<TRes> get Maps_aggregate {
    final local$Maps_aggregate = _instance.Maps_aggregate;
    return local$Maps_aggregate == null
        ? CopyWith$Input$Map_aggregate_order_by.stub(_then(_instance))
        : CopyWith$Input$Map_aggregate_order_by(
            local$Maps_aggregate, (e) => call(Maps_aggregate: e));
  }

  CopyWith$Input$_Organization_adminsOfOrganization_aggregate_order_by<TRes>
      get $_Organization_adminsOfOrganizations_aggregate {
    final local$$_Organization_adminsOfOrganizations_aggregate =
        _instance.$_Organization_adminsOfOrganizations_aggregate;
    return local$$_Organization_adminsOfOrganizations_aggregate == null
        ? CopyWith$Input$_Organization_adminsOfOrganization_aggregate_order_by
            .stub(_then(_instance))
        : CopyWith$Input$_Organization_adminsOfOrganization_aggregate_order_by(
            local$$_Organization_adminsOfOrganizations_aggregate,
            (e) => call($_Organization_adminsOfOrganizations_aggregate: e));
  }

  CopyWith$Input$_Organization_membersInOrganization_aggregate_order_by<TRes>
      get $_Organization_membersInOrganizations_aggregate {
    final local$$_Organization_membersInOrganizations_aggregate =
        _instance.$_Organization_membersInOrganizations_aggregate;
    return local$$_Organization_membersInOrganizations_aggregate == null
        ? CopyWith$Input$_Organization_membersInOrganization_aggregate_order_by
            .stub(_then(_instance))
        : CopyWith$Input$_Organization_membersInOrganization_aggregate_order_by(
            local$$_Organization_membersInOrganizations_aggregate,
            (e) => call($_Organization_membersInOrganizations_aggregate: e));
  }
}

class _CopyWithStubImpl$Input$Organization_order_by<TRes>
    implements CopyWith$Input$Organization_order_by<TRes> {
  _CopyWithStubImpl$Input$Organization_order_by(this._res);

  TRes _res;

  call({
    Input$Event_aggregate_order_by? Events_aggregate,
    Input$Map_aggregate_order_by? Maps_aggregate,
    Input$_Organization_adminsOfOrganization_aggregate_order_by?
        $_Organization_adminsOfOrganizations_aggregate,
    Input$_Organization_membersInOrganization_aggregate_order_by?
        $_Organization_membersInOrganizations_aggregate,
    Enum$order_by? id,
    Enum$order_by? name,
    Enum$order_by? type,
  }) =>
      _res;
  CopyWith$Input$Event_aggregate_order_by<TRes> get Events_aggregate =>
      CopyWith$Input$Event_aggregate_order_by.stub(_res);
  CopyWith$Input$Map_aggregate_order_by<TRes> get Maps_aggregate =>
      CopyWith$Input$Map_aggregate_order_by.stub(_res);
  CopyWith$Input$_Organization_adminsOfOrganization_aggregate_order_by<TRes>
      get $_Organization_adminsOfOrganizations_aggregate =>
          CopyWith$Input$_Organization_adminsOfOrganization_aggregate_order_by
              .stub(_res);
  CopyWith$Input$_Organization_membersInOrganization_aggregate_order_by<TRes>
      get $_Organization_membersInOrganizations_aggregate =>
          CopyWith$Input$_Organization_membersInOrganization_aggregate_order_by
              .stub(_res);
}

class Input$SavedPerson_order_by {
  factory Input$SavedPerson_order_by({
    Input$Encounter_order_by? Encounter,
    Enum$order_by? email,
    Enum$order_by? id,
    Enum$order_by? name,
    Enum$order_by? phone,
    Enum$order_by? savingEncounter,
  }) =>
      Input$SavedPerson_order_by._({
        if (Encounter != null) r'Encounter': Encounter,
        if (email != null) r'email': email,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
        if (phone != null) r'phone': phone,
        if (savingEncounter != null) r'savingEncounter': savingEncounter,
      });

  Input$SavedPerson_order_by._(this._$data);

  factory Input$SavedPerson_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Encounter')) {
      final l$Encounter = data['Encounter'];
      result$data['Encounter'] = l$Encounter == null
          ? null
          : Input$Encounter_order_by.fromJson(
              (l$Encounter as Map<String, dynamic>));
    }
    if (data.containsKey('email')) {
      final l$email = data['email'];
      result$data['email'] =
          l$email == null ? null : fromJson$Enum$order_by((l$email as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] =
          l$name == null ? null : fromJson$Enum$order_by((l$name as String));
    }
    if (data.containsKey('phone')) {
      final l$phone = data['phone'];
      result$data['phone'] =
          l$phone == null ? null : fromJson$Enum$order_by((l$phone as String));
    }
    if (data.containsKey('savingEncounter')) {
      final l$savingEncounter = data['savingEncounter'];
      result$data['savingEncounter'] = l$savingEncounter == null
          ? null
          : fromJson$Enum$order_by((l$savingEncounter as String));
    }
    return Input$SavedPerson_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$Encounter_order_by? get Encounter =>
      (_$data['Encounter'] as Input$Encounter_order_by?);
  Enum$order_by? get email => (_$data['email'] as Enum$order_by?);
  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);
  Enum$order_by? get name => (_$data['name'] as Enum$order_by?);
  Enum$order_by? get phone => (_$data['phone'] as Enum$order_by?);
  Enum$order_by? get savingEncounter =>
      (_$data['savingEncounter'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Encounter')) {
      final l$Encounter = Encounter;
      result$data['Encounter'] = l$Encounter?.toJson();
    }
    if (_$data.containsKey('email')) {
      final l$email = email;
      result$data['email'] =
          l$email == null ? null : toJson$Enum$order_by(l$email);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] =
          l$name == null ? null : toJson$Enum$order_by(l$name);
    }
    if (_$data.containsKey('phone')) {
      final l$phone = phone;
      result$data['phone'] =
          l$phone == null ? null : toJson$Enum$order_by(l$phone);
    }
    if (_$data.containsKey('savingEncounter')) {
      final l$savingEncounter = savingEncounter;
      result$data['savingEncounter'] = l$savingEncounter == null
          ? null
          : toJson$Enum$order_by(l$savingEncounter);
    }
    return result$data;
  }

  CopyWith$Input$SavedPerson_order_by<Input$SavedPerson_order_by>
      get copyWith => CopyWith$Input$SavedPerson_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SavedPerson_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Encounter = Encounter;
    final lOther$Encounter = other.Encounter;
    if (_$data.containsKey('Encounter') !=
        other._$data.containsKey('Encounter')) {
      return false;
    }
    if (l$Encounter != lOther$Encounter) {
      return false;
    }
    final l$email = email;
    final lOther$email = other.email;
    if (_$data.containsKey('email') != other._$data.containsKey('email')) {
      return false;
    }
    if (l$email != lOther$email) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$phone = phone;
    final lOther$phone = other.phone;
    if (_$data.containsKey('phone') != other._$data.containsKey('phone')) {
      return false;
    }
    if (l$phone != lOther$phone) {
      return false;
    }
    final l$savingEncounter = savingEncounter;
    final lOther$savingEncounter = other.savingEncounter;
    if (_$data.containsKey('savingEncounter') !=
        other._$data.containsKey('savingEncounter')) {
      return false;
    }
    if (l$savingEncounter != lOther$savingEncounter) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Encounter = Encounter;
    final l$email = email;
    final l$id = id;
    final l$name = name;
    final l$phone = phone;
    final l$savingEncounter = savingEncounter;
    return Object.hashAll([
      _$data.containsKey('Encounter') ? l$Encounter : const {},
      _$data.containsKey('email') ? l$email : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('phone') ? l$phone : const {},
      _$data.containsKey('savingEncounter') ? l$savingEncounter : const {},
    ]);
  }
}

abstract class CopyWith$Input$SavedPerson_order_by<TRes> {
  factory CopyWith$Input$SavedPerson_order_by(
    Input$SavedPerson_order_by instance,
    TRes Function(Input$SavedPerson_order_by) then,
  ) = _CopyWithImpl$Input$SavedPerson_order_by;

  factory CopyWith$Input$SavedPerson_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$SavedPerson_order_by;

  TRes call({
    Input$Encounter_order_by? Encounter,
    Enum$order_by? email,
    Enum$order_by? id,
    Enum$order_by? name,
    Enum$order_by? phone,
    Enum$order_by? savingEncounter,
  });
  CopyWith$Input$Encounter_order_by<TRes> get Encounter;
}

class _CopyWithImpl$Input$SavedPerson_order_by<TRes>
    implements CopyWith$Input$SavedPerson_order_by<TRes> {
  _CopyWithImpl$Input$SavedPerson_order_by(
    this._instance,
    this._then,
  );

  final Input$SavedPerson_order_by _instance;

  final TRes Function(Input$SavedPerson_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Encounter = _undefined,
    Object? email = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
    Object? phone = _undefined,
    Object? savingEncounter = _undefined,
  }) =>
      _then(Input$SavedPerson_order_by._({
        ..._instance._$data,
        if (Encounter != _undefined)
          'Encounter': (Encounter as Input$Encounter_order_by?),
        if (email != _undefined) 'email': (email as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (name != _undefined) 'name': (name as Enum$order_by?),
        if (phone != _undefined) 'phone': (phone as Enum$order_by?),
        if (savingEncounter != _undefined)
          'savingEncounter': (savingEncounter as Enum$order_by?),
      }));
  CopyWith$Input$Encounter_order_by<TRes> get Encounter {
    final local$Encounter = _instance.Encounter;
    return local$Encounter == null
        ? CopyWith$Input$Encounter_order_by.stub(_then(_instance))
        : CopyWith$Input$Encounter_order_by(
            local$Encounter, (e) => call(Encounter: e));
  }
}

class _CopyWithStubImpl$Input$SavedPerson_order_by<TRes>
    implements CopyWith$Input$SavedPerson_order_by<TRes> {
  _CopyWithStubImpl$Input$SavedPerson_order_by(this._res);

  TRes _res;

  call({
    Input$Encounter_order_by? Encounter,
    Enum$order_by? email,
    Enum$order_by? id,
    Enum$order_by? name,
    Enum$order_by? phone,
    Enum$order_by? savingEncounter,
  }) =>
      _res;
  CopyWith$Input$Encounter_order_by<TRes> get Encounter =>
      CopyWith$Input$Encounter_order_by.stub(_res);
}

class Input$SoulWinningSession_order_by {
  factory Input$SoulWinningSession_order_by({
    Input$Event_order_by? Event,
    Input$SoulWinningSessionGroup_aggregate_order_by?
        SoulWinningSessionGroups_aggregate,
    Enum$order_by? event,
    Enum$order_by? id,
    Enum$order_by? name,
    Enum$order_by? scheduledEndTimeInUtc,
    Enum$order_by? scheduledStartTimeInUtc,
  }) =>
      Input$SoulWinningSession_order_by._({
        if (Event != null) r'Event': Event,
        if (SoulWinningSessionGroups_aggregate != null)
          r'SoulWinningSessionGroups_aggregate':
              SoulWinningSessionGroups_aggregate,
        if (event != null) r'event': event,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
        if (scheduledEndTimeInUtc != null)
          r'scheduledEndTimeInUtc': scheduledEndTimeInUtc,
        if (scheduledStartTimeInUtc != null)
          r'scheduledStartTimeInUtc': scheduledStartTimeInUtc,
      });

  Input$SoulWinningSession_order_by._(this._$data);

  factory Input$SoulWinningSession_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Event')) {
      final l$Event = data['Event'];
      result$data['Event'] = l$Event == null
          ? null
          : Input$Event_order_by.fromJson((l$Event as Map<String, dynamic>));
    }
    if (data.containsKey('SoulWinningSessionGroups_aggregate')) {
      final l$SoulWinningSessionGroups_aggregate =
          data['SoulWinningSessionGroups_aggregate'];
      result$data['SoulWinningSessionGroups_aggregate'] =
          l$SoulWinningSessionGroups_aggregate == null
              ? null
              : Input$SoulWinningSessionGroup_aggregate_order_by.fromJson(
                  (l$SoulWinningSessionGroups_aggregate
                      as Map<String, dynamic>));
    }
    if (data.containsKey('event')) {
      final l$event = data['event'];
      result$data['event'] =
          l$event == null ? null : fromJson$Enum$order_by((l$event as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] =
          l$name == null ? null : fromJson$Enum$order_by((l$name as String));
    }
    if (data.containsKey('scheduledEndTimeInUtc')) {
      final l$scheduledEndTimeInUtc = data['scheduledEndTimeInUtc'];
      result$data['scheduledEndTimeInUtc'] = l$scheduledEndTimeInUtc == null
          ? null
          : fromJson$Enum$order_by((l$scheduledEndTimeInUtc as String));
    }
    if (data.containsKey('scheduledStartTimeInUtc')) {
      final l$scheduledStartTimeInUtc = data['scheduledStartTimeInUtc'];
      result$data['scheduledStartTimeInUtc'] = l$scheduledStartTimeInUtc == null
          ? null
          : fromJson$Enum$order_by((l$scheduledStartTimeInUtc as String));
    }
    return Input$SoulWinningSession_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$Event_order_by? get Event => (_$data['Event'] as Input$Event_order_by?);
  Input$SoulWinningSessionGroup_aggregate_order_by?
      get SoulWinningSessionGroups_aggregate =>
          (_$data['SoulWinningSessionGroups_aggregate']
              as Input$SoulWinningSessionGroup_aggregate_order_by?);
  Enum$order_by? get event => (_$data['event'] as Enum$order_by?);
  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);
  Enum$order_by? get name => (_$data['name'] as Enum$order_by?);
  Enum$order_by? get scheduledEndTimeInUtc =>
      (_$data['scheduledEndTimeInUtc'] as Enum$order_by?);
  Enum$order_by? get scheduledStartTimeInUtc =>
      (_$data['scheduledStartTimeInUtc'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Event')) {
      final l$Event = Event;
      result$data['Event'] = l$Event?.toJson();
    }
    if (_$data.containsKey('SoulWinningSessionGroups_aggregate')) {
      final l$SoulWinningSessionGroups_aggregate =
          SoulWinningSessionGroups_aggregate;
      result$data['SoulWinningSessionGroups_aggregate'] =
          l$SoulWinningSessionGroups_aggregate?.toJson();
    }
    if (_$data.containsKey('event')) {
      final l$event = event;
      result$data['event'] =
          l$event == null ? null : toJson$Enum$order_by(l$event);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] =
          l$name == null ? null : toJson$Enum$order_by(l$name);
    }
    if (_$data.containsKey('scheduledEndTimeInUtc')) {
      final l$scheduledEndTimeInUtc = scheduledEndTimeInUtc;
      result$data['scheduledEndTimeInUtc'] = l$scheduledEndTimeInUtc == null
          ? null
          : toJson$Enum$order_by(l$scheduledEndTimeInUtc);
    }
    if (_$data.containsKey('scheduledStartTimeInUtc')) {
      final l$scheduledStartTimeInUtc = scheduledStartTimeInUtc;
      result$data['scheduledStartTimeInUtc'] = l$scheduledStartTimeInUtc == null
          ? null
          : toJson$Enum$order_by(l$scheduledStartTimeInUtc);
    }
    return result$data;
  }

  CopyWith$Input$SoulWinningSession_order_by<Input$SoulWinningSession_order_by>
      get copyWith => CopyWith$Input$SoulWinningSession_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SoulWinningSession_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Event = Event;
    final lOther$Event = other.Event;
    if (_$data.containsKey('Event') != other._$data.containsKey('Event')) {
      return false;
    }
    if (l$Event != lOther$Event) {
      return false;
    }
    final l$SoulWinningSessionGroups_aggregate =
        SoulWinningSessionGroups_aggregate;
    final lOther$SoulWinningSessionGroups_aggregate =
        other.SoulWinningSessionGroups_aggregate;
    if (_$data.containsKey('SoulWinningSessionGroups_aggregate') !=
        other._$data.containsKey('SoulWinningSessionGroups_aggregate')) {
      return false;
    }
    if (l$SoulWinningSessionGroups_aggregate !=
        lOther$SoulWinningSessionGroups_aggregate) {
      return false;
    }
    final l$event = event;
    final lOther$event = other.event;
    if (_$data.containsKey('event') != other._$data.containsKey('event')) {
      return false;
    }
    if (l$event != lOther$event) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$scheduledEndTimeInUtc = scheduledEndTimeInUtc;
    final lOther$scheduledEndTimeInUtc = other.scheduledEndTimeInUtc;
    if (_$data.containsKey('scheduledEndTimeInUtc') !=
        other._$data.containsKey('scheduledEndTimeInUtc')) {
      return false;
    }
    if (l$scheduledEndTimeInUtc != lOther$scheduledEndTimeInUtc) {
      return false;
    }
    final l$scheduledStartTimeInUtc = scheduledStartTimeInUtc;
    final lOther$scheduledStartTimeInUtc = other.scheduledStartTimeInUtc;
    if (_$data.containsKey('scheduledStartTimeInUtc') !=
        other._$data.containsKey('scheduledStartTimeInUtc')) {
      return false;
    }
    if (l$scheduledStartTimeInUtc != lOther$scheduledStartTimeInUtc) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Event = Event;
    final l$SoulWinningSessionGroups_aggregate =
        SoulWinningSessionGroups_aggregate;
    final l$event = event;
    final l$id = id;
    final l$name = name;
    final l$scheduledEndTimeInUtc = scheduledEndTimeInUtc;
    final l$scheduledStartTimeInUtc = scheduledStartTimeInUtc;
    return Object.hashAll([
      _$data.containsKey('Event') ? l$Event : const {},
      _$data.containsKey('SoulWinningSessionGroups_aggregate')
          ? l$SoulWinningSessionGroups_aggregate
          : const {},
      _$data.containsKey('event') ? l$event : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('scheduledEndTimeInUtc')
          ? l$scheduledEndTimeInUtc
          : const {},
      _$data.containsKey('scheduledStartTimeInUtc')
          ? l$scheduledStartTimeInUtc
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$SoulWinningSession_order_by<TRes> {
  factory CopyWith$Input$SoulWinningSession_order_by(
    Input$SoulWinningSession_order_by instance,
    TRes Function(Input$SoulWinningSession_order_by) then,
  ) = _CopyWithImpl$Input$SoulWinningSession_order_by;

  factory CopyWith$Input$SoulWinningSession_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$SoulWinningSession_order_by;

  TRes call({
    Input$Event_order_by? Event,
    Input$SoulWinningSessionGroup_aggregate_order_by?
        SoulWinningSessionGroups_aggregate,
    Enum$order_by? event,
    Enum$order_by? id,
    Enum$order_by? name,
    Enum$order_by? scheduledEndTimeInUtc,
    Enum$order_by? scheduledStartTimeInUtc,
  });
  CopyWith$Input$Event_order_by<TRes> get Event;
  CopyWith$Input$SoulWinningSessionGroup_aggregate_order_by<TRes>
      get SoulWinningSessionGroups_aggregate;
}

class _CopyWithImpl$Input$SoulWinningSession_order_by<TRes>
    implements CopyWith$Input$SoulWinningSession_order_by<TRes> {
  _CopyWithImpl$Input$SoulWinningSession_order_by(
    this._instance,
    this._then,
  );

  final Input$SoulWinningSession_order_by _instance;

  final TRes Function(Input$SoulWinningSession_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Event = _undefined,
    Object? SoulWinningSessionGroups_aggregate = _undefined,
    Object? event = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
    Object? scheduledEndTimeInUtc = _undefined,
    Object? scheduledStartTimeInUtc = _undefined,
  }) =>
      _then(Input$SoulWinningSession_order_by._({
        ..._instance._$data,
        if (Event != _undefined) 'Event': (Event as Input$Event_order_by?),
        if (SoulWinningSessionGroups_aggregate != _undefined)
          'SoulWinningSessionGroups_aggregate':
              (SoulWinningSessionGroups_aggregate
                  as Input$SoulWinningSessionGroup_aggregate_order_by?),
        if (event != _undefined) 'event': (event as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (name != _undefined) 'name': (name as Enum$order_by?),
        if (scheduledEndTimeInUtc != _undefined)
          'scheduledEndTimeInUtc': (scheduledEndTimeInUtc as Enum$order_by?),
        if (scheduledStartTimeInUtc != _undefined)
          'scheduledStartTimeInUtc':
              (scheduledStartTimeInUtc as Enum$order_by?),
      }));
  CopyWith$Input$Event_order_by<TRes> get Event {
    final local$Event = _instance.Event;
    return local$Event == null
        ? CopyWith$Input$Event_order_by.stub(_then(_instance))
        : CopyWith$Input$Event_order_by(local$Event, (e) => call(Event: e));
  }

  CopyWith$Input$SoulWinningSessionGroup_aggregate_order_by<TRes>
      get SoulWinningSessionGroups_aggregate {
    final local$SoulWinningSessionGroups_aggregate =
        _instance.SoulWinningSessionGroups_aggregate;
    return local$SoulWinningSessionGroups_aggregate == null
        ? CopyWith$Input$SoulWinningSessionGroup_aggregate_order_by.stub(
            _then(_instance))
        : CopyWith$Input$SoulWinningSessionGroup_aggregate_order_by(
            local$SoulWinningSessionGroups_aggregate,
            (e) => call(SoulWinningSessionGroups_aggregate: e));
  }
}

class _CopyWithStubImpl$Input$SoulWinningSession_order_by<TRes>
    implements CopyWith$Input$SoulWinningSession_order_by<TRes> {
  _CopyWithStubImpl$Input$SoulWinningSession_order_by(this._res);

  TRes _res;

  call({
    Input$Event_order_by? Event,
    Input$SoulWinningSessionGroup_aggregate_order_by?
        SoulWinningSessionGroups_aggregate,
    Enum$order_by? event,
    Enum$order_by? id,
    Enum$order_by? name,
    Enum$order_by? scheduledEndTimeInUtc,
    Enum$order_by? scheduledStartTimeInUtc,
  }) =>
      _res;
  CopyWith$Input$Event_order_by<TRes> get Event =>
      CopyWith$Input$Event_order_by.stub(_res);
  CopyWith$Input$SoulWinningSessionGroup_aggregate_order_by<TRes>
      get SoulWinningSessionGroups_aggregate =>
          CopyWith$Input$SoulWinningSessionGroup_aggregate_order_by.stub(_res);
}

class Input$SoulWinningSessionGroup_order_by {
  factory Input$SoulWinningSessionGroup_order_by({
    Input$Encounter_aggregate_order_by? Encounters_aggregate,
    Input$MapArea_order_by? MapArea,
    Input$SoulWinningSession_order_by? SoulWinningSession,
    Input$_SoulWinningSessionGroup_members_aggregate_order_by?
        $_SoulWinningSessionGroup_members_aggregate,
    Enum$order_by? assignedMapArea,
    Enum$order_by? id,
    Enum$order_by? session,
  }) =>
      Input$SoulWinningSessionGroup_order_by._({
        if (Encounters_aggregate != null)
          r'Encounters_aggregate': Encounters_aggregate,
        if (MapArea != null) r'MapArea': MapArea,
        if (SoulWinningSession != null)
          r'SoulWinningSession': SoulWinningSession,
        if ($_SoulWinningSessionGroup_members_aggregate != null)
          r'_SoulWinningSessionGroup_members_aggregate':
              $_SoulWinningSessionGroup_members_aggregate,
        if (assignedMapArea != null) r'assignedMapArea': assignedMapArea,
        if (id != null) r'id': id,
        if (session != null) r'session': session,
      });

  Input$SoulWinningSessionGroup_order_by._(this._$data);

  factory Input$SoulWinningSessionGroup_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Encounters_aggregate')) {
      final l$Encounters_aggregate = data['Encounters_aggregate'];
      result$data['Encounters_aggregate'] = l$Encounters_aggregate == null
          ? null
          : Input$Encounter_aggregate_order_by.fromJson(
              (l$Encounters_aggregate as Map<String, dynamic>));
    }
    if (data.containsKey('MapArea')) {
      final l$MapArea = data['MapArea'];
      result$data['MapArea'] = l$MapArea == null
          ? null
          : Input$MapArea_order_by.fromJson(
              (l$MapArea as Map<String, dynamic>));
    }
    if (data.containsKey('SoulWinningSession')) {
      final l$SoulWinningSession = data['SoulWinningSession'];
      result$data['SoulWinningSession'] = l$SoulWinningSession == null
          ? null
          : Input$SoulWinningSession_order_by.fromJson(
              (l$SoulWinningSession as Map<String, dynamic>));
    }
    if (data.containsKey('_SoulWinningSessionGroup_members_aggregate')) {
      final l$$_SoulWinningSessionGroup_members_aggregate =
          data['_SoulWinningSessionGroup_members_aggregate'];
      result$data['_SoulWinningSessionGroup_members_aggregate'] =
          l$$_SoulWinningSessionGroup_members_aggregate == null
              ? null
              : Input$_SoulWinningSessionGroup_members_aggregate_order_by
                  .fromJson((l$$_SoulWinningSessionGroup_members_aggregate
                      as Map<String, dynamic>));
    }
    if (data.containsKey('assignedMapArea')) {
      final l$assignedMapArea = data['assignedMapArea'];
      result$data['assignedMapArea'] = l$assignedMapArea == null
          ? null
          : fromJson$Enum$order_by((l$assignedMapArea as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('session')) {
      final l$session = data['session'];
      result$data['session'] = l$session == null
          ? null
          : fromJson$Enum$order_by((l$session as String));
    }
    return Input$SoulWinningSessionGroup_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$Encounter_aggregate_order_by? get Encounters_aggregate =>
      (_$data['Encounters_aggregate'] as Input$Encounter_aggregate_order_by?);
  Input$MapArea_order_by? get MapArea =>
      (_$data['MapArea'] as Input$MapArea_order_by?);
  Input$SoulWinningSession_order_by? get SoulWinningSession =>
      (_$data['SoulWinningSession'] as Input$SoulWinningSession_order_by?);
  Input$_SoulWinningSessionGroup_members_aggregate_order_by?
      get $_SoulWinningSessionGroup_members_aggregate =>
          (_$data['_SoulWinningSessionGroup_members_aggregate']
              as Input$_SoulWinningSessionGroup_members_aggregate_order_by?);
  Enum$order_by? get assignedMapArea =>
      (_$data['assignedMapArea'] as Enum$order_by?);
  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);
  Enum$order_by? get session => (_$data['session'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Encounters_aggregate')) {
      final l$Encounters_aggregate = Encounters_aggregate;
      result$data['Encounters_aggregate'] = l$Encounters_aggregate?.toJson();
    }
    if (_$data.containsKey('MapArea')) {
      final l$MapArea = MapArea;
      result$data['MapArea'] = l$MapArea?.toJson();
    }
    if (_$data.containsKey('SoulWinningSession')) {
      final l$SoulWinningSession = SoulWinningSession;
      result$data['SoulWinningSession'] = l$SoulWinningSession?.toJson();
    }
    if (_$data.containsKey('_SoulWinningSessionGroup_members_aggregate')) {
      final l$$_SoulWinningSessionGroup_members_aggregate =
          $_SoulWinningSessionGroup_members_aggregate;
      result$data['_SoulWinningSessionGroup_members_aggregate'] =
          l$$_SoulWinningSessionGroup_members_aggregate?.toJson();
    }
    if (_$data.containsKey('assignedMapArea')) {
      final l$assignedMapArea = assignedMapArea;
      result$data['assignedMapArea'] = l$assignedMapArea == null
          ? null
          : toJson$Enum$order_by(l$assignedMapArea);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('session')) {
      final l$session = session;
      result$data['session'] =
          l$session == null ? null : toJson$Enum$order_by(l$session);
    }
    return result$data;
  }

  CopyWith$Input$SoulWinningSessionGroup_order_by<
          Input$SoulWinningSessionGroup_order_by>
      get copyWith => CopyWith$Input$SoulWinningSessionGroup_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SoulWinningSessionGroup_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Encounters_aggregate = Encounters_aggregate;
    final lOther$Encounters_aggregate = other.Encounters_aggregate;
    if (_$data.containsKey('Encounters_aggregate') !=
        other._$data.containsKey('Encounters_aggregate')) {
      return false;
    }
    if (l$Encounters_aggregate != lOther$Encounters_aggregate) {
      return false;
    }
    final l$MapArea = MapArea;
    final lOther$MapArea = other.MapArea;
    if (_$data.containsKey('MapArea') != other._$data.containsKey('MapArea')) {
      return false;
    }
    if (l$MapArea != lOther$MapArea) {
      return false;
    }
    final l$SoulWinningSession = SoulWinningSession;
    final lOther$SoulWinningSession = other.SoulWinningSession;
    if (_$data.containsKey('SoulWinningSession') !=
        other._$data.containsKey('SoulWinningSession')) {
      return false;
    }
    if (l$SoulWinningSession != lOther$SoulWinningSession) {
      return false;
    }
    final l$$_SoulWinningSessionGroup_members_aggregate =
        $_SoulWinningSessionGroup_members_aggregate;
    final lOther$$_SoulWinningSessionGroup_members_aggregate =
        other.$_SoulWinningSessionGroup_members_aggregate;
    if (_$data.containsKey('_SoulWinningSessionGroup_members_aggregate') !=
        other._$data
            .containsKey('_SoulWinningSessionGroup_members_aggregate')) {
      return false;
    }
    if (l$$_SoulWinningSessionGroup_members_aggregate !=
        lOther$$_SoulWinningSessionGroup_members_aggregate) {
      return false;
    }
    final l$assignedMapArea = assignedMapArea;
    final lOther$assignedMapArea = other.assignedMapArea;
    if (_$data.containsKey('assignedMapArea') !=
        other._$data.containsKey('assignedMapArea')) {
      return false;
    }
    if (l$assignedMapArea != lOther$assignedMapArea) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$session = session;
    final lOther$session = other.session;
    if (_$data.containsKey('session') != other._$data.containsKey('session')) {
      return false;
    }
    if (l$session != lOther$session) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Encounters_aggregate = Encounters_aggregate;
    final l$MapArea = MapArea;
    final l$SoulWinningSession = SoulWinningSession;
    final l$$_SoulWinningSessionGroup_members_aggregate =
        $_SoulWinningSessionGroup_members_aggregate;
    final l$assignedMapArea = assignedMapArea;
    final l$id = id;
    final l$session = session;
    return Object.hashAll([
      _$data.containsKey('Encounters_aggregate')
          ? l$Encounters_aggregate
          : const {},
      _$data.containsKey('MapArea') ? l$MapArea : const {},
      _$data.containsKey('SoulWinningSession')
          ? l$SoulWinningSession
          : const {},
      _$data.containsKey('_SoulWinningSessionGroup_members_aggregate')
          ? l$$_SoulWinningSessionGroup_members_aggregate
          : const {},
      _$data.containsKey('assignedMapArea') ? l$assignedMapArea : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('session') ? l$session : const {},
    ]);
  }
}

abstract class CopyWith$Input$SoulWinningSessionGroup_order_by<TRes> {
  factory CopyWith$Input$SoulWinningSessionGroup_order_by(
    Input$SoulWinningSessionGroup_order_by instance,
    TRes Function(Input$SoulWinningSessionGroup_order_by) then,
  ) = _CopyWithImpl$Input$SoulWinningSessionGroup_order_by;

  factory CopyWith$Input$SoulWinningSessionGroup_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$SoulWinningSessionGroup_order_by;

  TRes call({
    Input$Encounter_aggregate_order_by? Encounters_aggregate,
    Input$MapArea_order_by? MapArea,
    Input$SoulWinningSession_order_by? SoulWinningSession,
    Input$_SoulWinningSessionGroup_members_aggregate_order_by?
        $_SoulWinningSessionGroup_members_aggregate,
    Enum$order_by? assignedMapArea,
    Enum$order_by? id,
    Enum$order_by? session,
  });
  CopyWith$Input$Encounter_aggregate_order_by<TRes> get Encounters_aggregate;
  CopyWith$Input$MapArea_order_by<TRes> get MapArea;
  CopyWith$Input$SoulWinningSession_order_by<TRes> get SoulWinningSession;
  CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_order_by<TRes>
      get $_SoulWinningSessionGroup_members_aggregate;
}

class _CopyWithImpl$Input$SoulWinningSessionGroup_order_by<TRes>
    implements CopyWith$Input$SoulWinningSessionGroup_order_by<TRes> {
  _CopyWithImpl$Input$SoulWinningSessionGroup_order_by(
    this._instance,
    this._then,
  );

  final Input$SoulWinningSessionGroup_order_by _instance;

  final TRes Function(Input$SoulWinningSessionGroup_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Encounters_aggregate = _undefined,
    Object? MapArea = _undefined,
    Object? SoulWinningSession = _undefined,
    Object? $_SoulWinningSessionGroup_members_aggregate = _undefined,
    Object? assignedMapArea = _undefined,
    Object? id = _undefined,
    Object? session = _undefined,
  }) =>
      _then(Input$SoulWinningSessionGroup_order_by._({
        ..._instance._$data,
        if (Encounters_aggregate != _undefined)
          'Encounters_aggregate':
              (Encounters_aggregate as Input$Encounter_aggregate_order_by?),
        if (MapArea != _undefined)
          'MapArea': (MapArea as Input$MapArea_order_by?),
        if (SoulWinningSession != _undefined)
          'SoulWinningSession':
              (SoulWinningSession as Input$SoulWinningSession_order_by?),
        if ($_SoulWinningSessionGroup_members_aggregate != _undefined)
          '_SoulWinningSessionGroup_members_aggregate':
              ($_SoulWinningSessionGroup_members_aggregate
                  as Input$_SoulWinningSessionGroup_members_aggregate_order_by?),
        if (assignedMapArea != _undefined)
          'assignedMapArea': (assignedMapArea as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (session != _undefined) 'session': (session as Enum$order_by?),
      }));
  CopyWith$Input$Encounter_aggregate_order_by<TRes> get Encounters_aggregate {
    final local$Encounters_aggregate = _instance.Encounters_aggregate;
    return local$Encounters_aggregate == null
        ? CopyWith$Input$Encounter_aggregate_order_by.stub(_then(_instance))
        : CopyWith$Input$Encounter_aggregate_order_by(
            local$Encounters_aggregate, (e) => call(Encounters_aggregate: e));
  }

  CopyWith$Input$MapArea_order_by<TRes> get MapArea {
    final local$MapArea = _instance.MapArea;
    return local$MapArea == null
        ? CopyWith$Input$MapArea_order_by.stub(_then(_instance))
        : CopyWith$Input$MapArea_order_by(
            local$MapArea, (e) => call(MapArea: e));
  }

  CopyWith$Input$SoulWinningSession_order_by<TRes> get SoulWinningSession {
    final local$SoulWinningSession = _instance.SoulWinningSession;
    return local$SoulWinningSession == null
        ? CopyWith$Input$SoulWinningSession_order_by.stub(_then(_instance))
        : CopyWith$Input$SoulWinningSession_order_by(
            local$SoulWinningSession, (e) => call(SoulWinningSession: e));
  }

  CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_order_by<TRes>
      get $_SoulWinningSessionGroup_members_aggregate {
    final local$$_SoulWinningSessionGroup_members_aggregate =
        _instance.$_SoulWinningSessionGroup_members_aggregate;
    return local$$_SoulWinningSessionGroup_members_aggregate == null
        ? CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_order_by
            .stub(_then(_instance))
        : CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_order_by(
            local$$_SoulWinningSessionGroup_members_aggregate,
            (e) => call($_SoulWinningSessionGroup_members_aggregate: e));
  }
}

class _CopyWithStubImpl$Input$SoulWinningSessionGroup_order_by<TRes>
    implements CopyWith$Input$SoulWinningSessionGroup_order_by<TRes> {
  _CopyWithStubImpl$Input$SoulWinningSessionGroup_order_by(this._res);

  TRes _res;

  call({
    Input$Encounter_aggregate_order_by? Encounters_aggregate,
    Input$MapArea_order_by? MapArea,
    Input$SoulWinningSession_order_by? SoulWinningSession,
    Input$_SoulWinningSessionGroup_members_aggregate_order_by?
        $_SoulWinningSessionGroup_members_aggregate,
    Enum$order_by? assignedMapArea,
    Enum$order_by? id,
    Enum$order_by? session,
  }) =>
      _res;
  CopyWith$Input$Encounter_aggregate_order_by<TRes> get Encounters_aggregate =>
      CopyWith$Input$Encounter_aggregate_order_by.stub(_res);
  CopyWith$Input$MapArea_order_by<TRes> get MapArea =>
      CopyWith$Input$MapArea_order_by.stub(_res);
  CopyWith$Input$SoulWinningSession_order_by<TRes> get SoulWinningSession =>
      CopyWith$Input$SoulWinningSession_order_by.stub(_res);
  CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_order_by<TRes>
      get $_SoulWinningSessionGroup_members_aggregate =>
          CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_order_by
              .stub(_res);
}

class Input$User_order_by {
  factory Input$User_order_by({
    Input$_Organization_adminsOfOrganization_aggregate_order_by?
        $_Organization_adminsOfOrganizations_aggregate,
    Input$_Organization_membersInOrganization_aggregate_order_by?
        $_Organization_membersInOrganizations_aggregate,
    Input$_SoulWinningSessionGroup_members_aggregate_order_by?
        $_SoulWinningSessionGroup_members_aggregate,
    Enum$order_by? adminUiPassword,
    Enum$order_by? createdAt,
    Enum$order_by? email,
    Enum$order_by? id,
    Enum$order_by? name,
  }) =>
      Input$User_order_by._({
        if ($_Organization_adminsOfOrganizations_aggregate != null)
          r'_Organization_adminsOfOrganizations_aggregate':
              $_Organization_adminsOfOrganizations_aggregate,
        if ($_Organization_membersInOrganizations_aggregate != null)
          r'_Organization_membersInOrganizations_aggregate':
              $_Organization_membersInOrganizations_aggregate,
        if ($_SoulWinningSessionGroup_members_aggregate != null)
          r'_SoulWinningSessionGroup_members_aggregate':
              $_SoulWinningSessionGroup_members_aggregate,
        if (adminUiPassword != null) r'adminUiPassword': adminUiPassword,
        if (createdAt != null) r'createdAt': createdAt,
        if (email != null) r'email': email,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
      });

  Input$User_order_by._(this._$data);

  factory Input$User_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_Organization_adminsOfOrganizations_aggregate')) {
      final l$$_Organization_adminsOfOrganizations_aggregate =
          data['_Organization_adminsOfOrganizations_aggregate'];
      result$data['_Organization_adminsOfOrganizations_aggregate'] =
          l$$_Organization_adminsOfOrganizations_aggregate == null
              ? null
              : Input$_Organization_adminsOfOrganization_aggregate_order_by
                  .fromJson((l$$_Organization_adminsOfOrganizations_aggregate
                      as Map<String, dynamic>));
    }
    if (data.containsKey('_Organization_membersInOrganizations_aggregate')) {
      final l$$_Organization_membersInOrganizations_aggregate =
          data['_Organization_membersInOrganizations_aggregate'];
      result$data['_Organization_membersInOrganizations_aggregate'] =
          l$$_Organization_membersInOrganizations_aggregate == null
              ? null
              : Input$_Organization_membersInOrganization_aggregate_order_by
                  .fromJson((l$$_Organization_membersInOrganizations_aggregate
                      as Map<String, dynamic>));
    }
    if (data.containsKey('_SoulWinningSessionGroup_members_aggregate')) {
      final l$$_SoulWinningSessionGroup_members_aggregate =
          data['_SoulWinningSessionGroup_members_aggregate'];
      result$data['_SoulWinningSessionGroup_members_aggregate'] =
          l$$_SoulWinningSessionGroup_members_aggregate == null
              ? null
              : Input$_SoulWinningSessionGroup_members_aggregate_order_by
                  .fromJson((l$$_SoulWinningSessionGroup_members_aggregate
                      as Map<String, dynamic>));
    }
    if (data.containsKey('adminUiPassword')) {
      final l$adminUiPassword = data['adminUiPassword'];
      result$data['adminUiPassword'] = l$adminUiPassword == null
          ? null
          : fromJson$Enum$order_by((l$adminUiPassword as String));
    }
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] = l$createdAt == null
          ? null
          : fromJson$Enum$order_by((l$createdAt as String));
    }
    if (data.containsKey('email')) {
      final l$email = data['email'];
      result$data['email'] =
          l$email == null ? null : fromJson$Enum$order_by((l$email as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] =
          l$name == null ? null : fromJson$Enum$order_by((l$name as String));
    }
    return Input$User_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$_Organization_adminsOfOrganization_aggregate_order_by?
      get $_Organization_adminsOfOrganizations_aggregate =>
          (_$data['_Organization_adminsOfOrganizations_aggregate']
              as Input$_Organization_adminsOfOrganization_aggregate_order_by?);
  Input$_Organization_membersInOrganization_aggregate_order_by?
      get $_Organization_membersInOrganizations_aggregate =>
          (_$data['_Organization_membersInOrganizations_aggregate']
              as Input$_Organization_membersInOrganization_aggregate_order_by?);
  Input$_SoulWinningSessionGroup_members_aggregate_order_by?
      get $_SoulWinningSessionGroup_members_aggregate =>
          (_$data['_SoulWinningSessionGroup_members_aggregate']
              as Input$_SoulWinningSessionGroup_members_aggregate_order_by?);
  Enum$order_by? get adminUiPassword =>
      (_$data['adminUiPassword'] as Enum$order_by?);
  Enum$order_by? get createdAt => (_$data['createdAt'] as Enum$order_by?);
  Enum$order_by? get email => (_$data['email'] as Enum$order_by?);
  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);
  Enum$order_by? get name => (_$data['name'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_Organization_adminsOfOrganizations_aggregate')) {
      final l$$_Organization_adminsOfOrganizations_aggregate =
          $_Organization_adminsOfOrganizations_aggregate;
      result$data['_Organization_adminsOfOrganizations_aggregate'] =
          l$$_Organization_adminsOfOrganizations_aggregate?.toJson();
    }
    if (_$data.containsKey('_Organization_membersInOrganizations_aggregate')) {
      final l$$_Organization_membersInOrganizations_aggregate =
          $_Organization_membersInOrganizations_aggregate;
      result$data['_Organization_membersInOrganizations_aggregate'] =
          l$$_Organization_membersInOrganizations_aggregate?.toJson();
    }
    if (_$data.containsKey('_SoulWinningSessionGroup_members_aggregate')) {
      final l$$_SoulWinningSessionGroup_members_aggregate =
          $_SoulWinningSessionGroup_members_aggregate;
      result$data['_SoulWinningSessionGroup_members_aggregate'] =
          l$$_SoulWinningSessionGroup_members_aggregate?.toJson();
    }
    if (_$data.containsKey('adminUiPassword')) {
      final l$adminUiPassword = adminUiPassword;
      result$data['adminUiPassword'] = l$adminUiPassword == null
          ? null
          : toJson$Enum$order_by(l$adminUiPassword);
    }
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] =
          l$createdAt == null ? null : toJson$Enum$order_by(l$createdAt);
    }
    if (_$data.containsKey('email')) {
      final l$email = email;
      result$data['email'] =
          l$email == null ? null : toJson$Enum$order_by(l$email);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] =
          l$name == null ? null : toJson$Enum$order_by(l$name);
    }
    return result$data;
  }

  CopyWith$Input$User_order_by<Input$User_order_by> get copyWith =>
      CopyWith$Input$User_order_by(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$User_order_by) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_Organization_adminsOfOrganizations_aggregate =
        $_Organization_adminsOfOrganizations_aggregate;
    final lOther$$_Organization_adminsOfOrganizations_aggregate =
        other.$_Organization_adminsOfOrganizations_aggregate;
    if (_$data.containsKey('_Organization_adminsOfOrganizations_aggregate') !=
        other._$data
            .containsKey('_Organization_adminsOfOrganizations_aggregate')) {
      return false;
    }
    if (l$$_Organization_adminsOfOrganizations_aggregate !=
        lOther$$_Organization_adminsOfOrganizations_aggregate) {
      return false;
    }
    final l$$_Organization_membersInOrganizations_aggregate =
        $_Organization_membersInOrganizations_aggregate;
    final lOther$$_Organization_membersInOrganizations_aggregate =
        other.$_Organization_membersInOrganizations_aggregate;
    if (_$data.containsKey('_Organization_membersInOrganizations_aggregate') !=
        other._$data
            .containsKey('_Organization_membersInOrganizations_aggregate')) {
      return false;
    }
    if (l$$_Organization_membersInOrganizations_aggregate !=
        lOther$$_Organization_membersInOrganizations_aggregate) {
      return false;
    }
    final l$$_SoulWinningSessionGroup_members_aggregate =
        $_SoulWinningSessionGroup_members_aggregate;
    final lOther$$_SoulWinningSessionGroup_members_aggregate =
        other.$_SoulWinningSessionGroup_members_aggregate;
    if (_$data.containsKey('_SoulWinningSessionGroup_members_aggregate') !=
        other._$data
            .containsKey('_SoulWinningSessionGroup_members_aggregate')) {
      return false;
    }
    if (l$$_SoulWinningSessionGroup_members_aggregate !=
        lOther$$_SoulWinningSessionGroup_members_aggregate) {
      return false;
    }
    final l$adminUiPassword = adminUiPassword;
    final lOther$adminUiPassword = other.adminUiPassword;
    if (_$data.containsKey('adminUiPassword') !=
        other._$data.containsKey('adminUiPassword')) {
      return false;
    }
    if (l$adminUiPassword != lOther$adminUiPassword) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$email = email;
    final lOther$email = other.email;
    if (_$data.containsKey('email') != other._$data.containsKey('email')) {
      return false;
    }
    if (l$email != lOther$email) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_Organization_adminsOfOrganizations_aggregate =
        $_Organization_adminsOfOrganizations_aggregate;
    final l$$_Organization_membersInOrganizations_aggregate =
        $_Organization_membersInOrganizations_aggregate;
    final l$$_SoulWinningSessionGroup_members_aggregate =
        $_SoulWinningSessionGroup_members_aggregate;
    final l$adminUiPassword = adminUiPassword;
    final l$createdAt = createdAt;
    final l$email = email;
    final l$id = id;
    final l$name = name;
    return Object.hashAll([
      _$data.containsKey('_Organization_adminsOfOrganizations_aggregate')
          ? l$$_Organization_adminsOfOrganizations_aggregate
          : const {},
      _$data.containsKey('_Organization_membersInOrganizations_aggregate')
          ? l$$_Organization_membersInOrganizations_aggregate
          : const {},
      _$data.containsKey('_SoulWinningSessionGroup_members_aggregate')
          ? l$$_SoulWinningSessionGroup_members_aggregate
          : const {},
      _$data.containsKey('adminUiPassword') ? l$adminUiPassword : const {},
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('email') ? l$email : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
    ]);
  }
}

abstract class CopyWith$Input$User_order_by<TRes> {
  factory CopyWith$Input$User_order_by(
    Input$User_order_by instance,
    TRes Function(Input$User_order_by) then,
  ) = _CopyWithImpl$Input$User_order_by;

  factory CopyWith$Input$User_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$User_order_by;

  TRes call({
    Input$_Organization_adminsOfOrganization_aggregate_order_by?
        $_Organization_adminsOfOrganizations_aggregate,
    Input$_Organization_membersInOrganization_aggregate_order_by?
        $_Organization_membersInOrganizations_aggregate,
    Input$_SoulWinningSessionGroup_members_aggregate_order_by?
        $_SoulWinningSessionGroup_members_aggregate,
    Enum$order_by? adminUiPassword,
    Enum$order_by? createdAt,
    Enum$order_by? email,
    Enum$order_by? id,
    Enum$order_by? name,
  });
  CopyWith$Input$_Organization_adminsOfOrganization_aggregate_order_by<TRes>
      get $_Organization_adminsOfOrganizations_aggregate;
  CopyWith$Input$_Organization_membersInOrganization_aggregate_order_by<TRes>
      get $_Organization_membersInOrganizations_aggregate;
  CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_order_by<TRes>
      get $_SoulWinningSessionGroup_members_aggregate;
}

class _CopyWithImpl$Input$User_order_by<TRes>
    implements CopyWith$Input$User_order_by<TRes> {
  _CopyWithImpl$Input$User_order_by(
    this._instance,
    this._then,
  );

  final Input$User_order_by _instance;

  final TRes Function(Input$User_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_Organization_adminsOfOrganizations_aggregate = _undefined,
    Object? $_Organization_membersInOrganizations_aggregate = _undefined,
    Object? $_SoulWinningSessionGroup_members_aggregate = _undefined,
    Object? adminUiPassword = _undefined,
    Object? createdAt = _undefined,
    Object? email = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
  }) =>
      _then(Input$User_order_by._({
        ..._instance._$data,
        if ($_Organization_adminsOfOrganizations_aggregate != _undefined)
          '_Organization_adminsOfOrganizations_aggregate':
              ($_Organization_adminsOfOrganizations_aggregate
                  as Input$_Organization_adminsOfOrganization_aggregate_order_by?),
        if ($_Organization_membersInOrganizations_aggregate != _undefined)
          '_Organization_membersInOrganizations_aggregate':
              ($_Organization_membersInOrganizations_aggregate
                  as Input$_Organization_membersInOrganization_aggregate_order_by?),
        if ($_SoulWinningSessionGroup_members_aggregate != _undefined)
          '_SoulWinningSessionGroup_members_aggregate':
              ($_SoulWinningSessionGroup_members_aggregate
                  as Input$_SoulWinningSessionGroup_members_aggregate_order_by?),
        if (adminUiPassword != _undefined)
          'adminUiPassword': (adminUiPassword as Enum$order_by?),
        if (createdAt != _undefined) 'createdAt': (createdAt as Enum$order_by?),
        if (email != _undefined) 'email': (email as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (name != _undefined) 'name': (name as Enum$order_by?),
      }));
  CopyWith$Input$_Organization_adminsOfOrganization_aggregate_order_by<TRes>
      get $_Organization_adminsOfOrganizations_aggregate {
    final local$$_Organization_adminsOfOrganizations_aggregate =
        _instance.$_Organization_adminsOfOrganizations_aggregate;
    return local$$_Organization_adminsOfOrganizations_aggregate == null
        ? CopyWith$Input$_Organization_adminsOfOrganization_aggregate_order_by
            .stub(_then(_instance))
        : CopyWith$Input$_Organization_adminsOfOrganization_aggregate_order_by(
            local$$_Organization_adminsOfOrganizations_aggregate,
            (e) => call($_Organization_adminsOfOrganizations_aggregate: e));
  }

  CopyWith$Input$_Organization_membersInOrganization_aggregate_order_by<TRes>
      get $_Organization_membersInOrganizations_aggregate {
    final local$$_Organization_membersInOrganizations_aggregate =
        _instance.$_Organization_membersInOrganizations_aggregate;
    return local$$_Organization_membersInOrganizations_aggregate == null
        ? CopyWith$Input$_Organization_membersInOrganization_aggregate_order_by
            .stub(_then(_instance))
        : CopyWith$Input$_Organization_membersInOrganization_aggregate_order_by(
            local$$_Organization_membersInOrganizations_aggregate,
            (e) => call($_Organization_membersInOrganizations_aggregate: e));
  }

  CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_order_by<TRes>
      get $_SoulWinningSessionGroup_members_aggregate {
    final local$$_SoulWinningSessionGroup_members_aggregate =
        _instance.$_SoulWinningSessionGroup_members_aggregate;
    return local$$_SoulWinningSessionGroup_members_aggregate == null
        ? CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_order_by
            .stub(_then(_instance))
        : CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_order_by(
            local$$_SoulWinningSessionGroup_members_aggregate,
            (e) => call($_SoulWinningSessionGroup_members_aggregate: e));
  }
}

class _CopyWithStubImpl$Input$User_order_by<TRes>
    implements CopyWith$Input$User_order_by<TRes> {
  _CopyWithStubImpl$Input$User_order_by(this._res);

  TRes _res;

  call({
    Input$_Organization_adminsOfOrganization_aggregate_order_by?
        $_Organization_adminsOfOrganizations_aggregate,
    Input$_Organization_membersInOrganization_aggregate_order_by?
        $_Organization_membersInOrganizations_aggregate,
    Input$_SoulWinningSessionGroup_members_aggregate_order_by?
        $_SoulWinningSessionGroup_members_aggregate,
    Enum$order_by? adminUiPassword,
    Enum$order_by? createdAt,
    Enum$order_by? email,
    Enum$order_by? id,
    Enum$order_by? name,
  }) =>
      _res;
  CopyWith$Input$_Organization_adminsOfOrganization_aggregate_order_by<TRes>
      get $_Organization_adminsOfOrganizations_aggregate =>
          CopyWith$Input$_Organization_adminsOfOrganization_aggregate_order_by
              .stub(_res);
  CopyWith$Input$_Organization_membersInOrganization_aggregate_order_by<TRes>
      get $_Organization_membersInOrganizations_aggregate =>
          CopyWith$Input$_Organization_membersInOrganization_aggregate_order_by
              .stub(_res);
  CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_order_by<TRes>
      get $_SoulWinningSessionGroup_members_aggregate =>
          CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_order_by
              .stub(_res);
}

class Input$_Organization_adminsOfOrganization_order_by {
  factory Input$_Organization_adminsOfOrganization_order_by({
    Enum$order_by? A,
    Enum$order_by? B,
    Input$Organization_order_by? Organization,
    Input$User_order_by? User,
  }) =>
      Input$_Organization_adminsOfOrganization_order_by._({
        if (A != null) r'A': A,
        if (B != null) r'B': B,
        if (Organization != null) r'Organization': Organization,
        if (User != null) r'User': User,
      });

  Input$_Organization_adminsOfOrganization_order_by._(this._$data);

  factory Input$_Organization_adminsOfOrganization_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('A')) {
      final l$A = data['A'];
      result$data['A'] =
          l$A == null ? null : fromJson$Enum$order_by((l$A as String));
    }
    if (data.containsKey('B')) {
      final l$B = data['B'];
      result$data['B'] =
          l$B == null ? null : fromJson$Enum$order_by((l$B as String));
    }
    if (data.containsKey('Organization')) {
      final l$Organization = data['Organization'];
      result$data['Organization'] = l$Organization == null
          ? null
          : Input$Organization_order_by.fromJson(
              (l$Organization as Map<String, dynamic>));
    }
    if (data.containsKey('User')) {
      final l$User = data['User'];
      result$data['User'] = l$User == null
          ? null
          : Input$User_order_by.fromJson((l$User as Map<String, dynamic>));
    }
    return Input$_Organization_adminsOfOrganization_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get A => (_$data['A'] as Enum$order_by?);
  Enum$order_by? get B => (_$data['B'] as Enum$order_by?);
  Input$Organization_order_by? get Organization =>
      (_$data['Organization'] as Input$Organization_order_by?);
  Input$User_order_by? get User => (_$data['User'] as Input$User_order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('A')) {
      final l$A = A;
      result$data['A'] = l$A == null ? null : toJson$Enum$order_by(l$A);
    }
    if (_$data.containsKey('B')) {
      final l$B = B;
      result$data['B'] = l$B == null ? null : toJson$Enum$order_by(l$B);
    }
    if (_$data.containsKey('Organization')) {
      final l$Organization = Organization;
      result$data['Organization'] = l$Organization?.toJson();
    }
    if (_$data.containsKey('User')) {
      final l$User = User;
      result$data['User'] = l$User?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$_Organization_adminsOfOrganization_order_by<
          Input$_Organization_adminsOfOrganization_order_by>
      get copyWith =>
          CopyWith$Input$_Organization_adminsOfOrganization_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$_Organization_adminsOfOrganization_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$A = A;
    final lOther$A = other.A;
    if (_$data.containsKey('A') != other._$data.containsKey('A')) {
      return false;
    }
    if (l$A != lOther$A) {
      return false;
    }
    final l$B = B;
    final lOther$B = other.B;
    if (_$data.containsKey('B') != other._$data.containsKey('B')) {
      return false;
    }
    if (l$B != lOther$B) {
      return false;
    }
    final l$Organization = Organization;
    final lOther$Organization = other.Organization;
    if (_$data.containsKey('Organization') !=
        other._$data.containsKey('Organization')) {
      return false;
    }
    if (l$Organization != lOther$Organization) {
      return false;
    }
    final l$User = User;
    final lOther$User = other.User;
    if (_$data.containsKey('User') != other._$data.containsKey('User')) {
      return false;
    }
    if (l$User != lOther$User) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$A = A;
    final l$B = B;
    final l$Organization = Organization;
    final l$User = User;
    return Object.hashAll([
      _$data.containsKey('A') ? l$A : const {},
      _$data.containsKey('B') ? l$B : const {},
      _$data.containsKey('Organization') ? l$Organization : const {},
      _$data.containsKey('User') ? l$User : const {},
    ]);
  }
}

abstract class CopyWith$Input$_Organization_adminsOfOrganization_order_by<
    TRes> {
  factory CopyWith$Input$_Organization_adminsOfOrganization_order_by(
    Input$_Organization_adminsOfOrganization_order_by instance,
    TRes Function(Input$_Organization_adminsOfOrganization_order_by) then,
  ) = _CopyWithImpl$Input$_Organization_adminsOfOrganization_order_by;

  factory CopyWith$Input$_Organization_adminsOfOrganization_order_by.stub(
          TRes res) =
      _CopyWithStubImpl$Input$_Organization_adminsOfOrganization_order_by;

  TRes call({
    Enum$order_by? A,
    Enum$order_by? B,
    Input$Organization_order_by? Organization,
    Input$User_order_by? User,
  });
  CopyWith$Input$Organization_order_by<TRes> get Organization;
  CopyWith$Input$User_order_by<TRes> get User;
}

class _CopyWithImpl$Input$_Organization_adminsOfOrganization_order_by<TRes>
    implements
        CopyWith$Input$_Organization_adminsOfOrganization_order_by<TRes> {
  _CopyWithImpl$Input$_Organization_adminsOfOrganization_order_by(
    this._instance,
    this._then,
  );

  final Input$_Organization_adminsOfOrganization_order_by _instance;

  final TRes Function(Input$_Organization_adminsOfOrganization_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? A = _undefined,
    Object? B = _undefined,
    Object? Organization = _undefined,
    Object? User = _undefined,
  }) =>
      _then(Input$_Organization_adminsOfOrganization_order_by._({
        ..._instance._$data,
        if (A != _undefined) 'A': (A as Enum$order_by?),
        if (B != _undefined) 'B': (B as Enum$order_by?),
        if (Organization != _undefined)
          'Organization': (Organization as Input$Organization_order_by?),
        if (User != _undefined) 'User': (User as Input$User_order_by?),
      }));
  CopyWith$Input$Organization_order_by<TRes> get Organization {
    final local$Organization = _instance.Organization;
    return local$Organization == null
        ? CopyWith$Input$Organization_order_by.stub(_then(_instance))
        : CopyWith$Input$Organization_order_by(
            local$Organization, (e) => call(Organization: e));
  }

  CopyWith$Input$User_order_by<TRes> get User {
    final local$User = _instance.User;
    return local$User == null
        ? CopyWith$Input$User_order_by.stub(_then(_instance))
        : CopyWith$Input$User_order_by(local$User, (e) => call(User: e));
  }
}

class _CopyWithStubImpl$Input$_Organization_adminsOfOrganization_order_by<TRes>
    implements
        CopyWith$Input$_Organization_adminsOfOrganization_order_by<TRes> {
  _CopyWithStubImpl$Input$_Organization_adminsOfOrganization_order_by(
      this._res);

  TRes _res;

  call({
    Enum$order_by? A,
    Enum$order_by? B,
    Input$Organization_order_by? Organization,
    Input$User_order_by? User,
  }) =>
      _res;
  CopyWith$Input$Organization_order_by<TRes> get Organization =>
      CopyWith$Input$Organization_order_by.stub(_res);
  CopyWith$Input$User_order_by<TRes> get User =>
      CopyWith$Input$User_order_by.stub(_res);
}

class Input$_Organization_membersInOrganization_order_by {
  factory Input$_Organization_membersInOrganization_order_by({
    Enum$order_by? A,
    Enum$order_by? B,
    Input$Organization_order_by? Organization,
    Input$User_order_by? User,
  }) =>
      Input$_Organization_membersInOrganization_order_by._({
        if (A != null) r'A': A,
        if (B != null) r'B': B,
        if (Organization != null) r'Organization': Organization,
        if (User != null) r'User': User,
      });

  Input$_Organization_membersInOrganization_order_by._(this._$data);

  factory Input$_Organization_membersInOrganization_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('A')) {
      final l$A = data['A'];
      result$data['A'] =
          l$A == null ? null : fromJson$Enum$order_by((l$A as String));
    }
    if (data.containsKey('B')) {
      final l$B = data['B'];
      result$data['B'] =
          l$B == null ? null : fromJson$Enum$order_by((l$B as String));
    }
    if (data.containsKey('Organization')) {
      final l$Organization = data['Organization'];
      result$data['Organization'] = l$Organization == null
          ? null
          : Input$Organization_order_by.fromJson(
              (l$Organization as Map<String, dynamic>));
    }
    if (data.containsKey('User')) {
      final l$User = data['User'];
      result$data['User'] = l$User == null
          ? null
          : Input$User_order_by.fromJson((l$User as Map<String, dynamic>));
    }
    return Input$_Organization_membersInOrganization_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get A => (_$data['A'] as Enum$order_by?);
  Enum$order_by? get B => (_$data['B'] as Enum$order_by?);
  Input$Organization_order_by? get Organization =>
      (_$data['Organization'] as Input$Organization_order_by?);
  Input$User_order_by? get User => (_$data['User'] as Input$User_order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('A')) {
      final l$A = A;
      result$data['A'] = l$A == null ? null : toJson$Enum$order_by(l$A);
    }
    if (_$data.containsKey('B')) {
      final l$B = B;
      result$data['B'] = l$B == null ? null : toJson$Enum$order_by(l$B);
    }
    if (_$data.containsKey('Organization')) {
      final l$Organization = Organization;
      result$data['Organization'] = l$Organization?.toJson();
    }
    if (_$data.containsKey('User')) {
      final l$User = User;
      result$data['User'] = l$User?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$_Organization_membersInOrganization_order_by<
          Input$_Organization_membersInOrganization_order_by>
      get copyWith =>
          CopyWith$Input$_Organization_membersInOrganization_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$_Organization_membersInOrganization_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$A = A;
    final lOther$A = other.A;
    if (_$data.containsKey('A') != other._$data.containsKey('A')) {
      return false;
    }
    if (l$A != lOther$A) {
      return false;
    }
    final l$B = B;
    final lOther$B = other.B;
    if (_$data.containsKey('B') != other._$data.containsKey('B')) {
      return false;
    }
    if (l$B != lOther$B) {
      return false;
    }
    final l$Organization = Organization;
    final lOther$Organization = other.Organization;
    if (_$data.containsKey('Organization') !=
        other._$data.containsKey('Organization')) {
      return false;
    }
    if (l$Organization != lOther$Organization) {
      return false;
    }
    final l$User = User;
    final lOther$User = other.User;
    if (_$data.containsKey('User') != other._$data.containsKey('User')) {
      return false;
    }
    if (l$User != lOther$User) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$A = A;
    final l$B = B;
    final l$Organization = Organization;
    final l$User = User;
    return Object.hashAll([
      _$data.containsKey('A') ? l$A : const {},
      _$data.containsKey('B') ? l$B : const {},
      _$data.containsKey('Organization') ? l$Organization : const {},
      _$data.containsKey('User') ? l$User : const {},
    ]);
  }
}

abstract class CopyWith$Input$_Organization_membersInOrganization_order_by<
    TRes> {
  factory CopyWith$Input$_Organization_membersInOrganization_order_by(
    Input$_Organization_membersInOrganization_order_by instance,
    TRes Function(Input$_Organization_membersInOrganization_order_by) then,
  ) = _CopyWithImpl$Input$_Organization_membersInOrganization_order_by;

  factory CopyWith$Input$_Organization_membersInOrganization_order_by.stub(
          TRes res) =
      _CopyWithStubImpl$Input$_Organization_membersInOrganization_order_by;

  TRes call({
    Enum$order_by? A,
    Enum$order_by? B,
    Input$Organization_order_by? Organization,
    Input$User_order_by? User,
  });
  CopyWith$Input$Organization_order_by<TRes> get Organization;
  CopyWith$Input$User_order_by<TRes> get User;
}

class _CopyWithImpl$Input$_Organization_membersInOrganization_order_by<TRes>
    implements
        CopyWith$Input$_Organization_membersInOrganization_order_by<TRes> {
  _CopyWithImpl$Input$_Organization_membersInOrganization_order_by(
    this._instance,
    this._then,
  );

  final Input$_Organization_membersInOrganization_order_by _instance;

  final TRes Function(Input$_Organization_membersInOrganization_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? A = _undefined,
    Object? B = _undefined,
    Object? Organization = _undefined,
    Object? User = _undefined,
  }) =>
      _then(Input$_Organization_membersInOrganization_order_by._({
        ..._instance._$data,
        if (A != _undefined) 'A': (A as Enum$order_by?),
        if (B != _undefined) 'B': (B as Enum$order_by?),
        if (Organization != _undefined)
          'Organization': (Organization as Input$Organization_order_by?),
        if (User != _undefined) 'User': (User as Input$User_order_by?),
      }));
  CopyWith$Input$Organization_order_by<TRes> get Organization {
    final local$Organization = _instance.Organization;
    return local$Organization == null
        ? CopyWith$Input$Organization_order_by.stub(_then(_instance))
        : CopyWith$Input$Organization_order_by(
            local$Organization, (e) => call(Organization: e));
  }

  CopyWith$Input$User_order_by<TRes> get User {
    final local$User = _instance.User;
    return local$User == null
        ? CopyWith$Input$User_order_by.stub(_then(_instance))
        : CopyWith$Input$User_order_by(local$User, (e) => call(User: e));
  }
}

class _CopyWithStubImpl$Input$_Organization_membersInOrganization_order_by<TRes>
    implements
        CopyWith$Input$_Organization_membersInOrganization_order_by<TRes> {
  _CopyWithStubImpl$Input$_Organization_membersInOrganization_order_by(
      this._res);

  TRes _res;

  call({
    Enum$order_by? A,
    Enum$order_by? B,
    Input$Organization_order_by? Organization,
    Input$User_order_by? User,
  }) =>
      _res;
  CopyWith$Input$Organization_order_by<TRes> get Organization =>
      CopyWith$Input$Organization_order_by.stub(_res);
  CopyWith$Input$User_order_by<TRes> get User =>
      CopyWith$Input$User_order_by.stub(_res);
}

class Input$_SoulWinningSessionGroup_members_order_by {
  factory Input$_SoulWinningSessionGroup_members_order_by({
    Enum$order_by? A,
    Enum$order_by? B,
    Input$SoulWinningSessionGroup_order_by? SoulWinningSessionGroup,
    Input$User_order_by? User,
  }) =>
      Input$_SoulWinningSessionGroup_members_order_by._({
        if (A != null) r'A': A,
        if (B != null) r'B': B,
        if (SoulWinningSessionGroup != null)
          r'SoulWinningSessionGroup': SoulWinningSessionGroup,
        if (User != null) r'User': User,
      });

  Input$_SoulWinningSessionGroup_members_order_by._(this._$data);

  factory Input$_SoulWinningSessionGroup_members_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('A')) {
      final l$A = data['A'];
      result$data['A'] =
          l$A == null ? null : fromJson$Enum$order_by((l$A as String));
    }
    if (data.containsKey('B')) {
      final l$B = data['B'];
      result$data['B'] =
          l$B == null ? null : fromJson$Enum$order_by((l$B as String));
    }
    if (data.containsKey('SoulWinningSessionGroup')) {
      final l$SoulWinningSessionGroup = data['SoulWinningSessionGroup'];
      result$data['SoulWinningSessionGroup'] = l$SoulWinningSessionGroup == null
          ? null
          : Input$SoulWinningSessionGroup_order_by.fromJson(
              (l$SoulWinningSessionGroup as Map<String, dynamic>));
    }
    if (data.containsKey('User')) {
      final l$User = data['User'];
      result$data['User'] = l$User == null
          ? null
          : Input$User_order_by.fromJson((l$User as Map<String, dynamic>));
    }
    return Input$_SoulWinningSessionGroup_members_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get A => (_$data['A'] as Enum$order_by?);
  Enum$order_by? get B => (_$data['B'] as Enum$order_by?);
  Input$SoulWinningSessionGroup_order_by? get SoulWinningSessionGroup =>
      (_$data['SoulWinningSessionGroup']
          as Input$SoulWinningSessionGroup_order_by?);
  Input$User_order_by? get User => (_$data['User'] as Input$User_order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('A')) {
      final l$A = A;
      result$data['A'] = l$A == null ? null : toJson$Enum$order_by(l$A);
    }
    if (_$data.containsKey('B')) {
      final l$B = B;
      result$data['B'] = l$B == null ? null : toJson$Enum$order_by(l$B);
    }
    if (_$data.containsKey('SoulWinningSessionGroup')) {
      final l$SoulWinningSessionGroup = SoulWinningSessionGroup;
      result$data['SoulWinningSessionGroup'] =
          l$SoulWinningSessionGroup?.toJson();
    }
    if (_$data.containsKey('User')) {
      final l$User = User;
      result$data['User'] = l$User?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$_SoulWinningSessionGroup_members_order_by<
          Input$_SoulWinningSessionGroup_members_order_by>
      get copyWith => CopyWith$Input$_SoulWinningSessionGroup_members_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$_SoulWinningSessionGroup_members_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$A = A;
    final lOther$A = other.A;
    if (_$data.containsKey('A') != other._$data.containsKey('A')) {
      return false;
    }
    if (l$A != lOther$A) {
      return false;
    }
    final l$B = B;
    final lOther$B = other.B;
    if (_$data.containsKey('B') != other._$data.containsKey('B')) {
      return false;
    }
    if (l$B != lOther$B) {
      return false;
    }
    final l$SoulWinningSessionGroup = SoulWinningSessionGroup;
    final lOther$SoulWinningSessionGroup = other.SoulWinningSessionGroup;
    if (_$data.containsKey('SoulWinningSessionGroup') !=
        other._$data.containsKey('SoulWinningSessionGroup')) {
      return false;
    }
    if (l$SoulWinningSessionGroup != lOther$SoulWinningSessionGroup) {
      return false;
    }
    final l$User = User;
    final lOther$User = other.User;
    if (_$data.containsKey('User') != other._$data.containsKey('User')) {
      return false;
    }
    if (l$User != lOther$User) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$A = A;
    final l$B = B;
    final l$SoulWinningSessionGroup = SoulWinningSessionGroup;
    final l$User = User;
    return Object.hashAll([
      _$data.containsKey('A') ? l$A : const {},
      _$data.containsKey('B') ? l$B : const {},
      _$data.containsKey('SoulWinningSessionGroup')
          ? l$SoulWinningSessionGroup
          : const {},
      _$data.containsKey('User') ? l$User : const {},
    ]);
  }
}

abstract class CopyWith$Input$_SoulWinningSessionGroup_members_order_by<TRes> {
  factory CopyWith$Input$_SoulWinningSessionGroup_members_order_by(
    Input$_SoulWinningSessionGroup_members_order_by instance,
    TRes Function(Input$_SoulWinningSessionGroup_members_order_by) then,
  ) = _CopyWithImpl$Input$_SoulWinningSessionGroup_members_order_by;

  factory CopyWith$Input$_SoulWinningSessionGroup_members_order_by.stub(
          TRes res) =
      _CopyWithStubImpl$Input$_SoulWinningSessionGroup_members_order_by;

  TRes call({
    Enum$order_by? A,
    Enum$order_by? B,
    Input$SoulWinningSessionGroup_order_by? SoulWinningSessionGroup,
    Input$User_order_by? User,
  });
  CopyWith$Input$SoulWinningSessionGroup_order_by<TRes>
      get SoulWinningSessionGroup;
  CopyWith$Input$User_order_by<TRes> get User;
}

class _CopyWithImpl$Input$_SoulWinningSessionGroup_members_order_by<TRes>
    implements CopyWith$Input$_SoulWinningSessionGroup_members_order_by<TRes> {
  _CopyWithImpl$Input$_SoulWinningSessionGroup_members_order_by(
    this._instance,
    this._then,
  );

  final Input$_SoulWinningSessionGroup_members_order_by _instance;

  final TRes Function(Input$_SoulWinningSessionGroup_members_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? A = _undefined,
    Object? B = _undefined,
    Object? SoulWinningSessionGroup = _undefined,
    Object? User = _undefined,
  }) =>
      _then(Input$_SoulWinningSessionGroup_members_order_by._({
        ..._instance._$data,
        if (A != _undefined) 'A': (A as Enum$order_by?),
        if (B != _undefined) 'B': (B as Enum$order_by?),
        if (SoulWinningSessionGroup != _undefined)
          'SoulWinningSessionGroup': (SoulWinningSessionGroup
              as Input$SoulWinningSessionGroup_order_by?),
        if (User != _undefined) 'User': (User as Input$User_order_by?),
      }));
  CopyWith$Input$SoulWinningSessionGroup_order_by<TRes>
      get SoulWinningSessionGroup {
    final local$SoulWinningSessionGroup = _instance.SoulWinningSessionGroup;
    return local$SoulWinningSessionGroup == null
        ? CopyWith$Input$SoulWinningSessionGroup_order_by.stub(_then(_instance))
        : CopyWith$Input$SoulWinningSessionGroup_order_by(
            local$SoulWinningSessionGroup,
            (e) => call(SoulWinningSessionGroup: e));
  }

  CopyWith$Input$User_order_by<TRes> get User {
    final local$User = _instance.User;
    return local$User == null
        ? CopyWith$Input$User_order_by.stub(_then(_instance))
        : CopyWith$Input$User_order_by(local$User, (e) => call(User: e));
  }
}

class _CopyWithStubImpl$Input$_SoulWinningSessionGroup_members_order_by<TRes>
    implements CopyWith$Input$_SoulWinningSessionGroup_members_order_by<TRes> {
  _CopyWithStubImpl$Input$_SoulWinningSessionGroup_members_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? A,
    Enum$order_by? B,
    Input$SoulWinningSessionGroup_order_by? SoulWinningSessionGroup,
    Input$User_order_by? User,
  }) =>
      _res;
  CopyWith$Input$SoulWinningSessionGroup_order_by<TRes>
      get SoulWinningSessionGroup =>
          CopyWith$Input$SoulWinningSessionGroup_order_by.stub(_res);
  CopyWith$Input$User_order_by<TRes> get User =>
      CopyWith$Input$User_order_by.stub(_res);
}

class Input$Encounter_stream_cursor_input {
  factory Input$Encounter_stream_cursor_input({
    required Input$Encounter_stream_cursor_value_input initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      Input$Encounter_stream_cursor_input._({
        r'initial_value': initial_value,
        if (ordering != null) r'ordering': ordering,
      });

  Input$Encounter_stream_cursor_input._(this._$data);

  factory Input$Encounter_stream_cursor_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$initial_value = data['initial_value'];
    result$data['initial_value'] =
        Input$Encounter_stream_cursor_value_input.fromJson(
            (l$initial_value as Map<String, dynamic>));
    if (data.containsKey('ordering')) {
      final l$ordering = data['ordering'];
      result$data['ordering'] = l$ordering == null
          ? null
          : fromJson$Enum$cursor_ordering((l$ordering as String));
    }
    return Input$Encounter_stream_cursor_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$Encounter_stream_cursor_value_input get initial_value =>
      (_$data['initial_value'] as Input$Encounter_stream_cursor_value_input);
  Enum$cursor_ordering? get ordering =>
      (_$data['ordering'] as Enum$cursor_ordering?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$initial_value = initial_value;
    result$data['initial_value'] = l$initial_value.toJson();
    if (_$data.containsKey('ordering')) {
      final l$ordering = ordering;
      result$data['ordering'] =
          l$ordering == null ? null : toJson$Enum$cursor_ordering(l$ordering);
    }
    return result$data;
  }

  CopyWith$Input$Encounter_stream_cursor_input<
          Input$Encounter_stream_cursor_input>
      get copyWith => CopyWith$Input$Encounter_stream_cursor_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Encounter_stream_cursor_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$initial_value = initial_value;
    final lOther$initial_value = other.initial_value;
    if (l$initial_value != lOther$initial_value) {
      return false;
    }
    final l$ordering = ordering;
    final lOther$ordering = other.ordering;
    if (_$data.containsKey('ordering') !=
        other._$data.containsKey('ordering')) {
      return false;
    }
    if (l$ordering != lOther$ordering) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$initial_value = initial_value;
    final l$ordering = ordering;
    return Object.hashAll([
      l$initial_value,
      _$data.containsKey('ordering') ? l$ordering : const {},
    ]);
  }
}

abstract class CopyWith$Input$Encounter_stream_cursor_input<TRes> {
  factory CopyWith$Input$Encounter_stream_cursor_input(
    Input$Encounter_stream_cursor_input instance,
    TRes Function(Input$Encounter_stream_cursor_input) then,
  ) = _CopyWithImpl$Input$Encounter_stream_cursor_input;

  factory CopyWith$Input$Encounter_stream_cursor_input.stub(TRes res) =
      _CopyWithStubImpl$Input$Encounter_stream_cursor_input;

  TRes call({
    Input$Encounter_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  });
  CopyWith$Input$Encounter_stream_cursor_value_input<TRes> get initial_value;
}

class _CopyWithImpl$Input$Encounter_stream_cursor_input<TRes>
    implements CopyWith$Input$Encounter_stream_cursor_input<TRes> {
  _CopyWithImpl$Input$Encounter_stream_cursor_input(
    this._instance,
    this._then,
  );

  final Input$Encounter_stream_cursor_input _instance;

  final TRes Function(Input$Encounter_stream_cursor_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? initial_value = _undefined,
    Object? ordering = _undefined,
  }) =>
      _then(Input$Encounter_stream_cursor_input._({
        ..._instance._$data,
        if (initial_value != _undefined && initial_value != null)
          'initial_value':
              (initial_value as Input$Encounter_stream_cursor_value_input),
        if (ordering != _undefined)
          'ordering': (ordering as Enum$cursor_ordering?),
      }));
  CopyWith$Input$Encounter_stream_cursor_value_input<TRes> get initial_value {
    final local$initial_value = _instance.initial_value;
    return CopyWith$Input$Encounter_stream_cursor_value_input(
        local$initial_value, (e) => call(initial_value: e));
  }
}

class _CopyWithStubImpl$Input$Encounter_stream_cursor_input<TRes>
    implements CopyWith$Input$Encounter_stream_cursor_input<TRes> {
  _CopyWithStubImpl$Input$Encounter_stream_cursor_input(this._res);

  TRes _res;

  call({
    Input$Encounter_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      _res;
  CopyWith$Input$Encounter_stream_cursor_value_input<TRes> get initial_value =>
      CopyWith$Input$Encounter_stream_cursor_value_input.stub(_res);
}

class Input$Event_stream_cursor_input {
  factory Input$Event_stream_cursor_input({
    required Input$Event_stream_cursor_value_input initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      Input$Event_stream_cursor_input._({
        r'initial_value': initial_value,
        if (ordering != null) r'ordering': ordering,
      });

  Input$Event_stream_cursor_input._(this._$data);

  factory Input$Event_stream_cursor_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$initial_value = data['initial_value'];
    result$data['initial_value'] =
        Input$Event_stream_cursor_value_input.fromJson(
            (l$initial_value as Map<String, dynamic>));
    if (data.containsKey('ordering')) {
      final l$ordering = data['ordering'];
      result$data['ordering'] = l$ordering == null
          ? null
          : fromJson$Enum$cursor_ordering((l$ordering as String));
    }
    return Input$Event_stream_cursor_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$Event_stream_cursor_value_input get initial_value =>
      (_$data['initial_value'] as Input$Event_stream_cursor_value_input);
  Enum$cursor_ordering? get ordering =>
      (_$data['ordering'] as Enum$cursor_ordering?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$initial_value = initial_value;
    result$data['initial_value'] = l$initial_value.toJson();
    if (_$data.containsKey('ordering')) {
      final l$ordering = ordering;
      result$data['ordering'] =
          l$ordering == null ? null : toJson$Enum$cursor_ordering(l$ordering);
    }
    return result$data;
  }

  CopyWith$Input$Event_stream_cursor_input<Input$Event_stream_cursor_input>
      get copyWith => CopyWith$Input$Event_stream_cursor_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Event_stream_cursor_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$initial_value = initial_value;
    final lOther$initial_value = other.initial_value;
    if (l$initial_value != lOther$initial_value) {
      return false;
    }
    final l$ordering = ordering;
    final lOther$ordering = other.ordering;
    if (_$data.containsKey('ordering') !=
        other._$data.containsKey('ordering')) {
      return false;
    }
    if (l$ordering != lOther$ordering) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$initial_value = initial_value;
    final l$ordering = ordering;
    return Object.hashAll([
      l$initial_value,
      _$data.containsKey('ordering') ? l$ordering : const {},
    ]);
  }
}

abstract class CopyWith$Input$Event_stream_cursor_input<TRes> {
  factory CopyWith$Input$Event_stream_cursor_input(
    Input$Event_stream_cursor_input instance,
    TRes Function(Input$Event_stream_cursor_input) then,
  ) = _CopyWithImpl$Input$Event_stream_cursor_input;

  factory CopyWith$Input$Event_stream_cursor_input.stub(TRes res) =
      _CopyWithStubImpl$Input$Event_stream_cursor_input;

  TRes call({
    Input$Event_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  });
  CopyWith$Input$Event_stream_cursor_value_input<TRes> get initial_value;
}

class _CopyWithImpl$Input$Event_stream_cursor_input<TRes>
    implements CopyWith$Input$Event_stream_cursor_input<TRes> {
  _CopyWithImpl$Input$Event_stream_cursor_input(
    this._instance,
    this._then,
  );

  final Input$Event_stream_cursor_input _instance;

  final TRes Function(Input$Event_stream_cursor_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? initial_value = _undefined,
    Object? ordering = _undefined,
  }) =>
      _then(Input$Event_stream_cursor_input._({
        ..._instance._$data,
        if (initial_value != _undefined && initial_value != null)
          'initial_value':
              (initial_value as Input$Event_stream_cursor_value_input),
        if (ordering != _undefined)
          'ordering': (ordering as Enum$cursor_ordering?),
      }));
  CopyWith$Input$Event_stream_cursor_value_input<TRes> get initial_value {
    final local$initial_value = _instance.initial_value;
    return CopyWith$Input$Event_stream_cursor_value_input(
        local$initial_value, (e) => call(initial_value: e));
  }
}

class _CopyWithStubImpl$Input$Event_stream_cursor_input<TRes>
    implements CopyWith$Input$Event_stream_cursor_input<TRes> {
  _CopyWithStubImpl$Input$Event_stream_cursor_input(this._res);

  TRes _res;

  call({
    Input$Event_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      _res;
  CopyWith$Input$Event_stream_cursor_value_input<TRes> get initial_value =>
      CopyWith$Input$Event_stream_cursor_value_input.stub(_res);
}

class Input$Map_stream_cursor_input {
  factory Input$Map_stream_cursor_input({
    required Input$Map_stream_cursor_value_input initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      Input$Map_stream_cursor_input._({
        r'initial_value': initial_value,
        if (ordering != null) r'ordering': ordering,
      });

  Input$Map_stream_cursor_input._(this._$data);

  factory Input$Map_stream_cursor_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$initial_value = data['initial_value'];
    result$data['initial_value'] = Input$Map_stream_cursor_value_input.fromJson(
        (l$initial_value as Map<String, dynamic>));
    if (data.containsKey('ordering')) {
      final l$ordering = data['ordering'];
      result$data['ordering'] = l$ordering == null
          ? null
          : fromJson$Enum$cursor_ordering((l$ordering as String));
    }
    return Input$Map_stream_cursor_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$Map_stream_cursor_value_input get initial_value =>
      (_$data['initial_value'] as Input$Map_stream_cursor_value_input);
  Enum$cursor_ordering? get ordering =>
      (_$data['ordering'] as Enum$cursor_ordering?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$initial_value = initial_value;
    result$data['initial_value'] = l$initial_value.toJson();
    if (_$data.containsKey('ordering')) {
      final l$ordering = ordering;
      result$data['ordering'] =
          l$ordering == null ? null : toJson$Enum$cursor_ordering(l$ordering);
    }
    return result$data;
  }

  CopyWith$Input$Map_stream_cursor_input<Input$Map_stream_cursor_input>
      get copyWith => CopyWith$Input$Map_stream_cursor_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Map_stream_cursor_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$initial_value = initial_value;
    final lOther$initial_value = other.initial_value;
    if (l$initial_value != lOther$initial_value) {
      return false;
    }
    final l$ordering = ordering;
    final lOther$ordering = other.ordering;
    if (_$data.containsKey('ordering') !=
        other._$data.containsKey('ordering')) {
      return false;
    }
    if (l$ordering != lOther$ordering) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$initial_value = initial_value;
    final l$ordering = ordering;
    return Object.hashAll([
      l$initial_value,
      _$data.containsKey('ordering') ? l$ordering : const {},
    ]);
  }
}

abstract class CopyWith$Input$Map_stream_cursor_input<TRes> {
  factory CopyWith$Input$Map_stream_cursor_input(
    Input$Map_stream_cursor_input instance,
    TRes Function(Input$Map_stream_cursor_input) then,
  ) = _CopyWithImpl$Input$Map_stream_cursor_input;

  factory CopyWith$Input$Map_stream_cursor_input.stub(TRes res) =
      _CopyWithStubImpl$Input$Map_stream_cursor_input;

  TRes call({
    Input$Map_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  });
  CopyWith$Input$Map_stream_cursor_value_input<TRes> get initial_value;
}

class _CopyWithImpl$Input$Map_stream_cursor_input<TRes>
    implements CopyWith$Input$Map_stream_cursor_input<TRes> {
  _CopyWithImpl$Input$Map_stream_cursor_input(
    this._instance,
    this._then,
  );

  final Input$Map_stream_cursor_input _instance;

  final TRes Function(Input$Map_stream_cursor_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? initial_value = _undefined,
    Object? ordering = _undefined,
  }) =>
      _then(Input$Map_stream_cursor_input._({
        ..._instance._$data,
        if (initial_value != _undefined && initial_value != null)
          'initial_value':
              (initial_value as Input$Map_stream_cursor_value_input),
        if (ordering != _undefined)
          'ordering': (ordering as Enum$cursor_ordering?),
      }));
  CopyWith$Input$Map_stream_cursor_value_input<TRes> get initial_value {
    final local$initial_value = _instance.initial_value;
    return CopyWith$Input$Map_stream_cursor_value_input(
        local$initial_value, (e) => call(initial_value: e));
  }
}

class _CopyWithStubImpl$Input$Map_stream_cursor_input<TRes>
    implements CopyWith$Input$Map_stream_cursor_input<TRes> {
  _CopyWithStubImpl$Input$Map_stream_cursor_input(this._res);

  TRes _res;

  call({
    Input$Map_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      _res;
  CopyWith$Input$Map_stream_cursor_value_input<TRes> get initial_value =>
      CopyWith$Input$Map_stream_cursor_value_input.stub(_res);
}

class Input$MapArea_stream_cursor_input {
  factory Input$MapArea_stream_cursor_input({
    required Input$MapArea_stream_cursor_value_input initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      Input$MapArea_stream_cursor_input._({
        r'initial_value': initial_value,
        if (ordering != null) r'ordering': ordering,
      });

  Input$MapArea_stream_cursor_input._(this._$data);

  factory Input$MapArea_stream_cursor_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$initial_value = data['initial_value'];
    result$data['initial_value'] =
        Input$MapArea_stream_cursor_value_input.fromJson(
            (l$initial_value as Map<String, dynamic>));
    if (data.containsKey('ordering')) {
      final l$ordering = data['ordering'];
      result$data['ordering'] = l$ordering == null
          ? null
          : fromJson$Enum$cursor_ordering((l$ordering as String));
    }
    return Input$MapArea_stream_cursor_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$MapArea_stream_cursor_value_input get initial_value =>
      (_$data['initial_value'] as Input$MapArea_stream_cursor_value_input);
  Enum$cursor_ordering? get ordering =>
      (_$data['ordering'] as Enum$cursor_ordering?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$initial_value = initial_value;
    result$data['initial_value'] = l$initial_value.toJson();
    if (_$data.containsKey('ordering')) {
      final l$ordering = ordering;
      result$data['ordering'] =
          l$ordering == null ? null : toJson$Enum$cursor_ordering(l$ordering);
    }
    return result$data;
  }

  CopyWith$Input$MapArea_stream_cursor_input<Input$MapArea_stream_cursor_input>
      get copyWith => CopyWith$Input$MapArea_stream_cursor_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$MapArea_stream_cursor_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$initial_value = initial_value;
    final lOther$initial_value = other.initial_value;
    if (l$initial_value != lOther$initial_value) {
      return false;
    }
    final l$ordering = ordering;
    final lOther$ordering = other.ordering;
    if (_$data.containsKey('ordering') !=
        other._$data.containsKey('ordering')) {
      return false;
    }
    if (l$ordering != lOther$ordering) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$initial_value = initial_value;
    final l$ordering = ordering;
    return Object.hashAll([
      l$initial_value,
      _$data.containsKey('ordering') ? l$ordering : const {},
    ]);
  }
}

abstract class CopyWith$Input$MapArea_stream_cursor_input<TRes> {
  factory CopyWith$Input$MapArea_stream_cursor_input(
    Input$MapArea_stream_cursor_input instance,
    TRes Function(Input$MapArea_stream_cursor_input) then,
  ) = _CopyWithImpl$Input$MapArea_stream_cursor_input;

  factory CopyWith$Input$MapArea_stream_cursor_input.stub(TRes res) =
      _CopyWithStubImpl$Input$MapArea_stream_cursor_input;

  TRes call({
    Input$MapArea_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  });
  CopyWith$Input$MapArea_stream_cursor_value_input<TRes> get initial_value;
}

class _CopyWithImpl$Input$MapArea_stream_cursor_input<TRes>
    implements CopyWith$Input$MapArea_stream_cursor_input<TRes> {
  _CopyWithImpl$Input$MapArea_stream_cursor_input(
    this._instance,
    this._then,
  );

  final Input$MapArea_stream_cursor_input _instance;

  final TRes Function(Input$MapArea_stream_cursor_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? initial_value = _undefined,
    Object? ordering = _undefined,
  }) =>
      _then(Input$MapArea_stream_cursor_input._({
        ..._instance._$data,
        if (initial_value != _undefined && initial_value != null)
          'initial_value':
              (initial_value as Input$MapArea_stream_cursor_value_input),
        if (ordering != _undefined)
          'ordering': (ordering as Enum$cursor_ordering?),
      }));
  CopyWith$Input$MapArea_stream_cursor_value_input<TRes> get initial_value {
    final local$initial_value = _instance.initial_value;
    return CopyWith$Input$MapArea_stream_cursor_value_input(
        local$initial_value, (e) => call(initial_value: e));
  }
}

class _CopyWithStubImpl$Input$MapArea_stream_cursor_input<TRes>
    implements CopyWith$Input$MapArea_stream_cursor_input<TRes> {
  _CopyWithStubImpl$Input$MapArea_stream_cursor_input(this._res);

  TRes _res;

  call({
    Input$MapArea_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      _res;
  CopyWith$Input$MapArea_stream_cursor_value_input<TRes> get initial_value =>
      CopyWith$Input$MapArea_stream_cursor_value_input.stub(_res);
}

class Input$Organization_stream_cursor_input {
  factory Input$Organization_stream_cursor_input({
    required Input$Organization_stream_cursor_value_input initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      Input$Organization_stream_cursor_input._({
        r'initial_value': initial_value,
        if (ordering != null) r'ordering': ordering,
      });

  Input$Organization_stream_cursor_input._(this._$data);

  factory Input$Organization_stream_cursor_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$initial_value = data['initial_value'];
    result$data['initial_value'] =
        Input$Organization_stream_cursor_value_input.fromJson(
            (l$initial_value as Map<String, dynamic>));
    if (data.containsKey('ordering')) {
      final l$ordering = data['ordering'];
      result$data['ordering'] = l$ordering == null
          ? null
          : fromJson$Enum$cursor_ordering((l$ordering as String));
    }
    return Input$Organization_stream_cursor_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$Organization_stream_cursor_value_input get initial_value =>
      (_$data['initial_value'] as Input$Organization_stream_cursor_value_input);
  Enum$cursor_ordering? get ordering =>
      (_$data['ordering'] as Enum$cursor_ordering?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$initial_value = initial_value;
    result$data['initial_value'] = l$initial_value.toJson();
    if (_$data.containsKey('ordering')) {
      final l$ordering = ordering;
      result$data['ordering'] =
          l$ordering == null ? null : toJson$Enum$cursor_ordering(l$ordering);
    }
    return result$data;
  }

  CopyWith$Input$Organization_stream_cursor_input<
          Input$Organization_stream_cursor_input>
      get copyWith => CopyWith$Input$Organization_stream_cursor_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Organization_stream_cursor_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$initial_value = initial_value;
    final lOther$initial_value = other.initial_value;
    if (l$initial_value != lOther$initial_value) {
      return false;
    }
    final l$ordering = ordering;
    final lOther$ordering = other.ordering;
    if (_$data.containsKey('ordering') !=
        other._$data.containsKey('ordering')) {
      return false;
    }
    if (l$ordering != lOther$ordering) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$initial_value = initial_value;
    final l$ordering = ordering;
    return Object.hashAll([
      l$initial_value,
      _$data.containsKey('ordering') ? l$ordering : const {},
    ]);
  }
}

abstract class CopyWith$Input$Organization_stream_cursor_input<TRes> {
  factory CopyWith$Input$Organization_stream_cursor_input(
    Input$Organization_stream_cursor_input instance,
    TRes Function(Input$Organization_stream_cursor_input) then,
  ) = _CopyWithImpl$Input$Organization_stream_cursor_input;

  factory CopyWith$Input$Organization_stream_cursor_input.stub(TRes res) =
      _CopyWithStubImpl$Input$Organization_stream_cursor_input;

  TRes call({
    Input$Organization_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  });
  CopyWith$Input$Organization_stream_cursor_value_input<TRes> get initial_value;
}

class _CopyWithImpl$Input$Organization_stream_cursor_input<TRes>
    implements CopyWith$Input$Organization_stream_cursor_input<TRes> {
  _CopyWithImpl$Input$Organization_stream_cursor_input(
    this._instance,
    this._then,
  );

  final Input$Organization_stream_cursor_input _instance;

  final TRes Function(Input$Organization_stream_cursor_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? initial_value = _undefined,
    Object? ordering = _undefined,
  }) =>
      _then(Input$Organization_stream_cursor_input._({
        ..._instance._$data,
        if (initial_value != _undefined && initial_value != null)
          'initial_value':
              (initial_value as Input$Organization_stream_cursor_value_input),
        if (ordering != _undefined)
          'ordering': (ordering as Enum$cursor_ordering?),
      }));
  CopyWith$Input$Organization_stream_cursor_value_input<TRes>
      get initial_value {
    final local$initial_value = _instance.initial_value;
    return CopyWith$Input$Organization_stream_cursor_value_input(
        local$initial_value, (e) => call(initial_value: e));
  }
}

class _CopyWithStubImpl$Input$Organization_stream_cursor_input<TRes>
    implements CopyWith$Input$Organization_stream_cursor_input<TRes> {
  _CopyWithStubImpl$Input$Organization_stream_cursor_input(this._res);

  TRes _res;

  call({
    Input$Organization_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      _res;
  CopyWith$Input$Organization_stream_cursor_value_input<TRes>
      get initial_value =>
          CopyWith$Input$Organization_stream_cursor_value_input.stub(_res);
}

class Input$SavedPerson_stream_cursor_input {
  factory Input$SavedPerson_stream_cursor_input({
    required Input$SavedPerson_stream_cursor_value_input initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      Input$SavedPerson_stream_cursor_input._({
        r'initial_value': initial_value,
        if (ordering != null) r'ordering': ordering,
      });

  Input$SavedPerson_stream_cursor_input._(this._$data);

  factory Input$SavedPerson_stream_cursor_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$initial_value = data['initial_value'];
    result$data['initial_value'] =
        Input$SavedPerson_stream_cursor_value_input.fromJson(
            (l$initial_value as Map<String, dynamic>));
    if (data.containsKey('ordering')) {
      final l$ordering = data['ordering'];
      result$data['ordering'] = l$ordering == null
          ? null
          : fromJson$Enum$cursor_ordering((l$ordering as String));
    }
    return Input$SavedPerson_stream_cursor_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$SavedPerson_stream_cursor_value_input get initial_value =>
      (_$data['initial_value'] as Input$SavedPerson_stream_cursor_value_input);
  Enum$cursor_ordering? get ordering =>
      (_$data['ordering'] as Enum$cursor_ordering?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$initial_value = initial_value;
    result$data['initial_value'] = l$initial_value.toJson();
    if (_$data.containsKey('ordering')) {
      final l$ordering = ordering;
      result$data['ordering'] =
          l$ordering == null ? null : toJson$Enum$cursor_ordering(l$ordering);
    }
    return result$data;
  }

  CopyWith$Input$SavedPerson_stream_cursor_input<
          Input$SavedPerson_stream_cursor_input>
      get copyWith => CopyWith$Input$SavedPerson_stream_cursor_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SavedPerson_stream_cursor_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$initial_value = initial_value;
    final lOther$initial_value = other.initial_value;
    if (l$initial_value != lOther$initial_value) {
      return false;
    }
    final l$ordering = ordering;
    final lOther$ordering = other.ordering;
    if (_$data.containsKey('ordering') !=
        other._$data.containsKey('ordering')) {
      return false;
    }
    if (l$ordering != lOther$ordering) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$initial_value = initial_value;
    final l$ordering = ordering;
    return Object.hashAll([
      l$initial_value,
      _$data.containsKey('ordering') ? l$ordering : const {},
    ]);
  }
}

abstract class CopyWith$Input$SavedPerson_stream_cursor_input<TRes> {
  factory CopyWith$Input$SavedPerson_stream_cursor_input(
    Input$SavedPerson_stream_cursor_input instance,
    TRes Function(Input$SavedPerson_stream_cursor_input) then,
  ) = _CopyWithImpl$Input$SavedPerson_stream_cursor_input;

  factory CopyWith$Input$SavedPerson_stream_cursor_input.stub(TRes res) =
      _CopyWithStubImpl$Input$SavedPerson_stream_cursor_input;

  TRes call({
    Input$SavedPerson_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  });
  CopyWith$Input$SavedPerson_stream_cursor_value_input<TRes> get initial_value;
}

class _CopyWithImpl$Input$SavedPerson_stream_cursor_input<TRes>
    implements CopyWith$Input$SavedPerson_stream_cursor_input<TRes> {
  _CopyWithImpl$Input$SavedPerson_stream_cursor_input(
    this._instance,
    this._then,
  );

  final Input$SavedPerson_stream_cursor_input _instance;

  final TRes Function(Input$SavedPerson_stream_cursor_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? initial_value = _undefined,
    Object? ordering = _undefined,
  }) =>
      _then(Input$SavedPerson_stream_cursor_input._({
        ..._instance._$data,
        if (initial_value != _undefined && initial_value != null)
          'initial_value':
              (initial_value as Input$SavedPerson_stream_cursor_value_input),
        if (ordering != _undefined)
          'ordering': (ordering as Enum$cursor_ordering?),
      }));
  CopyWith$Input$SavedPerson_stream_cursor_value_input<TRes> get initial_value {
    final local$initial_value = _instance.initial_value;
    return CopyWith$Input$SavedPerson_stream_cursor_value_input(
        local$initial_value, (e) => call(initial_value: e));
  }
}

class _CopyWithStubImpl$Input$SavedPerson_stream_cursor_input<TRes>
    implements CopyWith$Input$SavedPerson_stream_cursor_input<TRes> {
  _CopyWithStubImpl$Input$SavedPerson_stream_cursor_input(this._res);

  TRes _res;

  call({
    Input$SavedPerson_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      _res;
  CopyWith$Input$SavedPerson_stream_cursor_value_input<TRes>
      get initial_value =>
          CopyWith$Input$SavedPerson_stream_cursor_value_input.stub(_res);
}

class Input$SoulWinningSession_stream_cursor_input {
  factory Input$SoulWinningSession_stream_cursor_input({
    required Input$SoulWinningSession_stream_cursor_value_input initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      Input$SoulWinningSession_stream_cursor_input._({
        r'initial_value': initial_value,
        if (ordering != null) r'ordering': ordering,
      });

  Input$SoulWinningSession_stream_cursor_input._(this._$data);

  factory Input$SoulWinningSession_stream_cursor_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$initial_value = data['initial_value'];
    result$data['initial_value'] =
        Input$SoulWinningSession_stream_cursor_value_input.fromJson(
            (l$initial_value as Map<String, dynamic>));
    if (data.containsKey('ordering')) {
      final l$ordering = data['ordering'];
      result$data['ordering'] = l$ordering == null
          ? null
          : fromJson$Enum$cursor_ordering((l$ordering as String));
    }
    return Input$SoulWinningSession_stream_cursor_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$SoulWinningSession_stream_cursor_value_input get initial_value =>
      (_$data['initial_value']
          as Input$SoulWinningSession_stream_cursor_value_input);
  Enum$cursor_ordering? get ordering =>
      (_$data['ordering'] as Enum$cursor_ordering?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$initial_value = initial_value;
    result$data['initial_value'] = l$initial_value.toJson();
    if (_$data.containsKey('ordering')) {
      final l$ordering = ordering;
      result$data['ordering'] =
          l$ordering == null ? null : toJson$Enum$cursor_ordering(l$ordering);
    }
    return result$data;
  }

  CopyWith$Input$SoulWinningSession_stream_cursor_input<
          Input$SoulWinningSession_stream_cursor_input>
      get copyWith => CopyWith$Input$SoulWinningSession_stream_cursor_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SoulWinningSession_stream_cursor_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$initial_value = initial_value;
    final lOther$initial_value = other.initial_value;
    if (l$initial_value != lOther$initial_value) {
      return false;
    }
    final l$ordering = ordering;
    final lOther$ordering = other.ordering;
    if (_$data.containsKey('ordering') !=
        other._$data.containsKey('ordering')) {
      return false;
    }
    if (l$ordering != lOther$ordering) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$initial_value = initial_value;
    final l$ordering = ordering;
    return Object.hashAll([
      l$initial_value,
      _$data.containsKey('ordering') ? l$ordering : const {},
    ]);
  }
}

abstract class CopyWith$Input$SoulWinningSession_stream_cursor_input<TRes> {
  factory CopyWith$Input$SoulWinningSession_stream_cursor_input(
    Input$SoulWinningSession_stream_cursor_input instance,
    TRes Function(Input$SoulWinningSession_stream_cursor_input) then,
  ) = _CopyWithImpl$Input$SoulWinningSession_stream_cursor_input;

  factory CopyWith$Input$SoulWinningSession_stream_cursor_input.stub(TRes res) =
      _CopyWithStubImpl$Input$SoulWinningSession_stream_cursor_input;

  TRes call({
    Input$SoulWinningSession_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  });
  CopyWith$Input$SoulWinningSession_stream_cursor_value_input<TRes>
      get initial_value;
}

class _CopyWithImpl$Input$SoulWinningSession_stream_cursor_input<TRes>
    implements CopyWith$Input$SoulWinningSession_stream_cursor_input<TRes> {
  _CopyWithImpl$Input$SoulWinningSession_stream_cursor_input(
    this._instance,
    this._then,
  );

  final Input$SoulWinningSession_stream_cursor_input _instance;

  final TRes Function(Input$SoulWinningSession_stream_cursor_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? initial_value = _undefined,
    Object? ordering = _undefined,
  }) =>
      _then(Input$SoulWinningSession_stream_cursor_input._({
        ..._instance._$data,
        if (initial_value != _undefined && initial_value != null)
          'initial_value': (initial_value
              as Input$SoulWinningSession_stream_cursor_value_input),
        if (ordering != _undefined)
          'ordering': (ordering as Enum$cursor_ordering?),
      }));
  CopyWith$Input$SoulWinningSession_stream_cursor_value_input<TRes>
      get initial_value {
    final local$initial_value = _instance.initial_value;
    return CopyWith$Input$SoulWinningSession_stream_cursor_value_input(
        local$initial_value, (e) => call(initial_value: e));
  }
}

class _CopyWithStubImpl$Input$SoulWinningSession_stream_cursor_input<TRes>
    implements CopyWith$Input$SoulWinningSession_stream_cursor_input<TRes> {
  _CopyWithStubImpl$Input$SoulWinningSession_stream_cursor_input(this._res);

  TRes _res;

  call({
    Input$SoulWinningSession_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      _res;
  CopyWith$Input$SoulWinningSession_stream_cursor_value_input<TRes>
      get initial_value =>
          CopyWith$Input$SoulWinningSession_stream_cursor_value_input.stub(
              _res);
}

class Input$SoulWinningSessionGroup_stream_cursor_input {
  factory Input$SoulWinningSessionGroup_stream_cursor_input({
    required Input$SoulWinningSessionGroup_stream_cursor_value_input
        initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      Input$SoulWinningSessionGroup_stream_cursor_input._({
        r'initial_value': initial_value,
        if (ordering != null) r'ordering': ordering,
      });

  Input$SoulWinningSessionGroup_stream_cursor_input._(this._$data);

  factory Input$SoulWinningSessionGroup_stream_cursor_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$initial_value = data['initial_value'];
    result$data['initial_value'] =
        Input$SoulWinningSessionGroup_stream_cursor_value_input.fromJson(
            (l$initial_value as Map<String, dynamic>));
    if (data.containsKey('ordering')) {
      final l$ordering = data['ordering'];
      result$data['ordering'] = l$ordering == null
          ? null
          : fromJson$Enum$cursor_ordering((l$ordering as String));
    }
    return Input$SoulWinningSessionGroup_stream_cursor_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$SoulWinningSessionGroup_stream_cursor_value_input get initial_value =>
      (_$data['initial_value']
          as Input$SoulWinningSessionGroup_stream_cursor_value_input);
  Enum$cursor_ordering? get ordering =>
      (_$data['ordering'] as Enum$cursor_ordering?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$initial_value = initial_value;
    result$data['initial_value'] = l$initial_value.toJson();
    if (_$data.containsKey('ordering')) {
      final l$ordering = ordering;
      result$data['ordering'] =
          l$ordering == null ? null : toJson$Enum$cursor_ordering(l$ordering);
    }
    return result$data;
  }

  CopyWith$Input$SoulWinningSessionGroup_stream_cursor_input<
          Input$SoulWinningSessionGroup_stream_cursor_input>
      get copyWith =>
          CopyWith$Input$SoulWinningSessionGroup_stream_cursor_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SoulWinningSessionGroup_stream_cursor_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$initial_value = initial_value;
    final lOther$initial_value = other.initial_value;
    if (l$initial_value != lOther$initial_value) {
      return false;
    }
    final l$ordering = ordering;
    final lOther$ordering = other.ordering;
    if (_$data.containsKey('ordering') !=
        other._$data.containsKey('ordering')) {
      return false;
    }
    if (l$ordering != lOther$ordering) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$initial_value = initial_value;
    final l$ordering = ordering;
    return Object.hashAll([
      l$initial_value,
      _$data.containsKey('ordering') ? l$ordering : const {},
    ]);
  }
}

abstract class CopyWith$Input$SoulWinningSessionGroup_stream_cursor_input<
    TRes> {
  factory CopyWith$Input$SoulWinningSessionGroup_stream_cursor_input(
    Input$SoulWinningSessionGroup_stream_cursor_input instance,
    TRes Function(Input$SoulWinningSessionGroup_stream_cursor_input) then,
  ) = _CopyWithImpl$Input$SoulWinningSessionGroup_stream_cursor_input;

  factory CopyWith$Input$SoulWinningSessionGroup_stream_cursor_input.stub(
          TRes res) =
      _CopyWithStubImpl$Input$SoulWinningSessionGroup_stream_cursor_input;

  TRes call({
    Input$SoulWinningSessionGroup_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  });
  CopyWith$Input$SoulWinningSessionGroup_stream_cursor_value_input<TRes>
      get initial_value;
}

class _CopyWithImpl$Input$SoulWinningSessionGroup_stream_cursor_input<TRes>
    implements
        CopyWith$Input$SoulWinningSessionGroup_stream_cursor_input<TRes> {
  _CopyWithImpl$Input$SoulWinningSessionGroup_stream_cursor_input(
    this._instance,
    this._then,
  );

  final Input$SoulWinningSessionGroup_stream_cursor_input _instance;

  final TRes Function(Input$SoulWinningSessionGroup_stream_cursor_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? initial_value = _undefined,
    Object? ordering = _undefined,
  }) =>
      _then(Input$SoulWinningSessionGroup_stream_cursor_input._({
        ..._instance._$data,
        if (initial_value != _undefined && initial_value != null)
          'initial_value': (initial_value
              as Input$SoulWinningSessionGroup_stream_cursor_value_input),
        if (ordering != _undefined)
          'ordering': (ordering as Enum$cursor_ordering?),
      }));
  CopyWith$Input$SoulWinningSessionGroup_stream_cursor_value_input<TRes>
      get initial_value {
    final local$initial_value = _instance.initial_value;
    return CopyWith$Input$SoulWinningSessionGroup_stream_cursor_value_input(
        local$initial_value, (e) => call(initial_value: e));
  }
}

class _CopyWithStubImpl$Input$SoulWinningSessionGroup_stream_cursor_input<TRes>
    implements
        CopyWith$Input$SoulWinningSessionGroup_stream_cursor_input<TRes> {
  _CopyWithStubImpl$Input$SoulWinningSessionGroup_stream_cursor_input(
      this._res);

  TRes _res;

  call({
    Input$SoulWinningSessionGroup_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      _res;
  CopyWith$Input$SoulWinningSessionGroup_stream_cursor_value_input<TRes>
      get initial_value =>
          CopyWith$Input$SoulWinningSessionGroup_stream_cursor_value_input.stub(
              _res);
}

class Input$User_stream_cursor_input {
  factory Input$User_stream_cursor_input({
    required Input$User_stream_cursor_value_input initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      Input$User_stream_cursor_input._({
        r'initial_value': initial_value,
        if (ordering != null) r'ordering': ordering,
      });

  Input$User_stream_cursor_input._(this._$data);

  factory Input$User_stream_cursor_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$initial_value = data['initial_value'];
    result$data['initial_value'] =
        Input$User_stream_cursor_value_input.fromJson(
            (l$initial_value as Map<String, dynamic>));
    if (data.containsKey('ordering')) {
      final l$ordering = data['ordering'];
      result$data['ordering'] = l$ordering == null
          ? null
          : fromJson$Enum$cursor_ordering((l$ordering as String));
    }
    return Input$User_stream_cursor_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$User_stream_cursor_value_input get initial_value =>
      (_$data['initial_value'] as Input$User_stream_cursor_value_input);
  Enum$cursor_ordering? get ordering =>
      (_$data['ordering'] as Enum$cursor_ordering?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$initial_value = initial_value;
    result$data['initial_value'] = l$initial_value.toJson();
    if (_$data.containsKey('ordering')) {
      final l$ordering = ordering;
      result$data['ordering'] =
          l$ordering == null ? null : toJson$Enum$cursor_ordering(l$ordering);
    }
    return result$data;
  }

  CopyWith$Input$User_stream_cursor_input<Input$User_stream_cursor_input>
      get copyWith => CopyWith$Input$User_stream_cursor_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$User_stream_cursor_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$initial_value = initial_value;
    final lOther$initial_value = other.initial_value;
    if (l$initial_value != lOther$initial_value) {
      return false;
    }
    final l$ordering = ordering;
    final lOther$ordering = other.ordering;
    if (_$data.containsKey('ordering') !=
        other._$data.containsKey('ordering')) {
      return false;
    }
    if (l$ordering != lOther$ordering) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$initial_value = initial_value;
    final l$ordering = ordering;
    return Object.hashAll([
      l$initial_value,
      _$data.containsKey('ordering') ? l$ordering : const {},
    ]);
  }
}

abstract class CopyWith$Input$User_stream_cursor_input<TRes> {
  factory CopyWith$Input$User_stream_cursor_input(
    Input$User_stream_cursor_input instance,
    TRes Function(Input$User_stream_cursor_input) then,
  ) = _CopyWithImpl$Input$User_stream_cursor_input;

  factory CopyWith$Input$User_stream_cursor_input.stub(TRes res) =
      _CopyWithStubImpl$Input$User_stream_cursor_input;

  TRes call({
    Input$User_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  });
  CopyWith$Input$User_stream_cursor_value_input<TRes> get initial_value;
}

class _CopyWithImpl$Input$User_stream_cursor_input<TRes>
    implements CopyWith$Input$User_stream_cursor_input<TRes> {
  _CopyWithImpl$Input$User_stream_cursor_input(
    this._instance,
    this._then,
  );

  final Input$User_stream_cursor_input _instance;

  final TRes Function(Input$User_stream_cursor_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? initial_value = _undefined,
    Object? ordering = _undefined,
  }) =>
      _then(Input$User_stream_cursor_input._({
        ..._instance._$data,
        if (initial_value != _undefined && initial_value != null)
          'initial_value':
              (initial_value as Input$User_stream_cursor_value_input),
        if (ordering != _undefined)
          'ordering': (ordering as Enum$cursor_ordering?),
      }));
  CopyWith$Input$User_stream_cursor_value_input<TRes> get initial_value {
    final local$initial_value = _instance.initial_value;
    return CopyWith$Input$User_stream_cursor_value_input(
        local$initial_value, (e) => call(initial_value: e));
  }
}

class _CopyWithStubImpl$Input$User_stream_cursor_input<TRes>
    implements CopyWith$Input$User_stream_cursor_input<TRes> {
  _CopyWithStubImpl$Input$User_stream_cursor_input(this._res);

  TRes _res;

  call({
    Input$User_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      _res;
  CopyWith$Input$User_stream_cursor_value_input<TRes> get initial_value =>
      CopyWith$Input$User_stream_cursor_value_input.stub(_res);
}

class Input$_Organization_adminsOfOrganization_stream_cursor_input {
  factory Input$_Organization_adminsOfOrganization_stream_cursor_input({
    required Input$_Organization_adminsOfOrganization_stream_cursor_value_input
        initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      Input$_Organization_adminsOfOrganization_stream_cursor_input._({
        r'initial_value': initial_value,
        if (ordering != null) r'ordering': ordering,
      });

  Input$_Organization_adminsOfOrganization_stream_cursor_input._(this._$data);

  factory Input$_Organization_adminsOfOrganization_stream_cursor_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$initial_value = data['initial_value'];
    result$data['initial_value'] =
        Input$_Organization_adminsOfOrganization_stream_cursor_value_input
            .fromJson((l$initial_value as Map<String, dynamic>));
    if (data.containsKey('ordering')) {
      final l$ordering = data['ordering'];
      result$data['ordering'] = l$ordering == null
          ? null
          : fromJson$Enum$cursor_ordering((l$ordering as String));
    }
    return Input$_Organization_adminsOfOrganization_stream_cursor_input._(
        result$data);
  }

  Map<String, dynamic> _$data;

  Input$_Organization_adminsOfOrganization_stream_cursor_value_input
      get initial_value => (_$data['initial_value']
          as Input$_Organization_adminsOfOrganization_stream_cursor_value_input);
  Enum$cursor_ordering? get ordering =>
      (_$data['ordering'] as Enum$cursor_ordering?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$initial_value = initial_value;
    result$data['initial_value'] = l$initial_value.toJson();
    if (_$data.containsKey('ordering')) {
      final l$ordering = ordering;
      result$data['ordering'] =
          l$ordering == null ? null : toJson$Enum$cursor_ordering(l$ordering);
    }
    return result$data;
  }

  CopyWith$Input$_Organization_adminsOfOrganization_stream_cursor_input<
          Input$_Organization_adminsOfOrganization_stream_cursor_input>
      get copyWith =>
          CopyWith$Input$_Organization_adminsOfOrganization_stream_cursor_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other
            is Input$_Organization_adminsOfOrganization_stream_cursor_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$initial_value = initial_value;
    final lOther$initial_value = other.initial_value;
    if (l$initial_value != lOther$initial_value) {
      return false;
    }
    final l$ordering = ordering;
    final lOther$ordering = other.ordering;
    if (_$data.containsKey('ordering') !=
        other._$data.containsKey('ordering')) {
      return false;
    }
    if (l$ordering != lOther$ordering) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$initial_value = initial_value;
    final l$ordering = ordering;
    return Object.hashAll([
      l$initial_value,
      _$data.containsKey('ordering') ? l$ordering : const {},
    ]);
  }
}

abstract class CopyWith$Input$_Organization_adminsOfOrganization_stream_cursor_input<
    TRes> {
  factory CopyWith$Input$_Organization_adminsOfOrganization_stream_cursor_input(
    Input$_Organization_adminsOfOrganization_stream_cursor_input instance,
    TRes Function(Input$_Organization_adminsOfOrganization_stream_cursor_input)
        then,
  ) = _CopyWithImpl$Input$_Organization_adminsOfOrganization_stream_cursor_input;

  factory CopyWith$Input$_Organization_adminsOfOrganization_stream_cursor_input.stub(
          TRes res) =
      _CopyWithStubImpl$Input$_Organization_adminsOfOrganization_stream_cursor_input;

  TRes call({
    Input$_Organization_adminsOfOrganization_stream_cursor_value_input?
        initial_value,
    Enum$cursor_ordering? ordering,
  });
  CopyWith$Input$_Organization_adminsOfOrganization_stream_cursor_value_input<
      TRes> get initial_value;
}

class _CopyWithImpl$Input$_Organization_adminsOfOrganization_stream_cursor_input<
        TRes>
    implements
        CopyWith$Input$_Organization_adminsOfOrganization_stream_cursor_input<
            TRes> {
  _CopyWithImpl$Input$_Organization_adminsOfOrganization_stream_cursor_input(
    this._instance,
    this._then,
  );

  final Input$_Organization_adminsOfOrganization_stream_cursor_input _instance;

  final TRes Function(
      Input$_Organization_adminsOfOrganization_stream_cursor_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? initial_value = _undefined,
    Object? ordering = _undefined,
  }) =>
      _then(Input$_Organization_adminsOfOrganization_stream_cursor_input._({
        ..._instance._$data,
        if (initial_value != _undefined && initial_value != null)
          'initial_value': (initial_value
              as Input$_Organization_adminsOfOrganization_stream_cursor_value_input),
        if (ordering != _undefined)
          'ordering': (ordering as Enum$cursor_ordering?),
      }));
  CopyWith$Input$_Organization_adminsOfOrganization_stream_cursor_value_input<
      TRes> get initial_value {
    final local$initial_value = _instance.initial_value;
    return CopyWith$Input$_Organization_adminsOfOrganization_stream_cursor_value_input(
        local$initial_value, (e) => call(initial_value: e));
  }
}

class _CopyWithStubImpl$Input$_Organization_adminsOfOrganization_stream_cursor_input<
        TRes>
    implements
        CopyWith$Input$_Organization_adminsOfOrganization_stream_cursor_input<
            TRes> {
  _CopyWithStubImpl$Input$_Organization_adminsOfOrganization_stream_cursor_input(
      this._res);

  TRes _res;

  call({
    Input$_Organization_adminsOfOrganization_stream_cursor_value_input?
        initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      _res;
  CopyWith$Input$_Organization_adminsOfOrganization_stream_cursor_value_input<
          TRes>
      get initial_value =>
          CopyWith$Input$_Organization_adminsOfOrganization_stream_cursor_value_input
              .stub(_res);
}

class Input$_Organization_membersInOrganization_stream_cursor_input {
  factory Input$_Organization_membersInOrganization_stream_cursor_input({
    required Input$_Organization_membersInOrganization_stream_cursor_value_input
        initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      Input$_Organization_membersInOrganization_stream_cursor_input._({
        r'initial_value': initial_value,
        if (ordering != null) r'ordering': ordering,
      });

  Input$_Organization_membersInOrganization_stream_cursor_input._(this._$data);

  factory Input$_Organization_membersInOrganization_stream_cursor_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$initial_value = data['initial_value'];
    result$data['initial_value'] =
        Input$_Organization_membersInOrganization_stream_cursor_value_input
            .fromJson((l$initial_value as Map<String, dynamic>));
    if (data.containsKey('ordering')) {
      final l$ordering = data['ordering'];
      result$data['ordering'] = l$ordering == null
          ? null
          : fromJson$Enum$cursor_ordering((l$ordering as String));
    }
    return Input$_Organization_membersInOrganization_stream_cursor_input._(
        result$data);
  }

  Map<String, dynamic> _$data;

  Input$_Organization_membersInOrganization_stream_cursor_value_input
      get initial_value => (_$data['initial_value']
          as Input$_Organization_membersInOrganization_stream_cursor_value_input);
  Enum$cursor_ordering? get ordering =>
      (_$data['ordering'] as Enum$cursor_ordering?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$initial_value = initial_value;
    result$data['initial_value'] = l$initial_value.toJson();
    if (_$data.containsKey('ordering')) {
      final l$ordering = ordering;
      result$data['ordering'] =
          l$ordering == null ? null : toJson$Enum$cursor_ordering(l$ordering);
    }
    return result$data;
  }

  CopyWith$Input$_Organization_membersInOrganization_stream_cursor_input<
          Input$_Organization_membersInOrganization_stream_cursor_input>
      get copyWith =>
          CopyWith$Input$_Organization_membersInOrganization_stream_cursor_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other
            is Input$_Organization_membersInOrganization_stream_cursor_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$initial_value = initial_value;
    final lOther$initial_value = other.initial_value;
    if (l$initial_value != lOther$initial_value) {
      return false;
    }
    final l$ordering = ordering;
    final lOther$ordering = other.ordering;
    if (_$data.containsKey('ordering') !=
        other._$data.containsKey('ordering')) {
      return false;
    }
    if (l$ordering != lOther$ordering) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$initial_value = initial_value;
    final l$ordering = ordering;
    return Object.hashAll([
      l$initial_value,
      _$data.containsKey('ordering') ? l$ordering : const {},
    ]);
  }
}

abstract class CopyWith$Input$_Organization_membersInOrganization_stream_cursor_input<
    TRes> {
  factory CopyWith$Input$_Organization_membersInOrganization_stream_cursor_input(
    Input$_Organization_membersInOrganization_stream_cursor_input instance,
    TRes Function(Input$_Organization_membersInOrganization_stream_cursor_input)
        then,
  ) = _CopyWithImpl$Input$_Organization_membersInOrganization_stream_cursor_input;

  factory CopyWith$Input$_Organization_membersInOrganization_stream_cursor_input.stub(
          TRes res) =
      _CopyWithStubImpl$Input$_Organization_membersInOrganization_stream_cursor_input;

  TRes call({
    Input$_Organization_membersInOrganization_stream_cursor_value_input?
        initial_value,
    Enum$cursor_ordering? ordering,
  });
  CopyWith$Input$_Organization_membersInOrganization_stream_cursor_value_input<
      TRes> get initial_value;
}

class _CopyWithImpl$Input$_Organization_membersInOrganization_stream_cursor_input<
        TRes>
    implements
        CopyWith$Input$_Organization_membersInOrganization_stream_cursor_input<
            TRes> {
  _CopyWithImpl$Input$_Organization_membersInOrganization_stream_cursor_input(
    this._instance,
    this._then,
  );

  final Input$_Organization_membersInOrganization_stream_cursor_input _instance;

  final TRes Function(
      Input$_Organization_membersInOrganization_stream_cursor_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? initial_value = _undefined,
    Object? ordering = _undefined,
  }) =>
      _then(Input$_Organization_membersInOrganization_stream_cursor_input._({
        ..._instance._$data,
        if (initial_value != _undefined && initial_value != null)
          'initial_value': (initial_value
              as Input$_Organization_membersInOrganization_stream_cursor_value_input),
        if (ordering != _undefined)
          'ordering': (ordering as Enum$cursor_ordering?),
      }));
  CopyWith$Input$_Organization_membersInOrganization_stream_cursor_value_input<
      TRes> get initial_value {
    final local$initial_value = _instance.initial_value;
    return CopyWith$Input$_Organization_membersInOrganization_stream_cursor_value_input(
        local$initial_value, (e) => call(initial_value: e));
  }
}

class _CopyWithStubImpl$Input$_Organization_membersInOrganization_stream_cursor_input<
        TRes>
    implements
        CopyWith$Input$_Organization_membersInOrganization_stream_cursor_input<
            TRes> {
  _CopyWithStubImpl$Input$_Organization_membersInOrganization_stream_cursor_input(
      this._res);

  TRes _res;

  call({
    Input$_Organization_membersInOrganization_stream_cursor_value_input?
        initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      _res;
  CopyWith$Input$_Organization_membersInOrganization_stream_cursor_value_input<
          TRes>
      get initial_value =>
          CopyWith$Input$_Organization_membersInOrganization_stream_cursor_value_input
              .stub(_res);
}

class Input$_SoulWinningSessionGroup_members_stream_cursor_input {
  factory Input$_SoulWinningSessionGroup_members_stream_cursor_input({
    required Input$_SoulWinningSessionGroup_members_stream_cursor_value_input
        initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      Input$_SoulWinningSessionGroup_members_stream_cursor_input._({
        r'initial_value': initial_value,
        if (ordering != null) r'ordering': ordering,
      });

  Input$_SoulWinningSessionGroup_members_stream_cursor_input._(this._$data);

  factory Input$_SoulWinningSessionGroup_members_stream_cursor_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$initial_value = data['initial_value'];
    result$data['initial_value'] =
        Input$_SoulWinningSessionGroup_members_stream_cursor_value_input
            .fromJson((l$initial_value as Map<String, dynamic>));
    if (data.containsKey('ordering')) {
      final l$ordering = data['ordering'];
      result$data['ordering'] = l$ordering == null
          ? null
          : fromJson$Enum$cursor_ordering((l$ordering as String));
    }
    return Input$_SoulWinningSessionGroup_members_stream_cursor_input._(
        result$data);
  }

  Map<String, dynamic> _$data;

  Input$_SoulWinningSessionGroup_members_stream_cursor_value_input
      get initial_value => (_$data['initial_value']
          as Input$_SoulWinningSessionGroup_members_stream_cursor_value_input);
  Enum$cursor_ordering? get ordering =>
      (_$data['ordering'] as Enum$cursor_ordering?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$initial_value = initial_value;
    result$data['initial_value'] = l$initial_value.toJson();
    if (_$data.containsKey('ordering')) {
      final l$ordering = ordering;
      result$data['ordering'] =
          l$ordering == null ? null : toJson$Enum$cursor_ordering(l$ordering);
    }
    return result$data;
  }

  CopyWith$Input$_SoulWinningSessionGroup_members_stream_cursor_input<
          Input$_SoulWinningSessionGroup_members_stream_cursor_input>
      get copyWith =>
          CopyWith$Input$_SoulWinningSessionGroup_members_stream_cursor_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other
            is Input$_SoulWinningSessionGroup_members_stream_cursor_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$initial_value = initial_value;
    final lOther$initial_value = other.initial_value;
    if (l$initial_value != lOther$initial_value) {
      return false;
    }
    final l$ordering = ordering;
    final lOther$ordering = other.ordering;
    if (_$data.containsKey('ordering') !=
        other._$data.containsKey('ordering')) {
      return false;
    }
    if (l$ordering != lOther$ordering) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$initial_value = initial_value;
    final l$ordering = ordering;
    return Object.hashAll([
      l$initial_value,
      _$data.containsKey('ordering') ? l$ordering : const {},
    ]);
  }
}

abstract class CopyWith$Input$_SoulWinningSessionGroup_members_stream_cursor_input<
    TRes> {
  factory CopyWith$Input$_SoulWinningSessionGroup_members_stream_cursor_input(
    Input$_SoulWinningSessionGroup_members_stream_cursor_input instance,
    TRes Function(Input$_SoulWinningSessionGroup_members_stream_cursor_input)
        then,
  ) = _CopyWithImpl$Input$_SoulWinningSessionGroup_members_stream_cursor_input;

  factory CopyWith$Input$_SoulWinningSessionGroup_members_stream_cursor_input.stub(
          TRes res) =
      _CopyWithStubImpl$Input$_SoulWinningSessionGroup_members_stream_cursor_input;

  TRes call({
    Input$_SoulWinningSessionGroup_members_stream_cursor_value_input?
        initial_value,
    Enum$cursor_ordering? ordering,
  });
  CopyWith$Input$_SoulWinningSessionGroup_members_stream_cursor_value_input<
      TRes> get initial_value;
}

class _CopyWithImpl$Input$_SoulWinningSessionGroup_members_stream_cursor_input<
        TRes>
    implements
        CopyWith$Input$_SoulWinningSessionGroup_members_stream_cursor_input<
            TRes> {
  _CopyWithImpl$Input$_SoulWinningSessionGroup_members_stream_cursor_input(
    this._instance,
    this._then,
  );

  final Input$_SoulWinningSessionGroup_members_stream_cursor_input _instance;

  final TRes Function(
      Input$_SoulWinningSessionGroup_members_stream_cursor_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? initial_value = _undefined,
    Object? ordering = _undefined,
  }) =>
      _then(Input$_SoulWinningSessionGroup_members_stream_cursor_input._({
        ..._instance._$data,
        if (initial_value != _undefined && initial_value != null)
          'initial_value': (initial_value
              as Input$_SoulWinningSessionGroup_members_stream_cursor_value_input),
        if (ordering != _undefined)
          'ordering': (ordering as Enum$cursor_ordering?),
      }));
  CopyWith$Input$_SoulWinningSessionGroup_members_stream_cursor_value_input<
      TRes> get initial_value {
    final local$initial_value = _instance.initial_value;
    return CopyWith$Input$_SoulWinningSessionGroup_members_stream_cursor_value_input(
        local$initial_value, (e) => call(initial_value: e));
  }
}

class _CopyWithStubImpl$Input$_SoulWinningSessionGroup_members_stream_cursor_input<
        TRes>
    implements
        CopyWith$Input$_SoulWinningSessionGroup_members_stream_cursor_input<
            TRes> {
  _CopyWithStubImpl$Input$_SoulWinningSessionGroup_members_stream_cursor_input(
      this._res);

  TRes _res;

  call({
    Input$_SoulWinningSessionGroup_members_stream_cursor_value_input?
        initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      _res;
  CopyWith$Input$_SoulWinningSessionGroup_members_stream_cursor_value_input<
          TRes>
      get initial_value =>
          CopyWith$Input$_SoulWinningSessionGroup_members_stream_cursor_value_input
              .stub(_res);
}

class Input$MapArea_append_input {
  factory Input$MapArea_append_input({String? polygonGeoJson}) =>
      Input$MapArea_append_input._({
        if (polygonGeoJson != null) r'polygonGeoJson': polygonGeoJson,
      });

  Input$MapArea_append_input._(this._$data);

  factory Input$MapArea_append_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('polygonGeoJson')) {
      final l$polygonGeoJson = data['polygonGeoJson'];
      result$data['polygonGeoJson'] = (l$polygonGeoJson as String?);
    }
    return Input$MapArea_append_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get polygonGeoJson => (_$data['polygonGeoJson'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('polygonGeoJson')) {
      final l$polygonGeoJson = polygonGeoJson;
      result$data['polygonGeoJson'] = l$polygonGeoJson;
    }
    return result$data;
  }

  CopyWith$Input$MapArea_append_input<Input$MapArea_append_input>
      get copyWith => CopyWith$Input$MapArea_append_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$MapArea_append_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$polygonGeoJson = polygonGeoJson;
    final lOther$polygonGeoJson = other.polygonGeoJson;
    if (_$data.containsKey('polygonGeoJson') !=
        other._$data.containsKey('polygonGeoJson')) {
      return false;
    }
    if (l$polygonGeoJson != lOther$polygonGeoJson) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$polygonGeoJson = polygonGeoJson;
    return Object.hashAll(
        [_$data.containsKey('polygonGeoJson') ? l$polygonGeoJson : const {}]);
  }
}

abstract class CopyWith$Input$MapArea_append_input<TRes> {
  factory CopyWith$Input$MapArea_append_input(
    Input$MapArea_append_input instance,
    TRes Function(Input$MapArea_append_input) then,
  ) = _CopyWithImpl$Input$MapArea_append_input;

  factory CopyWith$Input$MapArea_append_input.stub(TRes res) =
      _CopyWithStubImpl$Input$MapArea_append_input;

  TRes call({String? polygonGeoJson});
}

class _CopyWithImpl$Input$MapArea_append_input<TRes>
    implements CopyWith$Input$MapArea_append_input<TRes> {
  _CopyWithImpl$Input$MapArea_append_input(
    this._instance,
    this._then,
  );

  final Input$MapArea_append_input _instance;

  final TRes Function(Input$MapArea_append_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? polygonGeoJson = _undefined}) =>
      _then(Input$MapArea_append_input._({
        ..._instance._$data,
        if (polygonGeoJson != _undefined)
          'polygonGeoJson': (polygonGeoJson as String?),
      }));
}

class _CopyWithStubImpl$Input$MapArea_append_input<TRes>
    implements CopyWith$Input$MapArea_append_input<TRes> {
  _CopyWithStubImpl$Input$MapArea_append_input(this._res);

  TRes _res;

  call({String? polygonGeoJson}) => _res;
}

class Input$MapArea_delete_key_input {
  factory Input$MapArea_delete_key_input({String? polygonGeoJson}) =>
      Input$MapArea_delete_key_input._({
        if (polygonGeoJson != null) r'polygonGeoJson': polygonGeoJson,
      });

  Input$MapArea_delete_key_input._(this._$data);

  factory Input$MapArea_delete_key_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('polygonGeoJson')) {
      final l$polygonGeoJson = data['polygonGeoJson'];
      result$data['polygonGeoJson'] = (l$polygonGeoJson as String?);
    }
    return Input$MapArea_delete_key_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get polygonGeoJson => (_$data['polygonGeoJson'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('polygonGeoJson')) {
      final l$polygonGeoJson = polygonGeoJson;
      result$data['polygonGeoJson'] = l$polygonGeoJson;
    }
    return result$data;
  }

  CopyWith$Input$MapArea_delete_key_input<Input$MapArea_delete_key_input>
      get copyWith => CopyWith$Input$MapArea_delete_key_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$MapArea_delete_key_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$polygonGeoJson = polygonGeoJson;
    final lOther$polygonGeoJson = other.polygonGeoJson;
    if (_$data.containsKey('polygonGeoJson') !=
        other._$data.containsKey('polygonGeoJson')) {
      return false;
    }
    if (l$polygonGeoJson != lOther$polygonGeoJson) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$polygonGeoJson = polygonGeoJson;
    return Object.hashAll(
        [_$data.containsKey('polygonGeoJson') ? l$polygonGeoJson : const {}]);
  }
}

abstract class CopyWith$Input$MapArea_delete_key_input<TRes> {
  factory CopyWith$Input$MapArea_delete_key_input(
    Input$MapArea_delete_key_input instance,
    TRes Function(Input$MapArea_delete_key_input) then,
  ) = _CopyWithImpl$Input$MapArea_delete_key_input;

  factory CopyWith$Input$MapArea_delete_key_input.stub(TRes res) =
      _CopyWithStubImpl$Input$MapArea_delete_key_input;

  TRes call({String? polygonGeoJson});
}

class _CopyWithImpl$Input$MapArea_delete_key_input<TRes>
    implements CopyWith$Input$MapArea_delete_key_input<TRes> {
  _CopyWithImpl$Input$MapArea_delete_key_input(
    this._instance,
    this._then,
  );

  final Input$MapArea_delete_key_input _instance;

  final TRes Function(Input$MapArea_delete_key_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? polygonGeoJson = _undefined}) =>
      _then(Input$MapArea_delete_key_input._({
        ..._instance._$data,
        if (polygonGeoJson != _undefined)
          'polygonGeoJson': (polygonGeoJson as String?),
      }));
}

class _CopyWithStubImpl$Input$MapArea_delete_key_input<TRes>
    implements CopyWith$Input$MapArea_delete_key_input<TRes> {
  _CopyWithStubImpl$Input$MapArea_delete_key_input(this._res);

  TRes _res;

  call({String? polygonGeoJson}) => _res;
}

class Input$MapArea_delete_elem_input {
  factory Input$MapArea_delete_elem_input({int? polygonGeoJson}) =>
      Input$MapArea_delete_elem_input._({
        if (polygonGeoJson != null) r'polygonGeoJson': polygonGeoJson,
      });

  Input$MapArea_delete_elem_input._(this._$data);

  factory Input$MapArea_delete_elem_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('polygonGeoJson')) {
      final l$polygonGeoJson = data['polygonGeoJson'];
      result$data['polygonGeoJson'] = (l$polygonGeoJson as int?);
    }
    return Input$MapArea_delete_elem_input._(result$data);
  }

  Map<String, dynamic> _$data;

  int? get polygonGeoJson => (_$data['polygonGeoJson'] as int?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('polygonGeoJson')) {
      final l$polygonGeoJson = polygonGeoJson;
      result$data['polygonGeoJson'] = l$polygonGeoJson;
    }
    return result$data;
  }

  CopyWith$Input$MapArea_delete_elem_input<Input$MapArea_delete_elem_input>
      get copyWith => CopyWith$Input$MapArea_delete_elem_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$MapArea_delete_elem_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$polygonGeoJson = polygonGeoJson;
    final lOther$polygonGeoJson = other.polygonGeoJson;
    if (_$data.containsKey('polygonGeoJson') !=
        other._$data.containsKey('polygonGeoJson')) {
      return false;
    }
    if (l$polygonGeoJson != lOther$polygonGeoJson) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$polygonGeoJson = polygonGeoJson;
    return Object.hashAll(
        [_$data.containsKey('polygonGeoJson') ? l$polygonGeoJson : const {}]);
  }
}

abstract class CopyWith$Input$MapArea_delete_elem_input<TRes> {
  factory CopyWith$Input$MapArea_delete_elem_input(
    Input$MapArea_delete_elem_input instance,
    TRes Function(Input$MapArea_delete_elem_input) then,
  ) = _CopyWithImpl$Input$MapArea_delete_elem_input;

  factory CopyWith$Input$MapArea_delete_elem_input.stub(TRes res) =
      _CopyWithStubImpl$Input$MapArea_delete_elem_input;

  TRes call({int? polygonGeoJson});
}

class _CopyWithImpl$Input$MapArea_delete_elem_input<TRes>
    implements CopyWith$Input$MapArea_delete_elem_input<TRes> {
  _CopyWithImpl$Input$MapArea_delete_elem_input(
    this._instance,
    this._then,
  );

  final Input$MapArea_delete_elem_input _instance;

  final TRes Function(Input$MapArea_delete_elem_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? polygonGeoJson = _undefined}) =>
      _then(Input$MapArea_delete_elem_input._({
        ..._instance._$data,
        if (polygonGeoJson != _undefined)
          'polygonGeoJson': (polygonGeoJson as int?),
      }));
}

class _CopyWithStubImpl$Input$MapArea_delete_elem_input<TRes>
    implements CopyWith$Input$MapArea_delete_elem_input<TRes> {
  _CopyWithStubImpl$Input$MapArea_delete_elem_input(this._res);

  TRes _res;

  call({int? polygonGeoJson}) => _res;
}

class Input$MapArea_delete_at_path_input {
  factory Input$MapArea_delete_at_path_input({List<String>? polygonGeoJson}) =>
      Input$MapArea_delete_at_path_input._({
        if (polygonGeoJson != null) r'polygonGeoJson': polygonGeoJson,
      });

  Input$MapArea_delete_at_path_input._(this._$data);

  factory Input$MapArea_delete_at_path_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('polygonGeoJson')) {
      final l$polygonGeoJson = data['polygonGeoJson'];
      result$data['polygonGeoJson'] = (l$polygonGeoJson as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    return Input$MapArea_delete_at_path_input._(result$data);
  }

  Map<String, dynamic> _$data;

  List<String>? get polygonGeoJson =>
      (_$data['polygonGeoJson'] as List<String>?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('polygonGeoJson')) {
      final l$polygonGeoJson = polygonGeoJson;
      result$data['polygonGeoJson'] = l$polygonGeoJson?.map((e) => e).toList();
    }
    return result$data;
  }

  CopyWith$Input$MapArea_delete_at_path_input<
          Input$MapArea_delete_at_path_input>
      get copyWith => CopyWith$Input$MapArea_delete_at_path_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$MapArea_delete_at_path_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$polygonGeoJson = polygonGeoJson;
    final lOther$polygonGeoJson = other.polygonGeoJson;
    if (_$data.containsKey('polygonGeoJson') !=
        other._$data.containsKey('polygonGeoJson')) {
      return false;
    }
    if (l$polygonGeoJson != null && lOther$polygonGeoJson != null) {
      if (l$polygonGeoJson.length != lOther$polygonGeoJson.length) {
        return false;
      }
      for (int i = 0; i < l$polygonGeoJson.length; i++) {
        final l$polygonGeoJson$entry = l$polygonGeoJson[i];
        final lOther$polygonGeoJson$entry = lOther$polygonGeoJson[i];
        if (l$polygonGeoJson$entry != lOther$polygonGeoJson$entry) {
          return false;
        }
      }
    } else if (l$polygonGeoJson != lOther$polygonGeoJson) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$polygonGeoJson = polygonGeoJson;
    return Object.hashAll([
      _$data.containsKey('polygonGeoJson')
          ? l$polygonGeoJson == null
              ? null
              : Object.hashAll(l$polygonGeoJson.map((v) => v))
          : const {}
    ]);
  }
}

abstract class CopyWith$Input$MapArea_delete_at_path_input<TRes> {
  factory CopyWith$Input$MapArea_delete_at_path_input(
    Input$MapArea_delete_at_path_input instance,
    TRes Function(Input$MapArea_delete_at_path_input) then,
  ) = _CopyWithImpl$Input$MapArea_delete_at_path_input;

  factory CopyWith$Input$MapArea_delete_at_path_input.stub(TRes res) =
      _CopyWithStubImpl$Input$MapArea_delete_at_path_input;

  TRes call({List<String>? polygonGeoJson});
}

class _CopyWithImpl$Input$MapArea_delete_at_path_input<TRes>
    implements CopyWith$Input$MapArea_delete_at_path_input<TRes> {
  _CopyWithImpl$Input$MapArea_delete_at_path_input(
    this._instance,
    this._then,
  );

  final Input$MapArea_delete_at_path_input _instance;

  final TRes Function(Input$MapArea_delete_at_path_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? polygonGeoJson = _undefined}) =>
      _then(Input$MapArea_delete_at_path_input._({
        ..._instance._$data,
        if (polygonGeoJson != _undefined)
          'polygonGeoJson': (polygonGeoJson as List<String>?),
      }));
}

class _CopyWithStubImpl$Input$MapArea_delete_at_path_input<TRes>
    implements CopyWith$Input$MapArea_delete_at_path_input<TRes> {
  _CopyWithStubImpl$Input$MapArea_delete_at_path_input(this._res);

  TRes _res;

  call({List<String>? polygonGeoJson}) => _res;
}

class Input$Encounter_arr_rel_insert_input {
  factory Input$Encounter_arr_rel_insert_input({
    required List<Input$Encounter_insert_input> data,
    Input$Encounter_on_conflict? on_conflict,
  }) =>
      Input$Encounter_arr_rel_insert_input._({
        r'data': data,
        if (on_conflict != null) r'on_conflict': on_conflict,
      });

  Input$Encounter_arr_rel_insert_input._(this._$data);

  factory Input$Encounter_arr_rel_insert_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$data = data['data'];
    result$data['data'] = (l$data as List<dynamic>)
        .map((e) =>
            Input$Encounter_insert_input.fromJson((e as Map<String, dynamic>)))
        .toList();
    if (data.containsKey('on_conflict')) {
      final l$on_conflict = data['on_conflict'];
      result$data['on_conflict'] = l$on_conflict == null
          ? null
          : Input$Encounter_on_conflict.fromJson(
              (l$on_conflict as Map<String, dynamic>));
    }
    return Input$Encounter_arr_rel_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$Encounter_insert_input> get data =>
      (_$data['data'] as List<Input$Encounter_insert_input>);
  Input$Encounter_on_conflict? get on_conflict =>
      (_$data['on_conflict'] as Input$Encounter_on_conflict?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$data = data;
    result$data['data'] = l$data.map((e) => e.toJson()).toList();
    if (_$data.containsKey('on_conflict')) {
      final l$on_conflict = on_conflict;
      result$data['on_conflict'] = l$on_conflict?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$Encounter_arr_rel_insert_input<
          Input$Encounter_arr_rel_insert_input>
      get copyWith => CopyWith$Input$Encounter_arr_rel_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Encounter_arr_rel_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$data = data;
    final lOther$data = other.data;
    if (l$data.length != lOther$data.length) {
      return false;
    }
    for (int i = 0; i < l$data.length; i++) {
      final l$data$entry = l$data[i];
      final lOther$data$entry = lOther$data[i];
      if (l$data$entry != lOther$data$entry) {
        return false;
      }
    }
    final l$on_conflict = on_conflict;
    final lOther$on_conflict = other.on_conflict;
    if (_$data.containsKey('on_conflict') !=
        other._$data.containsKey('on_conflict')) {
      return false;
    }
    if (l$on_conflict != lOther$on_conflict) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$data = data;
    final l$on_conflict = on_conflict;
    return Object.hashAll([
      Object.hashAll(l$data.map((v) => v)),
      _$data.containsKey('on_conflict') ? l$on_conflict : const {},
    ]);
  }
}

abstract class CopyWith$Input$Encounter_arr_rel_insert_input<TRes> {
  factory CopyWith$Input$Encounter_arr_rel_insert_input(
    Input$Encounter_arr_rel_insert_input instance,
    TRes Function(Input$Encounter_arr_rel_insert_input) then,
  ) = _CopyWithImpl$Input$Encounter_arr_rel_insert_input;

  factory CopyWith$Input$Encounter_arr_rel_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$Encounter_arr_rel_insert_input;

  TRes call({
    List<Input$Encounter_insert_input>? data,
    Input$Encounter_on_conflict? on_conflict,
  });
  TRes data(
      Iterable<Input$Encounter_insert_input> Function(
              Iterable<
                  CopyWith$Input$Encounter_insert_input<
                      Input$Encounter_insert_input>>)
          _fn);
  CopyWith$Input$Encounter_on_conflict<TRes> get on_conflict;
}

class _CopyWithImpl$Input$Encounter_arr_rel_insert_input<TRes>
    implements CopyWith$Input$Encounter_arr_rel_insert_input<TRes> {
  _CopyWithImpl$Input$Encounter_arr_rel_insert_input(
    this._instance,
    this._then,
  );

  final Input$Encounter_arr_rel_insert_input _instance;

  final TRes Function(Input$Encounter_arr_rel_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? data = _undefined,
    Object? on_conflict = _undefined,
  }) =>
      _then(Input$Encounter_arr_rel_insert_input._({
        ..._instance._$data,
        if (data != _undefined && data != null)
          'data': (data as List<Input$Encounter_insert_input>),
        if (on_conflict != _undefined)
          'on_conflict': (on_conflict as Input$Encounter_on_conflict?),
      }));
  TRes data(
          Iterable<Input$Encounter_insert_input> Function(
                  Iterable<
                      CopyWith$Input$Encounter_insert_input<
                          Input$Encounter_insert_input>>)
              _fn) =>
      call(
          data: _fn(
              _instance.data.map((e) => CopyWith$Input$Encounter_insert_input(
                    e,
                    (i) => i,
                  ))).toList());
  CopyWith$Input$Encounter_on_conflict<TRes> get on_conflict {
    final local$on_conflict = _instance.on_conflict;
    return local$on_conflict == null
        ? CopyWith$Input$Encounter_on_conflict.stub(_then(_instance))
        : CopyWith$Input$Encounter_on_conflict(
            local$on_conflict, (e) => call(on_conflict: e));
  }
}

class _CopyWithStubImpl$Input$Encounter_arr_rel_insert_input<TRes>
    implements CopyWith$Input$Encounter_arr_rel_insert_input<TRes> {
  _CopyWithStubImpl$Input$Encounter_arr_rel_insert_input(this._res);

  TRes _res;

  call({
    List<Input$Encounter_insert_input>? data,
    Input$Encounter_on_conflict? on_conflict,
  }) =>
      _res;
  data(_fn) => _res;
  CopyWith$Input$Encounter_on_conflict<TRes> get on_conflict =>
      CopyWith$Input$Encounter_on_conflict.stub(_res);
}

class Input$Event_arr_rel_insert_input {
  factory Input$Event_arr_rel_insert_input({
    required List<Input$Event_insert_input> data,
    Input$Event_on_conflict? on_conflict,
  }) =>
      Input$Event_arr_rel_insert_input._({
        r'data': data,
        if (on_conflict != null) r'on_conflict': on_conflict,
      });

  Input$Event_arr_rel_insert_input._(this._$data);

  factory Input$Event_arr_rel_insert_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$data = data['data'];
    result$data['data'] = (l$data as List<dynamic>)
        .map((e) =>
            Input$Event_insert_input.fromJson((e as Map<String, dynamic>)))
        .toList();
    if (data.containsKey('on_conflict')) {
      final l$on_conflict = data['on_conflict'];
      result$data['on_conflict'] = l$on_conflict == null
          ? null
          : Input$Event_on_conflict.fromJson(
              (l$on_conflict as Map<String, dynamic>));
    }
    return Input$Event_arr_rel_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$Event_insert_input> get data =>
      (_$data['data'] as List<Input$Event_insert_input>);
  Input$Event_on_conflict? get on_conflict =>
      (_$data['on_conflict'] as Input$Event_on_conflict?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$data = data;
    result$data['data'] = l$data.map((e) => e.toJson()).toList();
    if (_$data.containsKey('on_conflict')) {
      final l$on_conflict = on_conflict;
      result$data['on_conflict'] = l$on_conflict?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$Event_arr_rel_insert_input<Input$Event_arr_rel_insert_input>
      get copyWith => CopyWith$Input$Event_arr_rel_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Event_arr_rel_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$data = data;
    final lOther$data = other.data;
    if (l$data.length != lOther$data.length) {
      return false;
    }
    for (int i = 0; i < l$data.length; i++) {
      final l$data$entry = l$data[i];
      final lOther$data$entry = lOther$data[i];
      if (l$data$entry != lOther$data$entry) {
        return false;
      }
    }
    final l$on_conflict = on_conflict;
    final lOther$on_conflict = other.on_conflict;
    if (_$data.containsKey('on_conflict') !=
        other._$data.containsKey('on_conflict')) {
      return false;
    }
    if (l$on_conflict != lOther$on_conflict) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$data = data;
    final l$on_conflict = on_conflict;
    return Object.hashAll([
      Object.hashAll(l$data.map((v) => v)),
      _$data.containsKey('on_conflict') ? l$on_conflict : const {},
    ]);
  }
}

abstract class CopyWith$Input$Event_arr_rel_insert_input<TRes> {
  factory CopyWith$Input$Event_arr_rel_insert_input(
    Input$Event_arr_rel_insert_input instance,
    TRes Function(Input$Event_arr_rel_insert_input) then,
  ) = _CopyWithImpl$Input$Event_arr_rel_insert_input;

  factory CopyWith$Input$Event_arr_rel_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$Event_arr_rel_insert_input;

  TRes call({
    List<Input$Event_insert_input>? data,
    Input$Event_on_conflict? on_conflict,
  });
  TRes data(
      Iterable<Input$Event_insert_input> Function(
              Iterable<
                  CopyWith$Input$Event_insert_input<Input$Event_insert_input>>)
          _fn);
  CopyWith$Input$Event_on_conflict<TRes> get on_conflict;
}

class _CopyWithImpl$Input$Event_arr_rel_insert_input<TRes>
    implements CopyWith$Input$Event_arr_rel_insert_input<TRes> {
  _CopyWithImpl$Input$Event_arr_rel_insert_input(
    this._instance,
    this._then,
  );

  final Input$Event_arr_rel_insert_input _instance;

  final TRes Function(Input$Event_arr_rel_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? data = _undefined,
    Object? on_conflict = _undefined,
  }) =>
      _then(Input$Event_arr_rel_insert_input._({
        ..._instance._$data,
        if (data != _undefined && data != null)
          'data': (data as List<Input$Event_insert_input>),
        if (on_conflict != _undefined)
          'on_conflict': (on_conflict as Input$Event_on_conflict?),
      }));
  TRes data(
          Iterable<Input$Event_insert_input> Function(
                  Iterable<
                      CopyWith$Input$Event_insert_input<
                          Input$Event_insert_input>>)
              _fn) =>
      call(
          data: _fn(_instance.data.map((e) => CopyWith$Input$Event_insert_input(
                e,
                (i) => i,
              ))).toList());
  CopyWith$Input$Event_on_conflict<TRes> get on_conflict {
    final local$on_conflict = _instance.on_conflict;
    return local$on_conflict == null
        ? CopyWith$Input$Event_on_conflict.stub(_then(_instance))
        : CopyWith$Input$Event_on_conflict(
            local$on_conflict, (e) => call(on_conflict: e));
  }
}

class _CopyWithStubImpl$Input$Event_arr_rel_insert_input<TRes>
    implements CopyWith$Input$Event_arr_rel_insert_input<TRes> {
  _CopyWithStubImpl$Input$Event_arr_rel_insert_input(this._res);

  TRes _res;

  call({
    List<Input$Event_insert_input>? data,
    Input$Event_on_conflict? on_conflict,
  }) =>
      _res;
  data(_fn) => _res;
  CopyWith$Input$Event_on_conflict<TRes> get on_conflict =>
      CopyWith$Input$Event_on_conflict.stub(_res);
}

class Input$Map_arr_rel_insert_input {
  factory Input$Map_arr_rel_insert_input({
    required List<Input$Map_insert_input> data,
    Input$Map_on_conflict? on_conflict,
  }) =>
      Input$Map_arr_rel_insert_input._({
        r'data': data,
        if (on_conflict != null) r'on_conflict': on_conflict,
      });

  Input$Map_arr_rel_insert_input._(this._$data);

  factory Input$Map_arr_rel_insert_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$data = data['data'];
    result$data['data'] = (l$data as List<dynamic>)
        .map(
            (e) => Input$Map_insert_input.fromJson((e as Map<String, dynamic>)))
        .toList();
    if (data.containsKey('on_conflict')) {
      final l$on_conflict = data['on_conflict'];
      result$data['on_conflict'] = l$on_conflict == null
          ? null
          : Input$Map_on_conflict.fromJson(
              (l$on_conflict as Map<String, dynamic>));
    }
    return Input$Map_arr_rel_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$Map_insert_input> get data =>
      (_$data['data'] as List<Input$Map_insert_input>);
  Input$Map_on_conflict? get on_conflict =>
      (_$data['on_conflict'] as Input$Map_on_conflict?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$data = data;
    result$data['data'] = l$data.map((e) => e.toJson()).toList();
    if (_$data.containsKey('on_conflict')) {
      final l$on_conflict = on_conflict;
      result$data['on_conflict'] = l$on_conflict?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$Map_arr_rel_insert_input<Input$Map_arr_rel_insert_input>
      get copyWith => CopyWith$Input$Map_arr_rel_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Map_arr_rel_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$data = data;
    final lOther$data = other.data;
    if (l$data.length != lOther$data.length) {
      return false;
    }
    for (int i = 0; i < l$data.length; i++) {
      final l$data$entry = l$data[i];
      final lOther$data$entry = lOther$data[i];
      if (l$data$entry != lOther$data$entry) {
        return false;
      }
    }
    final l$on_conflict = on_conflict;
    final lOther$on_conflict = other.on_conflict;
    if (_$data.containsKey('on_conflict') !=
        other._$data.containsKey('on_conflict')) {
      return false;
    }
    if (l$on_conflict != lOther$on_conflict) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$data = data;
    final l$on_conflict = on_conflict;
    return Object.hashAll([
      Object.hashAll(l$data.map((v) => v)),
      _$data.containsKey('on_conflict') ? l$on_conflict : const {},
    ]);
  }
}

abstract class CopyWith$Input$Map_arr_rel_insert_input<TRes> {
  factory CopyWith$Input$Map_arr_rel_insert_input(
    Input$Map_arr_rel_insert_input instance,
    TRes Function(Input$Map_arr_rel_insert_input) then,
  ) = _CopyWithImpl$Input$Map_arr_rel_insert_input;

  factory CopyWith$Input$Map_arr_rel_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$Map_arr_rel_insert_input;

  TRes call({
    List<Input$Map_insert_input>? data,
    Input$Map_on_conflict? on_conflict,
  });
  TRes data(
      Iterable<Input$Map_insert_input> Function(
              Iterable<CopyWith$Input$Map_insert_input<Input$Map_insert_input>>)
          _fn);
  CopyWith$Input$Map_on_conflict<TRes> get on_conflict;
}

class _CopyWithImpl$Input$Map_arr_rel_insert_input<TRes>
    implements CopyWith$Input$Map_arr_rel_insert_input<TRes> {
  _CopyWithImpl$Input$Map_arr_rel_insert_input(
    this._instance,
    this._then,
  );

  final Input$Map_arr_rel_insert_input _instance;

  final TRes Function(Input$Map_arr_rel_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? data = _undefined,
    Object? on_conflict = _undefined,
  }) =>
      _then(Input$Map_arr_rel_insert_input._({
        ..._instance._$data,
        if (data != _undefined && data != null)
          'data': (data as List<Input$Map_insert_input>),
        if (on_conflict != _undefined)
          'on_conflict': (on_conflict as Input$Map_on_conflict?),
      }));
  TRes data(
          Iterable<Input$Map_insert_input> Function(
                  Iterable<
                      CopyWith$Input$Map_insert_input<Input$Map_insert_input>>)
              _fn) =>
      call(
          data: _fn(_instance.data.map((e) => CopyWith$Input$Map_insert_input(
                e,
                (i) => i,
              ))).toList());
  CopyWith$Input$Map_on_conflict<TRes> get on_conflict {
    final local$on_conflict = _instance.on_conflict;
    return local$on_conflict == null
        ? CopyWith$Input$Map_on_conflict.stub(_then(_instance))
        : CopyWith$Input$Map_on_conflict(
            local$on_conflict, (e) => call(on_conflict: e));
  }
}

class _CopyWithStubImpl$Input$Map_arr_rel_insert_input<TRes>
    implements CopyWith$Input$Map_arr_rel_insert_input<TRes> {
  _CopyWithStubImpl$Input$Map_arr_rel_insert_input(this._res);

  TRes _res;

  call({
    List<Input$Map_insert_input>? data,
    Input$Map_on_conflict? on_conflict,
  }) =>
      _res;
  data(_fn) => _res;
  CopyWith$Input$Map_on_conflict<TRes> get on_conflict =>
      CopyWith$Input$Map_on_conflict.stub(_res);
}

class Input$MapArea_arr_rel_insert_input {
  factory Input$MapArea_arr_rel_insert_input({
    required List<Input$MapArea_insert_input> data,
    Input$MapArea_on_conflict? on_conflict,
  }) =>
      Input$MapArea_arr_rel_insert_input._({
        r'data': data,
        if (on_conflict != null) r'on_conflict': on_conflict,
      });

  Input$MapArea_arr_rel_insert_input._(this._$data);

  factory Input$MapArea_arr_rel_insert_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$data = data['data'];
    result$data['data'] = (l$data as List<dynamic>)
        .map((e) =>
            Input$MapArea_insert_input.fromJson((e as Map<String, dynamic>)))
        .toList();
    if (data.containsKey('on_conflict')) {
      final l$on_conflict = data['on_conflict'];
      result$data['on_conflict'] = l$on_conflict == null
          ? null
          : Input$MapArea_on_conflict.fromJson(
              (l$on_conflict as Map<String, dynamic>));
    }
    return Input$MapArea_arr_rel_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$MapArea_insert_input> get data =>
      (_$data['data'] as List<Input$MapArea_insert_input>);
  Input$MapArea_on_conflict? get on_conflict =>
      (_$data['on_conflict'] as Input$MapArea_on_conflict?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$data = data;
    result$data['data'] = l$data.map((e) => e.toJson()).toList();
    if (_$data.containsKey('on_conflict')) {
      final l$on_conflict = on_conflict;
      result$data['on_conflict'] = l$on_conflict?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$MapArea_arr_rel_insert_input<
          Input$MapArea_arr_rel_insert_input>
      get copyWith => CopyWith$Input$MapArea_arr_rel_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$MapArea_arr_rel_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$data = data;
    final lOther$data = other.data;
    if (l$data.length != lOther$data.length) {
      return false;
    }
    for (int i = 0; i < l$data.length; i++) {
      final l$data$entry = l$data[i];
      final lOther$data$entry = lOther$data[i];
      if (l$data$entry != lOther$data$entry) {
        return false;
      }
    }
    final l$on_conflict = on_conflict;
    final lOther$on_conflict = other.on_conflict;
    if (_$data.containsKey('on_conflict') !=
        other._$data.containsKey('on_conflict')) {
      return false;
    }
    if (l$on_conflict != lOther$on_conflict) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$data = data;
    final l$on_conflict = on_conflict;
    return Object.hashAll([
      Object.hashAll(l$data.map((v) => v)),
      _$data.containsKey('on_conflict') ? l$on_conflict : const {},
    ]);
  }
}

abstract class CopyWith$Input$MapArea_arr_rel_insert_input<TRes> {
  factory CopyWith$Input$MapArea_arr_rel_insert_input(
    Input$MapArea_arr_rel_insert_input instance,
    TRes Function(Input$MapArea_arr_rel_insert_input) then,
  ) = _CopyWithImpl$Input$MapArea_arr_rel_insert_input;

  factory CopyWith$Input$MapArea_arr_rel_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$MapArea_arr_rel_insert_input;

  TRes call({
    List<Input$MapArea_insert_input>? data,
    Input$MapArea_on_conflict? on_conflict,
  });
  TRes data(
      Iterable<Input$MapArea_insert_input> Function(
              Iterable<
                  CopyWith$Input$MapArea_insert_input<
                      Input$MapArea_insert_input>>)
          _fn);
  CopyWith$Input$MapArea_on_conflict<TRes> get on_conflict;
}

class _CopyWithImpl$Input$MapArea_arr_rel_insert_input<TRes>
    implements CopyWith$Input$MapArea_arr_rel_insert_input<TRes> {
  _CopyWithImpl$Input$MapArea_arr_rel_insert_input(
    this._instance,
    this._then,
  );

  final Input$MapArea_arr_rel_insert_input _instance;

  final TRes Function(Input$MapArea_arr_rel_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? data = _undefined,
    Object? on_conflict = _undefined,
  }) =>
      _then(Input$MapArea_arr_rel_insert_input._({
        ..._instance._$data,
        if (data != _undefined && data != null)
          'data': (data as List<Input$MapArea_insert_input>),
        if (on_conflict != _undefined)
          'on_conflict': (on_conflict as Input$MapArea_on_conflict?),
      }));
  TRes data(
          Iterable<Input$MapArea_insert_input> Function(
                  Iterable<
                      CopyWith$Input$MapArea_insert_input<
                          Input$MapArea_insert_input>>)
              _fn) =>
      call(
          data:
              _fn(_instance.data.map((e) => CopyWith$Input$MapArea_insert_input(
                    e,
                    (i) => i,
                  ))).toList());
  CopyWith$Input$MapArea_on_conflict<TRes> get on_conflict {
    final local$on_conflict = _instance.on_conflict;
    return local$on_conflict == null
        ? CopyWith$Input$MapArea_on_conflict.stub(_then(_instance))
        : CopyWith$Input$MapArea_on_conflict(
            local$on_conflict, (e) => call(on_conflict: e));
  }
}

class _CopyWithStubImpl$Input$MapArea_arr_rel_insert_input<TRes>
    implements CopyWith$Input$MapArea_arr_rel_insert_input<TRes> {
  _CopyWithStubImpl$Input$MapArea_arr_rel_insert_input(this._res);

  TRes _res;

  call({
    List<Input$MapArea_insert_input>? data,
    Input$MapArea_on_conflict? on_conflict,
  }) =>
      _res;
  data(_fn) => _res;
  CopyWith$Input$MapArea_on_conflict<TRes> get on_conflict =>
      CopyWith$Input$MapArea_on_conflict.stub(_res);
}

class Input$SavedPerson_arr_rel_insert_input {
  factory Input$SavedPerson_arr_rel_insert_input({
    required List<Input$SavedPerson_insert_input> data,
    Input$SavedPerson_on_conflict? on_conflict,
  }) =>
      Input$SavedPerson_arr_rel_insert_input._({
        r'data': data,
        if (on_conflict != null) r'on_conflict': on_conflict,
      });

  Input$SavedPerson_arr_rel_insert_input._(this._$data);

  factory Input$SavedPerson_arr_rel_insert_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$data = data['data'];
    result$data['data'] = (l$data as List<dynamic>)
        .map((e) => Input$SavedPerson_insert_input.fromJson(
            (e as Map<String, dynamic>)))
        .toList();
    if (data.containsKey('on_conflict')) {
      final l$on_conflict = data['on_conflict'];
      result$data['on_conflict'] = l$on_conflict == null
          ? null
          : Input$SavedPerson_on_conflict.fromJson(
              (l$on_conflict as Map<String, dynamic>));
    }
    return Input$SavedPerson_arr_rel_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$SavedPerson_insert_input> get data =>
      (_$data['data'] as List<Input$SavedPerson_insert_input>);
  Input$SavedPerson_on_conflict? get on_conflict =>
      (_$data['on_conflict'] as Input$SavedPerson_on_conflict?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$data = data;
    result$data['data'] = l$data.map((e) => e.toJson()).toList();
    if (_$data.containsKey('on_conflict')) {
      final l$on_conflict = on_conflict;
      result$data['on_conflict'] = l$on_conflict?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$SavedPerson_arr_rel_insert_input<
          Input$SavedPerson_arr_rel_insert_input>
      get copyWith => CopyWith$Input$SavedPerson_arr_rel_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SavedPerson_arr_rel_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$data = data;
    final lOther$data = other.data;
    if (l$data.length != lOther$data.length) {
      return false;
    }
    for (int i = 0; i < l$data.length; i++) {
      final l$data$entry = l$data[i];
      final lOther$data$entry = lOther$data[i];
      if (l$data$entry != lOther$data$entry) {
        return false;
      }
    }
    final l$on_conflict = on_conflict;
    final lOther$on_conflict = other.on_conflict;
    if (_$data.containsKey('on_conflict') !=
        other._$data.containsKey('on_conflict')) {
      return false;
    }
    if (l$on_conflict != lOther$on_conflict) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$data = data;
    final l$on_conflict = on_conflict;
    return Object.hashAll([
      Object.hashAll(l$data.map((v) => v)),
      _$data.containsKey('on_conflict') ? l$on_conflict : const {},
    ]);
  }
}

abstract class CopyWith$Input$SavedPerson_arr_rel_insert_input<TRes> {
  factory CopyWith$Input$SavedPerson_arr_rel_insert_input(
    Input$SavedPerson_arr_rel_insert_input instance,
    TRes Function(Input$SavedPerson_arr_rel_insert_input) then,
  ) = _CopyWithImpl$Input$SavedPerson_arr_rel_insert_input;

  factory CopyWith$Input$SavedPerson_arr_rel_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$SavedPerson_arr_rel_insert_input;

  TRes call({
    List<Input$SavedPerson_insert_input>? data,
    Input$SavedPerson_on_conflict? on_conflict,
  });
  TRes data(
      Iterable<Input$SavedPerson_insert_input> Function(
              Iterable<
                  CopyWith$Input$SavedPerson_insert_input<
                      Input$SavedPerson_insert_input>>)
          _fn);
  CopyWith$Input$SavedPerson_on_conflict<TRes> get on_conflict;
}

class _CopyWithImpl$Input$SavedPerson_arr_rel_insert_input<TRes>
    implements CopyWith$Input$SavedPerson_arr_rel_insert_input<TRes> {
  _CopyWithImpl$Input$SavedPerson_arr_rel_insert_input(
    this._instance,
    this._then,
  );

  final Input$SavedPerson_arr_rel_insert_input _instance;

  final TRes Function(Input$SavedPerson_arr_rel_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? data = _undefined,
    Object? on_conflict = _undefined,
  }) =>
      _then(Input$SavedPerson_arr_rel_insert_input._({
        ..._instance._$data,
        if (data != _undefined && data != null)
          'data': (data as List<Input$SavedPerson_insert_input>),
        if (on_conflict != _undefined)
          'on_conflict': (on_conflict as Input$SavedPerson_on_conflict?),
      }));
  TRes data(
          Iterable<Input$SavedPerson_insert_input> Function(
                  Iterable<
                      CopyWith$Input$SavedPerson_insert_input<
                          Input$SavedPerson_insert_input>>)
              _fn) =>
      call(
          data: _fn(
              _instance.data.map((e) => CopyWith$Input$SavedPerson_insert_input(
                    e,
                    (i) => i,
                  ))).toList());
  CopyWith$Input$SavedPerson_on_conflict<TRes> get on_conflict {
    final local$on_conflict = _instance.on_conflict;
    return local$on_conflict == null
        ? CopyWith$Input$SavedPerson_on_conflict.stub(_then(_instance))
        : CopyWith$Input$SavedPerson_on_conflict(
            local$on_conflict, (e) => call(on_conflict: e));
  }
}

class _CopyWithStubImpl$Input$SavedPerson_arr_rel_insert_input<TRes>
    implements CopyWith$Input$SavedPerson_arr_rel_insert_input<TRes> {
  _CopyWithStubImpl$Input$SavedPerson_arr_rel_insert_input(this._res);

  TRes _res;

  call({
    List<Input$SavedPerson_insert_input>? data,
    Input$SavedPerson_on_conflict? on_conflict,
  }) =>
      _res;
  data(_fn) => _res;
  CopyWith$Input$SavedPerson_on_conflict<TRes> get on_conflict =>
      CopyWith$Input$SavedPerson_on_conflict.stub(_res);
}

class Input$SoulWinningSession_arr_rel_insert_input {
  factory Input$SoulWinningSession_arr_rel_insert_input({
    required List<Input$SoulWinningSession_insert_input> data,
    Input$SoulWinningSession_on_conflict? on_conflict,
  }) =>
      Input$SoulWinningSession_arr_rel_insert_input._({
        r'data': data,
        if (on_conflict != null) r'on_conflict': on_conflict,
      });

  Input$SoulWinningSession_arr_rel_insert_input._(this._$data);

  factory Input$SoulWinningSession_arr_rel_insert_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$data = data['data'];
    result$data['data'] = (l$data as List<dynamic>)
        .map((e) => Input$SoulWinningSession_insert_input.fromJson(
            (e as Map<String, dynamic>)))
        .toList();
    if (data.containsKey('on_conflict')) {
      final l$on_conflict = data['on_conflict'];
      result$data['on_conflict'] = l$on_conflict == null
          ? null
          : Input$SoulWinningSession_on_conflict.fromJson(
              (l$on_conflict as Map<String, dynamic>));
    }
    return Input$SoulWinningSession_arr_rel_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$SoulWinningSession_insert_input> get data =>
      (_$data['data'] as List<Input$SoulWinningSession_insert_input>);
  Input$SoulWinningSession_on_conflict? get on_conflict =>
      (_$data['on_conflict'] as Input$SoulWinningSession_on_conflict?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$data = data;
    result$data['data'] = l$data.map((e) => e.toJson()).toList();
    if (_$data.containsKey('on_conflict')) {
      final l$on_conflict = on_conflict;
      result$data['on_conflict'] = l$on_conflict?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$SoulWinningSession_arr_rel_insert_input<
          Input$SoulWinningSession_arr_rel_insert_input>
      get copyWith => CopyWith$Input$SoulWinningSession_arr_rel_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SoulWinningSession_arr_rel_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$data = data;
    final lOther$data = other.data;
    if (l$data.length != lOther$data.length) {
      return false;
    }
    for (int i = 0; i < l$data.length; i++) {
      final l$data$entry = l$data[i];
      final lOther$data$entry = lOther$data[i];
      if (l$data$entry != lOther$data$entry) {
        return false;
      }
    }
    final l$on_conflict = on_conflict;
    final lOther$on_conflict = other.on_conflict;
    if (_$data.containsKey('on_conflict') !=
        other._$data.containsKey('on_conflict')) {
      return false;
    }
    if (l$on_conflict != lOther$on_conflict) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$data = data;
    final l$on_conflict = on_conflict;
    return Object.hashAll([
      Object.hashAll(l$data.map((v) => v)),
      _$data.containsKey('on_conflict') ? l$on_conflict : const {},
    ]);
  }
}

abstract class CopyWith$Input$SoulWinningSession_arr_rel_insert_input<TRes> {
  factory CopyWith$Input$SoulWinningSession_arr_rel_insert_input(
    Input$SoulWinningSession_arr_rel_insert_input instance,
    TRes Function(Input$SoulWinningSession_arr_rel_insert_input) then,
  ) = _CopyWithImpl$Input$SoulWinningSession_arr_rel_insert_input;

  factory CopyWith$Input$SoulWinningSession_arr_rel_insert_input.stub(
          TRes res) =
      _CopyWithStubImpl$Input$SoulWinningSession_arr_rel_insert_input;

  TRes call({
    List<Input$SoulWinningSession_insert_input>? data,
    Input$SoulWinningSession_on_conflict? on_conflict,
  });
  TRes data(
      Iterable<Input$SoulWinningSession_insert_input> Function(
              Iterable<
                  CopyWith$Input$SoulWinningSession_insert_input<
                      Input$SoulWinningSession_insert_input>>)
          _fn);
  CopyWith$Input$SoulWinningSession_on_conflict<TRes> get on_conflict;
}

class _CopyWithImpl$Input$SoulWinningSession_arr_rel_insert_input<TRes>
    implements CopyWith$Input$SoulWinningSession_arr_rel_insert_input<TRes> {
  _CopyWithImpl$Input$SoulWinningSession_arr_rel_insert_input(
    this._instance,
    this._then,
  );

  final Input$SoulWinningSession_arr_rel_insert_input _instance;

  final TRes Function(Input$SoulWinningSession_arr_rel_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? data = _undefined,
    Object? on_conflict = _undefined,
  }) =>
      _then(Input$SoulWinningSession_arr_rel_insert_input._({
        ..._instance._$data,
        if (data != _undefined && data != null)
          'data': (data as List<Input$SoulWinningSession_insert_input>),
        if (on_conflict != _undefined)
          'on_conflict': (on_conflict as Input$SoulWinningSession_on_conflict?),
      }));
  TRes data(
          Iterable<Input$SoulWinningSession_insert_input> Function(
                  Iterable<
                      CopyWith$Input$SoulWinningSession_insert_input<
                          Input$SoulWinningSession_insert_input>>)
              _fn) =>
      call(
          data: _fn(_instance.data
              .map((e) => CopyWith$Input$SoulWinningSession_insert_input(
                    e,
                    (i) => i,
                  ))).toList());
  CopyWith$Input$SoulWinningSession_on_conflict<TRes> get on_conflict {
    final local$on_conflict = _instance.on_conflict;
    return local$on_conflict == null
        ? CopyWith$Input$SoulWinningSession_on_conflict.stub(_then(_instance))
        : CopyWith$Input$SoulWinningSession_on_conflict(
            local$on_conflict, (e) => call(on_conflict: e));
  }
}

class _CopyWithStubImpl$Input$SoulWinningSession_arr_rel_insert_input<TRes>
    implements CopyWith$Input$SoulWinningSession_arr_rel_insert_input<TRes> {
  _CopyWithStubImpl$Input$SoulWinningSession_arr_rel_insert_input(this._res);

  TRes _res;

  call({
    List<Input$SoulWinningSession_insert_input>? data,
    Input$SoulWinningSession_on_conflict? on_conflict,
  }) =>
      _res;
  data(_fn) => _res;
  CopyWith$Input$SoulWinningSession_on_conflict<TRes> get on_conflict =>
      CopyWith$Input$SoulWinningSession_on_conflict.stub(_res);
}

class Input$SoulWinningSessionGroup_arr_rel_insert_input {
  factory Input$SoulWinningSessionGroup_arr_rel_insert_input({
    required List<Input$SoulWinningSessionGroup_insert_input> data,
    Input$SoulWinningSessionGroup_on_conflict? on_conflict,
  }) =>
      Input$SoulWinningSessionGroup_arr_rel_insert_input._({
        r'data': data,
        if (on_conflict != null) r'on_conflict': on_conflict,
      });

  Input$SoulWinningSessionGroup_arr_rel_insert_input._(this._$data);

  factory Input$SoulWinningSessionGroup_arr_rel_insert_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$data = data['data'];
    result$data['data'] = (l$data as List<dynamic>)
        .map((e) => Input$SoulWinningSessionGroup_insert_input.fromJson(
            (e as Map<String, dynamic>)))
        .toList();
    if (data.containsKey('on_conflict')) {
      final l$on_conflict = data['on_conflict'];
      result$data['on_conflict'] = l$on_conflict == null
          ? null
          : Input$SoulWinningSessionGroup_on_conflict.fromJson(
              (l$on_conflict as Map<String, dynamic>));
    }
    return Input$SoulWinningSessionGroup_arr_rel_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$SoulWinningSessionGroup_insert_input> get data =>
      (_$data['data'] as List<Input$SoulWinningSessionGroup_insert_input>);
  Input$SoulWinningSessionGroup_on_conflict? get on_conflict =>
      (_$data['on_conflict'] as Input$SoulWinningSessionGroup_on_conflict?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$data = data;
    result$data['data'] = l$data.map((e) => e.toJson()).toList();
    if (_$data.containsKey('on_conflict')) {
      final l$on_conflict = on_conflict;
      result$data['on_conflict'] = l$on_conflict?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$SoulWinningSessionGroup_arr_rel_insert_input<
          Input$SoulWinningSessionGroup_arr_rel_insert_input>
      get copyWith =>
          CopyWith$Input$SoulWinningSessionGroup_arr_rel_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SoulWinningSessionGroup_arr_rel_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$data = data;
    final lOther$data = other.data;
    if (l$data.length != lOther$data.length) {
      return false;
    }
    for (int i = 0; i < l$data.length; i++) {
      final l$data$entry = l$data[i];
      final lOther$data$entry = lOther$data[i];
      if (l$data$entry != lOther$data$entry) {
        return false;
      }
    }
    final l$on_conflict = on_conflict;
    final lOther$on_conflict = other.on_conflict;
    if (_$data.containsKey('on_conflict') !=
        other._$data.containsKey('on_conflict')) {
      return false;
    }
    if (l$on_conflict != lOther$on_conflict) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$data = data;
    final l$on_conflict = on_conflict;
    return Object.hashAll([
      Object.hashAll(l$data.map((v) => v)),
      _$data.containsKey('on_conflict') ? l$on_conflict : const {},
    ]);
  }
}

abstract class CopyWith$Input$SoulWinningSessionGroup_arr_rel_insert_input<
    TRes> {
  factory CopyWith$Input$SoulWinningSessionGroup_arr_rel_insert_input(
    Input$SoulWinningSessionGroup_arr_rel_insert_input instance,
    TRes Function(Input$SoulWinningSessionGroup_arr_rel_insert_input) then,
  ) = _CopyWithImpl$Input$SoulWinningSessionGroup_arr_rel_insert_input;

  factory CopyWith$Input$SoulWinningSessionGroup_arr_rel_insert_input.stub(
          TRes res) =
      _CopyWithStubImpl$Input$SoulWinningSessionGroup_arr_rel_insert_input;

  TRes call({
    List<Input$SoulWinningSessionGroup_insert_input>? data,
    Input$SoulWinningSessionGroup_on_conflict? on_conflict,
  });
  TRes data(
      Iterable<Input$SoulWinningSessionGroup_insert_input> Function(
              Iterable<
                  CopyWith$Input$SoulWinningSessionGroup_insert_input<
                      Input$SoulWinningSessionGroup_insert_input>>)
          _fn);
  CopyWith$Input$SoulWinningSessionGroup_on_conflict<TRes> get on_conflict;
}

class _CopyWithImpl$Input$SoulWinningSessionGroup_arr_rel_insert_input<TRes>
    implements
        CopyWith$Input$SoulWinningSessionGroup_arr_rel_insert_input<TRes> {
  _CopyWithImpl$Input$SoulWinningSessionGroup_arr_rel_insert_input(
    this._instance,
    this._then,
  );

  final Input$SoulWinningSessionGroup_arr_rel_insert_input _instance;

  final TRes Function(Input$SoulWinningSessionGroup_arr_rel_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? data = _undefined,
    Object? on_conflict = _undefined,
  }) =>
      _then(Input$SoulWinningSessionGroup_arr_rel_insert_input._({
        ..._instance._$data,
        if (data != _undefined && data != null)
          'data': (data as List<Input$SoulWinningSessionGroup_insert_input>),
        if (on_conflict != _undefined)
          'on_conflict':
              (on_conflict as Input$SoulWinningSessionGroup_on_conflict?),
      }));
  TRes data(
          Iterable<Input$SoulWinningSessionGroup_insert_input> Function(
                  Iterable<
                      CopyWith$Input$SoulWinningSessionGroup_insert_input<
                          Input$SoulWinningSessionGroup_insert_input>>)
              _fn) =>
      call(
          data: _fn(_instance.data
              .map((e) => CopyWith$Input$SoulWinningSessionGroup_insert_input(
                    e,
                    (i) => i,
                  ))).toList());
  CopyWith$Input$SoulWinningSessionGroup_on_conflict<TRes> get on_conflict {
    final local$on_conflict = _instance.on_conflict;
    return local$on_conflict == null
        ? CopyWith$Input$SoulWinningSessionGroup_on_conflict.stub(
            _then(_instance))
        : CopyWith$Input$SoulWinningSessionGroup_on_conflict(
            local$on_conflict, (e) => call(on_conflict: e));
  }
}

class _CopyWithStubImpl$Input$SoulWinningSessionGroup_arr_rel_insert_input<TRes>
    implements
        CopyWith$Input$SoulWinningSessionGroup_arr_rel_insert_input<TRes> {
  _CopyWithStubImpl$Input$SoulWinningSessionGroup_arr_rel_insert_input(
      this._res);

  TRes _res;

  call({
    List<Input$SoulWinningSessionGroup_insert_input>? data,
    Input$SoulWinningSessionGroup_on_conflict? on_conflict,
  }) =>
      _res;
  data(_fn) => _res;
  CopyWith$Input$SoulWinningSessionGroup_on_conflict<TRes> get on_conflict =>
      CopyWith$Input$SoulWinningSessionGroup_on_conflict.stub(_res);
}

class Input$_Organization_adminsOfOrganization_arr_rel_insert_input {
  factory Input$_Organization_adminsOfOrganization_arr_rel_insert_input({
    required List<Input$_Organization_adminsOfOrganization_insert_input> data,
    Input$_Organization_adminsOfOrganization_on_conflict? on_conflict,
  }) =>
      Input$_Organization_adminsOfOrganization_arr_rel_insert_input._({
        r'data': data,
        if (on_conflict != null) r'on_conflict': on_conflict,
      });

  Input$_Organization_adminsOfOrganization_arr_rel_insert_input._(this._$data);

  factory Input$_Organization_adminsOfOrganization_arr_rel_insert_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$data = data['data'];
    result$data['data'] = (l$data as List<dynamic>)
        .map((e) =>
            Input$_Organization_adminsOfOrganization_insert_input.fromJson(
                (e as Map<String, dynamic>)))
        .toList();
    if (data.containsKey('on_conflict')) {
      final l$on_conflict = data['on_conflict'];
      result$data['on_conflict'] = l$on_conflict == null
          ? null
          : Input$_Organization_adminsOfOrganization_on_conflict.fromJson(
              (l$on_conflict as Map<String, dynamic>));
    }
    return Input$_Organization_adminsOfOrganization_arr_rel_insert_input._(
        result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$_Organization_adminsOfOrganization_insert_input> get data =>
      (_$data['data']
          as List<Input$_Organization_adminsOfOrganization_insert_input>);
  Input$_Organization_adminsOfOrganization_on_conflict? get on_conflict =>
      (_$data['on_conflict']
          as Input$_Organization_adminsOfOrganization_on_conflict?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$data = data;
    result$data['data'] = l$data.map((e) => e.toJson()).toList();
    if (_$data.containsKey('on_conflict')) {
      final l$on_conflict = on_conflict;
      result$data['on_conflict'] = l$on_conflict?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$_Organization_adminsOfOrganization_arr_rel_insert_input<
          Input$_Organization_adminsOfOrganization_arr_rel_insert_input>
      get copyWith =>
          CopyWith$Input$_Organization_adminsOfOrganization_arr_rel_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other
            is Input$_Organization_adminsOfOrganization_arr_rel_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$data = data;
    final lOther$data = other.data;
    if (l$data.length != lOther$data.length) {
      return false;
    }
    for (int i = 0; i < l$data.length; i++) {
      final l$data$entry = l$data[i];
      final lOther$data$entry = lOther$data[i];
      if (l$data$entry != lOther$data$entry) {
        return false;
      }
    }
    final l$on_conflict = on_conflict;
    final lOther$on_conflict = other.on_conflict;
    if (_$data.containsKey('on_conflict') !=
        other._$data.containsKey('on_conflict')) {
      return false;
    }
    if (l$on_conflict != lOther$on_conflict) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$data = data;
    final l$on_conflict = on_conflict;
    return Object.hashAll([
      Object.hashAll(l$data.map((v) => v)),
      _$data.containsKey('on_conflict') ? l$on_conflict : const {},
    ]);
  }
}

abstract class CopyWith$Input$_Organization_adminsOfOrganization_arr_rel_insert_input<
    TRes> {
  factory CopyWith$Input$_Organization_adminsOfOrganization_arr_rel_insert_input(
    Input$_Organization_adminsOfOrganization_arr_rel_insert_input instance,
    TRes Function(Input$_Organization_adminsOfOrganization_arr_rel_insert_input)
        then,
  ) = _CopyWithImpl$Input$_Organization_adminsOfOrganization_arr_rel_insert_input;

  factory CopyWith$Input$_Organization_adminsOfOrganization_arr_rel_insert_input.stub(
          TRes res) =
      _CopyWithStubImpl$Input$_Organization_adminsOfOrganization_arr_rel_insert_input;

  TRes call({
    List<Input$_Organization_adminsOfOrganization_insert_input>? data,
    Input$_Organization_adminsOfOrganization_on_conflict? on_conflict,
  });
  TRes data(
      Iterable<Input$_Organization_adminsOfOrganization_insert_input> Function(
              Iterable<
                  CopyWith$Input$_Organization_adminsOfOrganization_insert_input<
                      Input$_Organization_adminsOfOrganization_insert_input>>)
          _fn);
  CopyWith$Input$_Organization_adminsOfOrganization_on_conflict<TRes>
      get on_conflict;
}

class _CopyWithImpl$Input$_Organization_adminsOfOrganization_arr_rel_insert_input<
        TRes>
    implements
        CopyWith$Input$_Organization_adminsOfOrganization_arr_rel_insert_input<
            TRes> {
  _CopyWithImpl$Input$_Organization_adminsOfOrganization_arr_rel_insert_input(
    this._instance,
    this._then,
  );

  final Input$_Organization_adminsOfOrganization_arr_rel_insert_input _instance;

  final TRes Function(
      Input$_Organization_adminsOfOrganization_arr_rel_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? data = _undefined,
    Object? on_conflict = _undefined,
  }) =>
      _then(Input$_Organization_adminsOfOrganization_arr_rel_insert_input._({
        ..._instance._$data,
        if (data != _undefined && data != null)
          'data': (data
              as List<Input$_Organization_adminsOfOrganization_insert_input>),
        if (on_conflict != _undefined)
          'on_conflict': (on_conflict
              as Input$_Organization_adminsOfOrganization_on_conflict?),
      }));
  TRes data(
          Iterable<Input$_Organization_adminsOfOrganization_insert_input> Function(
                  Iterable<
                      CopyWith$Input$_Organization_adminsOfOrganization_insert_input<
                          Input$_Organization_adminsOfOrganization_insert_input>>)
              _fn) =>
      call(
          data: _fn(_instance.data.map((e) =>
              CopyWith$Input$_Organization_adminsOfOrganization_insert_input(
                e,
                (i) => i,
              ))).toList());
  CopyWith$Input$_Organization_adminsOfOrganization_on_conflict<TRes>
      get on_conflict {
    final local$on_conflict = _instance.on_conflict;
    return local$on_conflict == null
        ? CopyWith$Input$_Organization_adminsOfOrganization_on_conflict.stub(
            _then(_instance))
        : CopyWith$Input$_Organization_adminsOfOrganization_on_conflict(
            local$on_conflict, (e) => call(on_conflict: e));
  }
}

class _CopyWithStubImpl$Input$_Organization_adminsOfOrganization_arr_rel_insert_input<
        TRes>
    implements
        CopyWith$Input$_Organization_adminsOfOrganization_arr_rel_insert_input<
            TRes> {
  _CopyWithStubImpl$Input$_Organization_adminsOfOrganization_arr_rel_insert_input(
      this._res);

  TRes _res;

  call({
    List<Input$_Organization_adminsOfOrganization_insert_input>? data,
    Input$_Organization_adminsOfOrganization_on_conflict? on_conflict,
  }) =>
      _res;
  data(_fn) => _res;
  CopyWith$Input$_Organization_adminsOfOrganization_on_conflict<TRes>
      get on_conflict =>
          CopyWith$Input$_Organization_adminsOfOrganization_on_conflict.stub(
              _res);
}

class Input$_Organization_membersInOrganization_arr_rel_insert_input {
  factory Input$_Organization_membersInOrganization_arr_rel_insert_input({
    required List<Input$_Organization_membersInOrganization_insert_input> data,
    Input$_Organization_membersInOrganization_on_conflict? on_conflict,
  }) =>
      Input$_Organization_membersInOrganization_arr_rel_insert_input._({
        r'data': data,
        if (on_conflict != null) r'on_conflict': on_conflict,
      });

  Input$_Organization_membersInOrganization_arr_rel_insert_input._(this._$data);

  factory Input$_Organization_membersInOrganization_arr_rel_insert_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$data = data['data'];
    result$data['data'] = (l$data as List<dynamic>)
        .map((e) =>
            Input$_Organization_membersInOrganization_insert_input.fromJson(
                (e as Map<String, dynamic>)))
        .toList();
    if (data.containsKey('on_conflict')) {
      final l$on_conflict = data['on_conflict'];
      result$data['on_conflict'] = l$on_conflict == null
          ? null
          : Input$_Organization_membersInOrganization_on_conflict.fromJson(
              (l$on_conflict as Map<String, dynamic>));
    }
    return Input$_Organization_membersInOrganization_arr_rel_insert_input._(
        result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$_Organization_membersInOrganization_insert_input> get data =>
      (_$data['data']
          as List<Input$_Organization_membersInOrganization_insert_input>);
  Input$_Organization_membersInOrganization_on_conflict? get on_conflict =>
      (_$data['on_conflict']
          as Input$_Organization_membersInOrganization_on_conflict?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$data = data;
    result$data['data'] = l$data.map((e) => e.toJson()).toList();
    if (_$data.containsKey('on_conflict')) {
      final l$on_conflict = on_conflict;
      result$data['on_conflict'] = l$on_conflict?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$_Organization_membersInOrganization_arr_rel_insert_input<
          Input$_Organization_membersInOrganization_arr_rel_insert_input>
      get copyWith =>
          CopyWith$Input$_Organization_membersInOrganization_arr_rel_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other
            is Input$_Organization_membersInOrganization_arr_rel_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$data = data;
    final lOther$data = other.data;
    if (l$data.length != lOther$data.length) {
      return false;
    }
    for (int i = 0; i < l$data.length; i++) {
      final l$data$entry = l$data[i];
      final lOther$data$entry = lOther$data[i];
      if (l$data$entry != lOther$data$entry) {
        return false;
      }
    }
    final l$on_conflict = on_conflict;
    final lOther$on_conflict = other.on_conflict;
    if (_$data.containsKey('on_conflict') !=
        other._$data.containsKey('on_conflict')) {
      return false;
    }
    if (l$on_conflict != lOther$on_conflict) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$data = data;
    final l$on_conflict = on_conflict;
    return Object.hashAll([
      Object.hashAll(l$data.map((v) => v)),
      _$data.containsKey('on_conflict') ? l$on_conflict : const {},
    ]);
  }
}

abstract class CopyWith$Input$_Organization_membersInOrganization_arr_rel_insert_input<
    TRes> {
  factory CopyWith$Input$_Organization_membersInOrganization_arr_rel_insert_input(
    Input$_Organization_membersInOrganization_arr_rel_insert_input instance,
    TRes Function(
            Input$_Organization_membersInOrganization_arr_rel_insert_input)
        then,
  ) = _CopyWithImpl$Input$_Organization_membersInOrganization_arr_rel_insert_input;

  factory CopyWith$Input$_Organization_membersInOrganization_arr_rel_insert_input.stub(
          TRes res) =
      _CopyWithStubImpl$Input$_Organization_membersInOrganization_arr_rel_insert_input;

  TRes call({
    List<Input$_Organization_membersInOrganization_insert_input>? data,
    Input$_Organization_membersInOrganization_on_conflict? on_conflict,
  });
  TRes data(
      Iterable<Input$_Organization_membersInOrganization_insert_input> Function(
              Iterable<
                  CopyWith$Input$_Organization_membersInOrganization_insert_input<
                      Input$_Organization_membersInOrganization_insert_input>>)
          _fn);
  CopyWith$Input$_Organization_membersInOrganization_on_conflict<TRes>
      get on_conflict;
}

class _CopyWithImpl$Input$_Organization_membersInOrganization_arr_rel_insert_input<
        TRes>
    implements
        CopyWith$Input$_Organization_membersInOrganization_arr_rel_insert_input<
            TRes> {
  _CopyWithImpl$Input$_Organization_membersInOrganization_arr_rel_insert_input(
    this._instance,
    this._then,
  );

  final Input$_Organization_membersInOrganization_arr_rel_insert_input
      _instance;

  final TRes Function(
      Input$_Organization_membersInOrganization_arr_rel_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? data = _undefined,
    Object? on_conflict = _undefined,
  }) =>
      _then(Input$_Organization_membersInOrganization_arr_rel_insert_input._({
        ..._instance._$data,
        if (data != _undefined && data != null)
          'data': (data
              as List<Input$_Organization_membersInOrganization_insert_input>),
        if (on_conflict != _undefined)
          'on_conflict': (on_conflict
              as Input$_Organization_membersInOrganization_on_conflict?),
      }));
  TRes data(
          Iterable<Input$_Organization_membersInOrganization_insert_input> Function(
                  Iterable<
                      CopyWith$Input$_Organization_membersInOrganization_insert_input<
                          Input$_Organization_membersInOrganization_insert_input>>)
              _fn) =>
      call(
          data: _fn(_instance.data.map((e) =>
              CopyWith$Input$_Organization_membersInOrganization_insert_input(
                e,
                (i) => i,
              ))).toList());
  CopyWith$Input$_Organization_membersInOrganization_on_conflict<TRes>
      get on_conflict {
    final local$on_conflict = _instance.on_conflict;
    return local$on_conflict == null
        ? CopyWith$Input$_Organization_membersInOrganization_on_conflict.stub(
            _then(_instance))
        : CopyWith$Input$_Organization_membersInOrganization_on_conflict(
            local$on_conflict, (e) => call(on_conflict: e));
  }
}

class _CopyWithStubImpl$Input$_Organization_membersInOrganization_arr_rel_insert_input<
        TRes>
    implements
        CopyWith$Input$_Organization_membersInOrganization_arr_rel_insert_input<
            TRes> {
  _CopyWithStubImpl$Input$_Organization_membersInOrganization_arr_rel_insert_input(
      this._res);

  TRes _res;

  call({
    List<Input$_Organization_membersInOrganization_insert_input>? data,
    Input$_Organization_membersInOrganization_on_conflict? on_conflict,
  }) =>
      _res;
  data(_fn) => _res;
  CopyWith$Input$_Organization_membersInOrganization_on_conflict<TRes>
      get on_conflict =>
          CopyWith$Input$_Organization_membersInOrganization_on_conflict.stub(
              _res);
}

class Input$_SoulWinningSessionGroup_members_arr_rel_insert_input {
  factory Input$_SoulWinningSessionGroup_members_arr_rel_insert_input({
    required List<Input$_SoulWinningSessionGroup_members_insert_input> data,
    Input$_SoulWinningSessionGroup_members_on_conflict? on_conflict,
  }) =>
      Input$_SoulWinningSessionGroup_members_arr_rel_insert_input._({
        r'data': data,
        if (on_conflict != null) r'on_conflict': on_conflict,
      });

  Input$_SoulWinningSessionGroup_members_arr_rel_insert_input._(this._$data);

  factory Input$_SoulWinningSessionGroup_members_arr_rel_insert_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$data = data['data'];
    result$data['data'] = (l$data as List<dynamic>)
        .map((e) =>
            Input$_SoulWinningSessionGroup_members_insert_input.fromJson(
                (e as Map<String, dynamic>)))
        .toList();
    if (data.containsKey('on_conflict')) {
      final l$on_conflict = data['on_conflict'];
      result$data['on_conflict'] = l$on_conflict == null
          ? null
          : Input$_SoulWinningSessionGroup_members_on_conflict.fromJson(
              (l$on_conflict as Map<String, dynamic>));
    }
    return Input$_SoulWinningSessionGroup_members_arr_rel_insert_input._(
        result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$_SoulWinningSessionGroup_members_insert_input> get data =>
      (_$data['data']
          as List<Input$_SoulWinningSessionGroup_members_insert_input>);
  Input$_SoulWinningSessionGroup_members_on_conflict? get on_conflict =>
      (_$data['on_conflict']
          as Input$_SoulWinningSessionGroup_members_on_conflict?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$data = data;
    result$data['data'] = l$data.map((e) => e.toJson()).toList();
    if (_$data.containsKey('on_conflict')) {
      final l$on_conflict = on_conflict;
      result$data['on_conflict'] = l$on_conflict?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$_SoulWinningSessionGroup_members_arr_rel_insert_input<
          Input$_SoulWinningSessionGroup_members_arr_rel_insert_input>
      get copyWith =>
          CopyWith$Input$_SoulWinningSessionGroup_members_arr_rel_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other
            is Input$_SoulWinningSessionGroup_members_arr_rel_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$data = data;
    final lOther$data = other.data;
    if (l$data.length != lOther$data.length) {
      return false;
    }
    for (int i = 0; i < l$data.length; i++) {
      final l$data$entry = l$data[i];
      final lOther$data$entry = lOther$data[i];
      if (l$data$entry != lOther$data$entry) {
        return false;
      }
    }
    final l$on_conflict = on_conflict;
    final lOther$on_conflict = other.on_conflict;
    if (_$data.containsKey('on_conflict') !=
        other._$data.containsKey('on_conflict')) {
      return false;
    }
    if (l$on_conflict != lOther$on_conflict) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$data = data;
    final l$on_conflict = on_conflict;
    return Object.hashAll([
      Object.hashAll(l$data.map((v) => v)),
      _$data.containsKey('on_conflict') ? l$on_conflict : const {},
    ]);
  }
}

abstract class CopyWith$Input$_SoulWinningSessionGroup_members_arr_rel_insert_input<
    TRes> {
  factory CopyWith$Input$_SoulWinningSessionGroup_members_arr_rel_insert_input(
    Input$_SoulWinningSessionGroup_members_arr_rel_insert_input instance,
    TRes Function(Input$_SoulWinningSessionGroup_members_arr_rel_insert_input)
        then,
  ) = _CopyWithImpl$Input$_SoulWinningSessionGroup_members_arr_rel_insert_input;

  factory CopyWith$Input$_SoulWinningSessionGroup_members_arr_rel_insert_input.stub(
          TRes res) =
      _CopyWithStubImpl$Input$_SoulWinningSessionGroup_members_arr_rel_insert_input;

  TRes call({
    List<Input$_SoulWinningSessionGroup_members_insert_input>? data,
    Input$_SoulWinningSessionGroup_members_on_conflict? on_conflict,
  });
  TRes data(
      Iterable<Input$_SoulWinningSessionGroup_members_insert_input> Function(
              Iterable<
                  CopyWith$Input$_SoulWinningSessionGroup_members_insert_input<
                      Input$_SoulWinningSessionGroup_members_insert_input>>)
          _fn);
  CopyWith$Input$_SoulWinningSessionGroup_members_on_conflict<TRes>
      get on_conflict;
}

class _CopyWithImpl$Input$_SoulWinningSessionGroup_members_arr_rel_insert_input<
        TRes>
    implements
        CopyWith$Input$_SoulWinningSessionGroup_members_arr_rel_insert_input<
            TRes> {
  _CopyWithImpl$Input$_SoulWinningSessionGroup_members_arr_rel_insert_input(
    this._instance,
    this._then,
  );

  final Input$_SoulWinningSessionGroup_members_arr_rel_insert_input _instance;

  final TRes Function(
      Input$_SoulWinningSessionGroup_members_arr_rel_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? data = _undefined,
    Object? on_conflict = _undefined,
  }) =>
      _then(Input$_SoulWinningSessionGroup_members_arr_rel_insert_input._({
        ..._instance._$data,
        if (data != _undefined && data != null)
          'data': (data
              as List<Input$_SoulWinningSessionGroup_members_insert_input>),
        if (on_conflict != _undefined)
          'on_conflict': (on_conflict
              as Input$_SoulWinningSessionGroup_members_on_conflict?),
      }));
  TRes data(
          Iterable<Input$_SoulWinningSessionGroup_members_insert_input> Function(
                  Iterable<
                      CopyWith$Input$_SoulWinningSessionGroup_members_insert_input<
                          Input$_SoulWinningSessionGroup_members_insert_input>>)
              _fn) =>
      call(
          data: _fn(_instance.data.map((e) =>
              CopyWith$Input$_SoulWinningSessionGroup_members_insert_input(
                e,
                (i) => i,
              ))).toList());
  CopyWith$Input$_SoulWinningSessionGroup_members_on_conflict<TRes>
      get on_conflict {
    final local$on_conflict = _instance.on_conflict;
    return local$on_conflict == null
        ? CopyWith$Input$_SoulWinningSessionGroup_members_on_conflict.stub(
            _then(_instance))
        : CopyWith$Input$_SoulWinningSessionGroup_members_on_conflict(
            local$on_conflict, (e) => call(on_conflict: e));
  }
}

class _CopyWithStubImpl$Input$_SoulWinningSessionGroup_members_arr_rel_insert_input<
        TRes>
    implements
        CopyWith$Input$_SoulWinningSessionGroup_members_arr_rel_insert_input<
            TRes> {
  _CopyWithStubImpl$Input$_SoulWinningSessionGroup_members_arr_rel_insert_input(
      this._res);

  TRes _res;

  call({
    List<Input$_SoulWinningSessionGroup_members_insert_input>? data,
    Input$_SoulWinningSessionGroup_members_on_conflict? on_conflict,
  }) =>
      _res;
  data(_fn) => _res;
  CopyWith$Input$_SoulWinningSessionGroup_members_on_conflict<TRes>
      get on_conflict =>
          CopyWith$Input$_SoulWinningSessionGroup_members_on_conflict.stub(
              _res);
}

class Input$Encounter_insert_input {
  factory Input$Encounter_insert_input({
    Input$SavedPerson_arr_rel_insert_input? SavedPeople,
    Input$SoulWinningSessionGroup_obj_rel_insert_input? SoulWinningSessionGroup,
    String? encounterTimeInUtc,
    String? group,
    String? houseAddress,
    String? id,
    String? result,
  }) =>
      Input$Encounter_insert_input._({
        if (SavedPeople != null) r'SavedPeople': SavedPeople,
        if (SoulWinningSessionGroup != null)
          r'SoulWinningSessionGroup': SoulWinningSessionGroup,
        if (encounterTimeInUtc != null)
          r'encounterTimeInUtc': encounterTimeInUtc,
        if (group != null) r'group': group,
        if (houseAddress != null) r'houseAddress': houseAddress,
        if (id != null) r'id': id,
        if (result != null) r'result': result,
      });

  Input$Encounter_insert_input._(this._$data);

  factory Input$Encounter_insert_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('SavedPeople')) {
      final l$SavedPeople = data['SavedPeople'];
      result$data['SavedPeople'] = l$SavedPeople == null
          ? null
          : Input$SavedPerson_arr_rel_insert_input.fromJson(
              (l$SavedPeople as Map<String, dynamic>));
    }
    if (data.containsKey('SoulWinningSessionGroup')) {
      final l$SoulWinningSessionGroup = data['SoulWinningSessionGroup'];
      result$data['SoulWinningSessionGroup'] = l$SoulWinningSessionGroup == null
          ? null
          : Input$SoulWinningSessionGroup_obj_rel_insert_input.fromJson(
              (l$SoulWinningSessionGroup as Map<String, dynamic>));
    }
    if (data.containsKey('encounterTimeInUtc')) {
      final l$encounterTimeInUtc = data['encounterTimeInUtc'];
      result$data['encounterTimeInUtc'] = (l$encounterTimeInUtc as String?);
    }
    if (data.containsKey('group')) {
      final l$group = data['group'];
      result$data['group'] = (l$group as String?);
    }
    if (data.containsKey('houseAddress')) {
      final l$houseAddress = data['houseAddress'];
      result$data['houseAddress'] = (l$houseAddress as String?);
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as String?);
    }
    if (data.containsKey('result')) {
      final l$result = data['result'];
      result$data['result'] = (l$result as String?);
    }
    return Input$Encounter_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$SavedPerson_arr_rel_insert_input? get SavedPeople =>
      (_$data['SavedPeople'] as Input$SavedPerson_arr_rel_insert_input?);
  Input$SoulWinningSessionGroup_obj_rel_insert_input?
      get SoulWinningSessionGroup => (_$data['SoulWinningSessionGroup']
          as Input$SoulWinningSessionGroup_obj_rel_insert_input?);
  String? get encounterTimeInUtc => (_$data['encounterTimeInUtc'] as String?);
  String? get group => (_$data['group'] as String?);
  String? get houseAddress => (_$data['houseAddress'] as String?);
  String? get id => (_$data['id'] as String?);
  String? get result => (_$data['result'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('SavedPeople')) {
      final l$SavedPeople = SavedPeople;
      result$data['SavedPeople'] = l$SavedPeople?.toJson();
    }
    if (_$data.containsKey('SoulWinningSessionGroup')) {
      final l$SoulWinningSessionGroup = SoulWinningSessionGroup;
      result$data['SoulWinningSessionGroup'] =
          l$SoulWinningSessionGroup?.toJson();
    }
    if (_$data.containsKey('encounterTimeInUtc')) {
      final l$encounterTimeInUtc = encounterTimeInUtc;
      result$data['encounterTimeInUtc'] = l$encounterTimeInUtc;
    }
    if (_$data.containsKey('group')) {
      final l$group = group;
      result$data['group'] = l$group;
    }
    if (_$data.containsKey('houseAddress')) {
      final l$houseAddress = houseAddress;
      result$data['houseAddress'] = l$houseAddress;
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('result')) {
      final l$result = result;
      result$data['result'] = l$result;
    }
    return result$data;
  }

  CopyWith$Input$Encounter_insert_input<Input$Encounter_insert_input>
      get copyWith => CopyWith$Input$Encounter_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Encounter_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$SavedPeople = SavedPeople;
    final lOther$SavedPeople = other.SavedPeople;
    if (_$data.containsKey('SavedPeople') !=
        other._$data.containsKey('SavedPeople')) {
      return false;
    }
    if (l$SavedPeople != lOther$SavedPeople) {
      return false;
    }
    final l$SoulWinningSessionGroup = SoulWinningSessionGroup;
    final lOther$SoulWinningSessionGroup = other.SoulWinningSessionGroup;
    if (_$data.containsKey('SoulWinningSessionGroup') !=
        other._$data.containsKey('SoulWinningSessionGroup')) {
      return false;
    }
    if (l$SoulWinningSessionGroup != lOther$SoulWinningSessionGroup) {
      return false;
    }
    final l$encounterTimeInUtc = encounterTimeInUtc;
    final lOther$encounterTimeInUtc = other.encounterTimeInUtc;
    if (_$data.containsKey('encounterTimeInUtc') !=
        other._$data.containsKey('encounterTimeInUtc')) {
      return false;
    }
    if (l$encounterTimeInUtc != lOther$encounterTimeInUtc) {
      return false;
    }
    final l$group = group;
    final lOther$group = other.group;
    if (_$data.containsKey('group') != other._$data.containsKey('group')) {
      return false;
    }
    if (l$group != lOther$group) {
      return false;
    }
    final l$houseAddress = houseAddress;
    final lOther$houseAddress = other.houseAddress;
    if (_$data.containsKey('houseAddress') !=
        other._$data.containsKey('houseAddress')) {
      return false;
    }
    if (l$houseAddress != lOther$houseAddress) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$result = result;
    final lOther$result = other.result;
    if (_$data.containsKey('result') != other._$data.containsKey('result')) {
      return false;
    }
    if (l$result != lOther$result) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$SavedPeople = SavedPeople;
    final l$SoulWinningSessionGroup = SoulWinningSessionGroup;
    final l$encounterTimeInUtc = encounterTimeInUtc;
    final l$group = group;
    final l$houseAddress = houseAddress;
    final l$id = id;
    final l$result = result;
    return Object.hashAll([
      _$data.containsKey('SavedPeople') ? l$SavedPeople : const {},
      _$data.containsKey('SoulWinningSessionGroup')
          ? l$SoulWinningSessionGroup
          : const {},
      _$data.containsKey('encounterTimeInUtc')
          ? l$encounterTimeInUtc
          : const {},
      _$data.containsKey('group') ? l$group : const {},
      _$data.containsKey('houseAddress') ? l$houseAddress : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('result') ? l$result : const {},
    ]);
  }
}

abstract class CopyWith$Input$Encounter_insert_input<TRes> {
  factory CopyWith$Input$Encounter_insert_input(
    Input$Encounter_insert_input instance,
    TRes Function(Input$Encounter_insert_input) then,
  ) = _CopyWithImpl$Input$Encounter_insert_input;

  factory CopyWith$Input$Encounter_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$Encounter_insert_input;

  TRes call({
    Input$SavedPerson_arr_rel_insert_input? SavedPeople,
    Input$SoulWinningSessionGroup_obj_rel_insert_input? SoulWinningSessionGroup,
    String? encounterTimeInUtc,
    String? group,
    String? houseAddress,
    String? id,
    String? result,
  });
  CopyWith$Input$SavedPerson_arr_rel_insert_input<TRes> get SavedPeople;
  CopyWith$Input$SoulWinningSessionGroup_obj_rel_insert_input<TRes>
      get SoulWinningSessionGroup;
}

class _CopyWithImpl$Input$Encounter_insert_input<TRes>
    implements CopyWith$Input$Encounter_insert_input<TRes> {
  _CopyWithImpl$Input$Encounter_insert_input(
    this._instance,
    this._then,
  );

  final Input$Encounter_insert_input _instance;

  final TRes Function(Input$Encounter_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? SavedPeople = _undefined,
    Object? SoulWinningSessionGroup = _undefined,
    Object? encounterTimeInUtc = _undefined,
    Object? group = _undefined,
    Object? houseAddress = _undefined,
    Object? id = _undefined,
    Object? result = _undefined,
  }) =>
      _then(Input$Encounter_insert_input._({
        ..._instance._$data,
        if (SavedPeople != _undefined)
          'SavedPeople':
              (SavedPeople as Input$SavedPerson_arr_rel_insert_input?),
        if (SoulWinningSessionGroup != _undefined)
          'SoulWinningSessionGroup': (SoulWinningSessionGroup
              as Input$SoulWinningSessionGroup_obj_rel_insert_input?),
        if (encounterTimeInUtc != _undefined)
          'encounterTimeInUtc': (encounterTimeInUtc as String?),
        if (group != _undefined) 'group': (group as String?),
        if (houseAddress != _undefined)
          'houseAddress': (houseAddress as String?),
        if (id != _undefined) 'id': (id as String?),
        if (result != _undefined) 'result': (result as String?),
      }));
  CopyWith$Input$SavedPerson_arr_rel_insert_input<TRes> get SavedPeople {
    final local$SavedPeople = _instance.SavedPeople;
    return local$SavedPeople == null
        ? CopyWith$Input$SavedPerson_arr_rel_insert_input.stub(_then(_instance))
        : CopyWith$Input$SavedPerson_arr_rel_insert_input(
            local$SavedPeople, (e) => call(SavedPeople: e));
  }

  CopyWith$Input$SoulWinningSessionGroup_obj_rel_insert_input<TRes>
      get SoulWinningSessionGroup {
    final local$SoulWinningSessionGroup = _instance.SoulWinningSessionGroup;
    return local$SoulWinningSessionGroup == null
        ? CopyWith$Input$SoulWinningSessionGroup_obj_rel_insert_input.stub(
            _then(_instance))
        : CopyWith$Input$SoulWinningSessionGroup_obj_rel_insert_input(
            local$SoulWinningSessionGroup,
            (e) => call(SoulWinningSessionGroup: e));
  }
}

class _CopyWithStubImpl$Input$Encounter_insert_input<TRes>
    implements CopyWith$Input$Encounter_insert_input<TRes> {
  _CopyWithStubImpl$Input$Encounter_insert_input(this._res);

  TRes _res;

  call({
    Input$SavedPerson_arr_rel_insert_input? SavedPeople,
    Input$SoulWinningSessionGroup_obj_rel_insert_input? SoulWinningSessionGroup,
    String? encounterTimeInUtc,
    String? group,
    String? houseAddress,
    String? id,
    String? result,
  }) =>
      _res;
  CopyWith$Input$SavedPerson_arr_rel_insert_input<TRes> get SavedPeople =>
      CopyWith$Input$SavedPerson_arr_rel_insert_input.stub(_res);
  CopyWith$Input$SoulWinningSessionGroup_obj_rel_insert_input<TRes>
      get SoulWinningSessionGroup =>
          CopyWith$Input$SoulWinningSessionGroup_obj_rel_insert_input.stub(
              _res);
}

class Input$Event_insert_input {
  factory Input$Event_insert_input({
    Input$Organization_obj_rel_insert_input? Organization,
    Input$SoulWinningSession_arr_rel_insert_input? SoulWinningSessions,
    String? coverPhotoUrl,
    String? eventPlan,
    String? id,
    String? name,
    String? organization,
    String? scheduledEndTimeInUtc,
    String? scheduledStartTimeInUtc,
    String? type,
    String? whatToExpect,
  }) =>
      Input$Event_insert_input._({
        if (Organization != null) r'Organization': Organization,
        if (SoulWinningSessions != null)
          r'SoulWinningSessions': SoulWinningSessions,
        if (coverPhotoUrl != null) r'coverPhotoUrl': coverPhotoUrl,
        if (eventPlan != null) r'eventPlan': eventPlan,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
        if (organization != null) r'organization': organization,
        if (scheduledEndTimeInUtc != null)
          r'scheduledEndTimeInUtc': scheduledEndTimeInUtc,
        if (scheduledStartTimeInUtc != null)
          r'scheduledStartTimeInUtc': scheduledStartTimeInUtc,
        if (type != null) r'type': type,
        if (whatToExpect != null) r'whatToExpect': whatToExpect,
      });

  Input$Event_insert_input._(this._$data);

  factory Input$Event_insert_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Organization')) {
      final l$Organization = data['Organization'];
      result$data['Organization'] = l$Organization == null
          ? null
          : Input$Organization_obj_rel_insert_input.fromJson(
              (l$Organization as Map<String, dynamic>));
    }
    if (data.containsKey('SoulWinningSessions')) {
      final l$SoulWinningSessions = data['SoulWinningSessions'];
      result$data['SoulWinningSessions'] = l$SoulWinningSessions == null
          ? null
          : Input$SoulWinningSession_arr_rel_insert_input.fromJson(
              (l$SoulWinningSessions as Map<String, dynamic>));
    }
    if (data.containsKey('coverPhotoUrl')) {
      final l$coverPhotoUrl = data['coverPhotoUrl'];
      result$data['coverPhotoUrl'] = (l$coverPhotoUrl as String?);
    }
    if (data.containsKey('eventPlan')) {
      final l$eventPlan = data['eventPlan'];
      result$data['eventPlan'] = (l$eventPlan as String?);
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as String?);
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] = (l$name as String?);
    }
    if (data.containsKey('organization')) {
      final l$organization = data['organization'];
      result$data['organization'] = (l$organization as String?);
    }
    if (data.containsKey('scheduledEndTimeInUtc')) {
      final l$scheduledEndTimeInUtc = data['scheduledEndTimeInUtc'];
      result$data['scheduledEndTimeInUtc'] =
          (l$scheduledEndTimeInUtc as String?);
    }
    if (data.containsKey('scheduledStartTimeInUtc')) {
      final l$scheduledStartTimeInUtc = data['scheduledStartTimeInUtc'];
      result$data['scheduledStartTimeInUtc'] =
          (l$scheduledStartTimeInUtc as String?);
    }
    if (data.containsKey('type')) {
      final l$type = data['type'];
      result$data['type'] = (l$type as String?);
    }
    if (data.containsKey('whatToExpect')) {
      final l$whatToExpect = data['whatToExpect'];
      result$data['whatToExpect'] = (l$whatToExpect as String?);
    }
    return Input$Event_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$Organization_obj_rel_insert_input? get Organization =>
      (_$data['Organization'] as Input$Organization_obj_rel_insert_input?);
  Input$SoulWinningSession_arr_rel_insert_input? get SoulWinningSessions =>
      (_$data['SoulWinningSessions']
          as Input$SoulWinningSession_arr_rel_insert_input?);
  String? get coverPhotoUrl => (_$data['coverPhotoUrl'] as String?);
  String? get eventPlan => (_$data['eventPlan'] as String?);
  String? get id => (_$data['id'] as String?);
  String? get name => (_$data['name'] as String?);
  String? get organization => (_$data['organization'] as String?);
  String? get scheduledEndTimeInUtc =>
      (_$data['scheduledEndTimeInUtc'] as String?);
  String? get scheduledStartTimeInUtc =>
      (_$data['scheduledStartTimeInUtc'] as String?);
  String? get type => (_$data['type'] as String?);
  String? get whatToExpect => (_$data['whatToExpect'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Organization')) {
      final l$Organization = Organization;
      result$data['Organization'] = l$Organization?.toJson();
    }
    if (_$data.containsKey('SoulWinningSessions')) {
      final l$SoulWinningSessions = SoulWinningSessions;
      result$data['SoulWinningSessions'] = l$SoulWinningSessions?.toJson();
    }
    if (_$data.containsKey('coverPhotoUrl')) {
      final l$coverPhotoUrl = coverPhotoUrl;
      result$data['coverPhotoUrl'] = l$coverPhotoUrl;
    }
    if (_$data.containsKey('eventPlan')) {
      final l$eventPlan = eventPlan;
      result$data['eventPlan'] = l$eventPlan;
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] = l$name;
    }
    if (_$data.containsKey('organization')) {
      final l$organization = organization;
      result$data['organization'] = l$organization;
    }
    if (_$data.containsKey('scheduledEndTimeInUtc')) {
      final l$scheduledEndTimeInUtc = scheduledEndTimeInUtc;
      result$data['scheduledEndTimeInUtc'] = l$scheduledEndTimeInUtc;
    }
    if (_$data.containsKey('scheduledStartTimeInUtc')) {
      final l$scheduledStartTimeInUtc = scheduledStartTimeInUtc;
      result$data['scheduledStartTimeInUtc'] = l$scheduledStartTimeInUtc;
    }
    if (_$data.containsKey('type')) {
      final l$type = type;
      result$data['type'] = l$type;
    }
    if (_$data.containsKey('whatToExpect')) {
      final l$whatToExpect = whatToExpect;
      result$data['whatToExpect'] = l$whatToExpect;
    }
    return result$data;
  }

  CopyWith$Input$Event_insert_input<Input$Event_insert_input> get copyWith =>
      CopyWith$Input$Event_insert_input(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Event_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Organization = Organization;
    final lOther$Organization = other.Organization;
    if (_$data.containsKey('Organization') !=
        other._$data.containsKey('Organization')) {
      return false;
    }
    if (l$Organization != lOther$Organization) {
      return false;
    }
    final l$SoulWinningSessions = SoulWinningSessions;
    final lOther$SoulWinningSessions = other.SoulWinningSessions;
    if (_$data.containsKey('SoulWinningSessions') !=
        other._$data.containsKey('SoulWinningSessions')) {
      return false;
    }
    if (l$SoulWinningSessions != lOther$SoulWinningSessions) {
      return false;
    }
    final l$coverPhotoUrl = coverPhotoUrl;
    final lOther$coverPhotoUrl = other.coverPhotoUrl;
    if (_$data.containsKey('coverPhotoUrl') !=
        other._$data.containsKey('coverPhotoUrl')) {
      return false;
    }
    if (l$coverPhotoUrl != lOther$coverPhotoUrl) {
      return false;
    }
    final l$eventPlan = eventPlan;
    final lOther$eventPlan = other.eventPlan;
    if (_$data.containsKey('eventPlan') !=
        other._$data.containsKey('eventPlan')) {
      return false;
    }
    if (l$eventPlan != lOther$eventPlan) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$organization = organization;
    final lOther$organization = other.organization;
    if (_$data.containsKey('organization') !=
        other._$data.containsKey('organization')) {
      return false;
    }
    if (l$organization != lOther$organization) {
      return false;
    }
    final l$scheduledEndTimeInUtc = scheduledEndTimeInUtc;
    final lOther$scheduledEndTimeInUtc = other.scheduledEndTimeInUtc;
    if (_$data.containsKey('scheduledEndTimeInUtc') !=
        other._$data.containsKey('scheduledEndTimeInUtc')) {
      return false;
    }
    if (l$scheduledEndTimeInUtc != lOther$scheduledEndTimeInUtc) {
      return false;
    }
    final l$scheduledStartTimeInUtc = scheduledStartTimeInUtc;
    final lOther$scheduledStartTimeInUtc = other.scheduledStartTimeInUtc;
    if (_$data.containsKey('scheduledStartTimeInUtc') !=
        other._$data.containsKey('scheduledStartTimeInUtc')) {
      return false;
    }
    if (l$scheduledStartTimeInUtc != lOther$scheduledStartTimeInUtc) {
      return false;
    }
    final l$type = type;
    final lOther$type = other.type;
    if (_$data.containsKey('type') != other._$data.containsKey('type')) {
      return false;
    }
    if (l$type != lOther$type) {
      return false;
    }
    final l$whatToExpect = whatToExpect;
    final lOther$whatToExpect = other.whatToExpect;
    if (_$data.containsKey('whatToExpect') !=
        other._$data.containsKey('whatToExpect')) {
      return false;
    }
    if (l$whatToExpect != lOther$whatToExpect) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Organization = Organization;
    final l$SoulWinningSessions = SoulWinningSessions;
    final l$coverPhotoUrl = coverPhotoUrl;
    final l$eventPlan = eventPlan;
    final l$id = id;
    final l$name = name;
    final l$organization = organization;
    final l$scheduledEndTimeInUtc = scheduledEndTimeInUtc;
    final l$scheduledStartTimeInUtc = scheduledStartTimeInUtc;
    final l$type = type;
    final l$whatToExpect = whatToExpect;
    return Object.hashAll([
      _$data.containsKey('Organization') ? l$Organization : const {},
      _$data.containsKey('SoulWinningSessions')
          ? l$SoulWinningSessions
          : const {},
      _$data.containsKey('coverPhotoUrl') ? l$coverPhotoUrl : const {},
      _$data.containsKey('eventPlan') ? l$eventPlan : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('organization') ? l$organization : const {},
      _$data.containsKey('scheduledEndTimeInUtc')
          ? l$scheduledEndTimeInUtc
          : const {},
      _$data.containsKey('scheduledStartTimeInUtc')
          ? l$scheduledStartTimeInUtc
          : const {},
      _$data.containsKey('type') ? l$type : const {},
      _$data.containsKey('whatToExpect') ? l$whatToExpect : const {},
    ]);
  }
}

abstract class CopyWith$Input$Event_insert_input<TRes> {
  factory CopyWith$Input$Event_insert_input(
    Input$Event_insert_input instance,
    TRes Function(Input$Event_insert_input) then,
  ) = _CopyWithImpl$Input$Event_insert_input;

  factory CopyWith$Input$Event_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$Event_insert_input;

  TRes call({
    Input$Organization_obj_rel_insert_input? Organization,
    Input$SoulWinningSession_arr_rel_insert_input? SoulWinningSessions,
    String? coverPhotoUrl,
    String? eventPlan,
    String? id,
    String? name,
    String? organization,
    String? scheduledEndTimeInUtc,
    String? scheduledStartTimeInUtc,
    String? type,
    String? whatToExpect,
  });
  CopyWith$Input$Organization_obj_rel_insert_input<TRes> get Organization;
  CopyWith$Input$SoulWinningSession_arr_rel_insert_input<TRes>
      get SoulWinningSessions;
}

class _CopyWithImpl$Input$Event_insert_input<TRes>
    implements CopyWith$Input$Event_insert_input<TRes> {
  _CopyWithImpl$Input$Event_insert_input(
    this._instance,
    this._then,
  );

  final Input$Event_insert_input _instance;

  final TRes Function(Input$Event_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Organization = _undefined,
    Object? SoulWinningSessions = _undefined,
    Object? coverPhotoUrl = _undefined,
    Object? eventPlan = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
    Object? organization = _undefined,
    Object? scheduledEndTimeInUtc = _undefined,
    Object? scheduledStartTimeInUtc = _undefined,
    Object? type = _undefined,
    Object? whatToExpect = _undefined,
  }) =>
      _then(Input$Event_insert_input._({
        ..._instance._$data,
        if (Organization != _undefined)
          'Organization':
              (Organization as Input$Organization_obj_rel_insert_input?),
        if (SoulWinningSessions != _undefined)
          'SoulWinningSessions': (SoulWinningSessions
              as Input$SoulWinningSession_arr_rel_insert_input?),
        if (coverPhotoUrl != _undefined)
          'coverPhotoUrl': (coverPhotoUrl as String?),
        if (eventPlan != _undefined) 'eventPlan': (eventPlan as String?),
        if (id != _undefined) 'id': (id as String?),
        if (name != _undefined) 'name': (name as String?),
        if (organization != _undefined)
          'organization': (organization as String?),
        if (scheduledEndTimeInUtc != _undefined)
          'scheduledEndTimeInUtc': (scheduledEndTimeInUtc as String?),
        if (scheduledStartTimeInUtc != _undefined)
          'scheduledStartTimeInUtc': (scheduledStartTimeInUtc as String?),
        if (type != _undefined) 'type': (type as String?),
        if (whatToExpect != _undefined)
          'whatToExpect': (whatToExpect as String?),
      }));
  CopyWith$Input$Organization_obj_rel_insert_input<TRes> get Organization {
    final local$Organization = _instance.Organization;
    return local$Organization == null
        ? CopyWith$Input$Organization_obj_rel_insert_input.stub(
            _then(_instance))
        : CopyWith$Input$Organization_obj_rel_insert_input(
            local$Organization, (e) => call(Organization: e));
  }

  CopyWith$Input$SoulWinningSession_arr_rel_insert_input<TRes>
      get SoulWinningSessions {
    final local$SoulWinningSessions = _instance.SoulWinningSessions;
    return local$SoulWinningSessions == null
        ? CopyWith$Input$SoulWinningSession_arr_rel_insert_input.stub(
            _then(_instance))
        : CopyWith$Input$SoulWinningSession_arr_rel_insert_input(
            local$SoulWinningSessions, (e) => call(SoulWinningSessions: e));
  }
}

class _CopyWithStubImpl$Input$Event_insert_input<TRes>
    implements CopyWith$Input$Event_insert_input<TRes> {
  _CopyWithStubImpl$Input$Event_insert_input(this._res);

  TRes _res;

  call({
    Input$Organization_obj_rel_insert_input? Organization,
    Input$SoulWinningSession_arr_rel_insert_input? SoulWinningSessions,
    String? coverPhotoUrl,
    String? eventPlan,
    String? id,
    String? name,
    String? organization,
    String? scheduledEndTimeInUtc,
    String? scheduledStartTimeInUtc,
    String? type,
    String? whatToExpect,
  }) =>
      _res;
  CopyWith$Input$Organization_obj_rel_insert_input<TRes> get Organization =>
      CopyWith$Input$Organization_obj_rel_insert_input.stub(_res);
  CopyWith$Input$SoulWinningSession_arr_rel_insert_input<TRes>
      get SoulWinningSessions =>
          CopyWith$Input$SoulWinningSession_arr_rel_insert_input.stub(_res);
}

class Input$Map_insert_input {
  factory Input$Map_insert_input({
    Input$MapArea_arr_rel_insert_input? MapAreas,
    Input$Organization_obj_rel_insert_input? Organization,
    String? belongingOrganization,
    String? id,
    String? name,
  }) =>
      Input$Map_insert_input._({
        if (MapAreas != null) r'MapAreas': MapAreas,
        if (Organization != null) r'Organization': Organization,
        if (belongingOrganization != null)
          r'belongingOrganization': belongingOrganization,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
      });

  Input$Map_insert_input._(this._$data);

  factory Input$Map_insert_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('MapAreas')) {
      final l$MapAreas = data['MapAreas'];
      result$data['MapAreas'] = l$MapAreas == null
          ? null
          : Input$MapArea_arr_rel_insert_input.fromJson(
              (l$MapAreas as Map<String, dynamic>));
    }
    if (data.containsKey('Organization')) {
      final l$Organization = data['Organization'];
      result$data['Organization'] = l$Organization == null
          ? null
          : Input$Organization_obj_rel_insert_input.fromJson(
              (l$Organization as Map<String, dynamic>));
    }
    if (data.containsKey('belongingOrganization')) {
      final l$belongingOrganization = data['belongingOrganization'];
      result$data['belongingOrganization'] =
          (l$belongingOrganization as String?);
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as String?);
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] = (l$name as String?);
    }
    return Input$Map_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$MapArea_arr_rel_insert_input? get MapAreas =>
      (_$data['MapAreas'] as Input$MapArea_arr_rel_insert_input?);
  Input$Organization_obj_rel_insert_input? get Organization =>
      (_$data['Organization'] as Input$Organization_obj_rel_insert_input?);
  String? get belongingOrganization =>
      (_$data['belongingOrganization'] as String?);
  String? get id => (_$data['id'] as String?);
  String? get name => (_$data['name'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('MapAreas')) {
      final l$MapAreas = MapAreas;
      result$data['MapAreas'] = l$MapAreas?.toJson();
    }
    if (_$data.containsKey('Organization')) {
      final l$Organization = Organization;
      result$data['Organization'] = l$Organization?.toJson();
    }
    if (_$data.containsKey('belongingOrganization')) {
      final l$belongingOrganization = belongingOrganization;
      result$data['belongingOrganization'] = l$belongingOrganization;
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] = l$name;
    }
    return result$data;
  }

  CopyWith$Input$Map_insert_input<Input$Map_insert_input> get copyWith =>
      CopyWith$Input$Map_insert_input(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Map_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$MapAreas = MapAreas;
    final lOther$MapAreas = other.MapAreas;
    if (_$data.containsKey('MapAreas') !=
        other._$data.containsKey('MapAreas')) {
      return false;
    }
    if (l$MapAreas != lOther$MapAreas) {
      return false;
    }
    final l$Organization = Organization;
    final lOther$Organization = other.Organization;
    if (_$data.containsKey('Organization') !=
        other._$data.containsKey('Organization')) {
      return false;
    }
    if (l$Organization != lOther$Organization) {
      return false;
    }
    final l$belongingOrganization = belongingOrganization;
    final lOther$belongingOrganization = other.belongingOrganization;
    if (_$data.containsKey('belongingOrganization') !=
        other._$data.containsKey('belongingOrganization')) {
      return false;
    }
    if (l$belongingOrganization != lOther$belongingOrganization) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$MapAreas = MapAreas;
    final l$Organization = Organization;
    final l$belongingOrganization = belongingOrganization;
    final l$id = id;
    final l$name = name;
    return Object.hashAll([
      _$data.containsKey('MapAreas') ? l$MapAreas : const {},
      _$data.containsKey('Organization') ? l$Organization : const {},
      _$data.containsKey('belongingOrganization')
          ? l$belongingOrganization
          : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
    ]);
  }
}

abstract class CopyWith$Input$Map_insert_input<TRes> {
  factory CopyWith$Input$Map_insert_input(
    Input$Map_insert_input instance,
    TRes Function(Input$Map_insert_input) then,
  ) = _CopyWithImpl$Input$Map_insert_input;

  factory CopyWith$Input$Map_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$Map_insert_input;

  TRes call({
    Input$MapArea_arr_rel_insert_input? MapAreas,
    Input$Organization_obj_rel_insert_input? Organization,
    String? belongingOrganization,
    String? id,
    String? name,
  });
  CopyWith$Input$MapArea_arr_rel_insert_input<TRes> get MapAreas;
  CopyWith$Input$Organization_obj_rel_insert_input<TRes> get Organization;
}

class _CopyWithImpl$Input$Map_insert_input<TRes>
    implements CopyWith$Input$Map_insert_input<TRes> {
  _CopyWithImpl$Input$Map_insert_input(
    this._instance,
    this._then,
  );

  final Input$Map_insert_input _instance;

  final TRes Function(Input$Map_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? MapAreas = _undefined,
    Object? Organization = _undefined,
    Object? belongingOrganization = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
  }) =>
      _then(Input$Map_insert_input._({
        ..._instance._$data,
        if (MapAreas != _undefined)
          'MapAreas': (MapAreas as Input$MapArea_arr_rel_insert_input?),
        if (Organization != _undefined)
          'Organization':
              (Organization as Input$Organization_obj_rel_insert_input?),
        if (belongingOrganization != _undefined)
          'belongingOrganization': (belongingOrganization as String?),
        if (id != _undefined) 'id': (id as String?),
        if (name != _undefined) 'name': (name as String?),
      }));
  CopyWith$Input$MapArea_arr_rel_insert_input<TRes> get MapAreas {
    final local$MapAreas = _instance.MapAreas;
    return local$MapAreas == null
        ? CopyWith$Input$MapArea_arr_rel_insert_input.stub(_then(_instance))
        : CopyWith$Input$MapArea_arr_rel_insert_input(
            local$MapAreas, (e) => call(MapAreas: e));
  }

  CopyWith$Input$Organization_obj_rel_insert_input<TRes> get Organization {
    final local$Organization = _instance.Organization;
    return local$Organization == null
        ? CopyWith$Input$Organization_obj_rel_insert_input.stub(
            _then(_instance))
        : CopyWith$Input$Organization_obj_rel_insert_input(
            local$Organization, (e) => call(Organization: e));
  }
}

class _CopyWithStubImpl$Input$Map_insert_input<TRes>
    implements CopyWith$Input$Map_insert_input<TRes> {
  _CopyWithStubImpl$Input$Map_insert_input(this._res);

  TRes _res;

  call({
    Input$MapArea_arr_rel_insert_input? MapAreas,
    Input$Organization_obj_rel_insert_input? Organization,
    String? belongingOrganization,
    String? id,
    String? name,
  }) =>
      _res;
  CopyWith$Input$MapArea_arr_rel_insert_input<TRes> get MapAreas =>
      CopyWith$Input$MapArea_arr_rel_insert_input.stub(_res);
  CopyWith$Input$Organization_obj_rel_insert_input<TRes> get Organization =>
      CopyWith$Input$Organization_obj_rel_insert_input.stub(_res);
}

class Input$MapArea_insert_input {
  factory Input$MapArea_insert_input({
    Input$Map_obj_rel_insert_input? $Map,
    Input$SoulWinningSessionGroup_arr_rel_insert_input?
        SoulWinningSessionGroups,
    String? belongingMap,
    String? id,
    String? name,
    String? polygonGeoJson,
  }) =>
      Input$MapArea_insert_input._({
        if ($Map != null) r'Map': $Map,
        if (SoulWinningSessionGroups != null)
          r'SoulWinningSessionGroups': SoulWinningSessionGroups,
        if (belongingMap != null) r'belongingMap': belongingMap,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
        if (polygonGeoJson != null) r'polygonGeoJson': polygonGeoJson,
      });

  Input$MapArea_insert_input._(this._$data);

  factory Input$MapArea_insert_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Map')) {
      final l$$Map = data['Map'];
      result$data['Map'] = l$$Map == null
          ? null
          : Input$Map_obj_rel_insert_input.fromJson(
              (l$$Map as Map<String, dynamic>));
    }
    if (data.containsKey('SoulWinningSessionGroups')) {
      final l$SoulWinningSessionGroups = data['SoulWinningSessionGroups'];
      result$data['SoulWinningSessionGroups'] =
          l$SoulWinningSessionGroups == null
              ? null
              : Input$SoulWinningSessionGroup_arr_rel_insert_input.fromJson(
                  (l$SoulWinningSessionGroups as Map<String, dynamic>));
    }
    if (data.containsKey('belongingMap')) {
      final l$belongingMap = data['belongingMap'];
      result$data['belongingMap'] = (l$belongingMap as String?);
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as String?);
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] = (l$name as String?);
    }
    if (data.containsKey('polygonGeoJson')) {
      final l$polygonGeoJson = data['polygonGeoJson'];
      result$data['polygonGeoJson'] = (l$polygonGeoJson as String?);
    }
    return Input$MapArea_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$Map_obj_rel_insert_input? get $Map =>
      (_$data['Map'] as Input$Map_obj_rel_insert_input?);
  Input$SoulWinningSessionGroup_arr_rel_insert_input?
      get SoulWinningSessionGroups => (_$data['SoulWinningSessionGroups']
          as Input$SoulWinningSessionGroup_arr_rel_insert_input?);
  String? get belongingMap => (_$data['belongingMap'] as String?);
  String? get id => (_$data['id'] as String?);
  String? get name => (_$data['name'] as String?);
  String? get polygonGeoJson => (_$data['polygonGeoJson'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Map')) {
      final l$$Map = $Map;
      result$data['Map'] = l$$Map?.toJson();
    }
    if (_$data.containsKey('SoulWinningSessionGroups')) {
      final l$SoulWinningSessionGroups = SoulWinningSessionGroups;
      result$data['SoulWinningSessionGroups'] =
          l$SoulWinningSessionGroups?.toJson();
    }
    if (_$data.containsKey('belongingMap')) {
      final l$belongingMap = belongingMap;
      result$data['belongingMap'] = l$belongingMap;
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] = l$name;
    }
    if (_$data.containsKey('polygonGeoJson')) {
      final l$polygonGeoJson = polygonGeoJson;
      result$data['polygonGeoJson'] = l$polygonGeoJson;
    }
    return result$data;
  }

  CopyWith$Input$MapArea_insert_input<Input$MapArea_insert_input>
      get copyWith => CopyWith$Input$MapArea_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$MapArea_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$Map = $Map;
    final lOther$$Map = other.$Map;
    if (_$data.containsKey('Map') != other._$data.containsKey('Map')) {
      return false;
    }
    if (l$$Map != lOther$$Map) {
      return false;
    }
    final l$SoulWinningSessionGroups = SoulWinningSessionGroups;
    final lOther$SoulWinningSessionGroups = other.SoulWinningSessionGroups;
    if (_$data.containsKey('SoulWinningSessionGroups') !=
        other._$data.containsKey('SoulWinningSessionGroups')) {
      return false;
    }
    if (l$SoulWinningSessionGroups != lOther$SoulWinningSessionGroups) {
      return false;
    }
    final l$belongingMap = belongingMap;
    final lOther$belongingMap = other.belongingMap;
    if (_$data.containsKey('belongingMap') !=
        other._$data.containsKey('belongingMap')) {
      return false;
    }
    if (l$belongingMap != lOther$belongingMap) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$polygonGeoJson = polygonGeoJson;
    final lOther$polygonGeoJson = other.polygonGeoJson;
    if (_$data.containsKey('polygonGeoJson') !=
        other._$data.containsKey('polygonGeoJson')) {
      return false;
    }
    if (l$polygonGeoJson != lOther$polygonGeoJson) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$Map = $Map;
    final l$SoulWinningSessionGroups = SoulWinningSessionGroups;
    final l$belongingMap = belongingMap;
    final l$id = id;
    final l$name = name;
    final l$polygonGeoJson = polygonGeoJson;
    return Object.hashAll([
      _$data.containsKey('Map') ? l$$Map : const {},
      _$data.containsKey('SoulWinningSessionGroups')
          ? l$SoulWinningSessionGroups
          : const {},
      _$data.containsKey('belongingMap') ? l$belongingMap : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('polygonGeoJson') ? l$polygonGeoJson : const {},
    ]);
  }
}

abstract class CopyWith$Input$MapArea_insert_input<TRes> {
  factory CopyWith$Input$MapArea_insert_input(
    Input$MapArea_insert_input instance,
    TRes Function(Input$MapArea_insert_input) then,
  ) = _CopyWithImpl$Input$MapArea_insert_input;

  factory CopyWith$Input$MapArea_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$MapArea_insert_input;

  TRes call({
    Input$Map_obj_rel_insert_input? $Map,
    Input$SoulWinningSessionGroup_arr_rel_insert_input?
        SoulWinningSessionGroups,
    String? belongingMap,
    String? id,
    String? name,
    String? polygonGeoJson,
  });
  CopyWith$Input$Map_obj_rel_insert_input<TRes> get $Map;
  CopyWith$Input$SoulWinningSessionGroup_arr_rel_insert_input<TRes>
      get SoulWinningSessionGroups;
}

class _CopyWithImpl$Input$MapArea_insert_input<TRes>
    implements CopyWith$Input$MapArea_insert_input<TRes> {
  _CopyWithImpl$Input$MapArea_insert_input(
    this._instance,
    this._then,
  );

  final Input$MapArea_insert_input _instance;

  final TRes Function(Input$MapArea_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $Map = _undefined,
    Object? SoulWinningSessionGroups = _undefined,
    Object? belongingMap = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
    Object? polygonGeoJson = _undefined,
  }) =>
      _then(Input$MapArea_insert_input._({
        ..._instance._$data,
        if ($Map != _undefined)
          'Map': ($Map as Input$Map_obj_rel_insert_input?),
        if (SoulWinningSessionGroups != _undefined)
          'SoulWinningSessionGroups': (SoulWinningSessionGroups
              as Input$SoulWinningSessionGroup_arr_rel_insert_input?),
        if (belongingMap != _undefined)
          'belongingMap': (belongingMap as String?),
        if (id != _undefined) 'id': (id as String?),
        if (name != _undefined) 'name': (name as String?),
        if (polygonGeoJson != _undefined)
          'polygonGeoJson': (polygonGeoJson as String?),
      }));
  CopyWith$Input$Map_obj_rel_insert_input<TRes> get $Map {
    final local$$Map = _instance.$Map;
    return local$$Map == null
        ? CopyWith$Input$Map_obj_rel_insert_input.stub(_then(_instance))
        : CopyWith$Input$Map_obj_rel_insert_input(
            local$$Map, (e) => call($Map: e));
  }

  CopyWith$Input$SoulWinningSessionGroup_arr_rel_insert_input<TRes>
      get SoulWinningSessionGroups {
    final local$SoulWinningSessionGroups = _instance.SoulWinningSessionGroups;
    return local$SoulWinningSessionGroups == null
        ? CopyWith$Input$SoulWinningSessionGroup_arr_rel_insert_input.stub(
            _then(_instance))
        : CopyWith$Input$SoulWinningSessionGroup_arr_rel_insert_input(
            local$SoulWinningSessionGroups,
            (e) => call(SoulWinningSessionGroups: e));
  }
}

class _CopyWithStubImpl$Input$MapArea_insert_input<TRes>
    implements CopyWith$Input$MapArea_insert_input<TRes> {
  _CopyWithStubImpl$Input$MapArea_insert_input(this._res);

  TRes _res;

  call({
    Input$Map_obj_rel_insert_input? $Map,
    Input$SoulWinningSessionGroup_arr_rel_insert_input?
        SoulWinningSessionGroups,
    String? belongingMap,
    String? id,
    String? name,
    String? polygonGeoJson,
  }) =>
      _res;
  CopyWith$Input$Map_obj_rel_insert_input<TRes> get $Map =>
      CopyWith$Input$Map_obj_rel_insert_input.stub(_res);
  CopyWith$Input$SoulWinningSessionGroup_arr_rel_insert_input<TRes>
      get SoulWinningSessionGroups =>
          CopyWith$Input$SoulWinningSessionGroup_arr_rel_insert_input.stub(
              _res);
}

class Input$Organization_insert_input {
  factory Input$Organization_insert_input({
    Input$Event_arr_rel_insert_input? Events,
    Input$Map_arr_rel_insert_input? Maps,
    Input$_Organization_adminsOfOrganization_arr_rel_insert_input?
        $_Organization_adminsOfOrganizations,
    Input$_Organization_membersInOrganization_arr_rel_insert_input?
        $_Organization_membersInOrganizations,
    String? id,
    String? name,
    String? type,
  }) =>
      Input$Organization_insert_input._({
        if (Events != null) r'Events': Events,
        if (Maps != null) r'Maps': Maps,
        if ($_Organization_adminsOfOrganizations != null)
          r'_Organization_adminsOfOrganizations':
              $_Organization_adminsOfOrganizations,
        if ($_Organization_membersInOrganizations != null)
          r'_Organization_membersInOrganizations':
              $_Organization_membersInOrganizations,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
        if (type != null) r'type': type,
      });

  Input$Organization_insert_input._(this._$data);

  factory Input$Organization_insert_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Events')) {
      final l$Events = data['Events'];
      result$data['Events'] = l$Events == null
          ? null
          : Input$Event_arr_rel_insert_input.fromJson(
              (l$Events as Map<String, dynamic>));
    }
    if (data.containsKey('Maps')) {
      final l$Maps = data['Maps'];
      result$data['Maps'] = l$Maps == null
          ? null
          : Input$Map_arr_rel_insert_input.fromJson(
              (l$Maps as Map<String, dynamic>));
    }
    if (data.containsKey('_Organization_adminsOfOrganizations')) {
      final l$$_Organization_adminsOfOrganizations =
          data['_Organization_adminsOfOrganizations'];
      result$data['_Organization_adminsOfOrganizations'] =
          l$$_Organization_adminsOfOrganizations == null
              ? null
              : Input$_Organization_adminsOfOrganization_arr_rel_insert_input
                  .fromJson((l$$_Organization_adminsOfOrganizations
                      as Map<String, dynamic>));
    }
    if (data.containsKey('_Organization_membersInOrganizations')) {
      final l$$_Organization_membersInOrganizations =
          data['_Organization_membersInOrganizations'];
      result$data['_Organization_membersInOrganizations'] =
          l$$_Organization_membersInOrganizations == null
              ? null
              : Input$_Organization_membersInOrganization_arr_rel_insert_input
                  .fromJson((l$$_Organization_membersInOrganizations
                      as Map<String, dynamic>));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as String?);
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] = (l$name as String?);
    }
    if (data.containsKey('type')) {
      final l$type = data['type'];
      result$data['type'] = (l$type as String?);
    }
    return Input$Organization_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$Event_arr_rel_insert_input? get Events =>
      (_$data['Events'] as Input$Event_arr_rel_insert_input?);
  Input$Map_arr_rel_insert_input? get Maps =>
      (_$data['Maps'] as Input$Map_arr_rel_insert_input?);
  Input$_Organization_adminsOfOrganization_arr_rel_insert_input?
      get $_Organization_adminsOfOrganizations => (_$data[
              '_Organization_adminsOfOrganizations']
          as Input$_Organization_adminsOfOrganization_arr_rel_insert_input?);
  Input$_Organization_membersInOrganization_arr_rel_insert_input?
      get $_Organization_membersInOrganizations => (_$data[
              '_Organization_membersInOrganizations']
          as Input$_Organization_membersInOrganization_arr_rel_insert_input?);
  String? get id => (_$data['id'] as String?);
  String? get name => (_$data['name'] as String?);
  String? get type => (_$data['type'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Events')) {
      final l$Events = Events;
      result$data['Events'] = l$Events?.toJson();
    }
    if (_$data.containsKey('Maps')) {
      final l$Maps = Maps;
      result$data['Maps'] = l$Maps?.toJson();
    }
    if (_$data.containsKey('_Organization_adminsOfOrganizations')) {
      final l$$_Organization_adminsOfOrganizations =
          $_Organization_adminsOfOrganizations;
      result$data['_Organization_adminsOfOrganizations'] =
          l$$_Organization_adminsOfOrganizations?.toJson();
    }
    if (_$data.containsKey('_Organization_membersInOrganizations')) {
      final l$$_Organization_membersInOrganizations =
          $_Organization_membersInOrganizations;
      result$data['_Organization_membersInOrganizations'] =
          l$$_Organization_membersInOrganizations?.toJson();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] = l$name;
    }
    if (_$data.containsKey('type')) {
      final l$type = type;
      result$data['type'] = l$type;
    }
    return result$data;
  }

  CopyWith$Input$Organization_insert_input<Input$Organization_insert_input>
      get copyWith => CopyWith$Input$Organization_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Organization_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Events = Events;
    final lOther$Events = other.Events;
    if (_$data.containsKey('Events') != other._$data.containsKey('Events')) {
      return false;
    }
    if (l$Events != lOther$Events) {
      return false;
    }
    final l$Maps = Maps;
    final lOther$Maps = other.Maps;
    if (_$data.containsKey('Maps') != other._$data.containsKey('Maps')) {
      return false;
    }
    if (l$Maps != lOther$Maps) {
      return false;
    }
    final l$$_Organization_adminsOfOrganizations =
        $_Organization_adminsOfOrganizations;
    final lOther$$_Organization_adminsOfOrganizations =
        other.$_Organization_adminsOfOrganizations;
    if (_$data.containsKey('_Organization_adminsOfOrganizations') !=
        other._$data.containsKey('_Organization_adminsOfOrganizations')) {
      return false;
    }
    if (l$$_Organization_adminsOfOrganizations !=
        lOther$$_Organization_adminsOfOrganizations) {
      return false;
    }
    final l$$_Organization_membersInOrganizations =
        $_Organization_membersInOrganizations;
    final lOther$$_Organization_membersInOrganizations =
        other.$_Organization_membersInOrganizations;
    if (_$data.containsKey('_Organization_membersInOrganizations') !=
        other._$data.containsKey('_Organization_membersInOrganizations')) {
      return false;
    }
    if (l$$_Organization_membersInOrganizations !=
        lOther$$_Organization_membersInOrganizations) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$type = type;
    final lOther$type = other.type;
    if (_$data.containsKey('type') != other._$data.containsKey('type')) {
      return false;
    }
    if (l$type != lOther$type) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Events = Events;
    final l$Maps = Maps;
    final l$$_Organization_adminsOfOrganizations =
        $_Organization_adminsOfOrganizations;
    final l$$_Organization_membersInOrganizations =
        $_Organization_membersInOrganizations;
    final l$id = id;
    final l$name = name;
    final l$type = type;
    return Object.hashAll([
      _$data.containsKey('Events') ? l$Events : const {},
      _$data.containsKey('Maps') ? l$Maps : const {},
      _$data.containsKey('_Organization_adminsOfOrganizations')
          ? l$$_Organization_adminsOfOrganizations
          : const {},
      _$data.containsKey('_Organization_membersInOrganizations')
          ? l$$_Organization_membersInOrganizations
          : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('type') ? l$type : const {},
    ]);
  }
}

abstract class CopyWith$Input$Organization_insert_input<TRes> {
  factory CopyWith$Input$Organization_insert_input(
    Input$Organization_insert_input instance,
    TRes Function(Input$Organization_insert_input) then,
  ) = _CopyWithImpl$Input$Organization_insert_input;

  factory CopyWith$Input$Organization_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$Organization_insert_input;

  TRes call({
    Input$Event_arr_rel_insert_input? Events,
    Input$Map_arr_rel_insert_input? Maps,
    Input$_Organization_adminsOfOrganization_arr_rel_insert_input?
        $_Organization_adminsOfOrganizations,
    Input$_Organization_membersInOrganization_arr_rel_insert_input?
        $_Organization_membersInOrganizations,
    String? id,
    String? name,
    String? type,
  });
  CopyWith$Input$Event_arr_rel_insert_input<TRes> get Events;
  CopyWith$Input$Map_arr_rel_insert_input<TRes> get Maps;
  CopyWith$Input$_Organization_adminsOfOrganization_arr_rel_insert_input<TRes>
      get $_Organization_adminsOfOrganizations;
  CopyWith$Input$_Organization_membersInOrganization_arr_rel_insert_input<TRes>
      get $_Organization_membersInOrganizations;
}

class _CopyWithImpl$Input$Organization_insert_input<TRes>
    implements CopyWith$Input$Organization_insert_input<TRes> {
  _CopyWithImpl$Input$Organization_insert_input(
    this._instance,
    this._then,
  );

  final Input$Organization_insert_input _instance;

  final TRes Function(Input$Organization_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Events = _undefined,
    Object? Maps = _undefined,
    Object? $_Organization_adminsOfOrganizations = _undefined,
    Object? $_Organization_membersInOrganizations = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
    Object? type = _undefined,
  }) =>
      _then(Input$Organization_insert_input._({
        ..._instance._$data,
        if (Events != _undefined)
          'Events': (Events as Input$Event_arr_rel_insert_input?),
        if (Maps != _undefined)
          'Maps': (Maps as Input$Map_arr_rel_insert_input?),
        if ($_Organization_adminsOfOrganizations != _undefined)
          '_Organization_adminsOfOrganizations':
              ($_Organization_adminsOfOrganizations
                  as Input$_Organization_adminsOfOrganization_arr_rel_insert_input?),
        if ($_Organization_membersInOrganizations != _undefined)
          '_Organization_membersInOrganizations':
              ($_Organization_membersInOrganizations
                  as Input$_Organization_membersInOrganization_arr_rel_insert_input?),
        if (id != _undefined) 'id': (id as String?),
        if (name != _undefined) 'name': (name as String?),
        if (type != _undefined) 'type': (type as String?),
      }));
  CopyWith$Input$Event_arr_rel_insert_input<TRes> get Events {
    final local$Events = _instance.Events;
    return local$Events == null
        ? CopyWith$Input$Event_arr_rel_insert_input.stub(_then(_instance))
        : CopyWith$Input$Event_arr_rel_insert_input(
            local$Events, (e) => call(Events: e));
  }

  CopyWith$Input$Map_arr_rel_insert_input<TRes> get Maps {
    final local$Maps = _instance.Maps;
    return local$Maps == null
        ? CopyWith$Input$Map_arr_rel_insert_input.stub(_then(_instance))
        : CopyWith$Input$Map_arr_rel_insert_input(
            local$Maps, (e) => call(Maps: e));
  }

  CopyWith$Input$_Organization_adminsOfOrganization_arr_rel_insert_input<TRes>
      get $_Organization_adminsOfOrganizations {
    final local$$_Organization_adminsOfOrganizations =
        _instance.$_Organization_adminsOfOrganizations;
    return local$$_Organization_adminsOfOrganizations == null
        ? CopyWith$Input$_Organization_adminsOfOrganization_arr_rel_insert_input
            .stub(_then(_instance))
        : CopyWith$Input$_Organization_adminsOfOrganization_arr_rel_insert_input(
            local$$_Organization_adminsOfOrganizations,
            (e) => call($_Organization_adminsOfOrganizations: e));
  }

  CopyWith$Input$_Organization_membersInOrganization_arr_rel_insert_input<TRes>
      get $_Organization_membersInOrganizations {
    final local$$_Organization_membersInOrganizations =
        _instance.$_Organization_membersInOrganizations;
    return local$$_Organization_membersInOrganizations == null
        ? CopyWith$Input$_Organization_membersInOrganization_arr_rel_insert_input
            .stub(_then(_instance))
        : CopyWith$Input$_Organization_membersInOrganization_arr_rel_insert_input(
            local$$_Organization_membersInOrganizations,
            (e) => call($_Organization_membersInOrganizations: e));
  }
}

class _CopyWithStubImpl$Input$Organization_insert_input<TRes>
    implements CopyWith$Input$Organization_insert_input<TRes> {
  _CopyWithStubImpl$Input$Organization_insert_input(this._res);

  TRes _res;

  call({
    Input$Event_arr_rel_insert_input? Events,
    Input$Map_arr_rel_insert_input? Maps,
    Input$_Organization_adminsOfOrganization_arr_rel_insert_input?
        $_Organization_adminsOfOrganizations,
    Input$_Organization_membersInOrganization_arr_rel_insert_input?
        $_Organization_membersInOrganizations,
    String? id,
    String? name,
    String? type,
  }) =>
      _res;
  CopyWith$Input$Event_arr_rel_insert_input<TRes> get Events =>
      CopyWith$Input$Event_arr_rel_insert_input.stub(_res);
  CopyWith$Input$Map_arr_rel_insert_input<TRes> get Maps =>
      CopyWith$Input$Map_arr_rel_insert_input.stub(_res);
  CopyWith$Input$_Organization_adminsOfOrganization_arr_rel_insert_input<TRes>
      get $_Organization_adminsOfOrganizations =>
          CopyWith$Input$_Organization_adminsOfOrganization_arr_rel_insert_input
              .stub(_res);
  CopyWith$Input$_Organization_membersInOrganization_arr_rel_insert_input<TRes>
      get $_Organization_membersInOrganizations =>
          CopyWith$Input$_Organization_membersInOrganization_arr_rel_insert_input
              .stub(_res);
}

class Input$SavedPerson_insert_input {
  factory Input$SavedPerson_insert_input({
    Input$Encounter_obj_rel_insert_input? Encounter,
    String? email,
    String? id,
    String? name,
    String? phone,
    String? savingEncounter,
  }) =>
      Input$SavedPerson_insert_input._({
        if (Encounter != null) r'Encounter': Encounter,
        if (email != null) r'email': email,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
        if (phone != null) r'phone': phone,
        if (savingEncounter != null) r'savingEncounter': savingEncounter,
      });

  Input$SavedPerson_insert_input._(this._$data);

  factory Input$SavedPerson_insert_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Encounter')) {
      final l$Encounter = data['Encounter'];
      result$data['Encounter'] = l$Encounter == null
          ? null
          : Input$Encounter_obj_rel_insert_input.fromJson(
              (l$Encounter as Map<String, dynamic>));
    }
    if (data.containsKey('email')) {
      final l$email = data['email'];
      result$data['email'] = (l$email as String?);
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as String?);
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] = (l$name as String?);
    }
    if (data.containsKey('phone')) {
      final l$phone = data['phone'];
      result$data['phone'] = (l$phone as String?);
    }
    if (data.containsKey('savingEncounter')) {
      final l$savingEncounter = data['savingEncounter'];
      result$data['savingEncounter'] = (l$savingEncounter as String?);
    }
    return Input$SavedPerson_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$Encounter_obj_rel_insert_input? get Encounter =>
      (_$data['Encounter'] as Input$Encounter_obj_rel_insert_input?);
  String? get email => (_$data['email'] as String?);
  String? get id => (_$data['id'] as String?);
  String? get name => (_$data['name'] as String?);
  String? get phone => (_$data['phone'] as String?);
  String? get savingEncounter => (_$data['savingEncounter'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Encounter')) {
      final l$Encounter = Encounter;
      result$data['Encounter'] = l$Encounter?.toJson();
    }
    if (_$data.containsKey('email')) {
      final l$email = email;
      result$data['email'] = l$email;
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] = l$name;
    }
    if (_$data.containsKey('phone')) {
      final l$phone = phone;
      result$data['phone'] = l$phone;
    }
    if (_$data.containsKey('savingEncounter')) {
      final l$savingEncounter = savingEncounter;
      result$data['savingEncounter'] = l$savingEncounter;
    }
    return result$data;
  }

  CopyWith$Input$SavedPerson_insert_input<Input$SavedPerson_insert_input>
      get copyWith => CopyWith$Input$SavedPerson_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SavedPerson_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Encounter = Encounter;
    final lOther$Encounter = other.Encounter;
    if (_$data.containsKey('Encounter') !=
        other._$data.containsKey('Encounter')) {
      return false;
    }
    if (l$Encounter != lOther$Encounter) {
      return false;
    }
    final l$email = email;
    final lOther$email = other.email;
    if (_$data.containsKey('email') != other._$data.containsKey('email')) {
      return false;
    }
    if (l$email != lOther$email) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$phone = phone;
    final lOther$phone = other.phone;
    if (_$data.containsKey('phone') != other._$data.containsKey('phone')) {
      return false;
    }
    if (l$phone != lOther$phone) {
      return false;
    }
    final l$savingEncounter = savingEncounter;
    final lOther$savingEncounter = other.savingEncounter;
    if (_$data.containsKey('savingEncounter') !=
        other._$data.containsKey('savingEncounter')) {
      return false;
    }
    if (l$savingEncounter != lOther$savingEncounter) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Encounter = Encounter;
    final l$email = email;
    final l$id = id;
    final l$name = name;
    final l$phone = phone;
    final l$savingEncounter = savingEncounter;
    return Object.hashAll([
      _$data.containsKey('Encounter') ? l$Encounter : const {},
      _$data.containsKey('email') ? l$email : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('phone') ? l$phone : const {},
      _$data.containsKey('savingEncounter') ? l$savingEncounter : const {},
    ]);
  }
}

abstract class CopyWith$Input$SavedPerson_insert_input<TRes> {
  factory CopyWith$Input$SavedPerson_insert_input(
    Input$SavedPerson_insert_input instance,
    TRes Function(Input$SavedPerson_insert_input) then,
  ) = _CopyWithImpl$Input$SavedPerson_insert_input;

  factory CopyWith$Input$SavedPerson_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$SavedPerson_insert_input;

  TRes call({
    Input$Encounter_obj_rel_insert_input? Encounter,
    String? email,
    String? id,
    String? name,
    String? phone,
    String? savingEncounter,
  });
  CopyWith$Input$Encounter_obj_rel_insert_input<TRes> get Encounter;
}

class _CopyWithImpl$Input$SavedPerson_insert_input<TRes>
    implements CopyWith$Input$SavedPerson_insert_input<TRes> {
  _CopyWithImpl$Input$SavedPerson_insert_input(
    this._instance,
    this._then,
  );

  final Input$SavedPerson_insert_input _instance;

  final TRes Function(Input$SavedPerson_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Encounter = _undefined,
    Object? email = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
    Object? phone = _undefined,
    Object? savingEncounter = _undefined,
  }) =>
      _then(Input$SavedPerson_insert_input._({
        ..._instance._$data,
        if (Encounter != _undefined)
          'Encounter': (Encounter as Input$Encounter_obj_rel_insert_input?),
        if (email != _undefined) 'email': (email as String?),
        if (id != _undefined) 'id': (id as String?),
        if (name != _undefined) 'name': (name as String?),
        if (phone != _undefined) 'phone': (phone as String?),
        if (savingEncounter != _undefined)
          'savingEncounter': (savingEncounter as String?),
      }));
  CopyWith$Input$Encounter_obj_rel_insert_input<TRes> get Encounter {
    final local$Encounter = _instance.Encounter;
    return local$Encounter == null
        ? CopyWith$Input$Encounter_obj_rel_insert_input.stub(_then(_instance))
        : CopyWith$Input$Encounter_obj_rel_insert_input(
            local$Encounter, (e) => call(Encounter: e));
  }
}

class _CopyWithStubImpl$Input$SavedPerson_insert_input<TRes>
    implements CopyWith$Input$SavedPerson_insert_input<TRes> {
  _CopyWithStubImpl$Input$SavedPerson_insert_input(this._res);

  TRes _res;

  call({
    Input$Encounter_obj_rel_insert_input? Encounter,
    String? email,
    String? id,
    String? name,
    String? phone,
    String? savingEncounter,
  }) =>
      _res;
  CopyWith$Input$Encounter_obj_rel_insert_input<TRes> get Encounter =>
      CopyWith$Input$Encounter_obj_rel_insert_input.stub(_res);
}

class Input$SoulWinningSession_insert_input {
  factory Input$SoulWinningSession_insert_input({
    Input$Event_obj_rel_insert_input? Event,
    Input$SoulWinningSessionGroup_arr_rel_insert_input?
        SoulWinningSessionGroups,
    String? event,
    String? id,
    String? name,
    String? scheduledEndTimeInUtc,
    String? scheduledStartTimeInUtc,
  }) =>
      Input$SoulWinningSession_insert_input._({
        if (Event != null) r'Event': Event,
        if (SoulWinningSessionGroups != null)
          r'SoulWinningSessionGroups': SoulWinningSessionGroups,
        if (event != null) r'event': event,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
        if (scheduledEndTimeInUtc != null)
          r'scheduledEndTimeInUtc': scheduledEndTimeInUtc,
        if (scheduledStartTimeInUtc != null)
          r'scheduledStartTimeInUtc': scheduledStartTimeInUtc,
      });

  Input$SoulWinningSession_insert_input._(this._$data);

  factory Input$SoulWinningSession_insert_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Event')) {
      final l$Event = data['Event'];
      result$data['Event'] = l$Event == null
          ? null
          : Input$Event_obj_rel_insert_input.fromJson(
              (l$Event as Map<String, dynamic>));
    }
    if (data.containsKey('SoulWinningSessionGroups')) {
      final l$SoulWinningSessionGroups = data['SoulWinningSessionGroups'];
      result$data['SoulWinningSessionGroups'] =
          l$SoulWinningSessionGroups == null
              ? null
              : Input$SoulWinningSessionGroup_arr_rel_insert_input.fromJson(
                  (l$SoulWinningSessionGroups as Map<String, dynamic>));
    }
    if (data.containsKey('event')) {
      final l$event = data['event'];
      result$data['event'] = (l$event as String?);
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as String?);
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] = (l$name as String?);
    }
    if (data.containsKey('scheduledEndTimeInUtc')) {
      final l$scheduledEndTimeInUtc = data['scheduledEndTimeInUtc'];
      result$data['scheduledEndTimeInUtc'] =
          (l$scheduledEndTimeInUtc as String?);
    }
    if (data.containsKey('scheduledStartTimeInUtc')) {
      final l$scheduledStartTimeInUtc = data['scheduledStartTimeInUtc'];
      result$data['scheduledStartTimeInUtc'] =
          (l$scheduledStartTimeInUtc as String?);
    }
    return Input$SoulWinningSession_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$Event_obj_rel_insert_input? get Event =>
      (_$data['Event'] as Input$Event_obj_rel_insert_input?);
  Input$SoulWinningSessionGroup_arr_rel_insert_input?
      get SoulWinningSessionGroups => (_$data['SoulWinningSessionGroups']
          as Input$SoulWinningSessionGroup_arr_rel_insert_input?);
  String? get event => (_$data['event'] as String?);
  String? get id => (_$data['id'] as String?);
  String? get name => (_$data['name'] as String?);
  String? get scheduledEndTimeInUtc =>
      (_$data['scheduledEndTimeInUtc'] as String?);
  String? get scheduledStartTimeInUtc =>
      (_$data['scheduledStartTimeInUtc'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Event')) {
      final l$Event = Event;
      result$data['Event'] = l$Event?.toJson();
    }
    if (_$data.containsKey('SoulWinningSessionGroups')) {
      final l$SoulWinningSessionGroups = SoulWinningSessionGroups;
      result$data['SoulWinningSessionGroups'] =
          l$SoulWinningSessionGroups?.toJson();
    }
    if (_$data.containsKey('event')) {
      final l$event = event;
      result$data['event'] = l$event;
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] = l$name;
    }
    if (_$data.containsKey('scheduledEndTimeInUtc')) {
      final l$scheduledEndTimeInUtc = scheduledEndTimeInUtc;
      result$data['scheduledEndTimeInUtc'] = l$scheduledEndTimeInUtc;
    }
    if (_$data.containsKey('scheduledStartTimeInUtc')) {
      final l$scheduledStartTimeInUtc = scheduledStartTimeInUtc;
      result$data['scheduledStartTimeInUtc'] = l$scheduledStartTimeInUtc;
    }
    return result$data;
  }

  CopyWith$Input$SoulWinningSession_insert_input<
          Input$SoulWinningSession_insert_input>
      get copyWith => CopyWith$Input$SoulWinningSession_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SoulWinningSession_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Event = Event;
    final lOther$Event = other.Event;
    if (_$data.containsKey('Event') != other._$data.containsKey('Event')) {
      return false;
    }
    if (l$Event != lOther$Event) {
      return false;
    }
    final l$SoulWinningSessionGroups = SoulWinningSessionGroups;
    final lOther$SoulWinningSessionGroups = other.SoulWinningSessionGroups;
    if (_$data.containsKey('SoulWinningSessionGroups') !=
        other._$data.containsKey('SoulWinningSessionGroups')) {
      return false;
    }
    if (l$SoulWinningSessionGroups != lOther$SoulWinningSessionGroups) {
      return false;
    }
    final l$event = event;
    final lOther$event = other.event;
    if (_$data.containsKey('event') != other._$data.containsKey('event')) {
      return false;
    }
    if (l$event != lOther$event) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$scheduledEndTimeInUtc = scheduledEndTimeInUtc;
    final lOther$scheduledEndTimeInUtc = other.scheduledEndTimeInUtc;
    if (_$data.containsKey('scheduledEndTimeInUtc') !=
        other._$data.containsKey('scheduledEndTimeInUtc')) {
      return false;
    }
    if (l$scheduledEndTimeInUtc != lOther$scheduledEndTimeInUtc) {
      return false;
    }
    final l$scheduledStartTimeInUtc = scheduledStartTimeInUtc;
    final lOther$scheduledStartTimeInUtc = other.scheduledStartTimeInUtc;
    if (_$data.containsKey('scheduledStartTimeInUtc') !=
        other._$data.containsKey('scheduledStartTimeInUtc')) {
      return false;
    }
    if (l$scheduledStartTimeInUtc != lOther$scheduledStartTimeInUtc) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Event = Event;
    final l$SoulWinningSessionGroups = SoulWinningSessionGroups;
    final l$event = event;
    final l$id = id;
    final l$name = name;
    final l$scheduledEndTimeInUtc = scheduledEndTimeInUtc;
    final l$scheduledStartTimeInUtc = scheduledStartTimeInUtc;
    return Object.hashAll([
      _$data.containsKey('Event') ? l$Event : const {},
      _$data.containsKey('SoulWinningSessionGroups')
          ? l$SoulWinningSessionGroups
          : const {},
      _$data.containsKey('event') ? l$event : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('scheduledEndTimeInUtc')
          ? l$scheduledEndTimeInUtc
          : const {},
      _$data.containsKey('scheduledStartTimeInUtc')
          ? l$scheduledStartTimeInUtc
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$SoulWinningSession_insert_input<TRes> {
  factory CopyWith$Input$SoulWinningSession_insert_input(
    Input$SoulWinningSession_insert_input instance,
    TRes Function(Input$SoulWinningSession_insert_input) then,
  ) = _CopyWithImpl$Input$SoulWinningSession_insert_input;

  factory CopyWith$Input$SoulWinningSession_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$SoulWinningSession_insert_input;

  TRes call({
    Input$Event_obj_rel_insert_input? Event,
    Input$SoulWinningSessionGroup_arr_rel_insert_input?
        SoulWinningSessionGroups,
    String? event,
    String? id,
    String? name,
    String? scheduledEndTimeInUtc,
    String? scheduledStartTimeInUtc,
  });
  CopyWith$Input$Event_obj_rel_insert_input<TRes> get Event;
  CopyWith$Input$SoulWinningSessionGroup_arr_rel_insert_input<TRes>
      get SoulWinningSessionGroups;
}

class _CopyWithImpl$Input$SoulWinningSession_insert_input<TRes>
    implements CopyWith$Input$SoulWinningSession_insert_input<TRes> {
  _CopyWithImpl$Input$SoulWinningSession_insert_input(
    this._instance,
    this._then,
  );

  final Input$SoulWinningSession_insert_input _instance;

  final TRes Function(Input$SoulWinningSession_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Event = _undefined,
    Object? SoulWinningSessionGroups = _undefined,
    Object? event = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
    Object? scheduledEndTimeInUtc = _undefined,
    Object? scheduledStartTimeInUtc = _undefined,
  }) =>
      _then(Input$SoulWinningSession_insert_input._({
        ..._instance._$data,
        if (Event != _undefined)
          'Event': (Event as Input$Event_obj_rel_insert_input?),
        if (SoulWinningSessionGroups != _undefined)
          'SoulWinningSessionGroups': (SoulWinningSessionGroups
              as Input$SoulWinningSessionGroup_arr_rel_insert_input?),
        if (event != _undefined) 'event': (event as String?),
        if (id != _undefined) 'id': (id as String?),
        if (name != _undefined) 'name': (name as String?),
        if (scheduledEndTimeInUtc != _undefined)
          'scheduledEndTimeInUtc': (scheduledEndTimeInUtc as String?),
        if (scheduledStartTimeInUtc != _undefined)
          'scheduledStartTimeInUtc': (scheduledStartTimeInUtc as String?),
      }));
  CopyWith$Input$Event_obj_rel_insert_input<TRes> get Event {
    final local$Event = _instance.Event;
    return local$Event == null
        ? CopyWith$Input$Event_obj_rel_insert_input.stub(_then(_instance))
        : CopyWith$Input$Event_obj_rel_insert_input(
            local$Event, (e) => call(Event: e));
  }

  CopyWith$Input$SoulWinningSessionGroup_arr_rel_insert_input<TRes>
      get SoulWinningSessionGroups {
    final local$SoulWinningSessionGroups = _instance.SoulWinningSessionGroups;
    return local$SoulWinningSessionGroups == null
        ? CopyWith$Input$SoulWinningSessionGroup_arr_rel_insert_input.stub(
            _then(_instance))
        : CopyWith$Input$SoulWinningSessionGroup_arr_rel_insert_input(
            local$SoulWinningSessionGroups,
            (e) => call(SoulWinningSessionGroups: e));
  }
}

class _CopyWithStubImpl$Input$SoulWinningSession_insert_input<TRes>
    implements CopyWith$Input$SoulWinningSession_insert_input<TRes> {
  _CopyWithStubImpl$Input$SoulWinningSession_insert_input(this._res);

  TRes _res;

  call({
    Input$Event_obj_rel_insert_input? Event,
    Input$SoulWinningSessionGroup_arr_rel_insert_input?
        SoulWinningSessionGroups,
    String? event,
    String? id,
    String? name,
    String? scheduledEndTimeInUtc,
    String? scheduledStartTimeInUtc,
  }) =>
      _res;
  CopyWith$Input$Event_obj_rel_insert_input<TRes> get Event =>
      CopyWith$Input$Event_obj_rel_insert_input.stub(_res);
  CopyWith$Input$SoulWinningSessionGroup_arr_rel_insert_input<TRes>
      get SoulWinningSessionGroups =>
          CopyWith$Input$SoulWinningSessionGroup_arr_rel_insert_input.stub(
              _res);
}

class Input$SoulWinningSessionGroup_insert_input {
  factory Input$SoulWinningSessionGroup_insert_input({
    Input$Encounter_arr_rel_insert_input? Encounters,
    Input$MapArea_obj_rel_insert_input? MapArea,
    Input$SoulWinningSession_obj_rel_insert_input? SoulWinningSession,
    Input$_SoulWinningSessionGroup_members_arr_rel_insert_input?
        $_SoulWinningSessionGroup_members,
    String? assignedMapArea,
    String? id,
    String? session,
  }) =>
      Input$SoulWinningSessionGroup_insert_input._({
        if (Encounters != null) r'Encounters': Encounters,
        if (MapArea != null) r'MapArea': MapArea,
        if (SoulWinningSession != null)
          r'SoulWinningSession': SoulWinningSession,
        if ($_SoulWinningSessionGroup_members != null)
          r'_SoulWinningSessionGroup_members':
              $_SoulWinningSessionGroup_members,
        if (assignedMapArea != null) r'assignedMapArea': assignedMapArea,
        if (id != null) r'id': id,
        if (session != null) r'session': session,
      });

  Input$SoulWinningSessionGroup_insert_input._(this._$data);

  factory Input$SoulWinningSessionGroup_insert_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Encounters')) {
      final l$Encounters = data['Encounters'];
      result$data['Encounters'] = l$Encounters == null
          ? null
          : Input$Encounter_arr_rel_insert_input.fromJson(
              (l$Encounters as Map<String, dynamic>));
    }
    if (data.containsKey('MapArea')) {
      final l$MapArea = data['MapArea'];
      result$data['MapArea'] = l$MapArea == null
          ? null
          : Input$MapArea_obj_rel_insert_input.fromJson(
              (l$MapArea as Map<String, dynamic>));
    }
    if (data.containsKey('SoulWinningSession')) {
      final l$SoulWinningSession = data['SoulWinningSession'];
      result$data['SoulWinningSession'] = l$SoulWinningSession == null
          ? null
          : Input$SoulWinningSession_obj_rel_insert_input.fromJson(
              (l$SoulWinningSession as Map<String, dynamic>));
    }
    if (data.containsKey('_SoulWinningSessionGroup_members')) {
      final l$$_SoulWinningSessionGroup_members =
          data['_SoulWinningSessionGroup_members'];
      result$data['_SoulWinningSessionGroup_members'] =
          l$$_SoulWinningSessionGroup_members == null
              ? null
              : Input$_SoulWinningSessionGroup_members_arr_rel_insert_input
                  .fromJson((l$$_SoulWinningSessionGroup_members
                      as Map<String, dynamic>));
    }
    if (data.containsKey('assignedMapArea')) {
      final l$assignedMapArea = data['assignedMapArea'];
      result$data['assignedMapArea'] = (l$assignedMapArea as String?);
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as String?);
    }
    if (data.containsKey('session')) {
      final l$session = data['session'];
      result$data['session'] = (l$session as String?);
    }
    return Input$SoulWinningSessionGroup_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$Encounter_arr_rel_insert_input? get Encounters =>
      (_$data['Encounters'] as Input$Encounter_arr_rel_insert_input?);
  Input$MapArea_obj_rel_insert_input? get MapArea =>
      (_$data['MapArea'] as Input$MapArea_obj_rel_insert_input?);
  Input$SoulWinningSession_obj_rel_insert_input? get SoulWinningSession =>
      (_$data['SoulWinningSession']
          as Input$SoulWinningSession_obj_rel_insert_input?);
  Input$_SoulWinningSessionGroup_members_arr_rel_insert_input?
      get $_SoulWinningSessionGroup_members =>
          (_$data['_SoulWinningSessionGroup_members']
              as Input$_SoulWinningSessionGroup_members_arr_rel_insert_input?);
  String? get assignedMapArea => (_$data['assignedMapArea'] as String?);
  String? get id => (_$data['id'] as String?);
  String? get session => (_$data['session'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Encounters')) {
      final l$Encounters = Encounters;
      result$data['Encounters'] = l$Encounters?.toJson();
    }
    if (_$data.containsKey('MapArea')) {
      final l$MapArea = MapArea;
      result$data['MapArea'] = l$MapArea?.toJson();
    }
    if (_$data.containsKey('SoulWinningSession')) {
      final l$SoulWinningSession = SoulWinningSession;
      result$data['SoulWinningSession'] = l$SoulWinningSession?.toJson();
    }
    if (_$data.containsKey('_SoulWinningSessionGroup_members')) {
      final l$$_SoulWinningSessionGroup_members =
          $_SoulWinningSessionGroup_members;
      result$data['_SoulWinningSessionGroup_members'] =
          l$$_SoulWinningSessionGroup_members?.toJson();
    }
    if (_$data.containsKey('assignedMapArea')) {
      final l$assignedMapArea = assignedMapArea;
      result$data['assignedMapArea'] = l$assignedMapArea;
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('session')) {
      final l$session = session;
      result$data['session'] = l$session;
    }
    return result$data;
  }

  CopyWith$Input$SoulWinningSessionGroup_insert_input<
          Input$SoulWinningSessionGroup_insert_input>
      get copyWith => CopyWith$Input$SoulWinningSessionGroup_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SoulWinningSessionGroup_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Encounters = Encounters;
    final lOther$Encounters = other.Encounters;
    if (_$data.containsKey('Encounters') !=
        other._$data.containsKey('Encounters')) {
      return false;
    }
    if (l$Encounters != lOther$Encounters) {
      return false;
    }
    final l$MapArea = MapArea;
    final lOther$MapArea = other.MapArea;
    if (_$data.containsKey('MapArea') != other._$data.containsKey('MapArea')) {
      return false;
    }
    if (l$MapArea != lOther$MapArea) {
      return false;
    }
    final l$SoulWinningSession = SoulWinningSession;
    final lOther$SoulWinningSession = other.SoulWinningSession;
    if (_$data.containsKey('SoulWinningSession') !=
        other._$data.containsKey('SoulWinningSession')) {
      return false;
    }
    if (l$SoulWinningSession != lOther$SoulWinningSession) {
      return false;
    }
    final l$$_SoulWinningSessionGroup_members =
        $_SoulWinningSessionGroup_members;
    final lOther$$_SoulWinningSessionGroup_members =
        other.$_SoulWinningSessionGroup_members;
    if (_$data.containsKey('_SoulWinningSessionGroup_members') !=
        other._$data.containsKey('_SoulWinningSessionGroup_members')) {
      return false;
    }
    if (l$$_SoulWinningSessionGroup_members !=
        lOther$$_SoulWinningSessionGroup_members) {
      return false;
    }
    final l$assignedMapArea = assignedMapArea;
    final lOther$assignedMapArea = other.assignedMapArea;
    if (_$data.containsKey('assignedMapArea') !=
        other._$data.containsKey('assignedMapArea')) {
      return false;
    }
    if (l$assignedMapArea != lOther$assignedMapArea) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$session = session;
    final lOther$session = other.session;
    if (_$data.containsKey('session') != other._$data.containsKey('session')) {
      return false;
    }
    if (l$session != lOther$session) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Encounters = Encounters;
    final l$MapArea = MapArea;
    final l$SoulWinningSession = SoulWinningSession;
    final l$$_SoulWinningSessionGroup_members =
        $_SoulWinningSessionGroup_members;
    final l$assignedMapArea = assignedMapArea;
    final l$id = id;
    final l$session = session;
    return Object.hashAll([
      _$data.containsKey('Encounters') ? l$Encounters : const {},
      _$data.containsKey('MapArea') ? l$MapArea : const {},
      _$data.containsKey('SoulWinningSession')
          ? l$SoulWinningSession
          : const {},
      _$data.containsKey('_SoulWinningSessionGroup_members')
          ? l$$_SoulWinningSessionGroup_members
          : const {},
      _$data.containsKey('assignedMapArea') ? l$assignedMapArea : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('session') ? l$session : const {},
    ]);
  }
}

abstract class CopyWith$Input$SoulWinningSessionGroup_insert_input<TRes> {
  factory CopyWith$Input$SoulWinningSessionGroup_insert_input(
    Input$SoulWinningSessionGroup_insert_input instance,
    TRes Function(Input$SoulWinningSessionGroup_insert_input) then,
  ) = _CopyWithImpl$Input$SoulWinningSessionGroup_insert_input;

  factory CopyWith$Input$SoulWinningSessionGroup_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$SoulWinningSessionGroup_insert_input;

  TRes call({
    Input$Encounter_arr_rel_insert_input? Encounters,
    Input$MapArea_obj_rel_insert_input? MapArea,
    Input$SoulWinningSession_obj_rel_insert_input? SoulWinningSession,
    Input$_SoulWinningSessionGroup_members_arr_rel_insert_input?
        $_SoulWinningSessionGroup_members,
    String? assignedMapArea,
    String? id,
    String? session,
  });
  CopyWith$Input$Encounter_arr_rel_insert_input<TRes> get Encounters;
  CopyWith$Input$MapArea_obj_rel_insert_input<TRes> get MapArea;
  CopyWith$Input$SoulWinningSession_obj_rel_insert_input<TRes>
      get SoulWinningSession;
  CopyWith$Input$_SoulWinningSessionGroup_members_arr_rel_insert_input<TRes>
      get $_SoulWinningSessionGroup_members;
}

class _CopyWithImpl$Input$SoulWinningSessionGroup_insert_input<TRes>
    implements CopyWith$Input$SoulWinningSessionGroup_insert_input<TRes> {
  _CopyWithImpl$Input$SoulWinningSessionGroup_insert_input(
    this._instance,
    this._then,
  );

  final Input$SoulWinningSessionGroup_insert_input _instance;

  final TRes Function(Input$SoulWinningSessionGroup_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Encounters = _undefined,
    Object? MapArea = _undefined,
    Object? SoulWinningSession = _undefined,
    Object? $_SoulWinningSessionGroup_members = _undefined,
    Object? assignedMapArea = _undefined,
    Object? id = _undefined,
    Object? session = _undefined,
  }) =>
      _then(Input$SoulWinningSessionGroup_insert_input._({
        ..._instance._$data,
        if (Encounters != _undefined)
          'Encounters': (Encounters as Input$Encounter_arr_rel_insert_input?),
        if (MapArea != _undefined)
          'MapArea': (MapArea as Input$MapArea_obj_rel_insert_input?),
        if (SoulWinningSession != _undefined)
          'SoulWinningSession': (SoulWinningSession
              as Input$SoulWinningSession_obj_rel_insert_input?),
        if ($_SoulWinningSessionGroup_members != _undefined)
          '_SoulWinningSessionGroup_members': ($_SoulWinningSessionGroup_members
              as Input$_SoulWinningSessionGroup_members_arr_rel_insert_input?),
        if (assignedMapArea != _undefined)
          'assignedMapArea': (assignedMapArea as String?),
        if (id != _undefined) 'id': (id as String?),
        if (session != _undefined) 'session': (session as String?),
      }));
  CopyWith$Input$Encounter_arr_rel_insert_input<TRes> get Encounters {
    final local$Encounters = _instance.Encounters;
    return local$Encounters == null
        ? CopyWith$Input$Encounter_arr_rel_insert_input.stub(_then(_instance))
        : CopyWith$Input$Encounter_arr_rel_insert_input(
            local$Encounters, (e) => call(Encounters: e));
  }

  CopyWith$Input$MapArea_obj_rel_insert_input<TRes> get MapArea {
    final local$MapArea = _instance.MapArea;
    return local$MapArea == null
        ? CopyWith$Input$MapArea_obj_rel_insert_input.stub(_then(_instance))
        : CopyWith$Input$MapArea_obj_rel_insert_input(
            local$MapArea, (e) => call(MapArea: e));
  }

  CopyWith$Input$SoulWinningSession_obj_rel_insert_input<TRes>
      get SoulWinningSession {
    final local$SoulWinningSession = _instance.SoulWinningSession;
    return local$SoulWinningSession == null
        ? CopyWith$Input$SoulWinningSession_obj_rel_insert_input.stub(
            _then(_instance))
        : CopyWith$Input$SoulWinningSession_obj_rel_insert_input(
            local$SoulWinningSession, (e) => call(SoulWinningSession: e));
  }

  CopyWith$Input$_SoulWinningSessionGroup_members_arr_rel_insert_input<TRes>
      get $_SoulWinningSessionGroup_members {
    final local$$_SoulWinningSessionGroup_members =
        _instance.$_SoulWinningSessionGroup_members;
    return local$$_SoulWinningSessionGroup_members == null
        ? CopyWith$Input$_SoulWinningSessionGroup_members_arr_rel_insert_input
            .stub(_then(_instance))
        : CopyWith$Input$_SoulWinningSessionGroup_members_arr_rel_insert_input(
            local$$_SoulWinningSessionGroup_members,
            (e) => call($_SoulWinningSessionGroup_members: e));
  }
}

class _CopyWithStubImpl$Input$SoulWinningSessionGroup_insert_input<TRes>
    implements CopyWith$Input$SoulWinningSessionGroup_insert_input<TRes> {
  _CopyWithStubImpl$Input$SoulWinningSessionGroup_insert_input(this._res);

  TRes _res;

  call({
    Input$Encounter_arr_rel_insert_input? Encounters,
    Input$MapArea_obj_rel_insert_input? MapArea,
    Input$SoulWinningSession_obj_rel_insert_input? SoulWinningSession,
    Input$_SoulWinningSessionGroup_members_arr_rel_insert_input?
        $_SoulWinningSessionGroup_members,
    String? assignedMapArea,
    String? id,
    String? session,
  }) =>
      _res;
  CopyWith$Input$Encounter_arr_rel_insert_input<TRes> get Encounters =>
      CopyWith$Input$Encounter_arr_rel_insert_input.stub(_res);
  CopyWith$Input$MapArea_obj_rel_insert_input<TRes> get MapArea =>
      CopyWith$Input$MapArea_obj_rel_insert_input.stub(_res);
  CopyWith$Input$SoulWinningSession_obj_rel_insert_input<TRes>
      get SoulWinningSession =>
          CopyWith$Input$SoulWinningSession_obj_rel_insert_input.stub(_res);
  CopyWith$Input$_SoulWinningSessionGroup_members_arr_rel_insert_input<TRes>
      get $_SoulWinningSessionGroup_members =>
          CopyWith$Input$_SoulWinningSessionGroup_members_arr_rel_insert_input
              .stub(_res);
}

class Input$User_insert_input {
  factory Input$User_insert_input({
    Input$_Organization_adminsOfOrganization_arr_rel_insert_input?
        $_Organization_adminsOfOrganizations,
    Input$_Organization_membersInOrganization_arr_rel_insert_input?
        $_Organization_membersInOrganizations,
    Input$_SoulWinningSessionGroup_members_arr_rel_insert_input?
        $_SoulWinningSessionGroup_members,
    String? adminUiPassword,
    String? createdAt,
    String? email,
    String? id,
    String? name,
  }) =>
      Input$User_insert_input._({
        if ($_Organization_adminsOfOrganizations != null)
          r'_Organization_adminsOfOrganizations':
              $_Organization_adminsOfOrganizations,
        if ($_Organization_membersInOrganizations != null)
          r'_Organization_membersInOrganizations':
              $_Organization_membersInOrganizations,
        if ($_SoulWinningSessionGroup_members != null)
          r'_SoulWinningSessionGroup_members':
              $_SoulWinningSessionGroup_members,
        if (adminUiPassword != null) r'adminUiPassword': adminUiPassword,
        if (createdAt != null) r'createdAt': createdAt,
        if (email != null) r'email': email,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
      });

  Input$User_insert_input._(this._$data);

  factory Input$User_insert_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_Organization_adminsOfOrganizations')) {
      final l$$_Organization_adminsOfOrganizations =
          data['_Organization_adminsOfOrganizations'];
      result$data['_Organization_adminsOfOrganizations'] =
          l$$_Organization_adminsOfOrganizations == null
              ? null
              : Input$_Organization_adminsOfOrganization_arr_rel_insert_input
                  .fromJson((l$$_Organization_adminsOfOrganizations
                      as Map<String, dynamic>));
    }
    if (data.containsKey('_Organization_membersInOrganizations')) {
      final l$$_Organization_membersInOrganizations =
          data['_Organization_membersInOrganizations'];
      result$data['_Organization_membersInOrganizations'] =
          l$$_Organization_membersInOrganizations == null
              ? null
              : Input$_Organization_membersInOrganization_arr_rel_insert_input
                  .fromJson((l$$_Organization_membersInOrganizations
                      as Map<String, dynamic>));
    }
    if (data.containsKey('_SoulWinningSessionGroup_members')) {
      final l$$_SoulWinningSessionGroup_members =
          data['_SoulWinningSessionGroup_members'];
      result$data['_SoulWinningSessionGroup_members'] =
          l$$_SoulWinningSessionGroup_members == null
              ? null
              : Input$_SoulWinningSessionGroup_members_arr_rel_insert_input
                  .fromJson((l$$_SoulWinningSessionGroup_members
                      as Map<String, dynamic>));
    }
    if (data.containsKey('adminUiPassword')) {
      final l$adminUiPassword = data['adminUiPassword'];
      result$data['adminUiPassword'] = (l$adminUiPassword as String?);
    }
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] = (l$createdAt as String?);
    }
    if (data.containsKey('email')) {
      final l$email = data['email'];
      result$data['email'] = (l$email as String?);
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as String?);
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] = (l$name as String?);
    }
    return Input$User_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$_Organization_adminsOfOrganization_arr_rel_insert_input?
      get $_Organization_adminsOfOrganizations => (_$data[
              '_Organization_adminsOfOrganizations']
          as Input$_Organization_adminsOfOrganization_arr_rel_insert_input?);
  Input$_Organization_membersInOrganization_arr_rel_insert_input?
      get $_Organization_membersInOrganizations => (_$data[
              '_Organization_membersInOrganizations']
          as Input$_Organization_membersInOrganization_arr_rel_insert_input?);
  Input$_SoulWinningSessionGroup_members_arr_rel_insert_input?
      get $_SoulWinningSessionGroup_members =>
          (_$data['_SoulWinningSessionGroup_members']
              as Input$_SoulWinningSessionGroup_members_arr_rel_insert_input?);
  String? get adminUiPassword => (_$data['adminUiPassword'] as String?);
  String? get createdAt => (_$data['createdAt'] as String?);
  String? get email => (_$data['email'] as String?);
  String? get id => (_$data['id'] as String?);
  String? get name => (_$data['name'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_Organization_adminsOfOrganizations')) {
      final l$$_Organization_adminsOfOrganizations =
          $_Organization_adminsOfOrganizations;
      result$data['_Organization_adminsOfOrganizations'] =
          l$$_Organization_adminsOfOrganizations?.toJson();
    }
    if (_$data.containsKey('_Organization_membersInOrganizations')) {
      final l$$_Organization_membersInOrganizations =
          $_Organization_membersInOrganizations;
      result$data['_Organization_membersInOrganizations'] =
          l$$_Organization_membersInOrganizations?.toJson();
    }
    if (_$data.containsKey('_SoulWinningSessionGroup_members')) {
      final l$$_SoulWinningSessionGroup_members =
          $_SoulWinningSessionGroup_members;
      result$data['_SoulWinningSessionGroup_members'] =
          l$$_SoulWinningSessionGroup_members?.toJson();
    }
    if (_$data.containsKey('adminUiPassword')) {
      final l$adminUiPassword = adminUiPassword;
      result$data['adminUiPassword'] = l$adminUiPassword;
    }
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] = l$createdAt;
    }
    if (_$data.containsKey('email')) {
      final l$email = email;
      result$data['email'] = l$email;
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] = l$name;
    }
    return result$data;
  }

  CopyWith$Input$User_insert_input<Input$User_insert_input> get copyWith =>
      CopyWith$Input$User_insert_input(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$User_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_Organization_adminsOfOrganizations =
        $_Organization_adminsOfOrganizations;
    final lOther$$_Organization_adminsOfOrganizations =
        other.$_Organization_adminsOfOrganizations;
    if (_$data.containsKey('_Organization_adminsOfOrganizations') !=
        other._$data.containsKey('_Organization_adminsOfOrganizations')) {
      return false;
    }
    if (l$$_Organization_adminsOfOrganizations !=
        lOther$$_Organization_adminsOfOrganizations) {
      return false;
    }
    final l$$_Organization_membersInOrganizations =
        $_Organization_membersInOrganizations;
    final lOther$$_Organization_membersInOrganizations =
        other.$_Organization_membersInOrganizations;
    if (_$data.containsKey('_Organization_membersInOrganizations') !=
        other._$data.containsKey('_Organization_membersInOrganizations')) {
      return false;
    }
    if (l$$_Organization_membersInOrganizations !=
        lOther$$_Organization_membersInOrganizations) {
      return false;
    }
    final l$$_SoulWinningSessionGroup_members =
        $_SoulWinningSessionGroup_members;
    final lOther$$_SoulWinningSessionGroup_members =
        other.$_SoulWinningSessionGroup_members;
    if (_$data.containsKey('_SoulWinningSessionGroup_members') !=
        other._$data.containsKey('_SoulWinningSessionGroup_members')) {
      return false;
    }
    if (l$$_SoulWinningSessionGroup_members !=
        lOther$$_SoulWinningSessionGroup_members) {
      return false;
    }
    final l$adminUiPassword = adminUiPassword;
    final lOther$adminUiPassword = other.adminUiPassword;
    if (_$data.containsKey('adminUiPassword') !=
        other._$data.containsKey('adminUiPassword')) {
      return false;
    }
    if (l$adminUiPassword != lOther$adminUiPassword) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$email = email;
    final lOther$email = other.email;
    if (_$data.containsKey('email') != other._$data.containsKey('email')) {
      return false;
    }
    if (l$email != lOther$email) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_Organization_adminsOfOrganizations =
        $_Organization_adminsOfOrganizations;
    final l$$_Organization_membersInOrganizations =
        $_Organization_membersInOrganizations;
    final l$$_SoulWinningSessionGroup_members =
        $_SoulWinningSessionGroup_members;
    final l$adminUiPassword = adminUiPassword;
    final l$createdAt = createdAt;
    final l$email = email;
    final l$id = id;
    final l$name = name;
    return Object.hashAll([
      _$data.containsKey('_Organization_adminsOfOrganizations')
          ? l$$_Organization_adminsOfOrganizations
          : const {},
      _$data.containsKey('_Organization_membersInOrganizations')
          ? l$$_Organization_membersInOrganizations
          : const {},
      _$data.containsKey('_SoulWinningSessionGroup_members')
          ? l$$_SoulWinningSessionGroup_members
          : const {},
      _$data.containsKey('adminUiPassword') ? l$adminUiPassword : const {},
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('email') ? l$email : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
    ]);
  }
}

abstract class CopyWith$Input$User_insert_input<TRes> {
  factory CopyWith$Input$User_insert_input(
    Input$User_insert_input instance,
    TRes Function(Input$User_insert_input) then,
  ) = _CopyWithImpl$Input$User_insert_input;

  factory CopyWith$Input$User_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$User_insert_input;

  TRes call({
    Input$_Organization_adminsOfOrganization_arr_rel_insert_input?
        $_Organization_adminsOfOrganizations,
    Input$_Organization_membersInOrganization_arr_rel_insert_input?
        $_Organization_membersInOrganizations,
    Input$_SoulWinningSessionGroup_members_arr_rel_insert_input?
        $_SoulWinningSessionGroup_members,
    String? adminUiPassword,
    String? createdAt,
    String? email,
    String? id,
    String? name,
  });
  CopyWith$Input$_Organization_adminsOfOrganization_arr_rel_insert_input<TRes>
      get $_Organization_adminsOfOrganizations;
  CopyWith$Input$_Organization_membersInOrganization_arr_rel_insert_input<TRes>
      get $_Organization_membersInOrganizations;
  CopyWith$Input$_SoulWinningSessionGroup_members_arr_rel_insert_input<TRes>
      get $_SoulWinningSessionGroup_members;
}

class _CopyWithImpl$Input$User_insert_input<TRes>
    implements CopyWith$Input$User_insert_input<TRes> {
  _CopyWithImpl$Input$User_insert_input(
    this._instance,
    this._then,
  );

  final Input$User_insert_input _instance;

  final TRes Function(Input$User_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_Organization_adminsOfOrganizations = _undefined,
    Object? $_Organization_membersInOrganizations = _undefined,
    Object? $_SoulWinningSessionGroup_members = _undefined,
    Object? adminUiPassword = _undefined,
    Object? createdAt = _undefined,
    Object? email = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
  }) =>
      _then(Input$User_insert_input._({
        ..._instance._$data,
        if ($_Organization_adminsOfOrganizations != _undefined)
          '_Organization_adminsOfOrganizations':
              ($_Organization_adminsOfOrganizations
                  as Input$_Organization_adminsOfOrganization_arr_rel_insert_input?),
        if ($_Organization_membersInOrganizations != _undefined)
          '_Organization_membersInOrganizations':
              ($_Organization_membersInOrganizations
                  as Input$_Organization_membersInOrganization_arr_rel_insert_input?),
        if ($_SoulWinningSessionGroup_members != _undefined)
          '_SoulWinningSessionGroup_members': ($_SoulWinningSessionGroup_members
              as Input$_SoulWinningSessionGroup_members_arr_rel_insert_input?),
        if (adminUiPassword != _undefined)
          'adminUiPassword': (adminUiPassword as String?),
        if (createdAt != _undefined) 'createdAt': (createdAt as String?),
        if (email != _undefined) 'email': (email as String?),
        if (id != _undefined) 'id': (id as String?),
        if (name != _undefined) 'name': (name as String?),
      }));
  CopyWith$Input$_Organization_adminsOfOrganization_arr_rel_insert_input<TRes>
      get $_Organization_adminsOfOrganizations {
    final local$$_Organization_adminsOfOrganizations =
        _instance.$_Organization_adminsOfOrganizations;
    return local$$_Organization_adminsOfOrganizations == null
        ? CopyWith$Input$_Organization_adminsOfOrganization_arr_rel_insert_input
            .stub(_then(_instance))
        : CopyWith$Input$_Organization_adminsOfOrganization_arr_rel_insert_input(
            local$$_Organization_adminsOfOrganizations,
            (e) => call($_Organization_adminsOfOrganizations: e));
  }

  CopyWith$Input$_Organization_membersInOrganization_arr_rel_insert_input<TRes>
      get $_Organization_membersInOrganizations {
    final local$$_Organization_membersInOrganizations =
        _instance.$_Organization_membersInOrganizations;
    return local$$_Organization_membersInOrganizations == null
        ? CopyWith$Input$_Organization_membersInOrganization_arr_rel_insert_input
            .stub(_then(_instance))
        : CopyWith$Input$_Organization_membersInOrganization_arr_rel_insert_input(
            local$$_Organization_membersInOrganizations,
            (e) => call($_Organization_membersInOrganizations: e));
  }

  CopyWith$Input$_SoulWinningSessionGroup_members_arr_rel_insert_input<TRes>
      get $_SoulWinningSessionGroup_members {
    final local$$_SoulWinningSessionGroup_members =
        _instance.$_SoulWinningSessionGroup_members;
    return local$$_SoulWinningSessionGroup_members == null
        ? CopyWith$Input$_SoulWinningSessionGroup_members_arr_rel_insert_input
            .stub(_then(_instance))
        : CopyWith$Input$_SoulWinningSessionGroup_members_arr_rel_insert_input(
            local$$_SoulWinningSessionGroup_members,
            (e) => call($_SoulWinningSessionGroup_members: e));
  }
}

class _CopyWithStubImpl$Input$User_insert_input<TRes>
    implements CopyWith$Input$User_insert_input<TRes> {
  _CopyWithStubImpl$Input$User_insert_input(this._res);

  TRes _res;

  call({
    Input$_Organization_adminsOfOrganization_arr_rel_insert_input?
        $_Organization_adminsOfOrganizations,
    Input$_Organization_membersInOrganization_arr_rel_insert_input?
        $_Organization_membersInOrganizations,
    Input$_SoulWinningSessionGroup_members_arr_rel_insert_input?
        $_SoulWinningSessionGroup_members,
    String? adminUiPassword,
    String? createdAt,
    String? email,
    String? id,
    String? name,
  }) =>
      _res;
  CopyWith$Input$_Organization_adminsOfOrganization_arr_rel_insert_input<TRes>
      get $_Organization_adminsOfOrganizations =>
          CopyWith$Input$_Organization_adminsOfOrganization_arr_rel_insert_input
              .stub(_res);
  CopyWith$Input$_Organization_membersInOrganization_arr_rel_insert_input<TRes>
      get $_Organization_membersInOrganizations =>
          CopyWith$Input$_Organization_membersInOrganization_arr_rel_insert_input
              .stub(_res);
  CopyWith$Input$_SoulWinningSessionGroup_members_arr_rel_insert_input<TRes>
      get $_SoulWinningSessionGroup_members =>
          CopyWith$Input$_SoulWinningSessionGroup_members_arr_rel_insert_input
              .stub(_res);
}

class Input$_Organization_adminsOfOrganization_insert_input {
  factory Input$_Organization_adminsOfOrganization_insert_input({
    String? A,
    String? B,
    Input$Organization_obj_rel_insert_input? Organization,
    Input$User_obj_rel_insert_input? User,
  }) =>
      Input$_Organization_adminsOfOrganization_insert_input._({
        if (A != null) r'A': A,
        if (B != null) r'B': B,
        if (Organization != null) r'Organization': Organization,
        if (User != null) r'User': User,
      });

  Input$_Organization_adminsOfOrganization_insert_input._(this._$data);

  factory Input$_Organization_adminsOfOrganization_insert_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('A')) {
      final l$A = data['A'];
      result$data['A'] = (l$A as String?);
    }
    if (data.containsKey('B')) {
      final l$B = data['B'];
      result$data['B'] = (l$B as String?);
    }
    if (data.containsKey('Organization')) {
      final l$Organization = data['Organization'];
      result$data['Organization'] = l$Organization == null
          ? null
          : Input$Organization_obj_rel_insert_input.fromJson(
              (l$Organization as Map<String, dynamic>));
    }
    if (data.containsKey('User')) {
      final l$User = data['User'];
      result$data['User'] = l$User == null
          ? null
          : Input$User_obj_rel_insert_input.fromJson(
              (l$User as Map<String, dynamic>));
    }
    return Input$_Organization_adminsOfOrganization_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get A => (_$data['A'] as String?);
  String? get B => (_$data['B'] as String?);
  Input$Organization_obj_rel_insert_input? get Organization =>
      (_$data['Organization'] as Input$Organization_obj_rel_insert_input?);
  Input$User_obj_rel_insert_input? get User =>
      (_$data['User'] as Input$User_obj_rel_insert_input?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('A')) {
      final l$A = A;
      result$data['A'] = l$A;
    }
    if (_$data.containsKey('B')) {
      final l$B = B;
      result$data['B'] = l$B;
    }
    if (_$data.containsKey('Organization')) {
      final l$Organization = Organization;
      result$data['Organization'] = l$Organization?.toJson();
    }
    if (_$data.containsKey('User')) {
      final l$User = User;
      result$data['User'] = l$User?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$_Organization_adminsOfOrganization_insert_input<
          Input$_Organization_adminsOfOrganization_insert_input>
      get copyWith =>
          CopyWith$Input$_Organization_adminsOfOrganization_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$_Organization_adminsOfOrganization_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$A = A;
    final lOther$A = other.A;
    if (_$data.containsKey('A') != other._$data.containsKey('A')) {
      return false;
    }
    if (l$A != lOther$A) {
      return false;
    }
    final l$B = B;
    final lOther$B = other.B;
    if (_$data.containsKey('B') != other._$data.containsKey('B')) {
      return false;
    }
    if (l$B != lOther$B) {
      return false;
    }
    final l$Organization = Organization;
    final lOther$Organization = other.Organization;
    if (_$data.containsKey('Organization') !=
        other._$data.containsKey('Organization')) {
      return false;
    }
    if (l$Organization != lOther$Organization) {
      return false;
    }
    final l$User = User;
    final lOther$User = other.User;
    if (_$data.containsKey('User') != other._$data.containsKey('User')) {
      return false;
    }
    if (l$User != lOther$User) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$A = A;
    final l$B = B;
    final l$Organization = Organization;
    final l$User = User;
    return Object.hashAll([
      _$data.containsKey('A') ? l$A : const {},
      _$data.containsKey('B') ? l$B : const {},
      _$data.containsKey('Organization') ? l$Organization : const {},
      _$data.containsKey('User') ? l$User : const {},
    ]);
  }
}

abstract class CopyWith$Input$_Organization_adminsOfOrganization_insert_input<
    TRes> {
  factory CopyWith$Input$_Organization_adminsOfOrganization_insert_input(
    Input$_Organization_adminsOfOrganization_insert_input instance,
    TRes Function(Input$_Organization_adminsOfOrganization_insert_input) then,
  ) = _CopyWithImpl$Input$_Organization_adminsOfOrganization_insert_input;

  factory CopyWith$Input$_Organization_adminsOfOrganization_insert_input.stub(
          TRes res) =
      _CopyWithStubImpl$Input$_Organization_adminsOfOrganization_insert_input;

  TRes call({
    String? A,
    String? B,
    Input$Organization_obj_rel_insert_input? Organization,
    Input$User_obj_rel_insert_input? User,
  });
  CopyWith$Input$Organization_obj_rel_insert_input<TRes> get Organization;
  CopyWith$Input$User_obj_rel_insert_input<TRes> get User;
}

class _CopyWithImpl$Input$_Organization_adminsOfOrganization_insert_input<TRes>
    implements
        CopyWith$Input$_Organization_adminsOfOrganization_insert_input<TRes> {
  _CopyWithImpl$Input$_Organization_adminsOfOrganization_insert_input(
    this._instance,
    this._then,
  );

  final Input$_Organization_adminsOfOrganization_insert_input _instance;

  final TRes Function(Input$_Organization_adminsOfOrganization_insert_input)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? A = _undefined,
    Object? B = _undefined,
    Object? Organization = _undefined,
    Object? User = _undefined,
  }) =>
      _then(Input$_Organization_adminsOfOrganization_insert_input._({
        ..._instance._$data,
        if (A != _undefined) 'A': (A as String?),
        if (B != _undefined) 'B': (B as String?),
        if (Organization != _undefined)
          'Organization':
              (Organization as Input$Organization_obj_rel_insert_input?),
        if (User != _undefined)
          'User': (User as Input$User_obj_rel_insert_input?),
      }));
  CopyWith$Input$Organization_obj_rel_insert_input<TRes> get Organization {
    final local$Organization = _instance.Organization;
    return local$Organization == null
        ? CopyWith$Input$Organization_obj_rel_insert_input.stub(
            _then(_instance))
        : CopyWith$Input$Organization_obj_rel_insert_input(
            local$Organization, (e) => call(Organization: e));
  }

  CopyWith$Input$User_obj_rel_insert_input<TRes> get User {
    final local$User = _instance.User;
    return local$User == null
        ? CopyWith$Input$User_obj_rel_insert_input.stub(_then(_instance))
        : CopyWith$Input$User_obj_rel_insert_input(
            local$User, (e) => call(User: e));
  }
}

class _CopyWithStubImpl$Input$_Organization_adminsOfOrganization_insert_input<
        TRes>
    implements
        CopyWith$Input$_Organization_adminsOfOrganization_insert_input<TRes> {
  _CopyWithStubImpl$Input$_Organization_adminsOfOrganization_insert_input(
      this._res);

  TRes _res;

  call({
    String? A,
    String? B,
    Input$Organization_obj_rel_insert_input? Organization,
    Input$User_obj_rel_insert_input? User,
  }) =>
      _res;
  CopyWith$Input$Organization_obj_rel_insert_input<TRes> get Organization =>
      CopyWith$Input$Organization_obj_rel_insert_input.stub(_res);
  CopyWith$Input$User_obj_rel_insert_input<TRes> get User =>
      CopyWith$Input$User_obj_rel_insert_input.stub(_res);
}

class Input$_Organization_membersInOrganization_insert_input {
  factory Input$_Organization_membersInOrganization_insert_input({
    String? A,
    String? B,
    Input$Organization_obj_rel_insert_input? Organization,
    Input$User_obj_rel_insert_input? User,
  }) =>
      Input$_Organization_membersInOrganization_insert_input._({
        if (A != null) r'A': A,
        if (B != null) r'B': B,
        if (Organization != null) r'Organization': Organization,
        if (User != null) r'User': User,
      });

  Input$_Organization_membersInOrganization_insert_input._(this._$data);

  factory Input$_Organization_membersInOrganization_insert_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('A')) {
      final l$A = data['A'];
      result$data['A'] = (l$A as String?);
    }
    if (data.containsKey('B')) {
      final l$B = data['B'];
      result$data['B'] = (l$B as String?);
    }
    if (data.containsKey('Organization')) {
      final l$Organization = data['Organization'];
      result$data['Organization'] = l$Organization == null
          ? null
          : Input$Organization_obj_rel_insert_input.fromJson(
              (l$Organization as Map<String, dynamic>));
    }
    if (data.containsKey('User')) {
      final l$User = data['User'];
      result$data['User'] = l$User == null
          ? null
          : Input$User_obj_rel_insert_input.fromJson(
              (l$User as Map<String, dynamic>));
    }
    return Input$_Organization_membersInOrganization_insert_input._(
        result$data);
  }

  Map<String, dynamic> _$data;

  String? get A => (_$data['A'] as String?);
  String? get B => (_$data['B'] as String?);
  Input$Organization_obj_rel_insert_input? get Organization =>
      (_$data['Organization'] as Input$Organization_obj_rel_insert_input?);
  Input$User_obj_rel_insert_input? get User =>
      (_$data['User'] as Input$User_obj_rel_insert_input?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('A')) {
      final l$A = A;
      result$data['A'] = l$A;
    }
    if (_$data.containsKey('B')) {
      final l$B = B;
      result$data['B'] = l$B;
    }
    if (_$data.containsKey('Organization')) {
      final l$Organization = Organization;
      result$data['Organization'] = l$Organization?.toJson();
    }
    if (_$data.containsKey('User')) {
      final l$User = User;
      result$data['User'] = l$User?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$_Organization_membersInOrganization_insert_input<
          Input$_Organization_membersInOrganization_insert_input>
      get copyWith =>
          CopyWith$Input$_Organization_membersInOrganization_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$_Organization_membersInOrganization_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$A = A;
    final lOther$A = other.A;
    if (_$data.containsKey('A') != other._$data.containsKey('A')) {
      return false;
    }
    if (l$A != lOther$A) {
      return false;
    }
    final l$B = B;
    final lOther$B = other.B;
    if (_$data.containsKey('B') != other._$data.containsKey('B')) {
      return false;
    }
    if (l$B != lOther$B) {
      return false;
    }
    final l$Organization = Organization;
    final lOther$Organization = other.Organization;
    if (_$data.containsKey('Organization') !=
        other._$data.containsKey('Organization')) {
      return false;
    }
    if (l$Organization != lOther$Organization) {
      return false;
    }
    final l$User = User;
    final lOther$User = other.User;
    if (_$data.containsKey('User') != other._$data.containsKey('User')) {
      return false;
    }
    if (l$User != lOther$User) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$A = A;
    final l$B = B;
    final l$Organization = Organization;
    final l$User = User;
    return Object.hashAll([
      _$data.containsKey('A') ? l$A : const {},
      _$data.containsKey('B') ? l$B : const {},
      _$data.containsKey('Organization') ? l$Organization : const {},
      _$data.containsKey('User') ? l$User : const {},
    ]);
  }
}

abstract class CopyWith$Input$_Organization_membersInOrganization_insert_input<
    TRes> {
  factory CopyWith$Input$_Organization_membersInOrganization_insert_input(
    Input$_Organization_membersInOrganization_insert_input instance,
    TRes Function(Input$_Organization_membersInOrganization_insert_input) then,
  ) = _CopyWithImpl$Input$_Organization_membersInOrganization_insert_input;

  factory CopyWith$Input$_Organization_membersInOrganization_insert_input.stub(
          TRes res) =
      _CopyWithStubImpl$Input$_Organization_membersInOrganization_insert_input;

  TRes call({
    String? A,
    String? B,
    Input$Organization_obj_rel_insert_input? Organization,
    Input$User_obj_rel_insert_input? User,
  });
  CopyWith$Input$Organization_obj_rel_insert_input<TRes> get Organization;
  CopyWith$Input$User_obj_rel_insert_input<TRes> get User;
}

class _CopyWithImpl$Input$_Organization_membersInOrganization_insert_input<TRes>
    implements
        CopyWith$Input$_Organization_membersInOrganization_insert_input<TRes> {
  _CopyWithImpl$Input$_Organization_membersInOrganization_insert_input(
    this._instance,
    this._then,
  );

  final Input$_Organization_membersInOrganization_insert_input _instance;

  final TRes Function(Input$_Organization_membersInOrganization_insert_input)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? A = _undefined,
    Object? B = _undefined,
    Object? Organization = _undefined,
    Object? User = _undefined,
  }) =>
      _then(Input$_Organization_membersInOrganization_insert_input._({
        ..._instance._$data,
        if (A != _undefined) 'A': (A as String?),
        if (B != _undefined) 'B': (B as String?),
        if (Organization != _undefined)
          'Organization':
              (Organization as Input$Organization_obj_rel_insert_input?),
        if (User != _undefined)
          'User': (User as Input$User_obj_rel_insert_input?),
      }));
  CopyWith$Input$Organization_obj_rel_insert_input<TRes> get Organization {
    final local$Organization = _instance.Organization;
    return local$Organization == null
        ? CopyWith$Input$Organization_obj_rel_insert_input.stub(
            _then(_instance))
        : CopyWith$Input$Organization_obj_rel_insert_input(
            local$Organization, (e) => call(Organization: e));
  }

  CopyWith$Input$User_obj_rel_insert_input<TRes> get User {
    final local$User = _instance.User;
    return local$User == null
        ? CopyWith$Input$User_obj_rel_insert_input.stub(_then(_instance))
        : CopyWith$Input$User_obj_rel_insert_input(
            local$User, (e) => call(User: e));
  }
}

class _CopyWithStubImpl$Input$_Organization_membersInOrganization_insert_input<
        TRes>
    implements
        CopyWith$Input$_Organization_membersInOrganization_insert_input<TRes> {
  _CopyWithStubImpl$Input$_Organization_membersInOrganization_insert_input(
      this._res);

  TRes _res;

  call({
    String? A,
    String? B,
    Input$Organization_obj_rel_insert_input? Organization,
    Input$User_obj_rel_insert_input? User,
  }) =>
      _res;
  CopyWith$Input$Organization_obj_rel_insert_input<TRes> get Organization =>
      CopyWith$Input$Organization_obj_rel_insert_input.stub(_res);
  CopyWith$Input$User_obj_rel_insert_input<TRes> get User =>
      CopyWith$Input$User_obj_rel_insert_input.stub(_res);
}

class Input$_SoulWinningSessionGroup_members_insert_input {
  factory Input$_SoulWinningSessionGroup_members_insert_input({
    String? A,
    String? B,
    Input$SoulWinningSessionGroup_obj_rel_insert_input? SoulWinningSessionGroup,
    Input$User_obj_rel_insert_input? User,
  }) =>
      Input$_SoulWinningSessionGroup_members_insert_input._({
        if (A != null) r'A': A,
        if (B != null) r'B': B,
        if (SoulWinningSessionGroup != null)
          r'SoulWinningSessionGroup': SoulWinningSessionGroup,
        if (User != null) r'User': User,
      });

  Input$_SoulWinningSessionGroup_members_insert_input._(this._$data);

  factory Input$_SoulWinningSessionGroup_members_insert_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('A')) {
      final l$A = data['A'];
      result$data['A'] = (l$A as String?);
    }
    if (data.containsKey('B')) {
      final l$B = data['B'];
      result$data['B'] = (l$B as String?);
    }
    if (data.containsKey('SoulWinningSessionGroup')) {
      final l$SoulWinningSessionGroup = data['SoulWinningSessionGroup'];
      result$data['SoulWinningSessionGroup'] = l$SoulWinningSessionGroup == null
          ? null
          : Input$SoulWinningSessionGroup_obj_rel_insert_input.fromJson(
              (l$SoulWinningSessionGroup as Map<String, dynamic>));
    }
    if (data.containsKey('User')) {
      final l$User = data['User'];
      result$data['User'] = l$User == null
          ? null
          : Input$User_obj_rel_insert_input.fromJson(
              (l$User as Map<String, dynamic>));
    }
    return Input$_SoulWinningSessionGroup_members_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get A => (_$data['A'] as String?);
  String? get B => (_$data['B'] as String?);
  Input$SoulWinningSessionGroup_obj_rel_insert_input?
      get SoulWinningSessionGroup => (_$data['SoulWinningSessionGroup']
          as Input$SoulWinningSessionGroup_obj_rel_insert_input?);
  Input$User_obj_rel_insert_input? get User =>
      (_$data['User'] as Input$User_obj_rel_insert_input?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('A')) {
      final l$A = A;
      result$data['A'] = l$A;
    }
    if (_$data.containsKey('B')) {
      final l$B = B;
      result$data['B'] = l$B;
    }
    if (_$data.containsKey('SoulWinningSessionGroup')) {
      final l$SoulWinningSessionGroup = SoulWinningSessionGroup;
      result$data['SoulWinningSessionGroup'] =
          l$SoulWinningSessionGroup?.toJson();
    }
    if (_$data.containsKey('User')) {
      final l$User = User;
      result$data['User'] = l$User?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$_SoulWinningSessionGroup_members_insert_input<
          Input$_SoulWinningSessionGroup_members_insert_input>
      get copyWith =>
          CopyWith$Input$_SoulWinningSessionGroup_members_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$_SoulWinningSessionGroup_members_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$A = A;
    final lOther$A = other.A;
    if (_$data.containsKey('A') != other._$data.containsKey('A')) {
      return false;
    }
    if (l$A != lOther$A) {
      return false;
    }
    final l$B = B;
    final lOther$B = other.B;
    if (_$data.containsKey('B') != other._$data.containsKey('B')) {
      return false;
    }
    if (l$B != lOther$B) {
      return false;
    }
    final l$SoulWinningSessionGroup = SoulWinningSessionGroup;
    final lOther$SoulWinningSessionGroup = other.SoulWinningSessionGroup;
    if (_$data.containsKey('SoulWinningSessionGroup') !=
        other._$data.containsKey('SoulWinningSessionGroup')) {
      return false;
    }
    if (l$SoulWinningSessionGroup != lOther$SoulWinningSessionGroup) {
      return false;
    }
    final l$User = User;
    final lOther$User = other.User;
    if (_$data.containsKey('User') != other._$data.containsKey('User')) {
      return false;
    }
    if (l$User != lOther$User) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$A = A;
    final l$B = B;
    final l$SoulWinningSessionGroup = SoulWinningSessionGroup;
    final l$User = User;
    return Object.hashAll([
      _$data.containsKey('A') ? l$A : const {},
      _$data.containsKey('B') ? l$B : const {},
      _$data.containsKey('SoulWinningSessionGroup')
          ? l$SoulWinningSessionGroup
          : const {},
      _$data.containsKey('User') ? l$User : const {},
    ]);
  }
}

abstract class CopyWith$Input$_SoulWinningSessionGroup_members_insert_input<
    TRes> {
  factory CopyWith$Input$_SoulWinningSessionGroup_members_insert_input(
    Input$_SoulWinningSessionGroup_members_insert_input instance,
    TRes Function(Input$_SoulWinningSessionGroup_members_insert_input) then,
  ) = _CopyWithImpl$Input$_SoulWinningSessionGroup_members_insert_input;

  factory CopyWith$Input$_SoulWinningSessionGroup_members_insert_input.stub(
          TRes res) =
      _CopyWithStubImpl$Input$_SoulWinningSessionGroup_members_insert_input;

  TRes call({
    String? A,
    String? B,
    Input$SoulWinningSessionGroup_obj_rel_insert_input? SoulWinningSessionGroup,
    Input$User_obj_rel_insert_input? User,
  });
  CopyWith$Input$SoulWinningSessionGroup_obj_rel_insert_input<TRes>
      get SoulWinningSessionGroup;
  CopyWith$Input$User_obj_rel_insert_input<TRes> get User;
}

class _CopyWithImpl$Input$_SoulWinningSessionGroup_members_insert_input<TRes>
    implements
        CopyWith$Input$_SoulWinningSessionGroup_members_insert_input<TRes> {
  _CopyWithImpl$Input$_SoulWinningSessionGroup_members_insert_input(
    this._instance,
    this._then,
  );

  final Input$_SoulWinningSessionGroup_members_insert_input _instance;

  final TRes Function(Input$_SoulWinningSessionGroup_members_insert_input)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? A = _undefined,
    Object? B = _undefined,
    Object? SoulWinningSessionGroup = _undefined,
    Object? User = _undefined,
  }) =>
      _then(Input$_SoulWinningSessionGroup_members_insert_input._({
        ..._instance._$data,
        if (A != _undefined) 'A': (A as String?),
        if (B != _undefined) 'B': (B as String?),
        if (SoulWinningSessionGroup != _undefined)
          'SoulWinningSessionGroup': (SoulWinningSessionGroup
              as Input$SoulWinningSessionGroup_obj_rel_insert_input?),
        if (User != _undefined)
          'User': (User as Input$User_obj_rel_insert_input?),
      }));
  CopyWith$Input$SoulWinningSessionGroup_obj_rel_insert_input<TRes>
      get SoulWinningSessionGroup {
    final local$SoulWinningSessionGroup = _instance.SoulWinningSessionGroup;
    return local$SoulWinningSessionGroup == null
        ? CopyWith$Input$SoulWinningSessionGroup_obj_rel_insert_input.stub(
            _then(_instance))
        : CopyWith$Input$SoulWinningSessionGroup_obj_rel_insert_input(
            local$SoulWinningSessionGroup,
            (e) => call(SoulWinningSessionGroup: e));
  }

  CopyWith$Input$User_obj_rel_insert_input<TRes> get User {
    final local$User = _instance.User;
    return local$User == null
        ? CopyWith$Input$User_obj_rel_insert_input.stub(_then(_instance))
        : CopyWith$Input$User_obj_rel_insert_input(
            local$User, (e) => call(User: e));
  }
}

class _CopyWithStubImpl$Input$_SoulWinningSessionGroup_members_insert_input<
        TRes>
    implements
        CopyWith$Input$_SoulWinningSessionGroup_members_insert_input<TRes> {
  _CopyWithStubImpl$Input$_SoulWinningSessionGroup_members_insert_input(
      this._res);

  TRes _res;

  call({
    String? A,
    String? B,
    Input$SoulWinningSessionGroup_obj_rel_insert_input? SoulWinningSessionGroup,
    Input$User_obj_rel_insert_input? User,
  }) =>
      _res;
  CopyWith$Input$SoulWinningSessionGroup_obj_rel_insert_input<TRes>
      get SoulWinningSessionGroup =>
          CopyWith$Input$SoulWinningSessionGroup_obj_rel_insert_input.stub(
              _res);
  CopyWith$Input$User_obj_rel_insert_input<TRes> get User =>
      CopyWith$Input$User_obj_rel_insert_input.stub(_res);
}

class Input$Encounter_obj_rel_insert_input {
  factory Input$Encounter_obj_rel_insert_input({
    required Input$Encounter_insert_input data,
    Input$Encounter_on_conflict? on_conflict,
  }) =>
      Input$Encounter_obj_rel_insert_input._({
        r'data': data,
        if (on_conflict != null) r'on_conflict': on_conflict,
      });

  Input$Encounter_obj_rel_insert_input._(this._$data);

  factory Input$Encounter_obj_rel_insert_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$data = data['data'];
    result$data['data'] =
        Input$Encounter_insert_input.fromJson((l$data as Map<String, dynamic>));
    if (data.containsKey('on_conflict')) {
      final l$on_conflict = data['on_conflict'];
      result$data['on_conflict'] = l$on_conflict == null
          ? null
          : Input$Encounter_on_conflict.fromJson(
              (l$on_conflict as Map<String, dynamic>));
    }
    return Input$Encounter_obj_rel_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$Encounter_insert_input get data =>
      (_$data['data'] as Input$Encounter_insert_input);
  Input$Encounter_on_conflict? get on_conflict =>
      (_$data['on_conflict'] as Input$Encounter_on_conflict?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$data = data;
    result$data['data'] = l$data.toJson();
    if (_$data.containsKey('on_conflict')) {
      final l$on_conflict = on_conflict;
      result$data['on_conflict'] = l$on_conflict?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$Encounter_obj_rel_insert_input<
          Input$Encounter_obj_rel_insert_input>
      get copyWith => CopyWith$Input$Encounter_obj_rel_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Encounter_obj_rel_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$data = data;
    final lOther$data = other.data;
    if (l$data != lOther$data) {
      return false;
    }
    final l$on_conflict = on_conflict;
    final lOther$on_conflict = other.on_conflict;
    if (_$data.containsKey('on_conflict') !=
        other._$data.containsKey('on_conflict')) {
      return false;
    }
    if (l$on_conflict != lOther$on_conflict) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$data = data;
    final l$on_conflict = on_conflict;
    return Object.hashAll([
      l$data,
      _$data.containsKey('on_conflict') ? l$on_conflict : const {},
    ]);
  }
}

abstract class CopyWith$Input$Encounter_obj_rel_insert_input<TRes> {
  factory CopyWith$Input$Encounter_obj_rel_insert_input(
    Input$Encounter_obj_rel_insert_input instance,
    TRes Function(Input$Encounter_obj_rel_insert_input) then,
  ) = _CopyWithImpl$Input$Encounter_obj_rel_insert_input;

  factory CopyWith$Input$Encounter_obj_rel_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$Encounter_obj_rel_insert_input;

  TRes call({
    Input$Encounter_insert_input? data,
    Input$Encounter_on_conflict? on_conflict,
  });
  CopyWith$Input$Encounter_insert_input<TRes> get data;
  CopyWith$Input$Encounter_on_conflict<TRes> get on_conflict;
}

class _CopyWithImpl$Input$Encounter_obj_rel_insert_input<TRes>
    implements CopyWith$Input$Encounter_obj_rel_insert_input<TRes> {
  _CopyWithImpl$Input$Encounter_obj_rel_insert_input(
    this._instance,
    this._then,
  );

  final Input$Encounter_obj_rel_insert_input _instance;

  final TRes Function(Input$Encounter_obj_rel_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? data = _undefined,
    Object? on_conflict = _undefined,
  }) =>
      _then(Input$Encounter_obj_rel_insert_input._({
        ..._instance._$data,
        if (data != _undefined && data != null)
          'data': (data as Input$Encounter_insert_input),
        if (on_conflict != _undefined)
          'on_conflict': (on_conflict as Input$Encounter_on_conflict?),
      }));
  CopyWith$Input$Encounter_insert_input<TRes> get data {
    final local$data = _instance.data;
    return CopyWith$Input$Encounter_insert_input(
        local$data, (e) => call(data: e));
  }

  CopyWith$Input$Encounter_on_conflict<TRes> get on_conflict {
    final local$on_conflict = _instance.on_conflict;
    return local$on_conflict == null
        ? CopyWith$Input$Encounter_on_conflict.stub(_then(_instance))
        : CopyWith$Input$Encounter_on_conflict(
            local$on_conflict, (e) => call(on_conflict: e));
  }
}

class _CopyWithStubImpl$Input$Encounter_obj_rel_insert_input<TRes>
    implements CopyWith$Input$Encounter_obj_rel_insert_input<TRes> {
  _CopyWithStubImpl$Input$Encounter_obj_rel_insert_input(this._res);

  TRes _res;

  call({
    Input$Encounter_insert_input? data,
    Input$Encounter_on_conflict? on_conflict,
  }) =>
      _res;
  CopyWith$Input$Encounter_insert_input<TRes> get data =>
      CopyWith$Input$Encounter_insert_input.stub(_res);
  CopyWith$Input$Encounter_on_conflict<TRes> get on_conflict =>
      CopyWith$Input$Encounter_on_conflict.stub(_res);
}

class Input$Event_obj_rel_insert_input {
  factory Input$Event_obj_rel_insert_input({
    required Input$Event_insert_input data,
    Input$Event_on_conflict? on_conflict,
  }) =>
      Input$Event_obj_rel_insert_input._({
        r'data': data,
        if (on_conflict != null) r'on_conflict': on_conflict,
      });

  Input$Event_obj_rel_insert_input._(this._$data);

  factory Input$Event_obj_rel_insert_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$data = data['data'];
    result$data['data'] =
        Input$Event_insert_input.fromJson((l$data as Map<String, dynamic>));
    if (data.containsKey('on_conflict')) {
      final l$on_conflict = data['on_conflict'];
      result$data['on_conflict'] = l$on_conflict == null
          ? null
          : Input$Event_on_conflict.fromJson(
              (l$on_conflict as Map<String, dynamic>));
    }
    return Input$Event_obj_rel_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$Event_insert_input get data =>
      (_$data['data'] as Input$Event_insert_input);
  Input$Event_on_conflict? get on_conflict =>
      (_$data['on_conflict'] as Input$Event_on_conflict?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$data = data;
    result$data['data'] = l$data.toJson();
    if (_$data.containsKey('on_conflict')) {
      final l$on_conflict = on_conflict;
      result$data['on_conflict'] = l$on_conflict?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$Event_obj_rel_insert_input<Input$Event_obj_rel_insert_input>
      get copyWith => CopyWith$Input$Event_obj_rel_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Event_obj_rel_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$data = data;
    final lOther$data = other.data;
    if (l$data != lOther$data) {
      return false;
    }
    final l$on_conflict = on_conflict;
    final lOther$on_conflict = other.on_conflict;
    if (_$data.containsKey('on_conflict') !=
        other._$data.containsKey('on_conflict')) {
      return false;
    }
    if (l$on_conflict != lOther$on_conflict) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$data = data;
    final l$on_conflict = on_conflict;
    return Object.hashAll([
      l$data,
      _$data.containsKey('on_conflict') ? l$on_conflict : const {},
    ]);
  }
}

abstract class CopyWith$Input$Event_obj_rel_insert_input<TRes> {
  factory CopyWith$Input$Event_obj_rel_insert_input(
    Input$Event_obj_rel_insert_input instance,
    TRes Function(Input$Event_obj_rel_insert_input) then,
  ) = _CopyWithImpl$Input$Event_obj_rel_insert_input;

  factory CopyWith$Input$Event_obj_rel_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$Event_obj_rel_insert_input;

  TRes call({
    Input$Event_insert_input? data,
    Input$Event_on_conflict? on_conflict,
  });
  CopyWith$Input$Event_insert_input<TRes> get data;
  CopyWith$Input$Event_on_conflict<TRes> get on_conflict;
}

class _CopyWithImpl$Input$Event_obj_rel_insert_input<TRes>
    implements CopyWith$Input$Event_obj_rel_insert_input<TRes> {
  _CopyWithImpl$Input$Event_obj_rel_insert_input(
    this._instance,
    this._then,
  );

  final Input$Event_obj_rel_insert_input _instance;

  final TRes Function(Input$Event_obj_rel_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? data = _undefined,
    Object? on_conflict = _undefined,
  }) =>
      _then(Input$Event_obj_rel_insert_input._({
        ..._instance._$data,
        if (data != _undefined && data != null)
          'data': (data as Input$Event_insert_input),
        if (on_conflict != _undefined)
          'on_conflict': (on_conflict as Input$Event_on_conflict?),
      }));
  CopyWith$Input$Event_insert_input<TRes> get data {
    final local$data = _instance.data;
    return CopyWith$Input$Event_insert_input(local$data, (e) => call(data: e));
  }

  CopyWith$Input$Event_on_conflict<TRes> get on_conflict {
    final local$on_conflict = _instance.on_conflict;
    return local$on_conflict == null
        ? CopyWith$Input$Event_on_conflict.stub(_then(_instance))
        : CopyWith$Input$Event_on_conflict(
            local$on_conflict, (e) => call(on_conflict: e));
  }
}

class _CopyWithStubImpl$Input$Event_obj_rel_insert_input<TRes>
    implements CopyWith$Input$Event_obj_rel_insert_input<TRes> {
  _CopyWithStubImpl$Input$Event_obj_rel_insert_input(this._res);

  TRes _res;

  call({
    Input$Event_insert_input? data,
    Input$Event_on_conflict? on_conflict,
  }) =>
      _res;
  CopyWith$Input$Event_insert_input<TRes> get data =>
      CopyWith$Input$Event_insert_input.stub(_res);
  CopyWith$Input$Event_on_conflict<TRes> get on_conflict =>
      CopyWith$Input$Event_on_conflict.stub(_res);
}

class Input$Map_obj_rel_insert_input {
  factory Input$Map_obj_rel_insert_input({
    required Input$Map_insert_input data,
    Input$Map_on_conflict? on_conflict,
  }) =>
      Input$Map_obj_rel_insert_input._({
        r'data': data,
        if (on_conflict != null) r'on_conflict': on_conflict,
      });

  Input$Map_obj_rel_insert_input._(this._$data);

  factory Input$Map_obj_rel_insert_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$data = data['data'];
    result$data['data'] =
        Input$Map_insert_input.fromJson((l$data as Map<String, dynamic>));
    if (data.containsKey('on_conflict')) {
      final l$on_conflict = data['on_conflict'];
      result$data['on_conflict'] = l$on_conflict == null
          ? null
          : Input$Map_on_conflict.fromJson(
              (l$on_conflict as Map<String, dynamic>));
    }
    return Input$Map_obj_rel_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$Map_insert_input get data => (_$data['data'] as Input$Map_insert_input);
  Input$Map_on_conflict? get on_conflict =>
      (_$data['on_conflict'] as Input$Map_on_conflict?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$data = data;
    result$data['data'] = l$data.toJson();
    if (_$data.containsKey('on_conflict')) {
      final l$on_conflict = on_conflict;
      result$data['on_conflict'] = l$on_conflict?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$Map_obj_rel_insert_input<Input$Map_obj_rel_insert_input>
      get copyWith => CopyWith$Input$Map_obj_rel_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Map_obj_rel_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$data = data;
    final lOther$data = other.data;
    if (l$data != lOther$data) {
      return false;
    }
    final l$on_conflict = on_conflict;
    final lOther$on_conflict = other.on_conflict;
    if (_$data.containsKey('on_conflict') !=
        other._$data.containsKey('on_conflict')) {
      return false;
    }
    if (l$on_conflict != lOther$on_conflict) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$data = data;
    final l$on_conflict = on_conflict;
    return Object.hashAll([
      l$data,
      _$data.containsKey('on_conflict') ? l$on_conflict : const {},
    ]);
  }
}

abstract class CopyWith$Input$Map_obj_rel_insert_input<TRes> {
  factory CopyWith$Input$Map_obj_rel_insert_input(
    Input$Map_obj_rel_insert_input instance,
    TRes Function(Input$Map_obj_rel_insert_input) then,
  ) = _CopyWithImpl$Input$Map_obj_rel_insert_input;

  factory CopyWith$Input$Map_obj_rel_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$Map_obj_rel_insert_input;

  TRes call({
    Input$Map_insert_input? data,
    Input$Map_on_conflict? on_conflict,
  });
  CopyWith$Input$Map_insert_input<TRes> get data;
  CopyWith$Input$Map_on_conflict<TRes> get on_conflict;
}

class _CopyWithImpl$Input$Map_obj_rel_insert_input<TRes>
    implements CopyWith$Input$Map_obj_rel_insert_input<TRes> {
  _CopyWithImpl$Input$Map_obj_rel_insert_input(
    this._instance,
    this._then,
  );

  final Input$Map_obj_rel_insert_input _instance;

  final TRes Function(Input$Map_obj_rel_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? data = _undefined,
    Object? on_conflict = _undefined,
  }) =>
      _then(Input$Map_obj_rel_insert_input._({
        ..._instance._$data,
        if (data != _undefined && data != null)
          'data': (data as Input$Map_insert_input),
        if (on_conflict != _undefined)
          'on_conflict': (on_conflict as Input$Map_on_conflict?),
      }));
  CopyWith$Input$Map_insert_input<TRes> get data {
    final local$data = _instance.data;
    return CopyWith$Input$Map_insert_input(local$data, (e) => call(data: e));
  }

  CopyWith$Input$Map_on_conflict<TRes> get on_conflict {
    final local$on_conflict = _instance.on_conflict;
    return local$on_conflict == null
        ? CopyWith$Input$Map_on_conflict.stub(_then(_instance))
        : CopyWith$Input$Map_on_conflict(
            local$on_conflict, (e) => call(on_conflict: e));
  }
}

class _CopyWithStubImpl$Input$Map_obj_rel_insert_input<TRes>
    implements CopyWith$Input$Map_obj_rel_insert_input<TRes> {
  _CopyWithStubImpl$Input$Map_obj_rel_insert_input(this._res);

  TRes _res;

  call({
    Input$Map_insert_input? data,
    Input$Map_on_conflict? on_conflict,
  }) =>
      _res;
  CopyWith$Input$Map_insert_input<TRes> get data =>
      CopyWith$Input$Map_insert_input.stub(_res);
  CopyWith$Input$Map_on_conflict<TRes> get on_conflict =>
      CopyWith$Input$Map_on_conflict.stub(_res);
}

class Input$MapArea_obj_rel_insert_input {
  factory Input$MapArea_obj_rel_insert_input({
    required Input$MapArea_insert_input data,
    Input$MapArea_on_conflict? on_conflict,
  }) =>
      Input$MapArea_obj_rel_insert_input._({
        r'data': data,
        if (on_conflict != null) r'on_conflict': on_conflict,
      });

  Input$MapArea_obj_rel_insert_input._(this._$data);

  factory Input$MapArea_obj_rel_insert_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$data = data['data'];
    result$data['data'] =
        Input$MapArea_insert_input.fromJson((l$data as Map<String, dynamic>));
    if (data.containsKey('on_conflict')) {
      final l$on_conflict = data['on_conflict'];
      result$data['on_conflict'] = l$on_conflict == null
          ? null
          : Input$MapArea_on_conflict.fromJson(
              (l$on_conflict as Map<String, dynamic>));
    }
    return Input$MapArea_obj_rel_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$MapArea_insert_input get data =>
      (_$data['data'] as Input$MapArea_insert_input);
  Input$MapArea_on_conflict? get on_conflict =>
      (_$data['on_conflict'] as Input$MapArea_on_conflict?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$data = data;
    result$data['data'] = l$data.toJson();
    if (_$data.containsKey('on_conflict')) {
      final l$on_conflict = on_conflict;
      result$data['on_conflict'] = l$on_conflict?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$MapArea_obj_rel_insert_input<
          Input$MapArea_obj_rel_insert_input>
      get copyWith => CopyWith$Input$MapArea_obj_rel_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$MapArea_obj_rel_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$data = data;
    final lOther$data = other.data;
    if (l$data != lOther$data) {
      return false;
    }
    final l$on_conflict = on_conflict;
    final lOther$on_conflict = other.on_conflict;
    if (_$data.containsKey('on_conflict') !=
        other._$data.containsKey('on_conflict')) {
      return false;
    }
    if (l$on_conflict != lOther$on_conflict) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$data = data;
    final l$on_conflict = on_conflict;
    return Object.hashAll([
      l$data,
      _$data.containsKey('on_conflict') ? l$on_conflict : const {},
    ]);
  }
}

abstract class CopyWith$Input$MapArea_obj_rel_insert_input<TRes> {
  factory CopyWith$Input$MapArea_obj_rel_insert_input(
    Input$MapArea_obj_rel_insert_input instance,
    TRes Function(Input$MapArea_obj_rel_insert_input) then,
  ) = _CopyWithImpl$Input$MapArea_obj_rel_insert_input;

  factory CopyWith$Input$MapArea_obj_rel_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$MapArea_obj_rel_insert_input;

  TRes call({
    Input$MapArea_insert_input? data,
    Input$MapArea_on_conflict? on_conflict,
  });
  CopyWith$Input$MapArea_insert_input<TRes> get data;
  CopyWith$Input$MapArea_on_conflict<TRes> get on_conflict;
}

class _CopyWithImpl$Input$MapArea_obj_rel_insert_input<TRes>
    implements CopyWith$Input$MapArea_obj_rel_insert_input<TRes> {
  _CopyWithImpl$Input$MapArea_obj_rel_insert_input(
    this._instance,
    this._then,
  );

  final Input$MapArea_obj_rel_insert_input _instance;

  final TRes Function(Input$MapArea_obj_rel_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? data = _undefined,
    Object? on_conflict = _undefined,
  }) =>
      _then(Input$MapArea_obj_rel_insert_input._({
        ..._instance._$data,
        if (data != _undefined && data != null)
          'data': (data as Input$MapArea_insert_input),
        if (on_conflict != _undefined)
          'on_conflict': (on_conflict as Input$MapArea_on_conflict?),
      }));
  CopyWith$Input$MapArea_insert_input<TRes> get data {
    final local$data = _instance.data;
    return CopyWith$Input$MapArea_insert_input(
        local$data, (e) => call(data: e));
  }

  CopyWith$Input$MapArea_on_conflict<TRes> get on_conflict {
    final local$on_conflict = _instance.on_conflict;
    return local$on_conflict == null
        ? CopyWith$Input$MapArea_on_conflict.stub(_then(_instance))
        : CopyWith$Input$MapArea_on_conflict(
            local$on_conflict, (e) => call(on_conflict: e));
  }
}

class _CopyWithStubImpl$Input$MapArea_obj_rel_insert_input<TRes>
    implements CopyWith$Input$MapArea_obj_rel_insert_input<TRes> {
  _CopyWithStubImpl$Input$MapArea_obj_rel_insert_input(this._res);

  TRes _res;

  call({
    Input$MapArea_insert_input? data,
    Input$MapArea_on_conflict? on_conflict,
  }) =>
      _res;
  CopyWith$Input$MapArea_insert_input<TRes> get data =>
      CopyWith$Input$MapArea_insert_input.stub(_res);
  CopyWith$Input$MapArea_on_conflict<TRes> get on_conflict =>
      CopyWith$Input$MapArea_on_conflict.stub(_res);
}

class Input$Organization_obj_rel_insert_input {
  factory Input$Organization_obj_rel_insert_input({
    required Input$Organization_insert_input data,
    Input$Organization_on_conflict? on_conflict,
  }) =>
      Input$Organization_obj_rel_insert_input._({
        r'data': data,
        if (on_conflict != null) r'on_conflict': on_conflict,
      });

  Input$Organization_obj_rel_insert_input._(this._$data);

  factory Input$Organization_obj_rel_insert_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$data = data['data'];
    result$data['data'] = Input$Organization_insert_input.fromJson(
        (l$data as Map<String, dynamic>));
    if (data.containsKey('on_conflict')) {
      final l$on_conflict = data['on_conflict'];
      result$data['on_conflict'] = l$on_conflict == null
          ? null
          : Input$Organization_on_conflict.fromJson(
              (l$on_conflict as Map<String, dynamic>));
    }
    return Input$Organization_obj_rel_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$Organization_insert_input get data =>
      (_$data['data'] as Input$Organization_insert_input);
  Input$Organization_on_conflict? get on_conflict =>
      (_$data['on_conflict'] as Input$Organization_on_conflict?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$data = data;
    result$data['data'] = l$data.toJson();
    if (_$data.containsKey('on_conflict')) {
      final l$on_conflict = on_conflict;
      result$data['on_conflict'] = l$on_conflict?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$Organization_obj_rel_insert_input<
          Input$Organization_obj_rel_insert_input>
      get copyWith => CopyWith$Input$Organization_obj_rel_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Organization_obj_rel_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$data = data;
    final lOther$data = other.data;
    if (l$data != lOther$data) {
      return false;
    }
    final l$on_conflict = on_conflict;
    final lOther$on_conflict = other.on_conflict;
    if (_$data.containsKey('on_conflict') !=
        other._$data.containsKey('on_conflict')) {
      return false;
    }
    if (l$on_conflict != lOther$on_conflict) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$data = data;
    final l$on_conflict = on_conflict;
    return Object.hashAll([
      l$data,
      _$data.containsKey('on_conflict') ? l$on_conflict : const {},
    ]);
  }
}

abstract class CopyWith$Input$Organization_obj_rel_insert_input<TRes> {
  factory CopyWith$Input$Organization_obj_rel_insert_input(
    Input$Organization_obj_rel_insert_input instance,
    TRes Function(Input$Organization_obj_rel_insert_input) then,
  ) = _CopyWithImpl$Input$Organization_obj_rel_insert_input;

  factory CopyWith$Input$Organization_obj_rel_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$Organization_obj_rel_insert_input;

  TRes call({
    Input$Organization_insert_input? data,
    Input$Organization_on_conflict? on_conflict,
  });
  CopyWith$Input$Organization_insert_input<TRes> get data;
  CopyWith$Input$Organization_on_conflict<TRes> get on_conflict;
}

class _CopyWithImpl$Input$Organization_obj_rel_insert_input<TRes>
    implements CopyWith$Input$Organization_obj_rel_insert_input<TRes> {
  _CopyWithImpl$Input$Organization_obj_rel_insert_input(
    this._instance,
    this._then,
  );

  final Input$Organization_obj_rel_insert_input _instance;

  final TRes Function(Input$Organization_obj_rel_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? data = _undefined,
    Object? on_conflict = _undefined,
  }) =>
      _then(Input$Organization_obj_rel_insert_input._({
        ..._instance._$data,
        if (data != _undefined && data != null)
          'data': (data as Input$Organization_insert_input),
        if (on_conflict != _undefined)
          'on_conflict': (on_conflict as Input$Organization_on_conflict?),
      }));
  CopyWith$Input$Organization_insert_input<TRes> get data {
    final local$data = _instance.data;
    return CopyWith$Input$Organization_insert_input(
        local$data, (e) => call(data: e));
  }

  CopyWith$Input$Organization_on_conflict<TRes> get on_conflict {
    final local$on_conflict = _instance.on_conflict;
    return local$on_conflict == null
        ? CopyWith$Input$Organization_on_conflict.stub(_then(_instance))
        : CopyWith$Input$Organization_on_conflict(
            local$on_conflict, (e) => call(on_conflict: e));
  }
}

class _CopyWithStubImpl$Input$Organization_obj_rel_insert_input<TRes>
    implements CopyWith$Input$Organization_obj_rel_insert_input<TRes> {
  _CopyWithStubImpl$Input$Organization_obj_rel_insert_input(this._res);

  TRes _res;

  call({
    Input$Organization_insert_input? data,
    Input$Organization_on_conflict? on_conflict,
  }) =>
      _res;
  CopyWith$Input$Organization_insert_input<TRes> get data =>
      CopyWith$Input$Organization_insert_input.stub(_res);
  CopyWith$Input$Organization_on_conflict<TRes> get on_conflict =>
      CopyWith$Input$Organization_on_conflict.stub(_res);
}

class Input$SoulWinningSession_obj_rel_insert_input {
  factory Input$SoulWinningSession_obj_rel_insert_input({
    required Input$SoulWinningSession_insert_input data,
    Input$SoulWinningSession_on_conflict? on_conflict,
  }) =>
      Input$SoulWinningSession_obj_rel_insert_input._({
        r'data': data,
        if (on_conflict != null) r'on_conflict': on_conflict,
      });

  Input$SoulWinningSession_obj_rel_insert_input._(this._$data);

  factory Input$SoulWinningSession_obj_rel_insert_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$data = data['data'];
    result$data['data'] = Input$SoulWinningSession_insert_input.fromJson(
        (l$data as Map<String, dynamic>));
    if (data.containsKey('on_conflict')) {
      final l$on_conflict = data['on_conflict'];
      result$data['on_conflict'] = l$on_conflict == null
          ? null
          : Input$SoulWinningSession_on_conflict.fromJson(
              (l$on_conflict as Map<String, dynamic>));
    }
    return Input$SoulWinningSession_obj_rel_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$SoulWinningSession_insert_input get data =>
      (_$data['data'] as Input$SoulWinningSession_insert_input);
  Input$SoulWinningSession_on_conflict? get on_conflict =>
      (_$data['on_conflict'] as Input$SoulWinningSession_on_conflict?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$data = data;
    result$data['data'] = l$data.toJson();
    if (_$data.containsKey('on_conflict')) {
      final l$on_conflict = on_conflict;
      result$data['on_conflict'] = l$on_conflict?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$SoulWinningSession_obj_rel_insert_input<
          Input$SoulWinningSession_obj_rel_insert_input>
      get copyWith => CopyWith$Input$SoulWinningSession_obj_rel_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SoulWinningSession_obj_rel_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$data = data;
    final lOther$data = other.data;
    if (l$data != lOther$data) {
      return false;
    }
    final l$on_conflict = on_conflict;
    final lOther$on_conflict = other.on_conflict;
    if (_$data.containsKey('on_conflict') !=
        other._$data.containsKey('on_conflict')) {
      return false;
    }
    if (l$on_conflict != lOther$on_conflict) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$data = data;
    final l$on_conflict = on_conflict;
    return Object.hashAll([
      l$data,
      _$data.containsKey('on_conflict') ? l$on_conflict : const {},
    ]);
  }
}

abstract class CopyWith$Input$SoulWinningSession_obj_rel_insert_input<TRes> {
  factory CopyWith$Input$SoulWinningSession_obj_rel_insert_input(
    Input$SoulWinningSession_obj_rel_insert_input instance,
    TRes Function(Input$SoulWinningSession_obj_rel_insert_input) then,
  ) = _CopyWithImpl$Input$SoulWinningSession_obj_rel_insert_input;

  factory CopyWith$Input$SoulWinningSession_obj_rel_insert_input.stub(
          TRes res) =
      _CopyWithStubImpl$Input$SoulWinningSession_obj_rel_insert_input;

  TRes call({
    Input$SoulWinningSession_insert_input? data,
    Input$SoulWinningSession_on_conflict? on_conflict,
  });
  CopyWith$Input$SoulWinningSession_insert_input<TRes> get data;
  CopyWith$Input$SoulWinningSession_on_conflict<TRes> get on_conflict;
}

class _CopyWithImpl$Input$SoulWinningSession_obj_rel_insert_input<TRes>
    implements CopyWith$Input$SoulWinningSession_obj_rel_insert_input<TRes> {
  _CopyWithImpl$Input$SoulWinningSession_obj_rel_insert_input(
    this._instance,
    this._then,
  );

  final Input$SoulWinningSession_obj_rel_insert_input _instance;

  final TRes Function(Input$SoulWinningSession_obj_rel_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? data = _undefined,
    Object? on_conflict = _undefined,
  }) =>
      _then(Input$SoulWinningSession_obj_rel_insert_input._({
        ..._instance._$data,
        if (data != _undefined && data != null)
          'data': (data as Input$SoulWinningSession_insert_input),
        if (on_conflict != _undefined)
          'on_conflict': (on_conflict as Input$SoulWinningSession_on_conflict?),
      }));
  CopyWith$Input$SoulWinningSession_insert_input<TRes> get data {
    final local$data = _instance.data;
    return CopyWith$Input$SoulWinningSession_insert_input(
        local$data, (e) => call(data: e));
  }

  CopyWith$Input$SoulWinningSession_on_conflict<TRes> get on_conflict {
    final local$on_conflict = _instance.on_conflict;
    return local$on_conflict == null
        ? CopyWith$Input$SoulWinningSession_on_conflict.stub(_then(_instance))
        : CopyWith$Input$SoulWinningSession_on_conflict(
            local$on_conflict, (e) => call(on_conflict: e));
  }
}

class _CopyWithStubImpl$Input$SoulWinningSession_obj_rel_insert_input<TRes>
    implements CopyWith$Input$SoulWinningSession_obj_rel_insert_input<TRes> {
  _CopyWithStubImpl$Input$SoulWinningSession_obj_rel_insert_input(this._res);

  TRes _res;

  call({
    Input$SoulWinningSession_insert_input? data,
    Input$SoulWinningSession_on_conflict? on_conflict,
  }) =>
      _res;
  CopyWith$Input$SoulWinningSession_insert_input<TRes> get data =>
      CopyWith$Input$SoulWinningSession_insert_input.stub(_res);
  CopyWith$Input$SoulWinningSession_on_conflict<TRes> get on_conflict =>
      CopyWith$Input$SoulWinningSession_on_conflict.stub(_res);
}

class Input$SoulWinningSessionGroup_obj_rel_insert_input {
  factory Input$SoulWinningSessionGroup_obj_rel_insert_input({
    required Input$SoulWinningSessionGroup_insert_input data,
    Input$SoulWinningSessionGroup_on_conflict? on_conflict,
  }) =>
      Input$SoulWinningSessionGroup_obj_rel_insert_input._({
        r'data': data,
        if (on_conflict != null) r'on_conflict': on_conflict,
      });

  Input$SoulWinningSessionGroup_obj_rel_insert_input._(this._$data);

  factory Input$SoulWinningSessionGroup_obj_rel_insert_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$data = data['data'];
    result$data['data'] = Input$SoulWinningSessionGroup_insert_input.fromJson(
        (l$data as Map<String, dynamic>));
    if (data.containsKey('on_conflict')) {
      final l$on_conflict = data['on_conflict'];
      result$data['on_conflict'] = l$on_conflict == null
          ? null
          : Input$SoulWinningSessionGroup_on_conflict.fromJson(
              (l$on_conflict as Map<String, dynamic>));
    }
    return Input$SoulWinningSessionGroup_obj_rel_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$SoulWinningSessionGroup_insert_input get data =>
      (_$data['data'] as Input$SoulWinningSessionGroup_insert_input);
  Input$SoulWinningSessionGroup_on_conflict? get on_conflict =>
      (_$data['on_conflict'] as Input$SoulWinningSessionGroup_on_conflict?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$data = data;
    result$data['data'] = l$data.toJson();
    if (_$data.containsKey('on_conflict')) {
      final l$on_conflict = on_conflict;
      result$data['on_conflict'] = l$on_conflict?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$SoulWinningSessionGroup_obj_rel_insert_input<
          Input$SoulWinningSessionGroup_obj_rel_insert_input>
      get copyWith =>
          CopyWith$Input$SoulWinningSessionGroup_obj_rel_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SoulWinningSessionGroup_obj_rel_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$data = data;
    final lOther$data = other.data;
    if (l$data != lOther$data) {
      return false;
    }
    final l$on_conflict = on_conflict;
    final lOther$on_conflict = other.on_conflict;
    if (_$data.containsKey('on_conflict') !=
        other._$data.containsKey('on_conflict')) {
      return false;
    }
    if (l$on_conflict != lOther$on_conflict) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$data = data;
    final l$on_conflict = on_conflict;
    return Object.hashAll([
      l$data,
      _$data.containsKey('on_conflict') ? l$on_conflict : const {},
    ]);
  }
}

abstract class CopyWith$Input$SoulWinningSessionGroup_obj_rel_insert_input<
    TRes> {
  factory CopyWith$Input$SoulWinningSessionGroup_obj_rel_insert_input(
    Input$SoulWinningSessionGroup_obj_rel_insert_input instance,
    TRes Function(Input$SoulWinningSessionGroup_obj_rel_insert_input) then,
  ) = _CopyWithImpl$Input$SoulWinningSessionGroup_obj_rel_insert_input;

  factory CopyWith$Input$SoulWinningSessionGroup_obj_rel_insert_input.stub(
          TRes res) =
      _CopyWithStubImpl$Input$SoulWinningSessionGroup_obj_rel_insert_input;

  TRes call({
    Input$SoulWinningSessionGroup_insert_input? data,
    Input$SoulWinningSessionGroup_on_conflict? on_conflict,
  });
  CopyWith$Input$SoulWinningSessionGroup_insert_input<TRes> get data;
  CopyWith$Input$SoulWinningSessionGroup_on_conflict<TRes> get on_conflict;
}

class _CopyWithImpl$Input$SoulWinningSessionGroup_obj_rel_insert_input<TRes>
    implements
        CopyWith$Input$SoulWinningSessionGroup_obj_rel_insert_input<TRes> {
  _CopyWithImpl$Input$SoulWinningSessionGroup_obj_rel_insert_input(
    this._instance,
    this._then,
  );

  final Input$SoulWinningSessionGroup_obj_rel_insert_input _instance;

  final TRes Function(Input$SoulWinningSessionGroup_obj_rel_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? data = _undefined,
    Object? on_conflict = _undefined,
  }) =>
      _then(Input$SoulWinningSessionGroup_obj_rel_insert_input._({
        ..._instance._$data,
        if (data != _undefined && data != null)
          'data': (data as Input$SoulWinningSessionGroup_insert_input),
        if (on_conflict != _undefined)
          'on_conflict':
              (on_conflict as Input$SoulWinningSessionGroup_on_conflict?),
      }));
  CopyWith$Input$SoulWinningSessionGroup_insert_input<TRes> get data {
    final local$data = _instance.data;
    return CopyWith$Input$SoulWinningSessionGroup_insert_input(
        local$data, (e) => call(data: e));
  }

  CopyWith$Input$SoulWinningSessionGroup_on_conflict<TRes> get on_conflict {
    final local$on_conflict = _instance.on_conflict;
    return local$on_conflict == null
        ? CopyWith$Input$SoulWinningSessionGroup_on_conflict.stub(
            _then(_instance))
        : CopyWith$Input$SoulWinningSessionGroup_on_conflict(
            local$on_conflict, (e) => call(on_conflict: e));
  }
}

class _CopyWithStubImpl$Input$SoulWinningSessionGroup_obj_rel_insert_input<TRes>
    implements
        CopyWith$Input$SoulWinningSessionGroup_obj_rel_insert_input<TRes> {
  _CopyWithStubImpl$Input$SoulWinningSessionGroup_obj_rel_insert_input(
      this._res);

  TRes _res;

  call({
    Input$SoulWinningSessionGroup_insert_input? data,
    Input$SoulWinningSessionGroup_on_conflict? on_conflict,
  }) =>
      _res;
  CopyWith$Input$SoulWinningSessionGroup_insert_input<TRes> get data =>
      CopyWith$Input$SoulWinningSessionGroup_insert_input.stub(_res);
  CopyWith$Input$SoulWinningSessionGroup_on_conflict<TRes> get on_conflict =>
      CopyWith$Input$SoulWinningSessionGroup_on_conflict.stub(_res);
}

class Input$User_obj_rel_insert_input {
  factory Input$User_obj_rel_insert_input({
    required Input$User_insert_input data,
    Input$User_on_conflict? on_conflict,
  }) =>
      Input$User_obj_rel_insert_input._({
        r'data': data,
        if (on_conflict != null) r'on_conflict': on_conflict,
      });

  Input$User_obj_rel_insert_input._(this._$data);

  factory Input$User_obj_rel_insert_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$data = data['data'];
    result$data['data'] =
        Input$User_insert_input.fromJson((l$data as Map<String, dynamic>));
    if (data.containsKey('on_conflict')) {
      final l$on_conflict = data['on_conflict'];
      result$data['on_conflict'] = l$on_conflict == null
          ? null
          : Input$User_on_conflict.fromJson(
              (l$on_conflict as Map<String, dynamic>));
    }
    return Input$User_obj_rel_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$User_insert_input get data =>
      (_$data['data'] as Input$User_insert_input);
  Input$User_on_conflict? get on_conflict =>
      (_$data['on_conflict'] as Input$User_on_conflict?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$data = data;
    result$data['data'] = l$data.toJson();
    if (_$data.containsKey('on_conflict')) {
      final l$on_conflict = on_conflict;
      result$data['on_conflict'] = l$on_conflict?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$User_obj_rel_insert_input<Input$User_obj_rel_insert_input>
      get copyWith => CopyWith$Input$User_obj_rel_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$User_obj_rel_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$data = data;
    final lOther$data = other.data;
    if (l$data != lOther$data) {
      return false;
    }
    final l$on_conflict = on_conflict;
    final lOther$on_conflict = other.on_conflict;
    if (_$data.containsKey('on_conflict') !=
        other._$data.containsKey('on_conflict')) {
      return false;
    }
    if (l$on_conflict != lOther$on_conflict) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$data = data;
    final l$on_conflict = on_conflict;
    return Object.hashAll([
      l$data,
      _$data.containsKey('on_conflict') ? l$on_conflict : const {},
    ]);
  }
}

abstract class CopyWith$Input$User_obj_rel_insert_input<TRes> {
  factory CopyWith$Input$User_obj_rel_insert_input(
    Input$User_obj_rel_insert_input instance,
    TRes Function(Input$User_obj_rel_insert_input) then,
  ) = _CopyWithImpl$Input$User_obj_rel_insert_input;

  factory CopyWith$Input$User_obj_rel_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$User_obj_rel_insert_input;

  TRes call({
    Input$User_insert_input? data,
    Input$User_on_conflict? on_conflict,
  });
  CopyWith$Input$User_insert_input<TRes> get data;
  CopyWith$Input$User_on_conflict<TRes> get on_conflict;
}

class _CopyWithImpl$Input$User_obj_rel_insert_input<TRes>
    implements CopyWith$Input$User_obj_rel_insert_input<TRes> {
  _CopyWithImpl$Input$User_obj_rel_insert_input(
    this._instance,
    this._then,
  );

  final Input$User_obj_rel_insert_input _instance;

  final TRes Function(Input$User_obj_rel_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? data = _undefined,
    Object? on_conflict = _undefined,
  }) =>
      _then(Input$User_obj_rel_insert_input._({
        ..._instance._$data,
        if (data != _undefined && data != null)
          'data': (data as Input$User_insert_input),
        if (on_conflict != _undefined)
          'on_conflict': (on_conflict as Input$User_on_conflict?),
      }));
  CopyWith$Input$User_insert_input<TRes> get data {
    final local$data = _instance.data;
    return CopyWith$Input$User_insert_input(local$data, (e) => call(data: e));
  }

  CopyWith$Input$User_on_conflict<TRes> get on_conflict {
    final local$on_conflict = _instance.on_conflict;
    return local$on_conflict == null
        ? CopyWith$Input$User_on_conflict.stub(_then(_instance))
        : CopyWith$Input$User_on_conflict(
            local$on_conflict, (e) => call(on_conflict: e));
  }
}

class _CopyWithStubImpl$Input$User_obj_rel_insert_input<TRes>
    implements CopyWith$Input$User_obj_rel_insert_input<TRes> {
  _CopyWithStubImpl$Input$User_obj_rel_insert_input(this._res);

  TRes _res;

  call({
    Input$User_insert_input? data,
    Input$User_on_conflict? on_conflict,
  }) =>
      _res;
  CopyWith$Input$User_insert_input<TRes> get data =>
      CopyWith$Input$User_insert_input.stub(_res);
  CopyWith$Input$User_on_conflict<TRes> get on_conflict =>
      CopyWith$Input$User_on_conflict.stub(_res);
}

class Input$Encounter_set_input {
  factory Input$Encounter_set_input({
    String? encounterTimeInUtc,
    String? group,
    String? houseAddress,
    String? id,
    String? result,
  }) =>
      Input$Encounter_set_input._({
        if (encounterTimeInUtc != null)
          r'encounterTimeInUtc': encounterTimeInUtc,
        if (group != null) r'group': group,
        if (houseAddress != null) r'houseAddress': houseAddress,
        if (id != null) r'id': id,
        if (result != null) r'result': result,
      });

  Input$Encounter_set_input._(this._$data);

  factory Input$Encounter_set_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('encounterTimeInUtc')) {
      final l$encounterTimeInUtc = data['encounterTimeInUtc'];
      result$data['encounterTimeInUtc'] = (l$encounterTimeInUtc as String?);
    }
    if (data.containsKey('group')) {
      final l$group = data['group'];
      result$data['group'] = (l$group as String?);
    }
    if (data.containsKey('houseAddress')) {
      final l$houseAddress = data['houseAddress'];
      result$data['houseAddress'] = (l$houseAddress as String?);
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as String?);
    }
    if (data.containsKey('result')) {
      final l$result = data['result'];
      result$data['result'] = (l$result as String?);
    }
    return Input$Encounter_set_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get encounterTimeInUtc => (_$data['encounterTimeInUtc'] as String?);
  String? get group => (_$data['group'] as String?);
  String? get houseAddress => (_$data['houseAddress'] as String?);
  String? get id => (_$data['id'] as String?);
  String? get result => (_$data['result'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('encounterTimeInUtc')) {
      final l$encounterTimeInUtc = encounterTimeInUtc;
      result$data['encounterTimeInUtc'] = l$encounterTimeInUtc;
    }
    if (_$data.containsKey('group')) {
      final l$group = group;
      result$data['group'] = l$group;
    }
    if (_$data.containsKey('houseAddress')) {
      final l$houseAddress = houseAddress;
      result$data['houseAddress'] = l$houseAddress;
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('result')) {
      final l$result = result;
      result$data['result'] = l$result;
    }
    return result$data;
  }

  CopyWith$Input$Encounter_set_input<Input$Encounter_set_input> get copyWith =>
      CopyWith$Input$Encounter_set_input(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Encounter_set_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$encounterTimeInUtc = encounterTimeInUtc;
    final lOther$encounterTimeInUtc = other.encounterTimeInUtc;
    if (_$data.containsKey('encounterTimeInUtc') !=
        other._$data.containsKey('encounterTimeInUtc')) {
      return false;
    }
    if (l$encounterTimeInUtc != lOther$encounterTimeInUtc) {
      return false;
    }
    final l$group = group;
    final lOther$group = other.group;
    if (_$data.containsKey('group') != other._$data.containsKey('group')) {
      return false;
    }
    if (l$group != lOther$group) {
      return false;
    }
    final l$houseAddress = houseAddress;
    final lOther$houseAddress = other.houseAddress;
    if (_$data.containsKey('houseAddress') !=
        other._$data.containsKey('houseAddress')) {
      return false;
    }
    if (l$houseAddress != lOther$houseAddress) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$result = result;
    final lOther$result = other.result;
    if (_$data.containsKey('result') != other._$data.containsKey('result')) {
      return false;
    }
    if (l$result != lOther$result) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$encounterTimeInUtc = encounterTimeInUtc;
    final l$group = group;
    final l$houseAddress = houseAddress;
    final l$id = id;
    final l$result = result;
    return Object.hashAll([
      _$data.containsKey('encounterTimeInUtc')
          ? l$encounterTimeInUtc
          : const {},
      _$data.containsKey('group') ? l$group : const {},
      _$data.containsKey('houseAddress') ? l$houseAddress : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('result') ? l$result : const {},
    ]);
  }
}

abstract class CopyWith$Input$Encounter_set_input<TRes> {
  factory CopyWith$Input$Encounter_set_input(
    Input$Encounter_set_input instance,
    TRes Function(Input$Encounter_set_input) then,
  ) = _CopyWithImpl$Input$Encounter_set_input;

  factory CopyWith$Input$Encounter_set_input.stub(TRes res) =
      _CopyWithStubImpl$Input$Encounter_set_input;

  TRes call({
    String? encounterTimeInUtc,
    String? group,
    String? houseAddress,
    String? id,
    String? result,
  });
}

class _CopyWithImpl$Input$Encounter_set_input<TRes>
    implements CopyWith$Input$Encounter_set_input<TRes> {
  _CopyWithImpl$Input$Encounter_set_input(
    this._instance,
    this._then,
  );

  final Input$Encounter_set_input _instance;

  final TRes Function(Input$Encounter_set_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? encounterTimeInUtc = _undefined,
    Object? group = _undefined,
    Object? houseAddress = _undefined,
    Object? id = _undefined,
    Object? result = _undefined,
  }) =>
      _then(Input$Encounter_set_input._({
        ..._instance._$data,
        if (encounterTimeInUtc != _undefined)
          'encounterTimeInUtc': (encounterTimeInUtc as String?),
        if (group != _undefined) 'group': (group as String?),
        if (houseAddress != _undefined)
          'houseAddress': (houseAddress as String?),
        if (id != _undefined) 'id': (id as String?),
        if (result != _undefined) 'result': (result as String?),
      }));
}

class _CopyWithStubImpl$Input$Encounter_set_input<TRes>
    implements CopyWith$Input$Encounter_set_input<TRes> {
  _CopyWithStubImpl$Input$Encounter_set_input(this._res);

  TRes _res;

  call({
    String? encounterTimeInUtc,
    String? group,
    String? houseAddress,
    String? id,
    String? result,
  }) =>
      _res;
}

class Input$Event_set_input {
  factory Input$Event_set_input({
    String? coverPhotoUrl,
    String? eventPlan,
    String? id,
    String? name,
    String? organization,
    String? scheduledEndTimeInUtc,
    String? scheduledStartTimeInUtc,
    String? type,
    String? whatToExpect,
  }) =>
      Input$Event_set_input._({
        if (coverPhotoUrl != null) r'coverPhotoUrl': coverPhotoUrl,
        if (eventPlan != null) r'eventPlan': eventPlan,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
        if (organization != null) r'organization': organization,
        if (scheduledEndTimeInUtc != null)
          r'scheduledEndTimeInUtc': scheduledEndTimeInUtc,
        if (scheduledStartTimeInUtc != null)
          r'scheduledStartTimeInUtc': scheduledStartTimeInUtc,
        if (type != null) r'type': type,
        if (whatToExpect != null) r'whatToExpect': whatToExpect,
      });

  Input$Event_set_input._(this._$data);

  factory Input$Event_set_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('coverPhotoUrl')) {
      final l$coverPhotoUrl = data['coverPhotoUrl'];
      result$data['coverPhotoUrl'] = (l$coverPhotoUrl as String?);
    }
    if (data.containsKey('eventPlan')) {
      final l$eventPlan = data['eventPlan'];
      result$data['eventPlan'] = (l$eventPlan as String?);
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as String?);
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] = (l$name as String?);
    }
    if (data.containsKey('organization')) {
      final l$organization = data['organization'];
      result$data['organization'] = (l$organization as String?);
    }
    if (data.containsKey('scheduledEndTimeInUtc')) {
      final l$scheduledEndTimeInUtc = data['scheduledEndTimeInUtc'];
      result$data['scheduledEndTimeInUtc'] =
          (l$scheduledEndTimeInUtc as String?);
    }
    if (data.containsKey('scheduledStartTimeInUtc')) {
      final l$scheduledStartTimeInUtc = data['scheduledStartTimeInUtc'];
      result$data['scheduledStartTimeInUtc'] =
          (l$scheduledStartTimeInUtc as String?);
    }
    if (data.containsKey('type')) {
      final l$type = data['type'];
      result$data['type'] = (l$type as String?);
    }
    if (data.containsKey('whatToExpect')) {
      final l$whatToExpect = data['whatToExpect'];
      result$data['whatToExpect'] = (l$whatToExpect as String?);
    }
    return Input$Event_set_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get coverPhotoUrl => (_$data['coverPhotoUrl'] as String?);
  String? get eventPlan => (_$data['eventPlan'] as String?);
  String? get id => (_$data['id'] as String?);
  String? get name => (_$data['name'] as String?);
  String? get organization => (_$data['organization'] as String?);
  String? get scheduledEndTimeInUtc =>
      (_$data['scheduledEndTimeInUtc'] as String?);
  String? get scheduledStartTimeInUtc =>
      (_$data['scheduledStartTimeInUtc'] as String?);
  String? get type => (_$data['type'] as String?);
  String? get whatToExpect => (_$data['whatToExpect'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('coverPhotoUrl')) {
      final l$coverPhotoUrl = coverPhotoUrl;
      result$data['coverPhotoUrl'] = l$coverPhotoUrl;
    }
    if (_$data.containsKey('eventPlan')) {
      final l$eventPlan = eventPlan;
      result$data['eventPlan'] = l$eventPlan;
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] = l$name;
    }
    if (_$data.containsKey('organization')) {
      final l$organization = organization;
      result$data['organization'] = l$organization;
    }
    if (_$data.containsKey('scheduledEndTimeInUtc')) {
      final l$scheduledEndTimeInUtc = scheduledEndTimeInUtc;
      result$data['scheduledEndTimeInUtc'] = l$scheduledEndTimeInUtc;
    }
    if (_$data.containsKey('scheduledStartTimeInUtc')) {
      final l$scheduledStartTimeInUtc = scheduledStartTimeInUtc;
      result$data['scheduledStartTimeInUtc'] = l$scheduledStartTimeInUtc;
    }
    if (_$data.containsKey('type')) {
      final l$type = type;
      result$data['type'] = l$type;
    }
    if (_$data.containsKey('whatToExpect')) {
      final l$whatToExpect = whatToExpect;
      result$data['whatToExpect'] = l$whatToExpect;
    }
    return result$data;
  }

  CopyWith$Input$Event_set_input<Input$Event_set_input> get copyWith =>
      CopyWith$Input$Event_set_input(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Event_set_input) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$coverPhotoUrl = coverPhotoUrl;
    final lOther$coverPhotoUrl = other.coverPhotoUrl;
    if (_$data.containsKey('coverPhotoUrl') !=
        other._$data.containsKey('coverPhotoUrl')) {
      return false;
    }
    if (l$coverPhotoUrl != lOther$coverPhotoUrl) {
      return false;
    }
    final l$eventPlan = eventPlan;
    final lOther$eventPlan = other.eventPlan;
    if (_$data.containsKey('eventPlan') !=
        other._$data.containsKey('eventPlan')) {
      return false;
    }
    if (l$eventPlan != lOther$eventPlan) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$organization = organization;
    final lOther$organization = other.organization;
    if (_$data.containsKey('organization') !=
        other._$data.containsKey('organization')) {
      return false;
    }
    if (l$organization != lOther$organization) {
      return false;
    }
    final l$scheduledEndTimeInUtc = scheduledEndTimeInUtc;
    final lOther$scheduledEndTimeInUtc = other.scheduledEndTimeInUtc;
    if (_$data.containsKey('scheduledEndTimeInUtc') !=
        other._$data.containsKey('scheduledEndTimeInUtc')) {
      return false;
    }
    if (l$scheduledEndTimeInUtc != lOther$scheduledEndTimeInUtc) {
      return false;
    }
    final l$scheduledStartTimeInUtc = scheduledStartTimeInUtc;
    final lOther$scheduledStartTimeInUtc = other.scheduledStartTimeInUtc;
    if (_$data.containsKey('scheduledStartTimeInUtc') !=
        other._$data.containsKey('scheduledStartTimeInUtc')) {
      return false;
    }
    if (l$scheduledStartTimeInUtc != lOther$scheduledStartTimeInUtc) {
      return false;
    }
    final l$type = type;
    final lOther$type = other.type;
    if (_$data.containsKey('type') != other._$data.containsKey('type')) {
      return false;
    }
    if (l$type != lOther$type) {
      return false;
    }
    final l$whatToExpect = whatToExpect;
    final lOther$whatToExpect = other.whatToExpect;
    if (_$data.containsKey('whatToExpect') !=
        other._$data.containsKey('whatToExpect')) {
      return false;
    }
    if (l$whatToExpect != lOther$whatToExpect) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$coverPhotoUrl = coverPhotoUrl;
    final l$eventPlan = eventPlan;
    final l$id = id;
    final l$name = name;
    final l$organization = organization;
    final l$scheduledEndTimeInUtc = scheduledEndTimeInUtc;
    final l$scheduledStartTimeInUtc = scheduledStartTimeInUtc;
    final l$type = type;
    final l$whatToExpect = whatToExpect;
    return Object.hashAll([
      _$data.containsKey('coverPhotoUrl') ? l$coverPhotoUrl : const {},
      _$data.containsKey('eventPlan') ? l$eventPlan : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('organization') ? l$organization : const {},
      _$data.containsKey('scheduledEndTimeInUtc')
          ? l$scheduledEndTimeInUtc
          : const {},
      _$data.containsKey('scheduledStartTimeInUtc')
          ? l$scheduledStartTimeInUtc
          : const {},
      _$data.containsKey('type') ? l$type : const {},
      _$data.containsKey('whatToExpect') ? l$whatToExpect : const {},
    ]);
  }
}

abstract class CopyWith$Input$Event_set_input<TRes> {
  factory CopyWith$Input$Event_set_input(
    Input$Event_set_input instance,
    TRes Function(Input$Event_set_input) then,
  ) = _CopyWithImpl$Input$Event_set_input;

  factory CopyWith$Input$Event_set_input.stub(TRes res) =
      _CopyWithStubImpl$Input$Event_set_input;

  TRes call({
    String? coverPhotoUrl,
    String? eventPlan,
    String? id,
    String? name,
    String? organization,
    String? scheduledEndTimeInUtc,
    String? scheduledStartTimeInUtc,
    String? type,
    String? whatToExpect,
  });
}

class _CopyWithImpl$Input$Event_set_input<TRes>
    implements CopyWith$Input$Event_set_input<TRes> {
  _CopyWithImpl$Input$Event_set_input(
    this._instance,
    this._then,
  );

  final Input$Event_set_input _instance;

  final TRes Function(Input$Event_set_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? coverPhotoUrl = _undefined,
    Object? eventPlan = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
    Object? organization = _undefined,
    Object? scheduledEndTimeInUtc = _undefined,
    Object? scheduledStartTimeInUtc = _undefined,
    Object? type = _undefined,
    Object? whatToExpect = _undefined,
  }) =>
      _then(Input$Event_set_input._({
        ..._instance._$data,
        if (coverPhotoUrl != _undefined)
          'coverPhotoUrl': (coverPhotoUrl as String?),
        if (eventPlan != _undefined) 'eventPlan': (eventPlan as String?),
        if (id != _undefined) 'id': (id as String?),
        if (name != _undefined) 'name': (name as String?),
        if (organization != _undefined)
          'organization': (organization as String?),
        if (scheduledEndTimeInUtc != _undefined)
          'scheduledEndTimeInUtc': (scheduledEndTimeInUtc as String?),
        if (scheduledStartTimeInUtc != _undefined)
          'scheduledStartTimeInUtc': (scheduledStartTimeInUtc as String?),
        if (type != _undefined) 'type': (type as String?),
        if (whatToExpect != _undefined)
          'whatToExpect': (whatToExpect as String?),
      }));
}

class _CopyWithStubImpl$Input$Event_set_input<TRes>
    implements CopyWith$Input$Event_set_input<TRes> {
  _CopyWithStubImpl$Input$Event_set_input(this._res);

  TRes _res;

  call({
    String? coverPhotoUrl,
    String? eventPlan,
    String? id,
    String? name,
    String? organization,
    String? scheduledEndTimeInUtc,
    String? scheduledStartTimeInUtc,
    String? type,
    String? whatToExpect,
  }) =>
      _res;
}

class Input$Map_set_input {
  factory Input$Map_set_input({
    String? belongingOrganization,
    String? id,
    String? name,
  }) =>
      Input$Map_set_input._({
        if (belongingOrganization != null)
          r'belongingOrganization': belongingOrganization,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
      });

  Input$Map_set_input._(this._$data);

  factory Input$Map_set_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('belongingOrganization')) {
      final l$belongingOrganization = data['belongingOrganization'];
      result$data['belongingOrganization'] =
          (l$belongingOrganization as String?);
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as String?);
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] = (l$name as String?);
    }
    return Input$Map_set_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get belongingOrganization =>
      (_$data['belongingOrganization'] as String?);
  String? get id => (_$data['id'] as String?);
  String? get name => (_$data['name'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('belongingOrganization')) {
      final l$belongingOrganization = belongingOrganization;
      result$data['belongingOrganization'] = l$belongingOrganization;
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] = l$name;
    }
    return result$data;
  }

  CopyWith$Input$Map_set_input<Input$Map_set_input> get copyWith =>
      CopyWith$Input$Map_set_input(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Map_set_input) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$belongingOrganization = belongingOrganization;
    final lOther$belongingOrganization = other.belongingOrganization;
    if (_$data.containsKey('belongingOrganization') !=
        other._$data.containsKey('belongingOrganization')) {
      return false;
    }
    if (l$belongingOrganization != lOther$belongingOrganization) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$belongingOrganization = belongingOrganization;
    final l$id = id;
    final l$name = name;
    return Object.hashAll([
      _$data.containsKey('belongingOrganization')
          ? l$belongingOrganization
          : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
    ]);
  }
}

abstract class CopyWith$Input$Map_set_input<TRes> {
  factory CopyWith$Input$Map_set_input(
    Input$Map_set_input instance,
    TRes Function(Input$Map_set_input) then,
  ) = _CopyWithImpl$Input$Map_set_input;

  factory CopyWith$Input$Map_set_input.stub(TRes res) =
      _CopyWithStubImpl$Input$Map_set_input;

  TRes call({
    String? belongingOrganization,
    String? id,
    String? name,
  });
}

class _CopyWithImpl$Input$Map_set_input<TRes>
    implements CopyWith$Input$Map_set_input<TRes> {
  _CopyWithImpl$Input$Map_set_input(
    this._instance,
    this._then,
  );

  final Input$Map_set_input _instance;

  final TRes Function(Input$Map_set_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? belongingOrganization = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
  }) =>
      _then(Input$Map_set_input._({
        ..._instance._$data,
        if (belongingOrganization != _undefined)
          'belongingOrganization': (belongingOrganization as String?),
        if (id != _undefined) 'id': (id as String?),
        if (name != _undefined) 'name': (name as String?),
      }));
}

class _CopyWithStubImpl$Input$Map_set_input<TRes>
    implements CopyWith$Input$Map_set_input<TRes> {
  _CopyWithStubImpl$Input$Map_set_input(this._res);

  TRes _res;

  call({
    String? belongingOrganization,
    String? id,
    String? name,
  }) =>
      _res;
}

class Input$MapArea_set_input {
  factory Input$MapArea_set_input({
    String? belongingMap,
    String? id,
    String? name,
    String? polygonGeoJson,
  }) =>
      Input$MapArea_set_input._({
        if (belongingMap != null) r'belongingMap': belongingMap,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
        if (polygonGeoJson != null) r'polygonGeoJson': polygonGeoJson,
      });

  Input$MapArea_set_input._(this._$data);

  factory Input$MapArea_set_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('belongingMap')) {
      final l$belongingMap = data['belongingMap'];
      result$data['belongingMap'] = (l$belongingMap as String?);
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as String?);
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] = (l$name as String?);
    }
    if (data.containsKey('polygonGeoJson')) {
      final l$polygonGeoJson = data['polygonGeoJson'];
      result$data['polygonGeoJson'] = (l$polygonGeoJson as String?);
    }
    return Input$MapArea_set_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get belongingMap => (_$data['belongingMap'] as String?);
  String? get id => (_$data['id'] as String?);
  String? get name => (_$data['name'] as String?);
  String? get polygonGeoJson => (_$data['polygonGeoJson'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('belongingMap')) {
      final l$belongingMap = belongingMap;
      result$data['belongingMap'] = l$belongingMap;
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] = l$name;
    }
    if (_$data.containsKey('polygonGeoJson')) {
      final l$polygonGeoJson = polygonGeoJson;
      result$data['polygonGeoJson'] = l$polygonGeoJson;
    }
    return result$data;
  }

  CopyWith$Input$MapArea_set_input<Input$MapArea_set_input> get copyWith =>
      CopyWith$Input$MapArea_set_input(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$MapArea_set_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$belongingMap = belongingMap;
    final lOther$belongingMap = other.belongingMap;
    if (_$data.containsKey('belongingMap') !=
        other._$data.containsKey('belongingMap')) {
      return false;
    }
    if (l$belongingMap != lOther$belongingMap) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$polygonGeoJson = polygonGeoJson;
    final lOther$polygonGeoJson = other.polygonGeoJson;
    if (_$data.containsKey('polygonGeoJson') !=
        other._$data.containsKey('polygonGeoJson')) {
      return false;
    }
    if (l$polygonGeoJson != lOther$polygonGeoJson) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$belongingMap = belongingMap;
    final l$id = id;
    final l$name = name;
    final l$polygonGeoJson = polygonGeoJson;
    return Object.hashAll([
      _$data.containsKey('belongingMap') ? l$belongingMap : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('polygonGeoJson') ? l$polygonGeoJson : const {},
    ]);
  }
}

abstract class CopyWith$Input$MapArea_set_input<TRes> {
  factory CopyWith$Input$MapArea_set_input(
    Input$MapArea_set_input instance,
    TRes Function(Input$MapArea_set_input) then,
  ) = _CopyWithImpl$Input$MapArea_set_input;

  factory CopyWith$Input$MapArea_set_input.stub(TRes res) =
      _CopyWithStubImpl$Input$MapArea_set_input;

  TRes call({
    String? belongingMap,
    String? id,
    String? name,
    String? polygonGeoJson,
  });
}

class _CopyWithImpl$Input$MapArea_set_input<TRes>
    implements CopyWith$Input$MapArea_set_input<TRes> {
  _CopyWithImpl$Input$MapArea_set_input(
    this._instance,
    this._then,
  );

  final Input$MapArea_set_input _instance;

  final TRes Function(Input$MapArea_set_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? belongingMap = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
    Object? polygonGeoJson = _undefined,
  }) =>
      _then(Input$MapArea_set_input._({
        ..._instance._$data,
        if (belongingMap != _undefined)
          'belongingMap': (belongingMap as String?),
        if (id != _undefined) 'id': (id as String?),
        if (name != _undefined) 'name': (name as String?),
        if (polygonGeoJson != _undefined)
          'polygonGeoJson': (polygonGeoJson as String?),
      }));
}

class _CopyWithStubImpl$Input$MapArea_set_input<TRes>
    implements CopyWith$Input$MapArea_set_input<TRes> {
  _CopyWithStubImpl$Input$MapArea_set_input(this._res);

  TRes _res;

  call({
    String? belongingMap,
    String? id,
    String? name,
    String? polygonGeoJson,
  }) =>
      _res;
}

class Input$Organization_set_input {
  factory Input$Organization_set_input({
    String? id,
    String? name,
    String? type,
  }) =>
      Input$Organization_set_input._({
        if (id != null) r'id': id,
        if (name != null) r'name': name,
        if (type != null) r'type': type,
      });

  Input$Organization_set_input._(this._$data);

  factory Input$Organization_set_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as String?);
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] = (l$name as String?);
    }
    if (data.containsKey('type')) {
      final l$type = data['type'];
      result$data['type'] = (l$type as String?);
    }
    return Input$Organization_set_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get id => (_$data['id'] as String?);
  String? get name => (_$data['name'] as String?);
  String? get type => (_$data['type'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] = l$name;
    }
    if (_$data.containsKey('type')) {
      final l$type = type;
      result$data['type'] = l$type;
    }
    return result$data;
  }

  CopyWith$Input$Organization_set_input<Input$Organization_set_input>
      get copyWith => CopyWith$Input$Organization_set_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Organization_set_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$type = type;
    final lOther$type = other.type;
    if (_$data.containsKey('type') != other._$data.containsKey('type')) {
      return false;
    }
    if (l$type != lOther$type) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$type = type;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('type') ? l$type : const {},
    ]);
  }
}

abstract class CopyWith$Input$Organization_set_input<TRes> {
  factory CopyWith$Input$Organization_set_input(
    Input$Organization_set_input instance,
    TRes Function(Input$Organization_set_input) then,
  ) = _CopyWithImpl$Input$Organization_set_input;

  factory CopyWith$Input$Organization_set_input.stub(TRes res) =
      _CopyWithStubImpl$Input$Organization_set_input;

  TRes call({
    String? id,
    String? name,
    String? type,
  });
}

class _CopyWithImpl$Input$Organization_set_input<TRes>
    implements CopyWith$Input$Organization_set_input<TRes> {
  _CopyWithImpl$Input$Organization_set_input(
    this._instance,
    this._then,
  );

  final Input$Organization_set_input _instance;

  final TRes Function(Input$Organization_set_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? type = _undefined,
  }) =>
      _then(Input$Organization_set_input._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as String?),
        if (name != _undefined) 'name': (name as String?),
        if (type != _undefined) 'type': (type as String?),
      }));
}

class _CopyWithStubImpl$Input$Organization_set_input<TRes>
    implements CopyWith$Input$Organization_set_input<TRes> {
  _CopyWithStubImpl$Input$Organization_set_input(this._res);

  TRes _res;

  call({
    String? id,
    String? name,
    String? type,
  }) =>
      _res;
}

class Input$SavedPerson_set_input {
  factory Input$SavedPerson_set_input({
    String? email,
    String? id,
    String? name,
    String? phone,
    String? savingEncounter,
  }) =>
      Input$SavedPerson_set_input._({
        if (email != null) r'email': email,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
        if (phone != null) r'phone': phone,
        if (savingEncounter != null) r'savingEncounter': savingEncounter,
      });

  Input$SavedPerson_set_input._(this._$data);

  factory Input$SavedPerson_set_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('email')) {
      final l$email = data['email'];
      result$data['email'] = (l$email as String?);
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as String?);
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] = (l$name as String?);
    }
    if (data.containsKey('phone')) {
      final l$phone = data['phone'];
      result$data['phone'] = (l$phone as String?);
    }
    if (data.containsKey('savingEncounter')) {
      final l$savingEncounter = data['savingEncounter'];
      result$data['savingEncounter'] = (l$savingEncounter as String?);
    }
    return Input$SavedPerson_set_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get email => (_$data['email'] as String?);
  String? get id => (_$data['id'] as String?);
  String? get name => (_$data['name'] as String?);
  String? get phone => (_$data['phone'] as String?);
  String? get savingEncounter => (_$data['savingEncounter'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('email')) {
      final l$email = email;
      result$data['email'] = l$email;
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] = l$name;
    }
    if (_$data.containsKey('phone')) {
      final l$phone = phone;
      result$data['phone'] = l$phone;
    }
    if (_$data.containsKey('savingEncounter')) {
      final l$savingEncounter = savingEncounter;
      result$data['savingEncounter'] = l$savingEncounter;
    }
    return result$data;
  }

  CopyWith$Input$SavedPerson_set_input<Input$SavedPerson_set_input>
      get copyWith => CopyWith$Input$SavedPerson_set_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SavedPerson_set_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$email = email;
    final lOther$email = other.email;
    if (_$data.containsKey('email') != other._$data.containsKey('email')) {
      return false;
    }
    if (l$email != lOther$email) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$phone = phone;
    final lOther$phone = other.phone;
    if (_$data.containsKey('phone') != other._$data.containsKey('phone')) {
      return false;
    }
    if (l$phone != lOther$phone) {
      return false;
    }
    final l$savingEncounter = savingEncounter;
    final lOther$savingEncounter = other.savingEncounter;
    if (_$data.containsKey('savingEncounter') !=
        other._$data.containsKey('savingEncounter')) {
      return false;
    }
    if (l$savingEncounter != lOther$savingEncounter) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$email = email;
    final l$id = id;
    final l$name = name;
    final l$phone = phone;
    final l$savingEncounter = savingEncounter;
    return Object.hashAll([
      _$data.containsKey('email') ? l$email : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('phone') ? l$phone : const {},
      _$data.containsKey('savingEncounter') ? l$savingEncounter : const {},
    ]);
  }
}

abstract class CopyWith$Input$SavedPerson_set_input<TRes> {
  factory CopyWith$Input$SavedPerson_set_input(
    Input$SavedPerson_set_input instance,
    TRes Function(Input$SavedPerson_set_input) then,
  ) = _CopyWithImpl$Input$SavedPerson_set_input;

  factory CopyWith$Input$SavedPerson_set_input.stub(TRes res) =
      _CopyWithStubImpl$Input$SavedPerson_set_input;

  TRes call({
    String? email,
    String? id,
    String? name,
    String? phone,
    String? savingEncounter,
  });
}

class _CopyWithImpl$Input$SavedPerson_set_input<TRes>
    implements CopyWith$Input$SavedPerson_set_input<TRes> {
  _CopyWithImpl$Input$SavedPerson_set_input(
    this._instance,
    this._then,
  );

  final Input$SavedPerson_set_input _instance;

  final TRes Function(Input$SavedPerson_set_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? email = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
    Object? phone = _undefined,
    Object? savingEncounter = _undefined,
  }) =>
      _then(Input$SavedPerson_set_input._({
        ..._instance._$data,
        if (email != _undefined) 'email': (email as String?),
        if (id != _undefined) 'id': (id as String?),
        if (name != _undefined) 'name': (name as String?),
        if (phone != _undefined) 'phone': (phone as String?),
        if (savingEncounter != _undefined)
          'savingEncounter': (savingEncounter as String?),
      }));
}

class _CopyWithStubImpl$Input$SavedPerson_set_input<TRes>
    implements CopyWith$Input$SavedPerson_set_input<TRes> {
  _CopyWithStubImpl$Input$SavedPerson_set_input(this._res);

  TRes _res;

  call({
    String? email,
    String? id,
    String? name,
    String? phone,
    String? savingEncounter,
  }) =>
      _res;
}

class Input$SoulWinningSession_set_input {
  factory Input$SoulWinningSession_set_input({
    String? event,
    String? id,
    String? name,
    String? scheduledEndTimeInUtc,
    String? scheduledStartTimeInUtc,
  }) =>
      Input$SoulWinningSession_set_input._({
        if (event != null) r'event': event,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
        if (scheduledEndTimeInUtc != null)
          r'scheduledEndTimeInUtc': scheduledEndTimeInUtc,
        if (scheduledStartTimeInUtc != null)
          r'scheduledStartTimeInUtc': scheduledStartTimeInUtc,
      });

  Input$SoulWinningSession_set_input._(this._$data);

  factory Input$SoulWinningSession_set_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('event')) {
      final l$event = data['event'];
      result$data['event'] = (l$event as String?);
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as String?);
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] = (l$name as String?);
    }
    if (data.containsKey('scheduledEndTimeInUtc')) {
      final l$scheduledEndTimeInUtc = data['scheduledEndTimeInUtc'];
      result$data['scheduledEndTimeInUtc'] =
          (l$scheduledEndTimeInUtc as String?);
    }
    if (data.containsKey('scheduledStartTimeInUtc')) {
      final l$scheduledStartTimeInUtc = data['scheduledStartTimeInUtc'];
      result$data['scheduledStartTimeInUtc'] =
          (l$scheduledStartTimeInUtc as String?);
    }
    return Input$SoulWinningSession_set_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get event => (_$data['event'] as String?);
  String? get id => (_$data['id'] as String?);
  String? get name => (_$data['name'] as String?);
  String? get scheduledEndTimeInUtc =>
      (_$data['scheduledEndTimeInUtc'] as String?);
  String? get scheduledStartTimeInUtc =>
      (_$data['scheduledStartTimeInUtc'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('event')) {
      final l$event = event;
      result$data['event'] = l$event;
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] = l$name;
    }
    if (_$data.containsKey('scheduledEndTimeInUtc')) {
      final l$scheduledEndTimeInUtc = scheduledEndTimeInUtc;
      result$data['scheduledEndTimeInUtc'] = l$scheduledEndTimeInUtc;
    }
    if (_$data.containsKey('scheduledStartTimeInUtc')) {
      final l$scheduledStartTimeInUtc = scheduledStartTimeInUtc;
      result$data['scheduledStartTimeInUtc'] = l$scheduledStartTimeInUtc;
    }
    return result$data;
  }

  CopyWith$Input$SoulWinningSession_set_input<
          Input$SoulWinningSession_set_input>
      get copyWith => CopyWith$Input$SoulWinningSession_set_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SoulWinningSession_set_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$event = event;
    final lOther$event = other.event;
    if (_$data.containsKey('event') != other._$data.containsKey('event')) {
      return false;
    }
    if (l$event != lOther$event) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$scheduledEndTimeInUtc = scheduledEndTimeInUtc;
    final lOther$scheduledEndTimeInUtc = other.scheduledEndTimeInUtc;
    if (_$data.containsKey('scheduledEndTimeInUtc') !=
        other._$data.containsKey('scheduledEndTimeInUtc')) {
      return false;
    }
    if (l$scheduledEndTimeInUtc != lOther$scheduledEndTimeInUtc) {
      return false;
    }
    final l$scheduledStartTimeInUtc = scheduledStartTimeInUtc;
    final lOther$scheduledStartTimeInUtc = other.scheduledStartTimeInUtc;
    if (_$data.containsKey('scheduledStartTimeInUtc') !=
        other._$data.containsKey('scheduledStartTimeInUtc')) {
      return false;
    }
    if (l$scheduledStartTimeInUtc != lOther$scheduledStartTimeInUtc) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$event = event;
    final l$id = id;
    final l$name = name;
    final l$scheduledEndTimeInUtc = scheduledEndTimeInUtc;
    final l$scheduledStartTimeInUtc = scheduledStartTimeInUtc;
    return Object.hashAll([
      _$data.containsKey('event') ? l$event : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('scheduledEndTimeInUtc')
          ? l$scheduledEndTimeInUtc
          : const {},
      _$data.containsKey('scheduledStartTimeInUtc')
          ? l$scheduledStartTimeInUtc
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$SoulWinningSession_set_input<TRes> {
  factory CopyWith$Input$SoulWinningSession_set_input(
    Input$SoulWinningSession_set_input instance,
    TRes Function(Input$SoulWinningSession_set_input) then,
  ) = _CopyWithImpl$Input$SoulWinningSession_set_input;

  factory CopyWith$Input$SoulWinningSession_set_input.stub(TRes res) =
      _CopyWithStubImpl$Input$SoulWinningSession_set_input;

  TRes call({
    String? event,
    String? id,
    String? name,
    String? scheduledEndTimeInUtc,
    String? scheduledStartTimeInUtc,
  });
}

class _CopyWithImpl$Input$SoulWinningSession_set_input<TRes>
    implements CopyWith$Input$SoulWinningSession_set_input<TRes> {
  _CopyWithImpl$Input$SoulWinningSession_set_input(
    this._instance,
    this._then,
  );

  final Input$SoulWinningSession_set_input _instance;

  final TRes Function(Input$SoulWinningSession_set_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? event = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
    Object? scheduledEndTimeInUtc = _undefined,
    Object? scheduledStartTimeInUtc = _undefined,
  }) =>
      _then(Input$SoulWinningSession_set_input._({
        ..._instance._$data,
        if (event != _undefined) 'event': (event as String?),
        if (id != _undefined) 'id': (id as String?),
        if (name != _undefined) 'name': (name as String?),
        if (scheduledEndTimeInUtc != _undefined)
          'scheduledEndTimeInUtc': (scheduledEndTimeInUtc as String?),
        if (scheduledStartTimeInUtc != _undefined)
          'scheduledStartTimeInUtc': (scheduledStartTimeInUtc as String?),
      }));
}

class _CopyWithStubImpl$Input$SoulWinningSession_set_input<TRes>
    implements CopyWith$Input$SoulWinningSession_set_input<TRes> {
  _CopyWithStubImpl$Input$SoulWinningSession_set_input(this._res);

  TRes _res;

  call({
    String? event,
    String? id,
    String? name,
    String? scheduledEndTimeInUtc,
    String? scheduledStartTimeInUtc,
  }) =>
      _res;
}

class Input$SoulWinningSessionGroup_set_input {
  factory Input$SoulWinningSessionGroup_set_input({
    String? assignedMapArea,
    String? id,
    String? session,
  }) =>
      Input$SoulWinningSessionGroup_set_input._({
        if (assignedMapArea != null) r'assignedMapArea': assignedMapArea,
        if (id != null) r'id': id,
        if (session != null) r'session': session,
      });

  Input$SoulWinningSessionGroup_set_input._(this._$data);

  factory Input$SoulWinningSessionGroup_set_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('assignedMapArea')) {
      final l$assignedMapArea = data['assignedMapArea'];
      result$data['assignedMapArea'] = (l$assignedMapArea as String?);
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as String?);
    }
    if (data.containsKey('session')) {
      final l$session = data['session'];
      result$data['session'] = (l$session as String?);
    }
    return Input$SoulWinningSessionGroup_set_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get assignedMapArea => (_$data['assignedMapArea'] as String?);
  String? get id => (_$data['id'] as String?);
  String? get session => (_$data['session'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('assignedMapArea')) {
      final l$assignedMapArea = assignedMapArea;
      result$data['assignedMapArea'] = l$assignedMapArea;
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('session')) {
      final l$session = session;
      result$data['session'] = l$session;
    }
    return result$data;
  }

  CopyWith$Input$SoulWinningSessionGroup_set_input<
          Input$SoulWinningSessionGroup_set_input>
      get copyWith => CopyWith$Input$SoulWinningSessionGroup_set_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SoulWinningSessionGroup_set_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$assignedMapArea = assignedMapArea;
    final lOther$assignedMapArea = other.assignedMapArea;
    if (_$data.containsKey('assignedMapArea') !=
        other._$data.containsKey('assignedMapArea')) {
      return false;
    }
    if (l$assignedMapArea != lOther$assignedMapArea) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$session = session;
    final lOther$session = other.session;
    if (_$data.containsKey('session') != other._$data.containsKey('session')) {
      return false;
    }
    if (l$session != lOther$session) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$assignedMapArea = assignedMapArea;
    final l$id = id;
    final l$session = session;
    return Object.hashAll([
      _$data.containsKey('assignedMapArea') ? l$assignedMapArea : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('session') ? l$session : const {},
    ]);
  }
}

abstract class CopyWith$Input$SoulWinningSessionGroup_set_input<TRes> {
  factory CopyWith$Input$SoulWinningSessionGroup_set_input(
    Input$SoulWinningSessionGroup_set_input instance,
    TRes Function(Input$SoulWinningSessionGroup_set_input) then,
  ) = _CopyWithImpl$Input$SoulWinningSessionGroup_set_input;

  factory CopyWith$Input$SoulWinningSessionGroup_set_input.stub(TRes res) =
      _CopyWithStubImpl$Input$SoulWinningSessionGroup_set_input;

  TRes call({
    String? assignedMapArea,
    String? id,
    String? session,
  });
}

class _CopyWithImpl$Input$SoulWinningSessionGroup_set_input<TRes>
    implements CopyWith$Input$SoulWinningSessionGroup_set_input<TRes> {
  _CopyWithImpl$Input$SoulWinningSessionGroup_set_input(
    this._instance,
    this._then,
  );

  final Input$SoulWinningSessionGroup_set_input _instance;

  final TRes Function(Input$SoulWinningSessionGroup_set_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? assignedMapArea = _undefined,
    Object? id = _undefined,
    Object? session = _undefined,
  }) =>
      _then(Input$SoulWinningSessionGroup_set_input._({
        ..._instance._$data,
        if (assignedMapArea != _undefined)
          'assignedMapArea': (assignedMapArea as String?),
        if (id != _undefined) 'id': (id as String?),
        if (session != _undefined) 'session': (session as String?),
      }));
}

class _CopyWithStubImpl$Input$SoulWinningSessionGroup_set_input<TRes>
    implements CopyWith$Input$SoulWinningSessionGroup_set_input<TRes> {
  _CopyWithStubImpl$Input$SoulWinningSessionGroup_set_input(this._res);

  TRes _res;

  call({
    String? assignedMapArea,
    String? id,
    String? session,
  }) =>
      _res;
}

class Input$User_set_input {
  factory Input$User_set_input({
    String? adminUiPassword,
    String? createdAt,
    String? email,
    String? id,
    String? name,
  }) =>
      Input$User_set_input._({
        if (adminUiPassword != null) r'adminUiPassword': adminUiPassword,
        if (createdAt != null) r'createdAt': createdAt,
        if (email != null) r'email': email,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
      });

  Input$User_set_input._(this._$data);

  factory Input$User_set_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('adminUiPassword')) {
      final l$adminUiPassword = data['adminUiPassword'];
      result$data['adminUiPassword'] = (l$adminUiPassword as String?);
    }
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] = (l$createdAt as String?);
    }
    if (data.containsKey('email')) {
      final l$email = data['email'];
      result$data['email'] = (l$email as String?);
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as String?);
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] = (l$name as String?);
    }
    return Input$User_set_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get adminUiPassword => (_$data['adminUiPassword'] as String?);
  String? get createdAt => (_$data['createdAt'] as String?);
  String? get email => (_$data['email'] as String?);
  String? get id => (_$data['id'] as String?);
  String? get name => (_$data['name'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('adminUiPassword')) {
      final l$adminUiPassword = adminUiPassword;
      result$data['adminUiPassword'] = l$adminUiPassword;
    }
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] = l$createdAt;
    }
    if (_$data.containsKey('email')) {
      final l$email = email;
      result$data['email'] = l$email;
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] = l$name;
    }
    return result$data;
  }

  CopyWith$Input$User_set_input<Input$User_set_input> get copyWith =>
      CopyWith$Input$User_set_input(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$User_set_input) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$adminUiPassword = adminUiPassword;
    final lOther$adminUiPassword = other.adminUiPassword;
    if (_$data.containsKey('adminUiPassword') !=
        other._$data.containsKey('adminUiPassword')) {
      return false;
    }
    if (l$adminUiPassword != lOther$adminUiPassword) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$email = email;
    final lOther$email = other.email;
    if (_$data.containsKey('email') != other._$data.containsKey('email')) {
      return false;
    }
    if (l$email != lOther$email) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$adminUiPassword = adminUiPassword;
    final l$createdAt = createdAt;
    final l$email = email;
    final l$id = id;
    final l$name = name;
    return Object.hashAll([
      _$data.containsKey('adminUiPassword') ? l$adminUiPassword : const {},
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('email') ? l$email : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
    ]);
  }
}

abstract class CopyWith$Input$User_set_input<TRes> {
  factory CopyWith$Input$User_set_input(
    Input$User_set_input instance,
    TRes Function(Input$User_set_input) then,
  ) = _CopyWithImpl$Input$User_set_input;

  factory CopyWith$Input$User_set_input.stub(TRes res) =
      _CopyWithStubImpl$Input$User_set_input;

  TRes call({
    String? adminUiPassword,
    String? createdAt,
    String? email,
    String? id,
    String? name,
  });
}

class _CopyWithImpl$Input$User_set_input<TRes>
    implements CopyWith$Input$User_set_input<TRes> {
  _CopyWithImpl$Input$User_set_input(
    this._instance,
    this._then,
  );

  final Input$User_set_input _instance;

  final TRes Function(Input$User_set_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? adminUiPassword = _undefined,
    Object? createdAt = _undefined,
    Object? email = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
  }) =>
      _then(Input$User_set_input._({
        ..._instance._$data,
        if (adminUiPassword != _undefined)
          'adminUiPassword': (adminUiPassword as String?),
        if (createdAt != _undefined) 'createdAt': (createdAt as String?),
        if (email != _undefined) 'email': (email as String?),
        if (id != _undefined) 'id': (id as String?),
        if (name != _undefined) 'name': (name as String?),
      }));
}

class _CopyWithStubImpl$Input$User_set_input<TRes>
    implements CopyWith$Input$User_set_input<TRes> {
  _CopyWithStubImpl$Input$User_set_input(this._res);

  TRes _res;

  call({
    String? adminUiPassword,
    String? createdAt,
    String? email,
    String? id,
    String? name,
  }) =>
      _res;
}

class Input$_Organization_adminsOfOrganization_set_input {
  factory Input$_Organization_adminsOfOrganization_set_input({
    String? A,
    String? B,
  }) =>
      Input$_Organization_adminsOfOrganization_set_input._({
        if (A != null) r'A': A,
        if (B != null) r'B': B,
      });

  Input$_Organization_adminsOfOrganization_set_input._(this._$data);

  factory Input$_Organization_adminsOfOrganization_set_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('A')) {
      final l$A = data['A'];
      result$data['A'] = (l$A as String?);
    }
    if (data.containsKey('B')) {
      final l$B = data['B'];
      result$data['B'] = (l$B as String?);
    }
    return Input$_Organization_adminsOfOrganization_set_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get A => (_$data['A'] as String?);
  String? get B => (_$data['B'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('A')) {
      final l$A = A;
      result$data['A'] = l$A;
    }
    if (_$data.containsKey('B')) {
      final l$B = B;
      result$data['B'] = l$B;
    }
    return result$data;
  }

  CopyWith$Input$_Organization_adminsOfOrganization_set_input<
          Input$_Organization_adminsOfOrganization_set_input>
      get copyWith =>
          CopyWith$Input$_Organization_adminsOfOrganization_set_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$_Organization_adminsOfOrganization_set_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$A = A;
    final lOther$A = other.A;
    if (_$data.containsKey('A') != other._$data.containsKey('A')) {
      return false;
    }
    if (l$A != lOther$A) {
      return false;
    }
    final l$B = B;
    final lOther$B = other.B;
    if (_$data.containsKey('B') != other._$data.containsKey('B')) {
      return false;
    }
    if (l$B != lOther$B) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$A = A;
    final l$B = B;
    return Object.hashAll([
      _$data.containsKey('A') ? l$A : const {},
      _$data.containsKey('B') ? l$B : const {},
    ]);
  }
}

abstract class CopyWith$Input$_Organization_adminsOfOrganization_set_input<
    TRes> {
  factory CopyWith$Input$_Organization_adminsOfOrganization_set_input(
    Input$_Organization_adminsOfOrganization_set_input instance,
    TRes Function(Input$_Organization_adminsOfOrganization_set_input) then,
  ) = _CopyWithImpl$Input$_Organization_adminsOfOrganization_set_input;

  factory CopyWith$Input$_Organization_adminsOfOrganization_set_input.stub(
          TRes res) =
      _CopyWithStubImpl$Input$_Organization_adminsOfOrganization_set_input;

  TRes call({
    String? A,
    String? B,
  });
}

class _CopyWithImpl$Input$_Organization_adminsOfOrganization_set_input<TRes>
    implements
        CopyWith$Input$_Organization_adminsOfOrganization_set_input<TRes> {
  _CopyWithImpl$Input$_Organization_adminsOfOrganization_set_input(
    this._instance,
    this._then,
  );

  final Input$_Organization_adminsOfOrganization_set_input _instance;

  final TRes Function(Input$_Organization_adminsOfOrganization_set_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? A = _undefined,
    Object? B = _undefined,
  }) =>
      _then(Input$_Organization_adminsOfOrganization_set_input._({
        ..._instance._$data,
        if (A != _undefined) 'A': (A as String?),
        if (B != _undefined) 'B': (B as String?),
      }));
}

class _CopyWithStubImpl$Input$_Organization_adminsOfOrganization_set_input<TRes>
    implements
        CopyWith$Input$_Organization_adminsOfOrganization_set_input<TRes> {
  _CopyWithStubImpl$Input$_Organization_adminsOfOrganization_set_input(
      this._res);

  TRes _res;

  call({
    String? A,
    String? B,
  }) =>
      _res;
}

class Input$_Organization_membersInOrganization_set_input {
  factory Input$_Organization_membersInOrganization_set_input({
    String? A,
    String? B,
  }) =>
      Input$_Organization_membersInOrganization_set_input._({
        if (A != null) r'A': A,
        if (B != null) r'B': B,
      });

  Input$_Organization_membersInOrganization_set_input._(this._$data);

  factory Input$_Organization_membersInOrganization_set_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('A')) {
      final l$A = data['A'];
      result$data['A'] = (l$A as String?);
    }
    if (data.containsKey('B')) {
      final l$B = data['B'];
      result$data['B'] = (l$B as String?);
    }
    return Input$_Organization_membersInOrganization_set_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get A => (_$data['A'] as String?);
  String? get B => (_$data['B'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('A')) {
      final l$A = A;
      result$data['A'] = l$A;
    }
    if (_$data.containsKey('B')) {
      final l$B = B;
      result$data['B'] = l$B;
    }
    return result$data;
  }

  CopyWith$Input$_Organization_membersInOrganization_set_input<
          Input$_Organization_membersInOrganization_set_input>
      get copyWith =>
          CopyWith$Input$_Organization_membersInOrganization_set_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$_Organization_membersInOrganization_set_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$A = A;
    final lOther$A = other.A;
    if (_$data.containsKey('A') != other._$data.containsKey('A')) {
      return false;
    }
    if (l$A != lOther$A) {
      return false;
    }
    final l$B = B;
    final lOther$B = other.B;
    if (_$data.containsKey('B') != other._$data.containsKey('B')) {
      return false;
    }
    if (l$B != lOther$B) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$A = A;
    final l$B = B;
    return Object.hashAll([
      _$data.containsKey('A') ? l$A : const {},
      _$data.containsKey('B') ? l$B : const {},
    ]);
  }
}

abstract class CopyWith$Input$_Organization_membersInOrganization_set_input<
    TRes> {
  factory CopyWith$Input$_Organization_membersInOrganization_set_input(
    Input$_Organization_membersInOrganization_set_input instance,
    TRes Function(Input$_Organization_membersInOrganization_set_input) then,
  ) = _CopyWithImpl$Input$_Organization_membersInOrganization_set_input;

  factory CopyWith$Input$_Organization_membersInOrganization_set_input.stub(
          TRes res) =
      _CopyWithStubImpl$Input$_Organization_membersInOrganization_set_input;

  TRes call({
    String? A,
    String? B,
  });
}

class _CopyWithImpl$Input$_Organization_membersInOrganization_set_input<TRes>
    implements
        CopyWith$Input$_Organization_membersInOrganization_set_input<TRes> {
  _CopyWithImpl$Input$_Organization_membersInOrganization_set_input(
    this._instance,
    this._then,
  );

  final Input$_Organization_membersInOrganization_set_input _instance;

  final TRes Function(Input$_Organization_membersInOrganization_set_input)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? A = _undefined,
    Object? B = _undefined,
  }) =>
      _then(Input$_Organization_membersInOrganization_set_input._({
        ..._instance._$data,
        if (A != _undefined) 'A': (A as String?),
        if (B != _undefined) 'B': (B as String?),
      }));
}

class _CopyWithStubImpl$Input$_Organization_membersInOrganization_set_input<
        TRes>
    implements
        CopyWith$Input$_Organization_membersInOrganization_set_input<TRes> {
  _CopyWithStubImpl$Input$_Organization_membersInOrganization_set_input(
      this._res);

  TRes _res;

  call({
    String? A,
    String? B,
  }) =>
      _res;
}

class Input$_SoulWinningSessionGroup_members_set_input {
  factory Input$_SoulWinningSessionGroup_members_set_input({
    String? A,
    String? B,
  }) =>
      Input$_SoulWinningSessionGroup_members_set_input._({
        if (A != null) r'A': A,
        if (B != null) r'B': B,
      });

  Input$_SoulWinningSessionGroup_members_set_input._(this._$data);

  factory Input$_SoulWinningSessionGroup_members_set_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('A')) {
      final l$A = data['A'];
      result$data['A'] = (l$A as String?);
    }
    if (data.containsKey('B')) {
      final l$B = data['B'];
      result$data['B'] = (l$B as String?);
    }
    return Input$_SoulWinningSessionGroup_members_set_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get A => (_$data['A'] as String?);
  String? get B => (_$data['B'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('A')) {
      final l$A = A;
      result$data['A'] = l$A;
    }
    if (_$data.containsKey('B')) {
      final l$B = B;
      result$data['B'] = l$B;
    }
    return result$data;
  }

  CopyWith$Input$_SoulWinningSessionGroup_members_set_input<
          Input$_SoulWinningSessionGroup_members_set_input>
      get copyWith => CopyWith$Input$_SoulWinningSessionGroup_members_set_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$_SoulWinningSessionGroup_members_set_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$A = A;
    final lOther$A = other.A;
    if (_$data.containsKey('A') != other._$data.containsKey('A')) {
      return false;
    }
    if (l$A != lOther$A) {
      return false;
    }
    final l$B = B;
    final lOther$B = other.B;
    if (_$data.containsKey('B') != other._$data.containsKey('B')) {
      return false;
    }
    if (l$B != lOther$B) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$A = A;
    final l$B = B;
    return Object.hashAll([
      _$data.containsKey('A') ? l$A : const {},
      _$data.containsKey('B') ? l$B : const {},
    ]);
  }
}

abstract class CopyWith$Input$_SoulWinningSessionGroup_members_set_input<TRes> {
  factory CopyWith$Input$_SoulWinningSessionGroup_members_set_input(
    Input$_SoulWinningSessionGroup_members_set_input instance,
    TRes Function(Input$_SoulWinningSessionGroup_members_set_input) then,
  ) = _CopyWithImpl$Input$_SoulWinningSessionGroup_members_set_input;

  factory CopyWith$Input$_SoulWinningSessionGroup_members_set_input.stub(
          TRes res) =
      _CopyWithStubImpl$Input$_SoulWinningSessionGroup_members_set_input;

  TRes call({
    String? A,
    String? B,
  });
}

class _CopyWithImpl$Input$_SoulWinningSessionGroup_members_set_input<TRes>
    implements CopyWith$Input$_SoulWinningSessionGroup_members_set_input<TRes> {
  _CopyWithImpl$Input$_SoulWinningSessionGroup_members_set_input(
    this._instance,
    this._then,
  );

  final Input$_SoulWinningSessionGroup_members_set_input _instance;

  final TRes Function(Input$_SoulWinningSessionGroup_members_set_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? A = _undefined,
    Object? B = _undefined,
  }) =>
      _then(Input$_SoulWinningSessionGroup_members_set_input._({
        ..._instance._$data,
        if (A != _undefined) 'A': (A as String?),
        if (B != _undefined) 'B': (B as String?),
      }));
}

class _CopyWithStubImpl$Input$_SoulWinningSessionGroup_members_set_input<TRes>
    implements CopyWith$Input$_SoulWinningSessionGroup_members_set_input<TRes> {
  _CopyWithStubImpl$Input$_SoulWinningSessionGroup_members_set_input(this._res);

  TRes _res;

  call({
    String? A,
    String? B,
  }) =>
      _res;
}

class Input$Encounter_on_conflict {
  factory Input$Encounter_on_conflict({
    required Enum$Encounter_constraint constraint,
    required List<Enum$Encounter_update_column> update_columns,
    Input$Encounter_bool_exp? where,
  }) =>
      Input$Encounter_on_conflict._({
        r'constraint': constraint,
        r'update_columns': update_columns,
        if (where != null) r'where': where,
      });

  Input$Encounter_on_conflict._(this._$data);

  factory Input$Encounter_on_conflict.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$constraint = data['constraint'];
    result$data['constraint'] =
        fromJson$Enum$Encounter_constraint((l$constraint as String));
    final l$update_columns = data['update_columns'];
    result$data['update_columns'] = (l$update_columns as List<dynamic>)
        .map((e) => fromJson$Enum$Encounter_update_column((e as String)))
        .toList();
    if (data.containsKey('where')) {
      final l$where = data['where'];
      result$data['where'] = l$where == null
          ? null
          : Input$Encounter_bool_exp.fromJson(
              (l$where as Map<String, dynamic>));
    }
    return Input$Encounter_on_conflict._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$Encounter_constraint get constraint =>
      (_$data['constraint'] as Enum$Encounter_constraint);
  List<Enum$Encounter_update_column> get update_columns =>
      (_$data['update_columns'] as List<Enum$Encounter_update_column>);
  Input$Encounter_bool_exp? get where =>
      (_$data['where'] as Input$Encounter_bool_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$constraint = constraint;
    result$data['constraint'] = toJson$Enum$Encounter_constraint(l$constraint);
    final l$update_columns = update_columns;
    result$data['update_columns'] = l$update_columns
        .map((e) => toJson$Enum$Encounter_update_column(e))
        .toList();
    if (_$data.containsKey('where')) {
      final l$where = where;
      result$data['where'] = l$where?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$Encounter_on_conflict<Input$Encounter_on_conflict>
      get copyWith => CopyWith$Input$Encounter_on_conflict(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Encounter_on_conflict) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$constraint = constraint;
    final lOther$constraint = other.constraint;
    if (l$constraint != lOther$constraint) {
      return false;
    }
    final l$update_columns = update_columns;
    final lOther$update_columns = other.update_columns;
    if (l$update_columns.length != lOther$update_columns.length) {
      return false;
    }
    for (int i = 0; i < l$update_columns.length; i++) {
      final l$update_columns$entry = l$update_columns[i];
      final lOther$update_columns$entry = lOther$update_columns[i];
      if (l$update_columns$entry != lOther$update_columns$entry) {
        return false;
      }
    }
    final l$where = where;
    final lOther$where = other.where;
    if (_$data.containsKey('where') != other._$data.containsKey('where')) {
      return false;
    }
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$constraint = constraint;
    final l$update_columns = update_columns;
    final l$where = where;
    return Object.hashAll([
      l$constraint,
      Object.hashAll(l$update_columns.map((v) => v)),
      _$data.containsKey('where') ? l$where : const {},
    ]);
  }
}

abstract class CopyWith$Input$Encounter_on_conflict<TRes> {
  factory CopyWith$Input$Encounter_on_conflict(
    Input$Encounter_on_conflict instance,
    TRes Function(Input$Encounter_on_conflict) then,
  ) = _CopyWithImpl$Input$Encounter_on_conflict;

  factory CopyWith$Input$Encounter_on_conflict.stub(TRes res) =
      _CopyWithStubImpl$Input$Encounter_on_conflict;

  TRes call({
    Enum$Encounter_constraint? constraint,
    List<Enum$Encounter_update_column>? update_columns,
    Input$Encounter_bool_exp? where,
  });
  CopyWith$Input$Encounter_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$Encounter_on_conflict<TRes>
    implements CopyWith$Input$Encounter_on_conflict<TRes> {
  _CopyWithImpl$Input$Encounter_on_conflict(
    this._instance,
    this._then,
  );

  final Input$Encounter_on_conflict _instance;

  final TRes Function(Input$Encounter_on_conflict) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? constraint = _undefined,
    Object? update_columns = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$Encounter_on_conflict._({
        ..._instance._$data,
        if (constraint != _undefined && constraint != null)
          'constraint': (constraint as Enum$Encounter_constraint),
        if (update_columns != _undefined && update_columns != null)
          'update_columns':
              (update_columns as List<Enum$Encounter_update_column>),
        if (where != _undefined) 'where': (where as Input$Encounter_bool_exp?),
      }));
  CopyWith$Input$Encounter_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return local$where == null
        ? CopyWith$Input$Encounter_bool_exp.stub(_then(_instance))
        : CopyWith$Input$Encounter_bool_exp(local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$Encounter_on_conflict<TRes>
    implements CopyWith$Input$Encounter_on_conflict<TRes> {
  _CopyWithStubImpl$Input$Encounter_on_conflict(this._res);

  TRes _res;

  call({
    Enum$Encounter_constraint? constraint,
    List<Enum$Encounter_update_column>? update_columns,
    Input$Encounter_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$Encounter_bool_exp<TRes> get where =>
      CopyWith$Input$Encounter_bool_exp.stub(_res);
}

class Input$Event_on_conflict {
  factory Input$Event_on_conflict({
    required Enum$Event_constraint constraint,
    required List<Enum$Event_update_column> update_columns,
    Input$Event_bool_exp? where,
  }) =>
      Input$Event_on_conflict._({
        r'constraint': constraint,
        r'update_columns': update_columns,
        if (where != null) r'where': where,
      });

  Input$Event_on_conflict._(this._$data);

  factory Input$Event_on_conflict.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$constraint = data['constraint'];
    result$data['constraint'] =
        fromJson$Enum$Event_constraint((l$constraint as String));
    final l$update_columns = data['update_columns'];
    result$data['update_columns'] = (l$update_columns as List<dynamic>)
        .map((e) => fromJson$Enum$Event_update_column((e as String)))
        .toList();
    if (data.containsKey('where')) {
      final l$where = data['where'];
      result$data['where'] = l$where == null
          ? null
          : Input$Event_bool_exp.fromJson((l$where as Map<String, dynamic>));
    }
    return Input$Event_on_conflict._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$Event_constraint get constraint =>
      (_$data['constraint'] as Enum$Event_constraint);
  List<Enum$Event_update_column> get update_columns =>
      (_$data['update_columns'] as List<Enum$Event_update_column>);
  Input$Event_bool_exp? get where => (_$data['where'] as Input$Event_bool_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$constraint = constraint;
    result$data['constraint'] = toJson$Enum$Event_constraint(l$constraint);
    final l$update_columns = update_columns;
    result$data['update_columns'] = l$update_columns
        .map((e) => toJson$Enum$Event_update_column(e))
        .toList();
    if (_$data.containsKey('where')) {
      final l$where = where;
      result$data['where'] = l$where?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$Event_on_conflict<Input$Event_on_conflict> get copyWith =>
      CopyWith$Input$Event_on_conflict(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Event_on_conflict) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$constraint = constraint;
    final lOther$constraint = other.constraint;
    if (l$constraint != lOther$constraint) {
      return false;
    }
    final l$update_columns = update_columns;
    final lOther$update_columns = other.update_columns;
    if (l$update_columns.length != lOther$update_columns.length) {
      return false;
    }
    for (int i = 0; i < l$update_columns.length; i++) {
      final l$update_columns$entry = l$update_columns[i];
      final lOther$update_columns$entry = lOther$update_columns[i];
      if (l$update_columns$entry != lOther$update_columns$entry) {
        return false;
      }
    }
    final l$where = where;
    final lOther$where = other.where;
    if (_$data.containsKey('where') != other._$data.containsKey('where')) {
      return false;
    }
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$constraint = constraint;
    final l$update_columns = update_columns;
    final l$where = where;
    return Object.hashAll([
      l$constraint,
      Object.hashAll(l$update_columns.map((v) => v)),
      _$data.containsKey('where') ? l$where : const {},
    ]);
  }
}

abstract class CopyWith$Input$Event_on_conflict<TRes> {
  factory CopyWith$Input$Event_on_conflict(
    Input$Event_on_conflict instance,
    TRes Function(Input$Event_on_conflict) then,
  ) = _CopyWithImpl$Input$Event_on_conflict;

  factory CopyWith$Input$Event_on_conflict.stub(TRes res) =
      _CopyWithStubImpl$Input$Event_on_conflict;

  TRes call({
    Enum$Event_constraint? constraint,
    List<Enum$Event_update_column>? update_columns,
    Input$Event_bool_exp? where,
  });
  CopyWith$Input$Event_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$Event_on_conflict<TRes>
    implements CopyWith$Input$Event_on_conflict<TRes> {
  _CopyWithImpl$Input$Event_on_conflict(
    this._instance,
    this._then,
  );

  final Input$Event_on_conflict _instance;

  final TRes Function(Input$Event_on_conflict) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? constraint = _undefined,
    Object? update_columns = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$Event_on_conflict._({
        ..._instance._$data,
        if (constraint != _undefined && constraint != null)
          'constraint': (constraint as Enum$Event_constraint),
        if (update_columns != _undefined && update_columns != null)
          'update_columns': (update_columns as List<Enum$Event_update_column>),
        if (where != _undefined) 'where': (where as Input$Event_bool_exp?),
      }));
  CopyWith$Input$Event_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return local$where == null
        ? CopyWith$Input$Event_bool_exp.stub(_then(_instance))
        : CopyWith$Input$Event_bool_exp(local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$Event_on_conflict<TRes>
    implements CopyWith$Input$Event_on_conflict<TRes> {
  _CopyWithStubImpl$Input$Event_on_conflict(this._res);

  TRes _res;

  call({
    Enum$Event_constraint? constraint,
    List<Enum$Event_update_column>? update_columns,
    Input$Event_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$Event_bool_exp<TRes> get where =>
      CopyWith$Input$Event_bool_exp.stub(_res);
}

class Input$Map_on_conflict {
  factory Input$Map_on_conflict({
    required Enum$Map_constraint constraint,
    required List<Enum$Map_update_column> update_columns,
    Input$Map_bool_exp? where,
  }) =>
      Input$Map_on_conflict._({
        r'constraint': constraint,
        r'update_columns': update_columns,
        if (where != null) r'where': where,
      });

  Input$Map_on_conflict._(this._$data);

  factory Input$Map_on_conflict.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$constraint = data['constraint'];
    result$data['constraint'] =
        fromJson$Enum$Map_constraint((l$constraint as String));
    final l$update_columns = data['update_columns'];
    result$data['update_columns'] = (l$update_columns as List<dynamic>)
        .map((e) => fromJson$Enum$Map_update_column((e as String)))
        .toList();
    if (data.containsKey('where')) {
      final l$where = data['where'];
      result$data['where'] = l$where == null
          ? null
          : Input$Map_bool_exp.fromJson((l$where as Map<String, dynamic>));
    }
    return Input$Map_on_conflict._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$Map_constraint get constraint =>
      (_$data['constraint'] as Enum$Map_constraint);
  List<Enum$Map_update_column> get update_columns =>
      (_$data['update_columns'] as List<Enum$Map_update_column>);
  Input$Map_bool_exp? get where => (_$data['where'] as Input$Map_bool_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$constraint = constraint;
    result$data['constraint'] = toJson$Enum$Map_constraint(l$constraint);
    final l$update_columns = update_columns;
    result$data['update_columns'] =
        l$update_columns.map((e) => toJson$Enum$Map_update_column(e)).toList();
    if (_$data.containsKey('where')) {
      final l$where = where;
      result$data['where'] = l$where?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$Map_on_conflict<Input$Map_on_conflict> get copyWith =>
      CopyWith$Input$Map_on_conflict(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Map_on_conflict) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$constraint = constraint;
    final lOther$constraint = other.constraint;
    if (l$constraint != lOther$constraint) {
      return false;
    }
    final l$update_columns = update_columns;
    final lOther$update_columns = other.update_columns;
    if (l$update_columns.length != lOther$update_columns.length) {
      return false;
    }
    for (int i = 0; i < l$update_columns.length; i++) {
      final l$update_columns$entry = l$update_columns[i];
      final lOther$update_columns$entry = lOther$update_columns[i];
      if (l$update_columns$entry != lOther$update_columns$entry) {
        return false;
      }
    }
    final l$where = where;
    final lOther$where = other.where;
    if (_$data.containsKey('where') != other._$data.containsKey('where')) {
      return false;
    }
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$constraint = constraint;
    final l$update_columns = update_columns;
    final l$where = where;
    return Object.hashAll([
      l$constraint,
      Object.hashAll(l$update_columns.map((v) => v)),
      _$data.containsKey('where') ? l$where : const {},
    ]);
  }
}

abstract class CopyWith$Input$Map_on_conflict<TRes> {
  factory CopyWith$Input$Map_on_conflict(
    Input$Map_on_conflict instance,
    TRes Function(Input$Map_on_conflict) then,
  ) = _CopyWithImpl$Input$Map_on_conflict;

  factory CopyWith$Input$Map_on_conflict.stub(TRes res) =
      _CopyWithStubImpl$Input$Map_on_conflict;

  TRes call({
    Enum$Map_constraint? constraint,
    List<Enum$Map_update_column>? update_columns,
    Input$Map_bool_exp? where,
  });
  CopyWith$Input$Map_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$Map_on_conflict<TRes>
    implements CopyWith$Input$Map_on_conflict<TRes> {
  _CopyWithImpl$Input$Map_on_conflict(
    this._instance,
    this._then,
  );

  final Input$Map_on_conflict _instance;

  final TRes Function(Input$Map_on_conflict) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? constraint = _undefined,
    Object? update_columns = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$Map_on_conflict._({
        ..._instance._$data,
        if (constraint != _undefined && constraint != null)
          'constraint': (constraint as Enum$Map_constraint),
        if (update_columns != _undefined && update_columns != null)
          'update_columns': (update_columns as List<Enum$Map_update_column>),
        if (where != _undefined) 'where': (where as Input$Map_bool_exp?),
      }));
  CopyWith$Input$Map_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return local$where == null
        ? CopyWith$Input$Map_bool_exp.stub(_then(_instance))
        : CopyWith$Input$Map_bool_exp(local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$Map_on_conflict<TRes>
    implements CopyWith$Input$Map_on_conflict<TRes> {
  _CopyWithStubImpl$Input$Map_on_conflict(this._res);

  TRes _res;

  call({
    Enum$Map_constraint? constraint,
    List<Enum$Map_update_column>? update_columns,
    Input$Map_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$Map_bool_exp<TRes> get where =>
      CopyWith$Input$Map_bool_exp.stub(_res);
}

class Input$MapArea_on_conflict {
  factory Input$MapArea_on_conflict({
    required Enum$MapArea_constraint constraint,
    required List<Enum$MapArea_update_column> update_columns,
    Input$MapArea_bool_exp? where,
  }) =>
      Input$MapArea_on_conflict._({
        r'constraint': constraint,
        r'update_columns': update_columns,
        if (where != null) r'where': where,
      });

  Input$MapArea_on_conflict._(this._$data);

  factory Input$MapArea_on_conflict.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$constraint = data['constraint'];
    result$data['constraint'] =
        fromJson$Enum$MapArea_constraint((l$constraint as String));
    final l$update_columns = data['update_columns'];
    result$data['update_columns'] = (l$update_columns as List<dynamic>)
        .map((e) => fromJson$Enum$MapArea_update_column((e as String)))
        .toList();
    if (data.containsKey('where')) {
      final l$where = data['where'];
      result$data['where'] = l$where == null
          ? null
          : Input$MapArea_bool_exp.fromJson((l$where as Map<String, dynamic>));
    }
    return Input$MapArea_on_conflict._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$MapArea_constraint get constraint =>
      (_$data['constraint'] as Enum$MapArea_constraint);
  List<Enum$MapArea_update_column> get update_columns =>
      (_$data['update_columns'] as List<Enum$MapArea_update_column>);
  Input$MapArea_bool_exp? get where =>
      (_$data['where'] as Input$MapArea_bool_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$constraint = constraint;
    result$data['constraint'] = toJson$Enum$MapArea_constraint(l$constraint);
    final l$update_columns = update_columns;
    result$data['update_columns'] = l$update_columns
        .map((e) => toJson$Enum$MapArea_update_column(e))
        .toList();
    if (_$data.containsKey('where')) {
      final l$where = where;
      result$data['where'] = l$where?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$MapArea_on_conflict<Input$MapArea_on_conflict> get copyWith =>
      CopyWith$Input$MapArea_on_conflict(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$MapArea_on_conflict) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$constraint = constraint;
    final lOther$constraint = other.constraint;
    if (l$constraint != lOther$constraint) {
      return false;
    }
    final l$update_columns = update_columns;
    final lOther$update_columns = other.update_columns;
    if (l$update_columns.length != lOther$update_columns.length) {
      return false;
    }
    for (int i = 0; i < l$update_columns.length; i++) {
      final l$update_columns$entry = l$update_columns[i];
      final lOther$update_columns$entry = lOther$update_columns[i];
      if (l$update_columns$entry != lOther$update_columns$entry) {
        return false;
      }
    }
    final l$where = where;
    final lOther$where = other.where;
    if (_$data.containsKey('where') != other._$data.containsKey('where')) {
      return false;
    }
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$constraint = constraint;
    final l$update_columns = update_columns;
    final l$where = where;
    return Object.hashAll([
      l$constraint,
      Object.hashAll(l$update_columns.map((v) => v)),
      _$data.containsKey('where') ? l$where : const {},
    ]);
  }
}

abstract class CopyWith$Input$MapArea_on_conflict<TRes> {
  factory CopyWith$Input$MapArea_on_conflict(
    Input$MapArea_on_conflict instance,
    TRes Function(Input$MapArea_on_conflict) then,
  ) = _CopyWithImpl$Input$MapArea_on_conflict;

  factory CopyWith$Input$MapArea_on_conflict.stub(TRes res) =
      _CopyWithStubImpl$Input$MapArea_on_conflict;

  TRes call({
    Enum$MapArea_constraint? constraint,
    List<Enum$MapArea_update_column>? update_columns,
    Input$MapArea_bool_exp? where,
  });
  CopyWith$Input$MapArea_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$MapArea_on_conflict<TRes>
    implements CopyWith$Input$MapArea_on_conflict<TRes> {
  _CopyWithImpl$Input$MapArea_on_conflict(
    this._instance,
    this._then,
  );

  final Input$MapArea_on_conflict _instance;

  final TRes Function(Input$MapArea_on_conflict) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? constraint = _undefined,
    Object? update_columns = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$MapArea_on_conflict._({
        ..._instance._$data,
        if (constraint != _undefined && constraint != null)
          'constraint': (constraint as Enum$MapArea_constraint),
        if (update_columns != _undefined && update_columns != null)
          'update_columns':
              (update_columns as List<Enum$MapArea_update_column>),
        if (where != _undefined) 'where': (where as Input$MapArea_bool_exp?),
      }));
  CopyWith$Input$MapArea_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return local$where == null
        ? CopyWith$Input$MapArea_bool_exp.stub(_then(_instance))
        : CopyWith$Input$MapArea_bool_exp(local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$MapArea_on_conflict<TRes>
    implements CopyWith$Input$MapArea_on_conflict<TRes> {
  _CopyWithStubImpl$Input$MapArea_on_conflict(this._res);

  TRes _res;

  call({
    Enum$MapArea_constraint? constraint,
    List<Enum$MapArea_update_column>? update_columns,
    Input$MapArea_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$MapArea_bool_exp<TRes> get where =>
      CopyWith$Input$MapArea_bool_exp.stub(_res);
}

class Input$Organization_on_conflict {
  factory Input$Organization_on_conflict({
    required Enum$Organization_constraint constraint,
    required List<Enum$Organization_update_column> update_columns,
    Input$Organization_bool_exp? where,
  }) =>
      Input$Organization_on_conflict._({
        r'constraint': constraint,
        r'update_columns': update_columns,
        if (where != null) r'where': where,
      });

  Input$Organization_on_conflict._(this._$data);

  factory Input$Organization_on_conflict.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$constraint = data['constraint'];
    result$data['constraint'] =
        fromJson$Enum$Organization_constraint((l$constraint as String));
    final l$update_columns = data['update_columns'];
    result$data['update_columns'] = (l$update_columns as List<dynamic>)
        .map((e) => fromJson$Enum$Organization_update_column((e as String)))
        .toList();
    if (data.containsKey('where')) {
      final l$where = data['where'];
      result$data['where'] = l$where == null
          ? null
          : Input$Organization_bool_exp.fromJson(
              (l$where as Map<String, dynamic>));
    }
    return Input$Organization_on_conflict._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$Organization_constraint get constraint =>
      (_$data['constraint'] as Enum$Organization_constraint);
  List<Enum$Organization_update_column> get update_columns =>
      (_$data['update_columns'] as List<Enum$Organization_update_column>);
  Input$Organization_bool_exp? get where =>
      (_$data['where'] as Input$Organization_bool_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$constraint = constraint;
    result$data['constraint'] =
        toJson$Enum$Organization_constraint(l$constraint);
    final l$update_columns = update_columns;
    result$data['update_columns'] = l$update_columns
        .map((e) => toJson$Enum$Organization_update_column(e))
        .toList();
    if (_$data.containsKey('where')) {
      final l$where = where;
      result$data['where'] = l$where?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$Organization_on_conflict<Input$Organization_on_conflict>
      get copyWith => CopyWith$Input$Organization_on_conflict(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Organization_on_conflict) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$constraint = constraint;
    final lOther$constraint = other.constraint;
    if (l$constraint != lOther$constraint) {
      return false;
    }
    final l$update_columns = update_columns;
    final lOther$update_columns = other.update_columns;
    if (l$update_columns.length != lOther$update_columns.length) {
      return false;
    }
    for (int i = 0; i < l$update_columns.length; i++) {
      final l$update_columns$entry = l$update_columns[i];
      final lOther$update_columns$entry = lOther$update_columns[i];
      if (l$update_columns$entry != lOther$update_columns$entry) {
        return false;
      }
    }
    final l$where = where;
    final lOther$where = other.where;
    if (_$data.containsKey('where') != other._$data.containsKey('where')) {
      return false;
    }
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$constraint = constraint;
    final l$update_columns = update_columns;
    final l$where = where;
    return Object.hashAll([
      l$constraint,
      Object.hashAll(l$update_columns.map((v) => v)),
      _$data.containsKey('where') ? l$where : const {},
    ]);
  }
}

abstract class CopyWith$Input$Organization_on_conflict<TRes> {
  factory CopyWith$Input$Organization_on_conflict(
    Input$Organization_on_conflict instance,
    TRes Function(Input$Organization_on_conflict) then,
  ) = _CopyWithImpl$Input$Organization_on_conflict;

  factory CopyWith$Input$Organization_on_conflict.stub(TRes res) =
      _CopyWithStubImpl$Input$Organization_on_conflict;

  TRes call({
    Enum$Organization_constraint? constraint,
    List<Enum$Organization_update_column>? update_columns,
    Input$Organization_bool_exp? where,
  });
  CopyWith$Input$Organization_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$Organization_on_conflict<TRes>
    implements CopyWith$Input$Organization_on_conflict<TRes> {
  _CopyWithImpl$Input$Organization_on_conflict(
    this._instance,
    this._then,
  );

  final Input$Organization_on_conflict _instance;

  final TRes Function(Input$Organization_on_conflict) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? constraint = _undefined,
    Object? update_columns = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$Organization_on_conflict._({
        ..._instance._$data,
        if (constraint != _undefined && constraint != null)
          'constraint': (constraint as Enum$Organization_constraint),
        if (update_columns != _undefined && update_columns != null)
          'update_columns':
              (update_columns as List<Enum$Organization_update_column>),
        if (where != _undefined)
          'where': (where as Input$Organization_bool_exp?),
      }));
  CopyWith$Input$Organization_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return local$where == null
        ? CopyWith$Input$Organization_bool_exp.stub(_then(_instance))
        : CopyWith$Input$Organization_bool_exp(
            local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$Organization_on_conflict<TRes>
    implements CopyWith$Input$Organization_on_conflict<TRes> {
  _CopyWithStubImpl$Input$Organization_on_conflict(this._res);

  TRes _res;

  call({
    Enum$Organization_constraint? constraint,
    List<Enum$Organization_update_column>? update_columns,
    Input$Organization_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$Organization_bool_exp<TRes> get where =>
      CopyWith$Input$Organization_bool_exp.stub(_res);
}

class Input$SavedPerson_on_conflict {
  factory Input$SavedPerson_on_conflict({
    required Enum$SavedPerson_constraint constraint,
    required List<Enum$SavedPerson_update_column> update_columns,
    Input$SavedPerson_bool_exp? where,
  }) =>
      Input$SavedPerson_on_conflict._({
        r'constraint': constraint,
        r'update_columns': update_columns,
        if (where != null) r'where': where,
      });

  Input$SavedPerson_on_conflict._(this._$data);

  factory Input$SavedPerson_on_conflict.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$constraint = data['constraint'];
    result$data['constraint'] =
        fromJson$Enum$SavedPerson_constraint((l$constraint as String));
    final l$update_columns = data['update_columns'];
    result$data['update_columns'] = (l$update_columns as List<dynamic>)
        .map((e) => fromJson$Enum$SavedPerson_update_column((e as String)))
        .toList();
    if (data.containsKey('where')) {
      final l$where = data['where'];
      result$data['where'] = l$where == null
          ? null
          : Input$SavedPerson_bool_exp.fromJson(
              (l$where as Map<String, dynamic>));
    }
    return Input$SavedPerson_on_conflict._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$SavedPerson_constraint get constraint =>
      (_$data['constraint'] as Enum$SavedPerson_constraint);
  List<Enum$SavedPerson_update_column> get update_columns =>
      (_$data['update_columns'] as List<Enum$SavedPerson_update_column>);
  Input$SavedPerson_bool_exp? get where =>
      (_$data['where'] as Input$SavedPerson_bool_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$constraint = constraint;
    result$data['constraint'] =
        toJson$Enum$SavedPerson_constraint(l$constraint);
    final l$update_columns = update_columns;
    result$data['update_columns'] = l$update_columns
        .map((e) => toJson$Enum$SavedPerson_update_column(e))
        .toList();
    if (_$data.containsKey('where')) {
      final l$where = where;
      result$data['where'] = l$where?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$SavedPerson_on_conflict<Input$SavedPerson_on_conflict>
      get copyWith => CopyWith$Input$SavedPerson_on_conflict(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SavedPerson_on_conflict) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$constraint = constraint;
    final lOther$constraint = other.constraint;
    if (l$constraint != lOther$constraint) {
      return false;
    }
    final l$update_columns = update_columns;
    final lOther$update_columns = other.update_columns;
    if (l$update_columns.length != lOther$update_columns.length) {
      return false;
    }
    for (int i = 0; i < l$update_columns.length; i++) {
      final l$update_columns$entry = l$update_columns[i];
      final lOther$update_columns$entry = lOther$update_columns[i];
      if (l$update_columns$entry != lOther$update_columns$entry) {
        return false;
      }
    }
    final l$where = where;
    final lOther$where = other.where;
    if (_$data.containsKey('where') != other._$data.containsKey('where')) {
      return false;
    }
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$constraint = constraint;
    final l$update_columns = update_columns;
    final l$where = where;
    return Object.hashAll([
      l$constraint,
      Object.hashAll(l$update_columns.map((v) => v)),
      _$data.containsKey('where') ? l$where : const {},
    ]);
  }
}

abstract class CopyWith$Input$SavedPerson_on_conflict<TRes> {
  factory CopyWith$Input$SavedPerson_on_conflict(
    Input$SavedPerson_on_conflict instance,
    TRes Function(Input$SavedPerson_on_conflict) then,
  ) = _CopyWithImpl$Input$SavedPerson_on_conflict;

  factory CopyWith$Input$SavedPerson_on_conflict.stub(TRes res) =
      _CopyWithStubImpl$Input$SavedPerson_on_conflict;

  TRes call({
    Enum$SavedPerson_constraint? constraint,
    List<Enum$SavedPerson_update_column>? update_columns,
    Input$SavedPerson_bool_exp? where,
  });
  CopyWith$Input$SavedPerson_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$SavedPerson_on_conflict<TRes>
    implements CopyWith$Input$SavedPerson_on_conflict<TRes> {
  _CopyWithImpl$Input$SavedPerson_on_conflict(
    this._instance,
    this._then,
  );

  final Input$SavedPerson_on_conflict _instance;

  final TRes Function(Input$SavedPerson_on_conflict) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? constraint = _undefined,
    Object? update_columns = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$SavedPerson_on_conflict._({
        ..._instance._$data,
        if (constraint != _undefined && constraint != null)
          'constraint': (constraint as Enum$SavedPerson_constraint),
        if (update_columns != _undefined && update_columns != null)
          'update_columns':
              (update_columns as List<Enum$SavedPerson_update_column>),
        if (where != _undefined)
          'where': (where as Input$SavedPerson_bool_exp?),
      }));
  CopyWith$Input$SavedPerson_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return local$where == null
        ? CopyWith$Input$SavedPerson_bool_exp.stub(_then(_instance))
        : CopyWith$Input$SavedPerson_bool_exp(
            local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$SavedPerson_on_conflict<TRes>
    implements CopyWith$Input$SavedPerson_on_conflict<TRes> {
  _CopyWithStubImpl$Input$SavedPerson_on_conflict(this._res);

  TRes _res;

  call({
    Enum$SavedPerson_constraint? constraint,
    List<Enum$SavedPerson_update_column>? update_columns,
    Input$SavedPerson_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$SavedPerson_bool_exp<TRes> get where =>
      CopyWith$Input$SavedPerson_bool_exp.stub(_res);
}

class Input$SoulWinningSession_on_conflict {
  factory Input$SoulWinningSession_on_conflict({
    required Enum$SoulWinningSession_constraint constraint,
    required List<Enum$SoulWinningSession_update_column> update_columns,
    Input$SoulWinningSession_bool_exp? where,
  }) =>
      Input$SoulWinningSession_on_conflict._({
        r'constraint': constraint,
        r'update_columns': update_columns,
        if (where != null) r'where': where,
      });

  Input$SoulWinningSession_on_conflict._(this._$data);

  factory Input$SoulWinningSession_on_conflict.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$constraint = data['constraint'];
    result$data['constraint'] =
        fromJson$Enum$SoulWinningSession_constraint((l$constraint as String));
    final l$update_columns = data['update_columns'];
    result$data['update_columns'] = (l$update_columns as List<dynamic>)
        .map((e) =>
            fromJson$Enum$SoulWinningSession_update_column((e as String)))
        .toList();
    if (data.containsKey('where')) {
      final l$where = data['where'];
      result$data['where'] = l$where == null
          ? null
          : Input$SoulWinningSession_bool_exp.fromJson(
              (l$where as Map<String, dynamic>));
    }
    return Input$SoulWinningSession_on_conflict._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$SoulWinningSession_constraint get constraint =>
      (_$data['constraint'] as Enum$SoulWinningSession_constraint);
  List<Enum$SoulWinningSession_update_column> get update_columns =>
      (_$data['update_columns'] as List<Enum$SoulWinningSession_update_column>);
  Input$SoulWinningSession_bool_exp? get where =>
      (_$data['where'] as Input$SoulWinningSession_bool_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$constraint = constraint;
    result$data['constraint'] =
        toJson$Enum$SoulWinningSession_constraint(l$constraint);
    final l$update_columns = update_columns;
    result$data['update_columns'] = l$update_columns
        .map((e) => toJson$Enum$SoulWinningSession_update_column(e))
        .toList();
    if (_$data.containsKey('where')) {
      final l$where = where;
      result$data['where'] = l$where?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$SoulWinningSession_on_conflict<
          Input$SoulWinningSession_on_conflict>
      get copyWith => CopyWith$Input$SoulWinningSession_on_conflict(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SoulWinningSession_on_conflict) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$constraint = constraint;
    final lOther$constraint = other.constraint;
    if (l$constraint != lOther$constraint) {
      return false;
    }
    final l$update_columns = update_columns;
    final lOther$update_columns = other.update_columns;
    if (l$update_columns.length != lOther$update_columns.length) {
      return false;
    }
    for (int i = 0; i < l$update_columns.length; i++) {
      final l$update_columns$entry = l$update_columns[i];
      final lOther$update_columns$entry = lOther$update_columns[i];
      if (l$update_columns$entry != lOther$update_columns$entry) {
        return false;
      }
    }
    final l$where = where;
    final lOther$where = other.where;
    if (_$data.containsKey('where') != other._$data.containsKey('where')) {
      return false;
    }
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$constraint = constraint;
    final l$update_columns = update_columns;
    final l$where = where;
    return Object.hashAll([
      l$constraint,
      Object.hashAll(l$update_columns.map((v) => v)),
      _$data.containsKey('where') ? l$where : const {},
    ]);
  }
}

abstract class CopyWith$Input$SoulWinningSession_on_conflict<TRes> {
  factory CopyWith$Input$SoulWinningSession_on_conflict(
    Input$SoulWinningSession_on_conflict instance,
    TRes Function(Input$SoulWinningSession_on_conflict) then,
  ) = _CopyWithImpl$Input$SoulWinningSession_on_conflict;

  factory CopyWith$Input$SoulWinningSession_on_conflict.stub(TRes res) =
      _CopyWithStubImpl$Input$SoulWinningSession_on_conflict;

  TRes call({
    Enum$SoulWinningSession_constraint? constraint,
    List<Enum$SoulWinningSession_update_column>? update_columns,
    Input$SoulWinningSession_bool_exp? where,
  });
  CopyWith$Input$SoulWinningSession_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$SoulWinningSession_on_conflict<TRes>
    implements CopyWith$Input$SoulWinningSession_on_conflict<TRes> {
  _CopyWithImpl$Input$SoulWinningSession_on_conflict(
    this._instance,
    this._then,
  );

  final Input$SoulWinningSession_on_conflict _instance;

  final TRes Function(Input$SoulWinningSession_on_conflict) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? constraint = _undefined,
    Object? update_columns = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$SoulWinningSession_on_conflict._({
        ..._instance._$data,
        if (constraint != _undefined && constraint != null)
          'constraint': (constraint as Enum$SoulWinningSession_constraint),
        if (update_columns != _undefined && update_columns != null)
          'update_columns':
              (update_columns as List<Enum$SoulWinningSession_update_column>),
        if (where != _undefined)
          'where': (where as Input$SoulWinningSession_bool_exp?),
      }));
  CopyWith$Input$SoulWinningSession_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return local$where == null
        ? CopyWith$Input$SoulWinningSession_bool_exp.stub(_then(_instance))
        : CopyWith$Input$SoulWinningSession_bool_exp(
            local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$SoulWinningSession_on_conflict<TRes>
    implements CopyWith$Input$SoulWinningSession_on_conflict<TRes> {
  _CopyWithStubImpl$Input$SoulWinningSession_on_conflict(this._res);

  TRes _res;

  call({
    Enum$SoulWinningSession_constraint? constraint,
    List<Enum$SoulWinningSession_update_column>? update_columns,
    Input$SoulWinningSession_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$SoulWinningSession_bool_exp<TRes> get where =>
      CopyWith$Input$SoulWinningSession_bool_exp.stub(_res);
}

class Input$SoulWinningSessionGroup_on_conflict {
  factory Input$SoulWinningSessionGroup_on_conflict({
    required Enum$SoulWinningSessionGroup_constraint constraint,
    required List<Enum$SoulWinningSessionGroup_update_column> update_columns,
    Input$SoulWinningSessionGroup_bool_exp? where,
  }) =>
      Input$SoulWinningSessionGroup_on_conflict._({
        r'constraint': constraint,
        r'update_columns': update_columns,
        if (where != null) r'where': where,
      });

  Input$SoulWinningSessionGroup_on_conflict._(this._$data);

  factory Input$SoulWinningSessionGroup_on_conflict.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$constraint = data['constraint'];
    result$data['constraint'] =
        fromJson$Enum$SoulWinningSessionGroup_constraint(
            (l$constraint as String));
    final l$update_columns = data['update_columns'];
    result$data['update_columns'] = (l$update_columns as List<dynamic>)
        .map((e) =>
            fromJson$Enum$SoulWinningSessionGroup_update_column((e as String)))
        .toList();
    if (data.containsKey('where')) {
      final l$where = data['where'];
      result$data['where'] = l$where == null
          ? null
          : Input$SoulWinningSessionGroup_bool_exp.fromJson(
              (l$where as Map<String, dynamic>));
    }
    return Input$SoulWinningSessionGroup_on_conflict._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$SoulWinningSessionGroup_constraint get constraint =>
      (_$data['constraint'] as Enum$SoulWinningSessionGroup_constraint);
  List<Enum$SoulWinningSessionGroup_update_column> get update_columns =>
      (_$data['update_columns']
          as List<Enum$SoulWinningSessionGroup_update_column>);
  Input$SoulWinningSessionGroup_bool_exp? get where =>
      (_$data['where'] as Input$SoulWinningSessionGroup_bool_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$constraint = constraint;
    result$data['constraint'] =
        toJson$Enum$SoulWinningSessionGroup_constraint(l$constraint);
    final l$update_columns = update_columns;
    result$data['update_columns'] = l$update_columns
        .map((e) => toJson$Enum$SoulWinningSessionGroup_update_column(e))
        .toList();
    if (_$data.containsKey('where')) {
      final l$where = where;
      result$data['where'] = l$where?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$SoulWinningSessionGroup_on_conflict<
          Input$SoulWinningSessionGroup_on_conflict>
      get copyWith => CopyWith$Input$SoulWinningSessionGroup_on_conflict(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SoulWinningSessionGroup_on_conflict) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$constraint = constraint;
    final lOther$constraint = other.constraint;
    if (l$constraint != lOther$constraint) {
      return false;
    }
    final l$update_columns = update_columns;
    final lOther$update_columns = other.update_columns;
    if (l$update_columns.length != lOther$update_columns.length) {
      return false;
    }
    for (int i = 0; i < l$update_columns.length; i++) {
      final l$update_columns$entry = l$update_columns[i];
      final lOther$update_columns$entry = lOther$update_columns[i];
      if (l$update_columns$entry != lOther$update_columns$entry) {
        return false;
      }
    }
    final l$where = where;
    final lOther$where = other.where;
    if (_$data.containsKey('where') != other._$data.containsKey('where')) {
      return false;
    }
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$constraint = constraint;
    final l$update_columns = update_columns;
    final l$where = where;
    return Object.hashAll([
      l$constraint,
      Object.hashAll(l$update_columns.map((v) => v)),
      _$data.containsKey('where') ? l$where : const {},
    ]);
  }
}

abstract class CopyWith$Input$SoulWinningSessionGroup_on_conflict<TRes> {
  factory CopyWith$Input$SoulWinningSessionGroup_on_conflict(
    Input$SoulWinningSessionGroup_on_conflict instance,
    TRes Function(Input$SoulWinningSessionGroup_on_conflict) then,
  ) = _CopyWithImpl$Input$SoulWinningSessionGroup_on_conflict;

  factory CopyWith$Input$SoulWinningSessionGroup_on_conflict.stub(TRes res) =
      _CopyWithStubImpl$Input$SoulWinningSessionGroup_on_conflict;

  TRes call({
    Enum$SoulWinningSessionGroup_constraint? constraint,
    List<Enum$SoulWinningSessionGroup_update_column>? update_columns,
    Input$SoulWinningSessionGroup_bool_exp? where,
  });
  CopyWith$Input$SoulWinningSessionGroup_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$SoulWinningSessionGroup_on_conflict<TRes>
    implements CopyWith$Input$SoulWinningSessionGroup_on_conflict<TRes> {
  _CopyWithImpl$Input$SoulWinningSessionGroup_on_conflict(
    this._instance,
    this._then,
  );

  final Input$SoulWinningSessionGroup_on_conflict _instance;

  final TRes Function(Input$SoulWinningSessionGroup_on_conflict) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? constraint = _undefined,
    Object? update_columns = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$SoulWinningSessionGroup_on_conflict._({
        ..._instance._$data,
        if (constraint != _undefined && constraint != null)
          'constraint': (constraint as Enum$SoulWinningSessionGroup_constraint),
        if (update_columns != _undefined && update_columns != null)
          'update_columns': (update_columns
              as List<Enum$SoulWinningSessionGroup_update_column>),
        if (where != _undefined)
          'where': (where as Input$SoulWinningSessionGroup_bool_exp?),
      }));
  CopyWith$Input$SoulWinningSessionGroup_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return local$where == null
        ? CopyWith$Input$SoulWinningSessionGroup_bool_exp.stub(_then(_instance))
        : CopyWith$Input$SoulWinningSessionGroup_bool_exp(
            local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$SoulWinningSessionGroup_on_conflict<TRes>
    implements CopyWith$Input$SoulWinningSessionGroup_on_conflict<TRes> {
  _CopyWithStubImpl$Input$SoulWinningSessionGroup_on_conflict(this._res);

  TRes _res;

  call({
    Enum$SoulWinningSessionGroup_constraint? constraint,
    List<Enum$SoulWinningSessionGroup_update_column>? update_columns,
    Input$SoulWinningSessionGroup_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$SoulWinningSessionGroup_bool_exp<TRes> get where =>
      CopyWith$Input$SoulWinningSessionGroup_bool_exp.stub(_res);
}

class Input$User_on_conflict {
  factory Input$User_on_conflict({
    required Enum$User_constraint constraint,
    required List<Enum$User_update_column> update_columns,
    Input$User_bool_exp? where,
  }) =>
      Input$User_on_conflict._({
        r'constraint': constraint,
        r'update_columns': update_columns,
        if (where != null) r'where': where,
      });

  Input$User_on_conflict._(this._$data);

  factory Input$User_on_conflict.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$constraint = data['constraint'];
    result$data['constraint'] =
        fromJson$Enum$User_constraint((l$constraint as String));
    final l$update_columns = data['update_columns'];
    result$data['update_columns'] = (l$update_columns as List<dynamic>)
        .map((e) => fromJson$Enum$User_update_column((e as String)))
        .toList();
    if (data.containsKey('where')) {
      final l$where = data['where'];
      result$data['where'] = l$where == null
          ? null
          : Input$User_bool_exp.fromJson((l$where as Map<String, dynamic>));
    }
    return Input$User_on_conflict._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$User_constraint get constraint =>
      (_$data['constraint'] as Enum$User_constraint);
  List<Enum$User_update_column> get update_columns =>
      (_$data['update_columns'] as List<Enum$User_update_column>);
  Input$User_bool_exp? get where => (_$data['where'] as Input$User_bool_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$constraint = constraint;
    result$data['constraint'] = toJson$Enum$User_constraint(l$constraint);
    final l$update_columns = update_columns;
    result$data['update_columns'] =
        l$update_columns.map((e) => toJson$Enum$User_update_column(e)).toList();
    if (_$data.containsKey('where')) {
      final l$where = where;
      result$data['where'] = l$where?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$User_on_conflict<Input$User_on_conflict> get copyWith =>
      CopyWith$Input$User_on_conflict(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$User_on_conflict) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$constraint = constraint;
    final lOther$constraint = other.constraint;
    if (l$constraint != lOther$constraint) {
      return false;
    }
    final l$update_columns = update_columns;
    final lOther$update_columns = other.update_columns;
    if (l$update_columns.length != lOther$update_columns.length) {
      return false;
    }
    for (int i = 0; i < l$update_columns.length; i++) {
      final l$update_columns$entry = l$update_columns[i];
      final lOther$update_columns$entry = lOther$update_columns[i];
      if (l$update_columns$entry != lOther$update_columns$entry) {
        return false;
      }
    }
    final l$where = where;
    final lOther$where = other.where;
    if (_$data.containsKey('where') != other._$data.containsKey('where')) {
      return false;
    }
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$constraint = constraint;
    final l$update_columns = update_columns;
    final l$where = where;
    return Object.hashAll([
      l$constraint,
      Object.hashAll(l$update_columns.map((v) => v)),
      _$data.containsKey('where') ? l$where : const {},
    ]);
  }
}

abstract class CopyWith$Input$User_on_conflict<TRes> {
  factory CopyWith$Input$User_on_conflict(
    Input$User_on_conflict instance,
    TRes Function(Input$User_on_conflict) then,
  ) = _CopyWithImpl$Input$User_on_conflict;

  factory CopyWith$Input$User_on_conflict.stub(TRes res) =
      _CopyWithStubImpl$Input$User_on_conflict;

  TRes call({
    Enum$User_constraint? constraint,
    List<Enum$User_update_column>? update_columns,
    Input$User_bool_exp? where,
  });
  CopyWith$Input$User_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$User_on_conflict<TRes>
    implements CopyWith$Input$User_on_conflict<TRes> {
  _CopyWithImpl$Input$User_on_conflict(
    this._instance,
    this._then,
  );

  final Input$User_on_conflict _instance;

  final TRes Function(Input$User_on_conflict) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? constraint = _undefined,
    Object? update_columns = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$User_on_conflict._({
        ..._instance._$data,
        if (constraint != _undefined && constraint != null)
          'constraint': (constraint as Enum$User_constraint),
        if (update_columns != _undefined && update_columns != null)
          'update_columns': (update_columns as List<Enum$User_update_column>),
        if (where != _undefined) 'where': (where as Input$User_bool_exp?),
      }));
  CopyWith$Input$User_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return local$where == null
        ? CopyWith$Input$User_bool_exp.stub(_then(_instance))
        : CopyWith$Input$User_bool_exp(local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$User_on_conflict<TRes>
    implements CopyWith$Input$User_on_conflict<TRes> {
  _CopyWithStubImpl$Input$User_on_conflict(this._res);

  TRes _res;

  call({
    Enum$User_constraint? constraint,
    List<Enum$User_update_column>? update_columns,
    Input$User_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$User_bool_exp<TRes> get where =>
      CopyWith$Input$User_bool_exp.stub(_res);
}

class Input$_Organization_adminsOfOrganization_on_conflict {
  factory Input$_Organization_adminsOfOrganization_on_conflict({
    required Enum$_Organization_adminsOfOrganization_constraint constraint,
    required List<Enum$_Organization_adminsOfOrganization_update_column>
        update_columns,
    Input$_Organization_adminsOfOrganization_bool_exp? where,
  }) =>
      Input$_Organization_adminsOfOrganization_on_conflict._({
        r'constraint': constraint,
        r'update_columns': update_columns,
        if (where != null) r'where': where,
      });

  Input$_Organization_adminsOfOrganization_on_conflict._(this._$data);

  factory Input$_Organization_adminsOfOrganization_on_conflict.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$constraint = data['constraint'];
    result$data['constraint'] =
        fromJson$Enum$_Organization_adminsOfOrganization_constraint(
            (l$constraint as String));
    final l$update_columns = data['update_columns'];
    result$data['update_columns'] = (l$update_columns as List<dynamic>)
        .map((e) =>
            fromJson$Enum$_Organization_adminsOfOrganization_update_column(
                (e as String)))
        .toList();
    if (data.containsKey('where')) {
      final l$where = data['where'];
      result$data['where'] = l$where == null
          ? null
          : Input$_Organization_adminsOfOrganization_bool_exp.fromJson(
              (l$where as Map<String, dynamic>));
    }
    return Input$_Organization_adminsOfOrganization_on_conflict._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$_Organization_adminsOfOrganization_constraint get constraint =>
      (_$data['constraint']
          as Enum$_Organization_adminsOfOrganization_constraint);
  List<Enum$_Organization_adminsOfOrganization_update_column>
      get update_columns => (_$data['update_columns']
          as List<Enum$_Organization_adminsOfOrganization_update_column>);
  Input$_Organization_adminsOfOrganization_bool_exp? get where =>
      (_$data['where'] as Input$_Organization_adminsOfOrganization_bool_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$constraint = constraint;
    result$data['constraint'] =
        toJson$Enum$_Organization_adminsOfOrganization_constraint(l$constraint);
    final l$update_columns = update_columns;
    result$data['update_columns'] = l$update_columns
        .map((e) =>
            toJson$Enum$_Organization_adminsOfOrganization_update_column(e))
        .toList();
    if (_$data.containsKey('where')) {
      final l$where = where;
      result$data['where'] = l$where?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$_Organization_adminsOfOrganization_on_conflict<
          Input$_Organization_adminsOfOrganization_on_conflict>
      get copyWith =>
          CopyWith$Input$_Organization_adminsOfOrganization_on_conflict(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$_Organization_adminsOfOrganization_on_conflict) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$constraint = constraint;
    final lOther$constraint = other.constraint;
    if (l$constraint != lOther$constraint) {
      return false;
    }
    final l$update_columns = update_columns;
    final lOther$update_columns = other.update_columns;
    if (l$update_columns.length != lOther$update_columns.length) {
      return false;
    }
    for (int i = 0; i < l$update_columns.length; i++) {
      final l$update_columns$entry = l$update_columns[i];
      final lOther$update_columns$entry = lOther$update_columns[i];
      if (l$update_columns$entry != lOther$update_columns$entry) {
        return false;
      }
    }
    final l$where = where;
    final lOther$where = other.where;
    if (_$data.containsKey('where') != other._$data.containsKey('where')) {
      return false;
    }
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$constraint = constraint;
    final l$update_columns = update_columns;
    final l$where = where;
    return Object.hashAll([
      l$constraint,
      Object.hashAll(l$update_columns.map((v) => v)),
      _$data.containsKey('where') ? l$where : const {},
    ]);
  }
}

abstract class CopyWith$Input$_Organization_adminsOfOrganization_on_conflict<
    TRes> {
  factory CopyWith$Input$_Organization_adminsOfOrganization_on_conflict(
    Input$_Organization_adminsOfOrganization_on_conflict instance,
    TRes Function(Input$_Organization_adminsOfOrganization_on_conflict) then,
  ) = _CopyWithImpl$Input$_Organization_adminsOfOrganization_on_conflict;

  factory CopyWith$Input$_Organization_adminsOfOrganization_on_conflict.stub(
          TRes res) =
      _CopyWithStubImpl$Input$_Organization_adminsOfOrganization_on_conflict;

  TRes call({
    Enum$_Organization_adminsOfOrganization_constraint? constraint,
    List<Enum$_Organization_adminsOfOrganization_update_column>? update_columns,
    Input$_Organization_adminsOfOrganization_bool_exp? where,
  });
  CopyWith$Input$_Organization_adminsOfOrganization_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$_Organization_adminsOfOrganization_on_conflict<TRes>
    implements
        CopyWith$Input$_Organization_adminsOfOrganization_on_conflict<TRes> {
  _CopyWithImpl$Input$_Organization_adminsOfOrganization_on_conflict(
    this._instance,
    this._then,
  );

  final Input$_Organization_adminsOfOrganization_on_conflict _instance;

  final TRes Function(Input$_Organization_adminsOfOrganization_on_conflict)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? constraint = _undefined,
    Object? update_columns = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$_Organization_adminsOfOrganization_on_conflict._({
        ..._instance._$data,
        if (constraint != _undefined && constraint != null)
          'constraint': (constraint
              as Enum$_Organization_adminsOfOrganization_constraint),
        if (update_columns != _undefined && update_columns != null)
          'update_columns': (update_columns
              as List<Enum$_Organization_adminsOfOrganization_update_column>),
        if (where != _undefined)
          'where':
              (where as Input$_Organization_adminsOfOrganization_bool_exp?),
      }));
  CopyWith$Input$_Organization_adminsOfOrganization_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return local$where == null
        ? CopyWith$Input$_Organization_adminsOfOrganization_bool_exp.stub(
            _then(_instance))
        : CopyWith$Input$_Organization_adminsOfOrganization_bool_exp(
            local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$_Organization_adminsOfOrganization_on_conflict<
        TRes>
    implements
        CopyWith$Input$_Organization_adminsOfOrganization_on_conflict<TRes> {
  _CopyWithStubImpl$Input$_Organization_adminsOfOrganization_on_conflict(
      this._res);

  TRes _res;

  call({
    Enum$_Organization_adminsOfOrganization_constraint? constraint,
    List<Enum$_Organization_adminsOfOrganization_update_column>? update_columns,
    Input$_Organization_adminsOfOrganization_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$_Organization_adminsOfOrganization_bool_exp<TRes> get where =>
      CopyWith$Input$_Organization_adminsOfOrganization_bool_exp.stub(_res);
}

class Input$_Organization_membersInOrganization_on_conflict {
  factory Input$_Organization_membersInOrganization_on_conflict({
    required Enum$_Organization_membersInOrganization_constraint constraint,
    required List<Enum$_Organization_membersInOrganization_update_column>
        update_columns,
    Input$_Organization_membersInOrganization_bool_exp? where,
  }) =>
      Input$_Organization_membersInOrganization_on_conflict._({
        r'constraint': constraint,
        r'update_columns': update_columns,
        if (where != null) r'where': where,
      });

  Input$_Organization_membersInOrganization_on_conflict._(this._$data);

  factory Input$_Organization_membersInOrganization_on_conflict.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$constraint = data['constraint'];
    result$data['constraint'] =
        fromJson$Enum$_Organization_membersInOrganization_constraint(
            (l$constraint as String));
    final l$update_columns = data['update_columns'];
    result$data['update_columns'] = (l$update_columns as List<dynamic>)
        .map((e) =>
            fromJson$Enum$_Organization_membersInOrganization_update_column(
                (e as String)))
        .toList();
    if (data.containsKey('where')) {
      final l$where = data['where'];
      result$data['where'] = l$where == null
          ? null
          : Input$_Organization_membersInOrganization_bool_exp.fromJson(
              (l$where as Map<String, dynamic>));
    }
    return Input$_Organization_membersInOrganization_on_conflict._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$_Organization_membersInOrganization_constraint get constraint =>
      (_$data['constraint']
          as Enum$_Organization_membersInOrganization_constraint);
  List<Enum$_Organization_membersInOrganization_update_column>
      get update_columns => (_$data['update_columns']
          as List<Enum$_Organization_membersInOrganization_update_column>);
  Input$_Organization_membersInOrganization_bool_exp? get where =>
      (_$data['where'] as Input$_Organization_membersInOrganization_bool_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$constraint = constraint;
    result$data['constraint'] =
        toJson$Enum$_Organization_membersInOrganization_constraint(
            l$constraint);
    final l$update_columns = update_columns;
    result$data['update_columns'] = l$update_columns
        .map((e) =>
            toJson$Enum$_Organization_membersInOrganization_update_column(e))
        .toList();
    if (_$data.containsKey('where')) {
      final l$where = where;
      result$data['where'] = l$where?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$_Organization_membersInOrganization_on_conflict<
          Input$_Organization_membersInOrganization_on_conflict>
      get copyWith =>
          CopyWith$Input$_Organization_membersInOrganization_on_conflict(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$_Organization_membersInOrganization_on_conflict) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$constraint = constraint;
    final lOther$constraint = other.constraint;
    if (l$constraint != lOther$constraint) {
      return false;
    }
    final l$update_columns = update_columns;
    final lOther$update_columns = other.update_columns;
    if (l$update_columns.length != lOther$update_columns.length) {
      return false;
    }
    for (int i = 0; i < l$update_columns.length; i++) {
      final l$update_columns$entry = l$update_columns[i];
      final lOther$update_columns$entry = lOther$update_columns[i];
      if (l$update_columns$entry != lOther$update_columns$entry) {
        return false;
      }
    }
    final l$where = where;
    final lOther$where = other.where;
    if (_$data.containsKey('where') != other._$data.containsKey('where')) {
      return false;
    }
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$constraint = constraint;
    final l$update_columns = update_columns;
    final l$where = where;
    return Object.hashAll([
      l$constraint,
      Object.hashAll(l$update_columns.map((v) => v)),
      _$data.containsKey('where') ? l$where : const {},
    ]);
  }
}

abstract class CopyWith$Input$_Organization_membersInOrganization_on_conflict<
    TRes> {
  factory CopyWith$Input$_Organization_membersInOrganization_on_conflict(
    Input$_Organization_membersInOrganization_on_conflict instance,
    TRes Function(Input$_Organization_membersInOrganization_on_conflict) then,
  ) = _CopyWithImpl$Input$_Organization_membersInOrganization_on_conflict;

  factory CopyWith$Input$_Organization_membersInOrganization_on_conflict.stub(
          TRes res) =
      _CopyWithStubImpl$Input$_Organization_membersInOrganization_on_conflict;

  TRes call({
    Enum$_Organization_membersInOrganization_constraint? constraint,
    List<Enum$_Organization_membersInOrganization_update_column>?
        update_columns,
    Input$_Organization_membersInOrganization_bool_exp? where,
  });
  CopyWith$Input$_Organization_membersInOrganization_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$_Organization_membersInOrganization_on_conflict<TRes>
    implements
        CopyWith$Input$_Organization_membersInOrganization_on_conflict<TRes> {
  _CopyWithImpl$Input$_Organization_membersInOrganization_on_conflict(
    this._instance,
    this._then,
  );

  final Input$_Organization_membersInOrganization_on_conflict _instance;

  final TRes Function(Input$_Organization_membersInOrganization_on_conflict)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? constraint = _undefined,
    Object? update_columns = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$_Organization_membersInOrganization_on_conflict._({
        ..._instance._$data,
        if (constraint != _undefined && constraint != null)
          'constraint': (constraint
              as Enum$_Organization_membersInOrganization_constraint),
        if (update_columns != _undefined && update_columns != null)
          'update_columns': (update_columns
              as List<Enum$_Organization_membersInOrganization_update_column>),
        if (where != _undefined)
          'where':
              (where as Input$_Organization_membersInOrganization_bool_exp?),
      }));
  CopyWith$Input$_Organization_membersInOrganization_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return local$where == null
        ? CopyWith$Input$_Organization_membersInOrganization_bool_exp.stub(
            _then(_instance))
        : CopyWith$Input$_Organization_membersInOrganization_bool_exp(
            local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$_Organization_membersInOrganization_on_conflict<
        TRes>
    implements
        CopyWith$Input$_Organization_membersInOrganization_on_conflict<TRes> {
  _CopyWithStubImpl$Input$_Organization_membersInOrganization_on_conflict(
      this._res);

  TRes _res;

  call({
    Enum$_Organization_membersInOrganization_constraint? constraint,
    List<Enum$_Organization_membersInOrganization_update_column>?
        update_columns,
    Input$_Organization_membersInOrganization_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$_Organization_membersInOrganization_bool_exp<TRes> get where =>
      CopyWith$Input$_Organization_membersInOrganization_bool_exp.stub(_res);
}

class Input$_SoulWinningSessionGroup_members_on_conflict {
  factory Input$_SoulWinningSessionGroup_members_on_conflict({
    required Enum$_SoulWinningSessionGroup_members_constraint constraint,
    required List<Enum$_SoulWinningSessionGroup_members_update_column>
        update_columns,
    Input$_SoulWinningSessionGroup_members_bool_exp? where,
  }) =>
      Input$_SoulWinningSessionGroup_members_on_conflict._({
        r'constraint': constraint,
        r'update_columns': update_columns,
        if (where != null) r'where': where,
      });

  Input$_SoulWinningSessionGroup_members_on_conflict._(this._$data);

  factory Input$_SoulWinningSessionGroup_members_on_conflict.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$constraint = data['constraint'];
    result$data['constraint'] =
        fromJson$Enum$_SoulWinningSessionGroup_members_constraint(
            (l$constraint as String));
    final l$update_columns = data['update_columns'];
    result$data['update_columns'] = (l$update_columns as List<dynamic>)
        .map((e) =>
            fromJson$Enum$_SoulWinningSessionGroup_members_update_column(
                (e as String)))
        .toList();
    if (data.containsKey('where')) {
      final l$where = data['where'];
      result$data['where'] = l$where == null
          ? null
          : Input$_SoulWinningSessionGroup_members_bool_exp.fromJson(
              (l$where as Map<String, dynamic>));
    }
    return Input$_SoulWinningSessionGroup_members_on_conflict._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$_SoulWinningSessionGroup_members_constraint get constraint =>
      (_$data['constraint']
          as Enum$_SoulWinningSessionGroup_members_constraint);
  List<Enum$_SoulWinningSessionGroup_members_update_column>
      get update_columns => (_$data['update_columns']
          as List<Enum$_SoulWinningSessionGroup_members_update_column>);
  Input$_SoulWinningSessionGroup_members_bool_exp? get where =>
      (_$data['where'] as Input$_SoulWinningSessionGroup_members_bool_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$constraint = constraint;
    result$data['constraint'] =
        toJson$Enum$_SoulWinningSessionGroup_members_constraint(l$constraint);
    final l$update_columns = update_columns;
    result$data['update_columns'] = l$update_columns
        .map((e) =>
            toJson$Enum$_SoulWinningSessionGroup_members_update_column(e))
        .toList();
    if (_$data.containsKey('where')) {
      final l$where = where;
      result$data['where'] = l$where?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$_SoulWinningSessionGroup_members_on_conflict<
          Input$_SoulWinningSessionGroup_members_on_conflict>
      get copyWith =>
          CopyWith$Input$_SoulWinningSessionGroup_members_on_conflict(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$_SoulWinningSessionGroup_members_on_conflict) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$constraint = constraint;
    final lOther$constraint = other.constraint;
    if (l$constraint != lOther$constraint) {
      return false;
    }
    final l$update_columns = update_columns;
    final lOther$update_columns = other.update_columns;
    if (l$update_columns.length != lOther$update_columns.length) {
      return false;
    }
    for (int i = 0; i < l$update_columns.length; i++) {
      final l$update_columns$entry = l$update_columns[i];
      final lOther$update_columns$entry = lOther$update_columns[i];
      if (l$update_columns$entry != lOther$update_columns$entry) {
        return false;
      }
    }
    final l$where = where;
    final lOther$where = other.where;
    if (_$data.containsKey('where') != other._$data.containsKey('where')) {
      return false;
    }
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$constraint = constraint;
    final l$update_columns = update_columns;
    final l$where = where;
    return Object.hashAll([
      l$constraint,
      Object.hashAll(l$update_columns.map((v) => v)),
      _$data.containsKey('where') ? l$where : const {},
    ]);
  }
}

abstract class CopyWith$Input$_SoulWinningSessionGroup_members_on_conflict<
    TRes> {
  factory CopyWith$Input$_SoulWinningSessionGroup_members_on_conflict(
    Input$_SoulWinningSessionGroup_members_on_conflict instance,
    TRes Function(Input$_SoulWinningSessionGroup_members_on_conflict) then,
  ) = _CopyWithImpl$Input$_SoulWinningSessionGroup_members_on_conflict;

  factory CopyWith$Input$_SoulWinningSessionGroup_members_on_conflict.stub(
          TRes res) =
      _CopyWithStubImpl$Input$_SoulWinningSessionGroup_members_on_conflict;

  TRes call({
    Enum$_SoulWinningSessionGroup_members_constraint? constraint,
    List<Enum$_SoulWinningSessionGroup_members_update_column>? update_columns,
    Input$_SoulWinningSessionGroup_members_bool_exp? where,
  });
  CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$_SoulWinningSessionGroup_members_on_conflict<TRes>
    implements
        CopyWith$Input$_SoulWinningSessionGroup_members_on_conflict<TRes> {
  _CopyWithImpl$Input$_SoulWinningSessionGroup_members_on_conflict(
    this._instance,
    this._then,
  );

  final Input$_SoulWinningSessionGroup_members_on_conflict _instance;

  final TRes Function(Input$_SoulWinningSessionGroup_members_on_conflict) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? constraint = _undefined,
    Object? update_columns = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$_SoulWinningSessionGroup_members_on_conflict._({
        ..._instance._$data,
        if (constraint != _undefined && constraint != null)
          'constraint':
              (constraint as Enum$_SoulWinningSessionGroup_members_constraint),
        if (update_columns != _undefined && update_columns != null)
          'update_columns': (update_columns
              as List<Enum$_SoulWinningSessionGroup_members_update_column>),
        if (where != _undefined)
          'where': (where as Input$_SoulWinningSessionGroup_members_bool_exp?),
      }));
  CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return local$where == null
        ? CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp.stub(
            _then(_instance))
        : CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp(
            local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$_SoulWinningSessionGroup_members_on_conflict<TRes>
    implements
        CopyWith$Input$_SoulWinningSessionGroup_members_on_conflict<TRes> {
  _CopyWithStubImpl$Input$_SoulWinningSessionGroup_members_on_conflict(
      this._res);

  TRes _res;

  call({
    Enum$_SoulWinningSessionGroup_members_constraint? constraint,
    List<Enum$_SoulWinningSessionGroup_members_update_column>? update_columns,
    Input$_SoulWinningSessionGroup_members_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp<TRes> get where =>
      CopyWith$Input$_SoulWinningSessionGroup_members_bool_exp.stub(_res);
}

class Input$Encounter_aggregate_order_by {
  factory Input$Encounter_aggregate_order_by({
    Enum$order_by? count,
    Input$Encounter_max_order_by? max,
    Input$Encounter_min_order_by? min,
  }) =>
      Input$Encounter_aggregate_order_by._({
        if (count != null) r'count': count,
        if (max != null) r'max': max,
        if (min != null) r'min': min,
      });

  Input$Encounter_aggregate_order_by._(this._$data);

  factory Input$Encounter_aggregate_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] =
          l$count == null ? null : fromJson$Enum$order_by((l$count as String));
    }
    if (data.containsKey('max')) {
      final l$max = data['max'];
      result$data['max'] = l$max == null
          ? null
          : Input$Encounter_max_order_by.fromJson(
              (l$max as Map<String, dynamic>));
    }
    if (data.containsKey('min')) {
      final l$min = data['min'];
      result$data['min'] = l$min == null
          ? null
          : Input$Encounter_min_order_by.fromJson(
              (l$min as Map<String, dynamic>));
    }
    return Input$Encounter_aggregate_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get count => (_$data['count'] as Enum$order_by?);
  Input$Encounter_max_order_by? get max =>
      (_$data['max'] as Input$Encounter_max_order_by?);
  Input$Encounter_min_order_by? get min =>
      (_$data['min'] as Input$Encounter_min_order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] =
          l$count == null ? null : toJson$Enum$order_by(l$count);
    }
    if (_$data.containsKey('max')) {
      final l$max = max;
      result$data['max'] = l$max?.toJson();
    }
    if (_$data.containsKey('min')) {
      final l$min = min;
      result$data['min'] = l$min?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$Encounter_aggregate_order_by<
          Input$Encounter_aggregate_order_by>
      get copyWith => CopyWith$Input$Encounter_aggregate_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Encounter_aggregate_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    final l$max = max;
    final lOther$max = other.max;
    if (_$data.containsKey('max') != other._$data.containsKey('max')) {
      return false;
    }
    if (l$max != lOther$max) {
      return false;
    }
    final l$min = min;
    final lOther$min = other.min;
    if (_$data.containsKey('min') != other._$data.containsKey('min')) {
      return false;
    }
    if (l$min != lOther$min) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$count = count;
    final l$max = max;
    final l$min = min;
    return Object.hashAll([
      _$data.containsKey('count') ? l$count : const {},
      _$data.containsKey('max') ? l$max : const {},
      _$data.containsKey('min') ? l$min : const {},
    ]);
  }
}

abstract class CopyWith$Input$Encounter_aggregate_order_by<TRes> {
  factory CopyWith$Input$Encounter_aggregate_order_by(
    Input$Encounter_aggregate_order_by instance,
    TRes Function(Input$Encounter_aggregate_order_by) then,
  ) = _CopyWithImpl$Input$Encounter_aggregate_order_by;

  factory CopyWith$Input$Encounter_aggregate_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$Encounter_aggregate_order_by;

  TRes call({
    Enum$order_by? count,
    Input$Encounter_max_order_by? max,
    Input$Encounter_min_order_by? min,
  });
  CopyWith$Input$Encounter_max_order_by<TRes> get max;
  CopyWith$Input$Encounter_min_order_by<TRes> get min;
}

class _CopyWithImpl$Input$Encounter_aggregate_order_by<TRes>
    implements CopyWith$Input$Encounter_aggregate_order_by<TRes> {
  _CopyWithImpl$Input$Encounter_aggregate_order_by(
    this._instance,
    this._then,
  );

  final Input$Encounter_aggregate_order_by _instance;

  final TRes Function(Input$Encounter_aggregate_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? count = _undefined,
    Object? max = _undefined,
    Object? min = _undefined,
  }) =>
      _then(Input$Encounter_aggregate_order_by._({
        ..._instance._$data,
        if (count != _undefined) 'count': (count as Enum$order_by?),
        if (max != _undefined) 'max': (max as Input$Encounter_max_order_by?),
        if (min != _undefined) 'min': (min as Input$Encounter_min_order_by?),
      }));
  CopyWith$Input$Encounter_max_order_by<TRes> get max {
    final local$max = _instance.max;
    return local$max == null
        ? CopyWith$Input$Encounter_max_order_by.stub(_then(_instance))
        : CopyWith$Input$Encounter_max_order_by(local$max, (e) => call(max: e));
  }

  CopyWith$Input$Encounter_min_order_by<TRes> get min {
    final local$min = _instance.min;
    return local$min == null
        ? CopyWith$Input$Encounter_min_order_by.stub(_then(_instance))
        : CopyWith$Input$Encounter_min_order_by(local$min, (e) => call(min: e));
  }
}

class _CopyWithStubImpl$Input$Encounter_aggregate_order_by<TRes>
    implements CopyWith$Input$Encounter_aggregate_order_by<TRes> {
  _CopyWithStubImpl$Input$Encounter_aggregate_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? count,
    Input$Encounter_max_order_by? max,
    Input$Encounter_min_order_by? min,
  }) =>
      _res;
  CopyWith$Input$Encounter_max_order_by<TRes> get max =>
      CopyWith$Input$Encounter_max_order_by.stub(_res);
  CopyWith$Input$Encounter_min_order_by<TRes> get min =>
      CopyWith$Input$Encounter_min_order_by.stub(_res);
}

class Input$Event_aggregate_order_by {
  factory Input$Event_aggregate_order_by({
    Enum$order_by? count,
    Input$Event_max_order_by? max,
    Input$Event_min_order_by? min,
  }) =>
      Input$Event_aggregate_order_by._({
        if (count != null) r'count': count,
        if (max != null) r'max': max,
        if (min != null) r'min': min,
      });

  Input$Event_aggregate_order_by._(this._$data);

  factory Input$Event_aggregate_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] =
          l$count == null ? null : fromJson$Enum$order_by((l$count as String));
    }
    if (data.containsKey('max')) {
      final l$max = data['max'];
      result$data['max'] = l$max == null
          ? null
          : Input$Event_max_order_by.fromJson((l$max as Map<String, dynamic>));
    }
    if (data.containsKey('min')) {
      final l$min = data['min'];
      result$data['min'] = l$min == null
          ? null
          : Input$Event_min_order_by.fromJson((l$min as Map<String, dynamic>));
    }
    return Input$Event_aggregate_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get count => (_$data['count'] as Enum$order_by?);
  Input$Event_max_order_by? get max =>
      (_$data['max'] as Input$Event_max_order_by?);
  Input$Event_min_order_by? get min =>
      (_$data['min'] as Input$Event_min_order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] =
          l$count == null ? null : toJson$Enum$order_by(l$count);
    }
    if (_$data.containsKey('max')) {
      final l$max = max;
      result$data['max'] = l$max?.toJson();
    }
    if (_$data.containsKey('min')) {
      final l$min = min;
      result$data['min'] = l$min?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$Event_aggregate_order_by<Input$Event_aggregate_order_by>
      get copyWith => CopyWith$Input$Event_aggregate_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Event_aggregate_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    final l$max = max;
    final lOther$max = other.max;
    if (_$data.containsKey('max') != other._$data.containsKey('max')) {
      return false;
    }
    if (l$max != lOther$max) {
      return false;
    }
    final l$min = min;
    final lOther$min = other.min;
    if (_$data.containsKey('min') != other._$data.containsKey('min')) {
      return false;
    }
    if (l$min != lOther$min) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$count = count;
    final l$max = max;
    final l$min = min;
    return Object.hashAll([
      _$data.containsKey('count') ? l$count : const {},
      _$data.containsKey('max') ? l$max : const {},
      _$data.containsKey('min') ? l$min : const {},
    ]);
  }
}

abstract class CopyWith$Input$Event_aggregate_order_by<TRes> {
  factory CopyWith$Input$Event_aggregate_order_by(
    Input$Event_aggregate_order_by instance,
    TRes Function(Input$Event_aggregate_order_by) then,
  ) = _CopyWithImpl$Input$Event_aggregate_order_by;

  factory CopyWith$Input$Event_aggregate_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$Event_aggregate_order_by;

  TRes call({
    Enum$order_by? count,
    Input$Event_max_order_by? max,
    Input$Event_min_order_by? min,
  });
  CopyWith$Input$Event_max_order_by<TRes> get max;
  CopyWith$Input$Event_min_order_by<TRes> get min;
}

class _CopyWithImpl$Input$Event_aggregate_order_by<TRes>
    implements CopyWith$Input$Event_aggregate_order_by<TRes> {
  _CopyWithImpl$Input$Event_aggregate_order_by(
    this._instance,
    this._then,
  );

  final Input$Event_aggregate_order_by _instance;

  final TRes Function(Input$Event_aggregate_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? count = _undefined,
    Object? max = _undefined,
    Object? min = _undefined,
  }) =>
      _then(Input$Event_aggregate_order_by._({
        ..._instance._$data,
        if (count != _undefined) 'count': (count as Enum$order_by?),
        if (max != _undefined) 'max': (max as Input$Event_max_order_by?),
        if (min != _undefined) 'min': (min as Input$Event_min_order_by?),
      }));
  CopyWith$Input$Event_max_order_by<TRes> get max {
    final local$max = _instance.max;
    return local$max == null
        ? CopyWith$Input$Event_max_order_by.stub(_then(_instance))
        : CopyWith$Input$Event_max_order_by(local$max, (e) => call(max: e));
  }

  CopyWith$Input$Event_min_order_by<TRes> get min {
    final local$min = _instance.min;
    return local$min == null
        ? CopyWith$Input$Event_min_order_by.stub(_then(_instance))
        : CopyWith$Input$Event_min_order_by(local$min, (e) => call(min: e));
  }
}

class _CopyWithStubImpl$Input$Event_aggregate_order_by<TRes>
    implements CopyWith$Input$Event_aggregate_order_by<TRes> {
  _CopyWithStubImpl$Input$Event_aggregate_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? count,
    Input$Event_max_order_by? max,
    Input$Event_min_order_by? min,
  }) =>
      _res;
  CopyWith$Input$Event_max_order_by<TRes> get max =>
      CopyWith$Input$Event_max_order_by.stub(_res);
  CopyWith$Input$Event_min_order_by<TRes> get min =>
      CopyWith$Input$Event_min_order_by.stub(_res);
}

class Input$Map_aggregate_order_by {
  factory Input$Map_aggregate_order_by({
    Enum$order_by? count,
    Input$Map_max_order_by? max,
    Input$Map_min_order_by? min,
  }) =>
      Input$Map_aggregate_order_by._({
        if (count != null) r'count': count,
        if (max != null) r'max': max,
        if (min != null) r'min': min,
      });

  Input$Map_aggregate_order_by._(this._$data);

  factory Input$Map_aggregate_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] =
          l$count == null ? null : fromJson$Enum$order_by((l$count as String));
    }
    if (data.containsKey('max')) {
      final l$max = data['max'];
      result$data['max'] = l$max == null
          ? null
          : Input$Map_max_order_by.fromJson((l$max as Map<String, dynamic>));
    }
    if (data.containsKey('min')) {
      final l$min = data['min'];
      result$data['min'] = l$min == null
          ? null
          : Input$Map_min_order_by.fromJson((l$min as Map<String, dynamic>));
    }
    return Input$Map_aggregate_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get count => (_$data['count'] as Enum$order_by?);
  Input$Map_max_order_by? get max => (_$data['max'] as Input$Map_max_order_by?);
  Input$Map_min_order_by? get min => (_$data['min'] as Input$Map_min_order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] =
          l$count == null ? null : toJson$Enum$order_by(l$count);
    }
    if (_$data.containsKey('max')) {
      final l$max = max;
      result$data['max'] = l$max?.toJson();
    }
    if (_$data.containsKey('min')) {
      final l$min = min;
      result$data['min'] = l$min?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$Map_aggregate_order_by<Input$Map_aggregate_order_by>
      get copyWith => CopyWith$Input$Map_aggregate_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Map_aggregate_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    final l$max = max;
    final lOther$max = other.max;
    if (_$data.containsKey('max') != other._$data.containsKey('max')) {
      return false;
    }
    if (l$max != lOther$max) {
      return false;
    }
    final l$min = min;
    final lOther$min = other.min;
    if (_$data.containsKey('min') != other._$data.containsKey('min')) {
      return false;
    }
    if (l$min != lOther$min) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$count = count;
    final l$max = max;
    final l$min = min;
    return Object.hashAll([
      _$data.containsKey('count') ? l$count : const {},
      _$data.containsKey('max') ? l$max : const {},
      _$data.containsKey('min') ? l$min : const {},
    ]);
  }
}

abstract class CopyWith$Input$Map_aggregate_order_by<TRes> {
  factory CopyWith$Input$Map_aggregate_order_by(
    Input$Map_aggregate_order_by instance,
    TRes Function(Input$Map_aggregate_order_by) then,
  ) = _CopyWithImpl$Input$Map_aggregate_order_by;

  factory CopyWith$Input$Map_aggregate_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$Map_aggregate_order_by;

  TRes call({
    Enum$order_by? count,
    Input$Map_max_order_by? max,
    Input$Map_min_order_by? min,
  });
  CopyWith$Input$Map_max_order_by<TRes> get max;
  CopyWith$Input$Map_min_order_by<TRes> get min;
}

class _CopyWithImpl$Input$Map_aggregate_order_by<TRes>
    implements CopyWith$Input$Map_aggregate_order_by<TRes> {
  _CopyWithImpl$Input$Map_aggregate_order_by(
    this._instance,
    this._then,
  );

  final Input$Map_aggregate_order_by _instance;

  final TRes Function(Input$Map_aggregate_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? count = _undefined,
    Object? max = _undefined,
    Object? min = _undefined,
  }) =>
      _then(Input$Map_aggregate_order_by._({
        ..._instance._$data,
        if (count != _undefined) 'count': (count as Enum$order_by?),
        if (max != _undefined) 'max': (max as Input$Map_max_order_by?),
        if (min != _undefined) 'min': (min as Input$Map_min_order_by?),
      }));
  CopyWith$Input$Map_max_order_by<TRes> get max {
    final local$max = _instance.max;
    return local$max == null
        ? CopyWith$Input$Map_max_order_by.stub(_then(_instance))
        : CopyWith$Input$Map_max_order_by(local$max, (e) => call(max: e));
  }

  CopyWith$Input$Map_min_order_by<TRes> get min {
    final local$min = _instance.min;
    return local$min == null
        ? CopyWith$Input$Map_min_order_by.stub(_then(_instance))
        : CopyWith$Input$Map_min_order_by(local$min, (e) => call(min: e));
  }
}

class _CopyWithStubImpl$Input$Map_aggregate_order_by<TRes>
    implements CopyWith$Input$Map_aggregate_order_by<TRes> {
  _CopyWithStubImpl$Input$Map_aggregate_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? count,
    Input$Map_max_order_by? max,
    Input$Map_min_order_by? min,
  }) =>
      _res;
  CopyWith$Input$Map_max_order_by<TRes> get max =>
      CopyWith$Input$Map_max_order_by.stub(_res);
  CopyWith$Input$Map_min_order_by<TRes> get min =>
      CopyWith$Input$Map_min_order_by.stub(_res);
}

class Input$MapArea_aggregate_order_by {
  factory Input$MapArea_aggregate_order_by({
    Enum$order_by? count,
    Input$MapArea_max_order_by? max,
    Input$MapArea_min_order_by? min,
  }) =>
      Input$MapArea_aggregate_order_by._({
        if (count != null) r'count': count,
        if (max != null) r'max': max,
        if (min != null) r'min': min,
      });

  Input$MapArea_aggregate_order_by._(this._$data);

  factory Input$MapArea_aggregate_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] =
          l$count == null ? null : fromJson$Enum$order_by((l$count as String));
    }
    if (data.containsKey('max')) {
      final l$max = data['max'];
      result$data['max'] = l$max == null
          ? null
          : Input$MapArea_max_order_by.fromJson(
              (l$max as Map<String, dynamic>));
    }
    if (data.containsKey('min')) {
      final l$min = data['min'];
      result$data['min'] = l$min == null
          ? null
          : Input$MapArea_min_order_by.fromJson(
              (l$min as Map<String, dynamic>));
    }
    return Input$MapArea_aggregate_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get count => (_$data['count'] as Enum$order_by?);
  Input$MapArea_max_order_by? get max =>
      (_$data['max'] as Input$MapArea_max_order_by?);
  Input$MapArea_min_order_by? get min =>
      (_$data['min'] as Input$MapArea_min_order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] =
          l$count == null ? null : toJson$Enum$order_by(l$count);
    }
    if (_$data.containsKey('max')) {
      final l$max = max;
      result$data['max'] = l$max?.toJson();
    }
    if (_$data.containsKey('min')) {
      final l$min = min;
      result$data['min'] = l$min?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$MapArea_aggregate_order_by<Input$MapArea_aggregate_order_by>
      get copyWith => CopyWith$Input$MapArea_aggregate_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$MapArea_aggregate_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    final l$max = max;
    final lOther$max = other.max;
    if (_$data.containsKey('max') != other._$data.containsKey('max')) {
      return false;
    }
    if (l$max != lOther$max) {
      return false;
    }
    final l$min = min;
    final lOther$min = other.min;
    if (_$data.containsKey('min') != other._$data.containsKey('min')) {
      return false;
    }
    if (l$min != lOther$min) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$count = count;
    final l$max = max;
    final l$min = min;
    return Object.hashAll([
      _$data.containsKey('count') ? l$count : const {},
      _$data.containsKey('max') ? l$max : const {},
      _$data.containsKey('min') ? l$min : const {},
    ]);
  }
}

abstract class CopyWith$Input$MapArea_aggregate_order_by<TRes> {
  factory CopyWith$Input$MapArea_aggregate_order_by(
    Input$MapArea_aggregate_order_by instance,
    TRes Function(Input$MapArea_aggregate_order_by) then,
  ) = _CopyWithImpl$Input$MapArea_aggregate_order_by;

  factory CopyWith$Input$MapArea_aggregate_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$MapArea_aggregate_order_by;

  TRes call({
    Enum$order_by? count,
    Input$MapArea_max_order_by? max,
    Input$MapArea_min_order_by? min,
  });
  CopyWith$Input$MapArea_max_order_by<TRes> get max;
  CopyWith$Input$MapArea_min_order_by<TRes> get min;
}

class _CopyWithImpl$Input$MapArea_aggregate_order_by<TRes>
    implements CopyWith$Input$MapArea_aggregate_order_by<TRes> {
  _CopyWithImpl$Input$MapArea_aggregate_order_by(
    this._instance,
    this._then,
  );

  final Input$MapArea_aggregate_order_by _instance;

  final TRes Function(Input$MapArea_aggregate_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? count = _undefined,
    Object? max = _undefined,
    Object? min = _undefined,
  }) =>
      _then(Input$MapArea_aggregate_order_by._({
        ..._instance._$data,
        if (count != _undefined) 'count': (count as Enum$order_by?),
        if (max != _undefined) 'max': (max as Input$MapArea_max_order_by?),
        if (min != _undefined) 'min': (min as Input$MapArea_min_order_by?),
      }));
  CopyWith$Input$MapArea_max_order_by<TRes> get max {
    final local$max = _instance.max;
    return local$max == null
        ? CopyWith$Input$MapArea_max_order_by.stub(_then(_instance))
        : CopyWith$Input$MapArea_max_order_by(local$max, (e) => call(max: e));
  }

  CopyWith$Input$MapArea_min_order_by<TRes> get min {
    final local$min = _instance.min;
    return local$min == null
        ? CopyWith$Input$MapArea_min_order_by.stub(_then(_instance))
        : CopyWith$Input$MapArea_min_order_by(local$min, (e) => call(min: e));
  }
}

class _CopyWithStubImpl$Input$MapArea_aggregate_order_by<TRes>
    implements CopyWith$Input$MapArea_aggregate_order_by<TRes> {
  _CopyWithStubImpl$Input$MapArea_aggregate_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? count,
    Input$MapArea_max_order_by? max,
    Input$MapArea_min_order_by? min,
  }) =>
      _res;
  CopyWith$Input$MapArea_max_order_by<TRes> get max =>
      CopyWith$Input$MapArea_max_order_by.stub(_res);
  CopyWith$Input$MapArea_min_order_by<TRes> get min =>
      CopyWith$Input$MapArea_min_order_by.stub(_res);
}

class Input$SavedPerson_aggregate_order_by {
  factory Input$SavedPerson_aggregate_order_by({
    Enum$order_by? count,
    Input$SavedPerson_max_order_by? max,
    Input$SavedPerson_min_order_by? min,
  }) =>
      Input$SavedPerson_aggregate_order_by._({
        if (count != null) r'count': count,
        if (max != null) r'max': max,
        if (min != null) r'min': min,
      });

  Input$SavedPerson_aggregate_order_by._(this._$data);

  factory Input$SavedPerson_aggregate_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] =
          l$count == null ? null : fromJson$Enum$order_by((l$count as String));
    }
    if (data.containsKey('max')) {
      final l$max = data['max'];
      result$data['max'] = l$max == null
          ? null
          : Input$SavedPerson_max_order_by.fromJson(
              (l$max as Map<String, dynamic>));
    }
    if (data.containsKey('min')) {
      final l$min = data['min'];
      result$data['min'] = l$min == null
          ? null
          : Input$SavedPerson_min_order_by.fromJson(
              (l$min as Map<String, dynamic>));
    }
    return Input$SavedPerson_aggregate_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get count => (_$data['count'] as Enum$order_by?);
  Input$SavedPerson_max_order_by? get max =>
      (_$data['max'] as Input$SavedPerson_max_order_by?);
  Input$SavedPerson_min_order_by? get min =>
      (_$data['min'] as Input$SavedPerson_min_order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] =
          l$count == null ? null : toJson$Enum$order_by(l$count);
    }
    if (_$data.containsKey('max')) {
      final l$max = max;
      result$data['max'] = l$max?.toJson();
    }
    if (_$data.containsKey('min')) {
      final l$min = min;
      result$data['min'] = l$min?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$SavedPerson_aggregate_order_by<
          Input$SavedPerson_aggregate_order_by>
      get copyWith => CopyWith$Input$SavedPerson_aggregate_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SavedPerson_aggregate_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    final l$max = max;
    final lOther$max = other.max;
    if (_$data.containsKey('max') != other._$data.containsKey('max')) {
      return false;
    }
    if (l$max != lOther$max) {
      return false;
    }
    final l$min = min;
    final lOther$min = other.min;
    if (_$data.containsKey('min') != other._$data.containsKey('min')) {
      return false;
    }
    if (l$min != lOther$min) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$count = count;
    final l$max = max;
    final l$min = min;
    return Object.hashAll([
      _$data.containsKey('count') ? l$count : const {},
      _$data.containsKey('max') ? l$max : const {},
      _$data.containsKey('min') ? l$min : const {},
    ]);
  }
}

abstract class CopyWith$Input$SavedPerson_aggregate_order_by<TRes> {
  factory CopyWith$Input$SavedPerson_aggregate_order_by(
    Input$SavedPerson_aggregate_order_by instance,
    TRes Function(Input$SavedPerson_aggregate_order_by) then,
  ) = _CopyWithImpl$Input$SavedPerson_aggregate_order_by;

  factory CopyWith$Input$SavedPerson_aggregate_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$SavedPerson_aggregate_order_by;

  TRes call({
    Enum$order_by? count,
    Input$SavedPerson_max_order_by? max,
    Input$SavedPerson_min_order_by? min,
  });
  CopyWith$Input$SavedPerson_max_order_by<TRes> get max;
  CopyWith$Input$SavedPerson_min_order_by<TRes> get min;
}

class _CopyWithImpl$Input$SavedPerson_aggregate_order_by<TRes>
    implements CopyWith$Input$SavedPerson_aggregate_order_by<TRes> {
  _CopyWithImpl$Input$SavedPerson_aggregate_order_by(
    this._instance,
    this._then,
  );

  final Input$SavedPerson_aggregate_order_by _instance;

  final TRes Function(Input$SavedPerson_aggregate_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? count = _undefined,
    Object? max = _undefined,
    Object? min = _undefined,
  }) =>
      _then(Input$SavedPerson_aggregate_order_by._({
        ..._instance._$data,
        if (count != _undefined) 'count': (count as Enum$order_by?),
        if (max != _undefined) 'max': (max as Input$SavedPerson_max_order_by?),
        if (min != _undefined) 'min': (min as Input$SavedPerson_min_order_by?),
      }));
  CopyWith$Input$SavedPerson_max_order_by<TRes> get max {
    final local$max = _instance.max;
    return local$max == null
        ? CopyWith$Input$SavedPerson_max_order_by.stub(_then(_instance))
        : CopyWith$Input$SavedPerson_max_order_by(
            local$max, (e) => call(max: e));
  }

  CopyWith$Input$SavedPerson_min_order_by<TRes> get min {
    final local$min = _instance.min;
    return local$min == null
        ? CopyWith$Input$SavedPerson_min_order_by.stub(_then(_instance))
        : CopyWith$Input$SavedPerson_min_order_by(
            local$min, (e) => call(min: e));
  }
}

class _CopyWithStubImpl$Input$SavedPerson_aggregate_order_by<TRes>
    implements CopyWith$Input$SavedPerson_aggregate_order_by<TRes> {
  _CopyWithStubImpl$Input$SavedPerson_aggregate_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? count,
    Input$SavedPerson_max_order_by? max,
    Input$SavedPerson_min_order_by? min,
  }) =>
      _res;
  CopyWith$Input$SavedPerson_max_order_by<TRes> get max =>
      CopyWith$Input$SavedPerson_max_order_by.stub(_res);
  CopyWith$Input$SavedPerson_min_order_by<TRes> get min =>
      CopyWith$Input$SavedPerson_min_order_by.stub(_res);
}

class Input$SoulWinningSession_aggregate_order_by {
  factory Input$SoulWinningSession_aggregate_order_by({
    Enum$order_by? count,
    Input$SoulWinningSession_max_order_by? max,
    Input$SoulWinningSession_min_order_by? min,
  }) =>
      Input$SoulWinningSession_aggregate_order_by._({
        if (count != null) r'count': count,
        if (max != null) r'max': max,
        if (min != null) r'min': min,
      });

  Input$SoulWinningSession_aggregate_order_by._(this._$data);

  factory Input$SoulWinningSession_aggregate_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] =
          l$count == null ? null : fromJson$Enum$order_by((l$count as String));
    }
    if (data.containsKey('max')) {
      final l$max = data['max'];
      result$data['max'] = l$max == null
          ? null
          : Input$SoulWinningSession_max_order_by.fromJson(
              (l$max as Map<String, dynamic>));
    }
    if (data.containsKey('min')) {
      final l$min = data['min'];
      result$data['min'] = l$min == null
          ? null
          : Input$SoulWinningSession_min_order_by.fromJson(
              (l$min as Map<String, dynamic>));
    }
    return Input$SoulWinningSession_aggregate_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get count => (_$data['count'] as Enum$order_by?);
  Input$SoulWinningSession_max_order_by? get max =>
      (_$data['max'] as Input$SoulWinningSession_max_order_by?);
  Input$SoulWinningSession_min_order_by? get min =>
      (_$data['min'] as Input$SoulWinningSession_min_order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] =
          l$count == null ? null : toJson$Enum$order_by(l$count);
    }
    if (_$data.containsKey('max')) {
      final l$max = max;
      result$data['max'] = l$max?.toJson();
    }
    if (_$data.containsKey('min')) {
      final l$min = min;
      result$data['min'] = l$min?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$SoulWinningSession_aggregate_order_by<
          Input$SoulWinningSession_aggregate_order_by>
      get copyWith => CopyWith$Input$SoulWinningSession_aggregate_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SoulWinningSession_aggregate_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    final l$max = max;
    final lOther$max = other.max;
    if (_$data.containsKey('max') != other._$data.containsKey('max')) {
      return false;
    }
    if (l$max != lOther$max) {
      return false;
    }
    final l$min = min;
    final lOther$min = other.min;
    if (_$data.containsKey('min') != other._$data.containsKey('min')) {
      return false;
    }
    if (l$min != lOther$min) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$count = count;
    final l$max = max;
    final l$min = min;
    return Object.hashAll([
      _$data.containsKey('count') ? l$count : const {},
      _$data.containsKey('max') ? l$max : const {},
      _$data.containsKey('min') ? l$min : const {},
    ]);
  }
}

abstract class CopyWith$Input$SoulWinningSession_aggregate_order_by<TRes> {
  factory CopyWith$Input$SoulWinningSession_aggregate_order_by(
    Input$SoulWinningSession_aggregate_order_by instance,
    TRes Function(Input$SoulWinningSession_aggregate_order_by) then,
  ) = _CopyWithImpl$Input$SoulWinningSession_aggregate_order_by;

  factory CopyWith$Input$SoulWinningSession_aggregate_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$SoulWinningSession_aggregate_order_by;

  TRes call({
    Enum$order_by? count,
    Input$SoulWinningSession_max_order_by? max,
    Input$SoulWinningSession_min_order_by? min,
  });
  CopyWith$Input$SoulWinningSession_max_order_by<TRes> get max;
  CopyWith$Input$SoulWinningSession_min_order_by<TRes> get min;
}

class _CopyWithImpl$Input$SoulWinningSession_aggregate_order_by<TRes>
    implements CopyWith$Input$SoulWinningSession_aggregate_order_by<TRes> {
  _CopyWithImpl$Input$SoulWinningSession_aggregate_order_by(
    this._instance,
    this._then,
  );

  final Input$SoulWinningSession_aggregate_order_by _instance;

  final TRes Function(Input$SoulWinningSession_aggregate_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? count = _undefined,
    Object? max = _undefined,
    Object? min = _undefined,
  }) =>
      _then(Input$SoulWinningSession_aggregate_order_by._({
        ..._instance._$data,
        if (count != _undefined) 'count': (count as Enum$order_by?),
        if (max != _undefined)
          'max': (max as Input$SoulWinningSession_max_order_by?),
        if (min != _undefined)
          'min': (min as Input$SoulWinningSession_min_order_by?),
      }));
  CopyWith$Input$SoulWinningSession_max_order_by<TRes> get max {
    final local$max = _instance.max;
    return local$max == null
        ? CopyWith$Input$SoulWinningSession_max_order_by.stub(_then(_instance))
        : CopyWith$Input$SoulWinningSession_max_order_by(
            local$max, (e) => call(max: e));
  }

  CopyWith$Input$SoulWinningSession_min_order_by<TRes> get min {
    final local$min = _instance.min;
    return local$min == null
        ? CopyWith$Input$SoulWinningSession_min_order_by.stub(_then(_instance))
        : CopyWith$Input$SoulWinningSession_min_order_by(
            local$min, (e) => call(min: e));
  }
}

class _CopyWithStubImpl$Input$SoulWinningSession_aggregate_order_by<TRes>
    implements CopyWith$Input$SoulWinningSession_aggregate_order_by<TRes> {
  _CopyWithStubImpl$Input$SoulWinningSession_aggregate_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? count,
    Input$SoulWinningSession_max_order_by? max,
    Input$SoulWinningSession_min_order_by? min,
  }) =>
      _res;
  CopyWith$Input$SoulWinningSession_max_order_by<TRes> get max =>
      CopyWith$Input$SoulWinningSession_max_order_by.stub(_res);
  CopyWith$Input$SoulWinningSession_min_order_by<TRes> get min =>
      CopyWith$Input$SoulWinningSession_min_order_by.stub(_res);
}

class Input$SoulWinningSessionGroup_aggregate_order_by {
  factory Input$SoulWinningSessionGroup_aggregate_order_by({
    Enum$order_by? count,
    Input$SoulWinningSessionGroup_max_order_by? max,
    Input$SoulWinningSessionGroup_min_order_by? min,
  }) =>
      Input$SoulWinningSessionGroup_aggregate_order_by._({
        if (count != null) r'count': count,
        if (max != null) r'max': max,
        if (min != null) r'min': min,
      });

  Input$SoulWinningSessionGroup_aggregate_order_by._(this._$data);

  factory Input$SoulWinningSessionGroup_aggregate_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] =
          l$count == null ? null : fromJson$Enum$order_by((l$count as String));
    }
    if (data.containsKey('max')) {
      final l$max = data['max'];
      result$data['max'] = l$max == null
          ? null
          : Input$SoulWinningSessionGroup_max_order_by.fromJson(
              (l$max as Map<String, dynamic>));
    }
    if (data.containsKey('min')) {
      final l$min = data['min'];
      result$data['min'] = l$min == null
          ? null
          : Input$SoulWinningSessionGroup_min_order_by.fromJson(
              (l$min as Map<String, dynamic>));
    }
    return Input$SoulWinningSessionGroup_aggregate_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get count => (_$data['count'] as Enum$order_by?);
  Input$SoulWinningSessionGroup_max_order_by? get max =>
      (_$data['max'] as Input$SoulWinningSessionGroup_max_order_by?);
  Input$SoulWinningSessionGroup_min_order_by? get min =>
      (_$data['min'] as Input$SoulWinningSessionGroup_min_order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] =
          l$count == null ? null : toJson$Enum$order_by(l$count);
    }
    if (_$data.containsKey('max')) {
      final l$max = max;
      result$data['max'] = l$max?.toJson();
    }
    if (_$data.containsKey('min')) {
      final l$min = min;
      result$data['min'] = l$min?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$SoulWinningSessionGroup_aggregate_order_by<
          Input$SoulWinningSessionGroup_aggregate_order_by>
      get copyWith => CopyWith$Input$SoulWinningSessionGroup_aggregate_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SoulWinningSessionGroup_aggregate_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    final l$max = max;
    final lOther$max = other.max;
    if (_$data.containsKey('max') != other._$data.containsKey('max')) {
      return false;
    }
    if (l$max != lOther$max) {
      return false;
    }
    final l$min = min;
    final lOther$min = other.min;
    if (_$data.containsKey('min') != other._$data.containsKey('min')) {
      return false;
    }
    if (l$min != lOther$min) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$count = count;
    final l$max = max;
    final l$min = min;
    return Object.hashAll([
      _$data.containsKey('count') ? l$count : const {},
      _$data.containsKey('max') ? l$max : const {},
      _$data.containsKey('min') ? l$min : const {},
    ]);
  }
}

abstract class CopyWith$Input$SoulWinningSessionGroup_aggregate_order_by<TRes> {
  factory CopyWith$Input$SoulWinningSessionGroup_aggregate_order_by(
    Input$SoulWinningSessionGroup_aggregate_order_by instance,
    TRes Function(Input$SoulWinningSessionGroup_aggregate_order_by) then,
  ) = _CopyWithImpl$Input$SoulWinningSessionGroup_aggregate_order_by;

  factory CopyWith$Input$SoulWinningSessionGroup_aggregate_order_by.stub(
          TRes res) =
      _CopyWithStubImpl$Input$SoulWinningSessionGroup_aggregate_order_by;

  TRes call({
    Enum$order_by? count,
    Input$SoulWinningSessionGroup_max_order_by? max,
    Input$SoulWinningSessionGroup_min_order_by? min,
  });
  CopyWith$Input$SoulWinningSessionGroup_max_order_by<TRes> get max;
  CopyWith$Input$SoulWinningSessionGroup_min_order_by<TRes> get min;
}

class _CopyWithImpl$Input$SoulWinningSessionGroup_aggregate_order_by<TRes>
    implements CopyWith$Input$SoulWinningSessionGroup_aggregate_order_by<TRes> {
  _CopyWithImpl$Input$SoulWinningSessionGroup_aggregate_order_by(
    this._instance,
    this._then,
  );

  final Input$SoulWinningSessionGroup_aggregate_order_by _instance;

  final TRes Function(Input$SoulWinningSessionGroup_aggregate_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? count = _undefined,
    Object? max = _undefined,
    Object? min = _undefined,
  }) =>
      _then(Input$SoulWinningSessionGroup_aggregate_order_by._({
        ..._instance._$data,
        if (count != _undefined) 'count': (count as Enum$order_by?),
        if (max != _undefined)
          'max': (max as Input$SoulWinningSessionGroup_max_order_by?),
        if (min != _undefined)
          'min': (min as Input$SoulWinningSessionGroup_min_order_by?),
      }));
  CopyWith$Input$SoulWinningSessionGroup_max_order_by<TRes> get max {
    final local$max = _instance.max;
    return local$max == null
        ? CopyWith$Input$SoulWinningSessionGroup_max_order_by.stub(
            _then(_instance))
        : CopyWith$Input$SoulWinningSessionGroup_max_order_by(
            local$max, (e) => call(max: e));
  }

  CopyWith$Input$SoulWinningSessionGroup_min_order_by<TRes> get min {
    final local$min = _instance.min;
    return local$min == null
        ? CopyWith$Input$SoulWinningSessionGroup_min_order_by.stub(
            _then(_instance))
        : CopyWith$Input$SoulWinningSessionGroup_min_order_by(
            local$min, (e) => call(min: e));
  }
}

class _CopyWithStubImpl$Input$SoulWinningSessionGroup_aggregate_order_by<TRes>
    implements CopyWith$Input$SoulWinningSessionGroup_aggregate_order_by<TRes> {
  _CopyWithStubImpl$Input$SoulWinningSessionGroup_aggregate_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? count,
    Input$SoulWinningSessionGroup_max_order_by? max,
    Input$SoulWinningSessionGroup_min_order_by? min,
  }) =>
      _res;
  CopyWith$Input$SoulWinningSessionGroup_max_order_by<TRes> get max =>
      CopyWith$Input$SoulWinningSessionGroup_max_order_by.stub(_res);
  CopyWith$Input$SoulWinningSessionGroup_min_order_by<TRes> get min =>
      CopyWith$Input$SoulWinningSessionGroup_min_order_by.stub(_res);
}

class Input$_Organization_adminsOfOrganization_aggregate_order_by {
  factory Input$_Organization_adminsOfOrganization_aggregate_order_by({
    Enum$order_by? count,
    Input$_Organization_adminsOfOrganization_max_order_by? max,
    Input$_Organization_adminsOfOrganization_min_order_by? min,
  }) =>
      Input$_Organization_adminsOfOrganization_aggregate_order_by._({
        if (count != null) r'count': count,
        if (max != null) r'max': max,
        if (min != null) r'min': min,
      });

  Input$_Organization_adminsOfOrganization_aggregate_order_by._(this._$data);

  factory Input$_Organization_adminsOfOrganization_aggregate_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] =
          l$count == null ? null : fromJson$Enum$order_by((l$count as String));
    }
    if (data.containsKey('max')) {
      final l$max = data['max'];
      result$data['max'] = l$max == null
          ? null
          : Input$_Organization_adminsOfOrganization_max_order_by.fromJson(
              (l$max as Map<String, dynamic>));
    }
    if (data.containsKey('min')) {
      final l$min = data['min'];
      result$data['min'] = l$min == null
          ? null
          : Input$_Organization_adminsOfOrganization_min_order_by.fromJson(
              (l$min as Map<String, dynamic>));
    }
    return Input$_Organization_adminsOfOrganization_aggregate_order_by._(
        result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get count => (_$data['count'] as Enum$order_by?);
  Input$_Organization_adminsOfOrganization_max_order_by? get max =>
      (_$data['max'] as Input$_Organization_adminsOfOrganization_max_order_by?);
  Input$_Organization_adminsOfOrganization_min_order_by? get min =>
      (_$data['min'] as Input$_Organization_adminsOfOrganization_min_order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] =
          l$count == null ? null : toJson$Enum$order_by(l$count);
    }
    if (_$data.containsKey('max')) {
      final l$max = max;
      result$data['max'] = l$max?.toJson();
    }
    if (_$data.containsKey('min')) {
      final l$min = min;
      result$data['min'] = l$min?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$_Organization_adminsOfOrganization_aggregate_order_by<
          Input$_Organization_adminsOfOrganization_aggregate_order_by>
      get copyWith =>
          CopyWith$Input$_Organization_adminsOfOrganization_aggregate_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other
            is Input$_Organization_adminsOfOrganization_aggregate_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    final l$max = max;
    final lOther$max = other.max;
    if (_$data.containsKey('max') != other._$data.containsKey('max')) {
      return false;
    }
    if (l$max != lOther$max) {
      return false;
    }
    final l$min = min;
    final lOther$min = other.min;
    if (_$data.containsKey('min') != other._$data.containsKey('min')) {
      return false;
    }
    if (l$min != lOther$min) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$count = count;
    final l$max = max;
    final l$min = min;
    return Object.hashAll([
      _$data.containsKey('count') ? l$count : const {},
      _$data.containsKey('max') ? l$max : const {},
      _$data.containsKey('min') ? l$min : const {},
    ]);
  }
}

abstract class CopyWith$Input$_Organization_adminsOfOrganization_aggregate_order_by<
    TRes> {
  factory CopyWith$Input$_Organization_adminsOfOrganization_aggregate_order_by(
    Input$_Organization_adminsOfOrganization_aggregate_order_by instance,
    TRes Function(Input$_Organization_adminsOfOrganization_aggregate_order_by)
        then,
  ) = _CopyWithImpl$Input$_Organization_adminsOfOrganization_aggregate_order_by;

  factory CopyWith$Input$_Organization_adminsOfOrganization_aggregate_order_by.stub(
          TRes res) =
      _CopyWithStubImpl$Input$_Organization_adminsOfOrganization_aggregate_order_by;

  TRes call({
    Enum$order_by? count,
    Input$_Organization_adminsOfOrganization_max_order_by? max,
    Input$_Organization_adminsOfOrganization_min_order_by? min,
  });
  CopyWith$Input$_Organization_adminsOfOrganization_max_order_by<TRes> get max;
  CopyWith$Input$_Organization_adminsOfOrganization_min_order_by<TRes> get min;
}

class _CopyWithImpl$Input$_Organization_adminsOfOrganization_aggregate_order_by<
        TRes>
    implements
        CopyWith$Input$_Organization_adminsOfOrganization_aggregate_order_by<
            TRes> {
  _CopyWithImpl$Input$_Organization_adminsOfOrganization_aggregate_order_by(
    this._instance,
    this._then,
  );

  final Input$_Organization_adminsOfOrganization_aggregate_order_by _instance;

  final TRes Function(
      Input$_Organization_adminsOfOrganization_aggregate_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? count = _undefined,
    Object? max = _undefined,
    Object? min = _undefined,
  }) =>
      _then(Input$_Organization_adminsOfOrganization_aggregate_order_by._({
        ..._instance._$data,
        if (count != _undefined) 'count': (count as Enum$order_by?),
        if (max != _undefined)
          'max':
              (max as Input$_Organization_adminsOfOrganization_max_order_by?),
        if (min != _undefined)
          'min':
              (min as Input$_Organization_adminsOfOrganization_min_order_by?),
      }));
  CopyWith$Input$_Organization_adminsOfOrganization_max_order_by<TRes> get max {
    final local$max = _instance.max;
    return local$max == null
        ? CopyWith$Input$_Organization_adminsOfOrganization_max_order_by.stub(
            _then(_instance))
        : CopyWith$Input$_Organization_adminsOfOrganization_max_order_by(
            local$max, (e) => call(max: e));
  }

  CopyWith$Input$_Organization_adminsOfOrganization_min_order_by<TRes> get min {
    final local$min = _instance.min;
    return local$min == null
        ? CopyWith$Input$_Organization_adminsOfOrganization_min_order_by.stub(
            _then(_instance))
        : CopyWith$Input$_Organization_adminsOfOrganization_min_order_by(
            local$min, (e) => call(min: e));
  }
}

class _CopyWithStubImpl$Input$_Organization_adminsOfOrganization_aggregate_order_by<
        TRes>
    implements
        CopyWith$Input$_Organization_adminsOfOrganization_aggregate_order_by<
            TRes> {
  _CopyWithStubImpl$Input$_Organization_adminsOfOrganization_aggregate_order_by(
      this._res);

  TRes _res;

  call({
    Enum$order_by? count,
    Input$_Organization_adminsOfOrganization_max_order_by? max,
    Input$_Organization_adminsOfOrganization_min_order_by? min,
  }) =>
      _res;
  CopyWith$Input$_Organization_adminsOfOrganization_max_order_by<TRes>
      get max =>
          CopyWith$Input$_Organization_adminsOfOrganization_max_order_by.stub(
              _res);
  CopyWith$Input$_Organization_adminsOfOrganization_min_order_by<TRes>
      get min =>
          CopyWith$Input$_Organization_adminsOfOrganization_min_order_by.stub(
              _res);
}

class Input$_Organization_membersInOrganization_aggregate_order_by {
  factory Input$_Organization_membersInOrganization_aggregate_order_by({
    Enum$order_by? count,
    Input$_Organization_membersInOrganization_max_order_by? max,
    Input$_Organization_membersInOrganization_min_order_by? min,
  }) =>
      Input$_Organization_membersInOrganization_aggregate_order_by._({
        if (count != null) r'count': count,
        if (max != null) r'max': max,
        if (min != null) r'min': min,
      });

  Input$_Organization_membersInOrganization_aggregate_order_by._(this._$data);

  factory Input$_Organization_membersInOrganization_aggregate_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] =
          l$count == null ? null : fromJson$Enum$order_by((l$count as String));
    }
    if (data.containsKey('max')) {
      final l$max = data['max'];
      result$data['max'] = l$max == null
          ? null
          : Input$_Organization_membersInOrganization_max_order_by.fromJson(
              (l$max as Map<String, dynamic>));
    }
    if (data.containsKey('min')) {
      final l$min = data['min'];
      result$data['min'] = l$min == null
          ? null
          : Input$_Organization_membersInOrganization_min_order_by.fromJson(
              (l$min as Map<String, dynamic>));
    }
    return Input$_Organization_membersInOrganization_aggregate_order_by._(
        result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get count => (_$data['count'] as Enum$order_by?);
  Input$_Organization_membersInOrganization_max_order_by? get max =>
      (_$data['max']
          as Input$_Organization_membersInOrganization_max_order_by?);
  Input$_Organization_membersInOrganization_min_order_by? get min =>
      (_$data['min']
          as Input$_Organization_membersInOrganization_min_order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] =
          l$count == null ? null : toJson$Enum$order_by(l$count);
    }
    if (_$data.containsKey('max')) {
      final l$max = max;
      result$data['max'] = l$max?.toJson();
    }
    if (_$data.containsKey('min')) {
      final l$min = min;
      result$data['min'] = l$min?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$_Organization_membersInOrganization_aggregate_order_by<
          Input$_Organization_membersInOrganization_aggregate_order_by>
      get copyWith =>
          CopyWith$Input$_Organization_membersInOrganization_aggregate_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other
            is Input$_Organization_membersInOrganization_aggregate_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    final l$max = max;
    final lOther$max = other.max;
    if (_$data.containsKey('max') != other._$data.containsKey('max')) {
      return false;
    }
    if (l$max != lOther$max) {
      return false;
    }
    final l$min = min;
    final lOther$min = other.min;
    if (_$data.containsKey('min') != other._$data.containsKey('min')) {
      return false;
    }
    if (l$min != lOther$min) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$count = count;
    final l$max = max;
    final l$min = min;
    return Object.hashAll([
      _$data.containsKey('count') ? l$count : const {},
      _$data.containsKey('max') ? l$max : const {},
      _$data.containsKey('min') ? l$min : const {},
    ]);
  }
}

abstract class CopyWith$Input$_Organization_membersInOrganization_aggregate_order_by<
    TRes> {
  factory CopyWith$Input$_Organization_membersInOrganization_aggregate_order_by(
    Input$_Organization_membersInOrganization_aggregate_order_by instance,
    TRes Function(Input$_Organization_membersInOrganization_aggregate_order_by)
        then,
  ) = _CopyWithImpl$Input$_Organization_membersInOrganization_aggregate_order_by;

  factory CopyWith$Input$_Organization_membersInOrganization_aggregate_order_by.stub(
          TRes res) =
      _CopyWithStubImpl$Input$_Organization_membersInOrganization_aggregate_order_by;

  TRes call({
    Enum$order_by? count,
    Input$_Organization_membersInOrganization_max_order_by? max,
    Input$_Organization_membersInOrganization_min_order_by? min,
  });
  CopyWith$Input$_Organization_membersInOrganization_max_order_by<TRes> get max;
  CopyWith$Input$_Organization_membersInOrganization_min_order_by<TRes> get min;
}

class _CopyWithImpl$Input$_Organization_membersInOrganization_aggregate_order_by<
        TRes>
    implements
        CopyWith$Input$_Organization_membersInOrganization_aggregate_order_by<
            TRes> {
  _CopyWithImpl$Input$_Organization_membersInOrganization_aggregate_order_by(
    this._instance,
    this._then,
  );

  final Input$_Organization_membersInOrganization_aggregate_order_by _instance;

  final TRes Function(
      Input$_Organization_membersInOrganization_aggregate_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? count = _undefined,
    Object? max = _undefined,
    Object? min = _undefined,
  }) =>
      _then(Input$_Organization_membersInOrganization_aggregate_order_by._({
        ..._instance._$data,
        if (count != _undefined) 'count': (count as Enum$order_by?),
        if (max != _undefined)
          'max':
              (max as Input$_Organization_membersInOrganization_max_order_by?),
        if (min != _undefined)
          'min':
              (min as Input$_Organization_membersInOrganization_min_order_by?),
      }));
  CopyWith$Input$_Organization_membersInOrganization_max_order_by<TRes>
      get max {
    final local$max = _instance.max;
    return local$max == null
        ? CopyWith$Input$_Organization_membersInOrganization_max_order_by.stub(
            _then(_instance))
        : CopyWith$Input$_Organization_membersInOrganization_max_order_by(
            local$max, (e) => call(max: e));
  }

  CopyWith$Input$_Organization_membersInOrganization_min_order_by<TRes>
      get min {
    final local$min = _instance.min;
    return local$min == null
        ? CopyWith$Input$_Organization_membersInOrganization_min_order_by.stub(
            _then(_instance))
        : CopyWith$Input$_Organization_membersInOrganization_min_order_by(
            local$min, (e) => call(min: e));
  }
}

class _CopyWithStubImpl$Input$_Organization_membersInOrganization_aggregate_order_by<
        TRes>
    implements
        CopyWith$Input$_Organization_membersInOrganization_aggregate_order_by<
            TRes> {
  _CopyWithStubImpl$Input$_Organization_membersInOrganization_aggregate_order_by(
      this._res);

  TRes _res;

  call({
    Enum$order_by? count,
    Input$_Organization_membersInOrganization_max_order_by? max,
    Input$_Organization_membersInOrganization_min_order_by? min,
  }) =>
      _res;
  CopyWith$Input$_Organization_membersInOrganization_max_order_by<TRes>
      get max =>
          CopyWith$Input$_Organization_membersInOrganization_max_order_by.stub(
              _res);
  CopyWith$Input$_Organization_membersInOrganization_min_order_by<TRes>
      get min =>
          CopyWith$Input$_Organization_membersInOrganization_min_order_by.stub(
              _res);
}

class Input$_SoulWinningSessionGroup_members_aggregate_order_by {
  factory Input$_SoulWinningSessionGroup_members_aggregate_order_by({
    Enum$order_by? count,
    Input$_SoulWinningSessionGroup_members_max_order_by? max,
    Input$_SoulWinningSessionGroup_members_min_order_by? min,
  }) =>
      Input$_SoulWinningSessionGroup_members_aggregate_order_by._({
        if (count != null) r'count': count,
        if (max != null) r'max': max,
        if (min != null) r'min': min,
      });

  Input$_SoulWinningSessionGroup_members_aggregate_order_by._(this._$data);

  factory Input$_SoulWinningSessionGroup_members_aggregate_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] =
          l$count == null ? null : fromJson$Enum$order_by((l$count as String));
    }
    if (data.containsKey('max')) {
      final l$max = data['max'];
      result$data['max'] = l$max == null
          ? null
          : Input$_SoulWinningSessionGroup_members_max_order_by.fromJson(
              (l$max as Map<String, dynamic>));
    }
    if (data.containsKey('min')) {
      final l$min = data['min'];
      result$data['min'] = l$min == null
          ? null
          : Input$_SoulWinningSessionGroup_members_min_order_by.fromJson(
              (l$min as Map<String, dynamic>));
    }
    return Input$_SoulWinningSessionGroup_members_aggregate_order_by._(
        result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get count => (_$data['count'] as Enum$order_by?);
  Input$_SoulWinningSessionGroup_members_max_order_by? get max =>
      (_$data['max'] as Input$_SoulWinningSessionGroup_members_max_order_by?);
  Input$_SoulWinningSessionGroup_members_min_order_by? get min =>
      (_$data['min'] as Input$_SoulWinningSessionGroup_members_min_order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] =
          l$count == null ? null : toJson$Enum$order_by(l$count);
    }
    if (_$data.containsKey('max')) {
      final l$max = max;
      result$data['max'] = l$max?.toJson();
    }
    if (_$data.containsKey('min')) {
      final l$min = min;
      result$data['min'] = l$min?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_order_by<
          Input$_SoulWinningSessionGroup_members_aggregate_order_by>
      get copyWith =>
          CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$_SoulWinningSessionGroup_members_aggregate_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    final l$max = max;
    final lOther$max = other.max;
    if (_$data.containsKey('max') != other._$data.containsKey('max')) {
      return false;
    }
    if (l$max != lOther$max) {
      return false;
    }
    final l$min = min;
    final lOther$min = other.min;
    if (_$data.containsKey('min') != other._$data.containsKey('min')) {
      return false;
    }
    if (l$min != lOther$min) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$count = count;
    final l$max = max;
    final l$min = min;
    return Object.hashAll([
      _$data.containsKey('count') ? l$count : const {},
      _$data.containsKey('max') ? l$max : const {},
      _$data.containsKey('min') ? l$min : const {},
    ]);
  }
}

abstract class CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_order_by<
    TRes> {
  factory CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_order_by(
    Input$_SoulWinningSessionGroup_members_aggregate_order_by instance,
    TRes Function(Input$_SoulWinningSessionGroup_members_aggregate_order_by)
        then,
  ) = _CopyWithImpl$Input$_SoulWinningSessionGroup_members_aggregate_order_by;

  factory CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_order_by.stub(
          TRes res) =
      _CopyWithStubImpl$Input$_SoulWinningSessionGroup_members_aggregate_order_by;

  TRes call({
    Enum$order_by? count,
    Input$_SoulWinningSessionGroup_members_max_order_by? max,
    Input$_SoulWinningSessionGroup_members_min_order_by? min,
  });
  CopyWith$Input$_SoulWinningSessionGroup_members_max_order_by<TRes> get max;
  CopyWith$Input$_SoulWinningSessionGroup_members_min_order_by<TRes> get min;
}

class _CopyWithImpl$Input$_SoulWinningSessionGroup_members_aggregate_order_by<
        TRes>
    implements
        CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_order_by<
            TRes> {
  _CopyWithImpl$Input$_SoulWinningSessionGroup_members_aggregate_order_by(
    this._instance,
    this._then,
  );

  final Input$_SoulWinningSessionGroup_members_aggregate_order_by _instance;

  final TRes Function(Input$_SoulWinningSessionGroup_members_aggregate_order_by)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? count = _undefined,
    Object? max = _undefined,
    Object? min = _undefined,
  }) =>
      _then(Input$_SoulWinningSessionGroup_members_aggregate_order_by._({
        ..._instance._$data,
        if (count != _undefined) 'count': (count as Enum$order_by?),
        if (max != _undefined)
          'max': (max as Input$_SoulWinningSessionGroup_members_max_order_by?),
        if (min != _undefined)
          'min': (min as Input$_SoulWinningSessionGroup_members_min_order_by?),
      }));
  CopyWith$Input$_SoulWinningSessionGroup_members_max_order_by<TRes> get max {
    final local$max = _instance.max;
    return local$max == null
        ? CopyWith$Input$_SoulWinningSessionGroup_members_max_order_by.stub(
            _then(_instance))
        : CopyWith$Input$_SoulWinningSessionGroup_members_max_order_by(
            local$max, (e) => call(max: e));
  }

  CopyWith$Input$_SoulWinningSessionGroup_members_min_order_by<TRes> get min {
    final local$min = _instance.min;
    return local$min == null
        ? CopyWith$Input$_SoulWinningSessionGroup_members_min_order_by.stub(
            _then(_instance))
        : CopyWith$Input$_SoulWinningSessionGroup_members_min_order_by(
            local$min, (e) => call(min: e));
  }
}

class _CopyWithStubImpl$Input$_SoulWinningSessionGroup_members_aggregate_order_by<
        TRes>
    implements
        CopyWith$Input$_SoulWinningSessionGroup_members_aggregate_order_by<
            TRes> {
  _CopyWithStubImpl$Input$_SoulWinningSessionGroup_members_aggregate_order_by(
      this._res);

  TRes _res;

  call({
    Enum$order_by? count,
    Input$_SoulWinningSessionGroup_members_max_order_by? max,
    Input$_SoulWinningSessionGroup_members_min_order_by? min,
  }) =>
      _res;
  CopyWith$Input$_SoulWinningSessionGroup_members_max_order_by<TRes> get max =>
      CopyWith$Input$_SoulWinningSessionGroup_members_max_order_by.stub(_res);
  CopyWith$Input$_SoulWinningSessionGroup_members_min_order_by<TRes> get min =>
      CopyWith$Input$_SoulWinningSessionGroup_members_min_order_by.stub(_res);
}

class Input$Encounter_max_order_by {
  factory Input$Encounter_max_order_by({
    Enum$order_by? encounterTimeInUtc,
    Enum$order_by? group,
    Enum$order_by? houseAddress,
    Enum$order_by? id,
    Enum$order_by? result,
  }) =>
      Input$Encounter_max_order_by._({
        if (encounterTimeInUtc != null)
          r'encounterTimeInUtc': encounterTimeInUtc,
        if (group != null) r'group': group,
        if (houseAddress != null) r'houseAddress': houseAddress,
        if (id != null) r'id': id,
        if (result != null) r'result': result,
      });

  Input$Encounter_max_order_by._(this._$data);

  factory Input$Encounter_max_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('encounterTimeInUtc')) {
      final l$encounterTimeInUtc = data['encounterTimeInUtc'];
      result$data['encounterTimeInUtc'] = l$encounterTimeInUtc == null
          ? null
          : fromJson$Enum$order_by((l$encounterTimeInUtc as String));
    }
    if (data.containsKey('group')) {
      final l$group = data['group'];
      result$data['group'] =
          l$group == null ? null : fromJson$Enum$order_by((l$group as String));
    }
    if (data.containsKey('houseAddress')) {
      final l$houseAddress = data['houseAddress'];
      result$data['houseAddress'] = l$houseAddress == null
          ? null
          : fromJson$Enum$order_by((l$houseAddress as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('result')) {
      final l$result = data['result'];
      result$data['result'] = l$result == null
          ? null
          : fromJson$Enum$order_by((l$result as String));
    }
    return Input$Encounter_max_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get encounterTimeInUtc =>
      (_$data['encounterTimeInUtc'] as Enum$order_by?);
  Enum$order_by? get group => (_$data['group'] as Enum$order_by?);
  Enum$order_by? get houseAddress => (_$data['houseAddress'] as Enum$order_by?);
  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);
  Enum$order_by? get result => (_$data['result'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('encounterTimeInUtc')) {
      final l$encounterTimeInUtc = encounterTimeInUtc;
      result$data['encounterTimeInUtc'] = l$encounterTimeInUtc == null
          ? null
          : toJson$Enum$order_by(l$encounterTimeInUtc);
    }
    if (_$data.containsKey('group')) {
      final l$group = group;
      result$data['group'] =
          l$group == null ? null : toJson$Enum$order_by(l$group);
    }
    if (_$data.containsKey('houseAddress')) {
      final l$houseAddress = houseAddress;
      result$data['houseAddress'] =
          l$houseAddress == null ? null : toJson$Enum$order_by(l$houseAddress);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('result')) {
      final l$result = result;
      result$data['result'] =
          l$result == null ? null : toJson$Enum$order_by(l$result);
    }
    return result$data;
  }

  CopyWith$Input$Encounter_max_order_by<Input$Encounter_max_order_by>
      get copyWith => CopyWith$Input$Encounter_max_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Encounter_max_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$encounterTimeInUtc = encounterTimeInUtc;
    final lOther$encounterTimeInUtc = other.encounterTimeInUtc;
    if (_$data.containsKey('encounterTimeInUtc') !=
        other._$data.containsKey('encounterTimeInUtc')) {
      return false;
    }
    if (l$encounterTimeInUtc != lOther$encounterTimeInUtc) {
      return false;
    }
    final l$group = group;
    final lOther$group = other.group;
    if (_$data.containsKey('group') != other._$data.containsKey('group')) {
      return false;
    }
    if (l$group != lOther$group) {
      return false;
    }
    final l$houseAddress = houseAddress;
    final lOther$houseAddress = other.houseAddress;
    if (_$data.containsKey('houseAddress') !=
        other._$data.containsKey('houseAddress')) {
      return false;
    }
    if (l$houseAddress != lOther$houseAddress) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$result = result;
    final lOther$result = other.result;
    if (_$data.containsKey('result') != other._$data.containsKey('result')) {
      return false;
    }
    if (l$result != lOther$result) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$encounterTimeInUtc = encounterTimeInUtc;
    final l$group = group;
    final l$houseAddress = houseAddress;
    final l$id = id;
    final l$result = result;
    return Object.hashAll([
      _$data.containsKey('encounterTimeInUtc')
          ? l$encounterTimeInUtc
          : const {},
      _$data.containsKey('group') ? l$group : const {},
      _$data.containsKey('houseAddress') ? l$houseAddress : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('result') ? l$result : const {},
    ]);
  }
}

abstract class CopyWith$Input$Encounter_max_order_by<TRes> {
  factory CopyWith$Input$Encounter_max_order_by(
    Input$Encounter_max_order_by instance,
    TRes Function(Input$Encounter_max_order_by) then,
  ) = _CopyWithImpl$Input$Encounter_max_order_by;

  factory CopyWith$Input$Encounter_max_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$Encounter_max_order_by;

  TRes call({
    Enum$order_by? encounterTimeInUtc,
    Enum$order_by? group,
    Enum$order_by? houseAddress,
    Enum$order_by? id,
    Enum$order_by? result,
  });
}

class _CopyWithImpl$Input$Encounter_max_order_by<TRes>
    implements CopyWith$Input$Encounter_max_order_by<TRes> {
  _CopyWithImpl$Input$Encounter_max_order_by(
    this._instance,
    this._then,
  );

  final Input$Encounter_max_order_by _instance;

  final TRes Function(Input$Encounter_max_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? encounterTimeInUtc = _undefined,
    Object? group = _undefined,
    Object? houseAddress = _undefined,
    Object? id = _undefined,
    Object? result = _undefined,
  }) =>
      _then(Input$Encounter_max_order_by._({
        ..._instance._$data,
        if (encounterTimeInUtc != _undefined)
          'encounterTimeInUtc': (encounterTimeInUtc as Enum$order_by?),
        if (group != _undefined) 'group': (group as Enum$order_by?),
        if (houseAddress != _undefined)
          'houseAddress': (houseAddress as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (result != _undefined) 'result': (result as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$Encounter_max_order_by<TRes>
    implements CopyWith$Input$Encounter_max_order_by<TRes> {
  _CopyWithStubImpl$Input$Encounter_max_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? encounterTimeInUtc,
    Enum$order_by? group,
    Enum$order_by? houseAddress,
    Enum$order_by? id,
    Enum$order_by? result,
  }) =>
      _res;
}

class Input$Event_max_order_by {
  factory Input$Event_max_order_by({
    Enum$order_by? coverPhotoUrl,
    Enum$order_by? eventPlan,
    Enum$order_by? id,
    Enum$order_by? name,
    Enum$order_by? organization,
    Enum$order_by? scheduledEndTimeInUtc,
    Enum$order_by? scheduledStartTimeInUtc,
    Enum$order_by? type,
    Enum$order_by? whatToExpect,
  }) =>
      Input$Event_max_order_by._({
        if (coverPhotoUrl != null) r'coverPhotoUrl': coverPhotoUrl,
        if (eventPlan != null) r'eventPlan': eventPlan,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
        if (organization != null) r'organization': organization,
        if (scheduledEndTimeInUtc != null)
          r'scheduledEndTimeInUtc': scheduledEndTimeInUtc,
        if (scheduledStartTimeInUtc != null)
          r'scheduledStartTimeInUtc': scheduledStartTimeInUtc,
        if (type != null) r'type': type,
        if (whatToExpect != null) r'whatToExpect': whatToExpect,
      });

  Input$Event_max_order_by._(this._$data);

  factory Input$Event_max_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('coverPhotoUrl')) {
      final l$coverPhotoUrl = data['coverPhotoUrl'];
      result$data['coverPhotoUrl'] = l$coverPhotoUrl == null
          ? null
          : fromJson$Enum$order_by((l$coverPhotoUrl as String));
    }
    if (data.containsKey('eventPlan')) {
      final l$eventPlan = data['eventPlan'];
      result$data['eventPlan'] = l$eventPlan == null
          ? null
          : fromJson$Enum$order_by((l$eventPlan as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] =
          l$name == null ? null : fromJson$Enum$order_by((l$name as String));
    }
    if (data.containsKey('organization')) {
      final l$organization = data['organization'];
      result$data['organization'] = l$organization == null
          ? null
          : fromJson$Enum$order_by((l$organization as String));
    }
    if (data.containsKey('scheduledEndTimeInUtc')) {
      final l$scheduledEndTimeInUtc = data['scheduledEndTimeInUtc'];
      result$data['scheduledEndTimeInUtc'] = l$scheduledEndTimeInUtc == null
          ? null
          : fromJson$Enum$order_by((l$scheduledEndTimeInUtc as String));
    }
    if (data.containsKey('scheduledStartTimeInUtc')) {
      final l$scheduledStartTimeInUtc = data['scheduledStartTimeInUtc'];
      result$data['scheduledStartTimeInUtc'] = l$scheduledStartTimeInUtc == null
          ? null
          : fromJson$Enum$order_by((l$scheduledStartTimeInUtc as String));
    }
    if (data.containsKey('type')) {
      final l$type = data['type'];
      result$data['type'] =
          l$type == null ? null : fromJson$Enum$order_by((l$type as String));
    }
    if (data.containsKey('whatToExpect')) {
      final l$whatToExpect = data['whatToExpect'];
      result$data['whatToExpect'] = l$whatToExpect == null
          ? null
          : fromJson$Enum$order_by((l$whatToExpect as String));
    }
    return Input$Event_max_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get coverPhotoUrl =>
      (_$data['coverPhotoUrl'] as Enum$order_by?);
  Enum$order_by? get eventPlan => (_$data['eventPlan'] as Enum$order_by?);
  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);
  Enum$order_by? get name => (_$data['name'] as Enum$order_by?);
  Enum$order_by? get organization => (_$data['organization'] as Enum$order_by?);
  Enum$order_by? get scheduledEndTimeInUtc =>
      (_$data['scheduledEndTimeInUtc'] as Enum$order_by?);
  Enum$order_by? get scheduledStartTimeInUtc =>
      (_$data['scheduledStartTimeInUtc'] as Enum$order_by?);
  Enum$order_by? get type => (_$data['type'] as Enum$order_by?);
  Enum$order_by? get whatToExpect => (_$data['whatToExpect'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('coverPhotoUrl')) {
      final l$coverPhotoUrl = coverPhotoUrl;
      result$data['coverPhotoUrl'] = l$coverPhotoUrl == null
          ? null
          : toJson$Enum$order_by(l$coverPhotoUrl);
    }
    if (_$data.containsKey('eventPlan')) {
      final l$eventPlan = eventPlan;
      result$data['eventPlan'] =
          l$eventPlan == null ? null : toJson$Enum$order_by(l$eventPlan);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] =
          l$name == null ? null : toJson$Enum$order_by(l$name);
    }
    if (_$data.containsKey('organization')) {
      final l$organization = organization;
      result$data['organization'] =
          l$organization == null ? null : toJson$Enum$order_by(l$organization);
    }
    if (_$data.containsKey('scheduledEndTimeInUtc')) {
      final l$scheduledEndTimeInUtc = scheduledEndTimeInUtc;
      result$data['scheduledEndTimeInUtc'] = l$scheduledEndTimeInUtc == null
          ? null
          : toJson$Enum$order_by(l$scheduledEndTimeInUtc);
    }
    if (_$data.containsKey('scheduledStartTimeInUtc')) {
      final l$scheduledStartTimeInUtc = scheduledStartTimeInUtc;
      result$data['scheduledStartTimeInUtc'] = l$scheduledStartTimeInUtc == null
          ? null
          : toJson$Enum$order_by(l$scheduledStartTimeInUtc);
    }
    if (_$data.containsKey('type')) {
      final l$type = type;
      result$data['type'] =
          l$type == null ? null : toJson$Enum$order_by(l$type);
    }
    if (_$data.containsKey('whatToExpect')) {
      final l$whatToExpect = whatToExpect;
      result$data['whatToExpect'] =
          l$whatToExpect == null ? null : toJson$Enum$order_by(l$whatToExpect);
    }
    return result$data;
  }

  CopyWith$Input$Event_max_order_by<Input$Event_max_order_by> get copyWith =>
      CopyWith$Input$Event_max_order_by(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Event_max_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$coverPhotoUrl = coverPhotoUrl;
    final lOther$coverPhotoUrl = other.coverPhotoUrl;
    if (_$data.containsKey('coverPhotoUrl') !=
        other._$data.containsKey('coverPhotoUrl')) {
      return false;
    }
    if (l$coverPhotoUrl != lOther$coverPhotoUrl) {
      return false;
    }
    final l$eventPlan = eventPlan;
    final lOther$eventPlan = other.eventPlan;
    if (_$data.containsKey('eventPlan') !=
        other._$data.containsKey('eventPlan')) {
      return false;
    }
    if (l$eventPlan != lOther$eventPlan) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$organization = organization;
    final lOther$organization = other.organization;
    if (_$data.containsKey('organization') !=
        other._$data.containsKey('organization')) {
      return false;
    }
    if (l$organization != lOther$organization) {
      return false;
    }
    final l$scheduledEndTimeInUtc = scheduledEndTimeInUtc;
    final lOther$scheduledEndTimeInUtc = other.scheduledEndTimeInUtc;
    if (_$data.containsKey('scheduledEndTimeInUtc') !=
        other._$data.containsKey('scheduledEndTimeInUtc')) {
      return false;
    }
    if (l$scheduledEndTimeInUtc != lOther$scheduledEndTimeInUtc) {
      return false;
    }
    final l$scheduledStartTimeInUtc = scheduledStartTimeInUtc;
    final lOther$scheduledStartTimeInUtc = other.scheduledStartTimeInUtc;
    if (_$data.containsKey('scheduledStartTimeInUtc') !=
        other._$data.containsKey('scheduledStartTimeInUtc')) {
      return false;
    }
    if (l$scheduledStartTimeInUtc != lOther$scheduledStartTimeInUtc) {
      return false;
    }
    final l$type = type;
    final lOther$type = other.type;
    if (_$data.containsKey('type') != other._$data.containsKey('type')) {
      return false;
    }
    if (l$type != lOther$type) {
      return false;
    }
    final l$whatToExpect = whatToExpect;
    final lOther$whatToExpect = other.whatToExpect;
    if (_$data.containsKey('whatToExpect') !=
        other._$data.containsKey('whatToExpect')) {
      return false;
    }
    if (l$whatToExpect != lOther$whatToExpect) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$coverPhotoUrl = coverPhotoUrl;
    final l$eventPlan = eventPlan;
    final l$id = id;
    final l$name = name;
    final l$organization = organization;
    final l$scheduledEndTimeInUtc = scheduledEndTimeInUtc;
    final l$scheduledStartTimeInUtc = scheduledStartTimeInUtc;
    final l$type = type;
    final l$whatToExpect = whatToExpect;
    return Object.hashAll([
      _$data.containsKey('coverPhotoUrl') ? l$coverPhotoUrl : const {},
      _$data.containsKey('eventPlan') ? l$eventPlan : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('organization') ? l$organization : const {},
      _$data.containsKey('scheduledEndTimeInUtc')
          ? l$scheduledEndTimeInUtc
          : const {},
      _$data.containsKey('scheduledStartTimeInUtc')
          ? l$scheduledStartTimeInUtc
          : const {},
      _$data.containsKey('type') ? l$type : const {},
      _$data.containsKey('whatToExpect') ? l$whatToExpect : const {},
    ]);
  }
}

abstract class CopyWith$Input$Event_max_order_by<TRes> {
  factory CopyWith$Input$Event_max_order_by(
    Input$Event_max_order_by instance,
    TRes Function(Input$Event_max_order_by) then,
  ) = _CopyWithImpl$Input$Event_max_order_by;

  factory CopyWith$Input$Event_max_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$Event_max_order_by;

  TRes call({
    Enum$order_by? coverPhotoUrl,
    Enum$order_by? eventPlan,
    Enum$order_by? id,
    Enum$order_by? name,
    Enum$order_by? organization,
    Enum$order_by? scheduledEndTimeInUtc,
    Enum$order_by? scheduledStartTimeInUtc,
    Enum$order_by? type,
    Enum$order_by? whatToExpect,
  });
}

class _CopyWithImpl$Input$Event_max_order_by<TRes>
    implements CopyWith$Input$Event_max_order_by<TRes> {
  _CopyWithImpl$Input$Event_max_order_by(
    this._instance,
    this._then,
  );

  final Input$Event_max_order_by _instance;

  final TRes Function(Input$Event_max_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? coverPhotoUrl = _undefined,
    Object? eventPlan = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
    Object? organization = _undefined,
    Object? scheduledEndTimeInUtc = _undefined,
    Object? scheduledStartTimeInUtc = _undefined,
    Object? type = _undefined,
    Object? whatToExpect = _undefined,
  }) =>
      _then(Input$Event_max_order_by._({
        ..._instance._$data,
        if (coverPhotoUrl != _undefined)
          'coverPhotoUrl': (coverPhotoUrl as Enum$order_by?),
        if (eventPlan != _undefined) 'eventPlan': (eventPlan as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (name != _undefined) 'name': (name as Enum$order_by?),
        if (organization != _undefined)
          'organization': (organization as Enum$order_by?),
        if (scheduledEndTimeInUtc != _undefined)
          'scheduledEndTimeInUtc': (scheduledEndTimeInUtc as Enum$order_by?),
        if (scheduledStartTimeInUtc != _undefined)
          'scheduledStartTimeInUtc':
              (scheduledStartTimeInUtc as Enum$order_by?),
        if (type != _undefined) 'type': (type as Enum$order_by?),
        if (whatToExpect != _undefined)
          'whatToExpect': (whatToExpect as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$Event_max_order_by<TRes>
    implements CopyWith$Input$Event_max_order_by<TRes> {
  _CopyWithStubImpl$Input$Event_max_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? coverPhotoUrl,
    Enum$order_by? eventPlan,
    Enum$order_by? id,
    Enum$order_by? name,
    Enum$order_by? organization,
    Enum$order_by? scheduledEndTimeInUtc,
    Enum$order_by? scheduledStartTimeInUtc,
    Enum$order_by? type,
    Enum$order_by? whatToExpect,
  }) =>
      _res;
}

class Input$Map_max_order_by {
  factory Input$Map_max_order_by({
    Enum$order_by? belongingOrganization,
    Enum$order_by? id,
    Enum$order_by? name,
  }) =>
      Input$Map_max_order_by._({
        if (belongingOrganization != null)
          r'belongingOrganization': belongingOrganization,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
      });

  Input$Map_max_order_by._(this._$data);

  factory Input$Map_max_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('belongingOrganization')) {
      final l$belongingOrganization = data['belongingOrganization'];
      result$data['belongingOrganization'] = l$belongingOrganization == null
          ? null
          : fromJson$Enum$order_by((l$belongingOrganization as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] =
          l$name == null ? null : fromJson$Enum$order_by((l$name as String));
    }
    return Input$Map_max_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get belongingOrganization =>
      (_$data['belongingOrganization'] as Enum$order_by?);
  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);
  Enum$order_by? get name => (_$data['name'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('belongingOrganization')) {
      final l$belongingOrganization = belongingOrganization;
      result$data['belongingOrganization'] = l$belongingOrganization == null
          ? null
          : toJson$Enum$order_by(l$belongingOrganization);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] =
          l$name == null ? null : toJson$Enum$order_by(l$name);
    }
    return result$data;
  }

  CopyWith$Input$Map_max_order_by<Input$Map_max_order_by> get copyWith =>
      CopyWith$Input$Map_max_order_by(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Map_max_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$belongingOrganization = belongingOrganization;
    final lOther$belongingOrganization = other.belongingOrganization;
    if (_$data.containsKey('belongingOrganization') !=
        other._$data.containsKey('belongingOrganization')) {
      return false;
    }
    if (l$belongingOrganization != lOther$belongingOrganization) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$belongingOrganization = belongingOrganization;
    final l$id = id;
    final l$name = name;
    return Object.hashAll([
      _$data.containsKey('belongingOrganization')
          ? l$belongingOrganization
          : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
    ]);
  }
}

abstract class CopyWith$Input$Map_max_order_by<TRes> {
  factory CopyWith$Input$Map_max_order_by(
    Input$Map_max_order_by instance,
    TRes Function(Input$Map_max_order_by) then,
  ) = _CopyWithImpl$Input$Map_max_order_by;

  factory CopyWith$Input$Map_max_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$Map_max_order_by;

  TRes call({
    Enum$order_by? belongingOrganization,
    Enum$order_by? id,
    Enum$order_by? name,
  });
}

class _CopyWithImpl$Input$Map_max_order_by<TRes>
    implements CopyWith$Input$Map_max_order_by<TRes> {
  _CopyWithImpl$Input$Map_max_order_by(
    this._instance,
    this._then,
  );

  final Input$Map_max_order_by _instance;

  final TRes Function(Input$Map_max_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? belongingOrganization = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
  }) =>
      _then(Input$Map_max_order_by._({
        ..._instance._$data,
        if (belongingOrganization != _undefined)
          'belongingOrganization': (belongingOrganization as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (name != _undefined) 'name': (name as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$Map_max_order_by<TRes>
    implements CopyWith$Input$Map_max_order_by<TRes> {
  _CopyWithStubImpl$Input$Map_max_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? belongingOrganization,
    Enum$order_by? id,
    Enum$order_by? name,
  }) =>
      _res;
}

class Input$MapArea_max_order_by {
  factory Input$MapArea_max_order_by({
    Enum$order_by? belongingMap,
    Enum$order_by? id,
    Enum$order_by? name,
  }) =>
      Input$MapArea_max_order_by._({
        if (belongingMap != null) r'belongingMap': belongingMap,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
      });

  Input$MapArea_max_order_by._(this._$data);

  factory Input$MapArea_max_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('belongingMap')) {
      final l$belongingMap = data['belongingMap'];
      result$data['belongingMap'] = l$belongingMap == null
          ? null
          : fromJson$Enum$order_by((l$belongingMap as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] =
          l$name == null ? null : fromJson$Enum$order_by((l$name as String));
    }
    return Input$MapArea_max_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get belongingMap => (_$data['belongingMap'] as Enum$order_by?);
  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);
  Enum$order_by? get name => (_$data['name'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('belongingMap')) {
      final l$belongingMap = belongingMap;
      result$data['belongingMap'] =
          l$belongingMap == null ? null : toJson$Enum$order_by(l$belongingMap);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] =
          l$name == null ? null : toJson$Enum$order_by(l$name);
    }
    return result$data;
  }

  CopyWith$Input$MapArea_max_order_by<Input$MapArea_max_order_by>
      get copyWith => CopyWith$Input$MapArea_max_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$MapArea_max_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$belongingMap = belongingMap;
    final lOther$belongingMap = other.belongingMap;
    if (_$data.containsKey('belongingMap') !=
        other._$data.containsKey('belongingMap')) {
      return false;
    }
    if (l$belongingMap != lOther$belongingMap) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$belongingMap = belongingMap;
    final l$id = id;
    final l$name = name;
    return Object.hashAll([
      _$data.containsKey('belongingMap') ? l$belongingMap : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
    ]);
  }
}

abstract class CopyWith$Input$MapArea_max_order_by<TRes> {
  factory CopyWith$Input$MapArea_max_order_by(
    Input$MapArea_max_order_by instance,
    TRes Function(Input$MapArea_max_order_by) then,
  ) = _CopyWithImpl$Input$MapArea_max_order_by;

  factory CopyWith$Input$MapArea_max_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$MapArea_max_order_by;

  TRes call({
    Enum$order_by? belongingMap,
    Enum$order_by? id,
    Enum$order_by? name,
  });
}

class _CopyWithImpl$Input$MapArea_max_order_by<TRes>
    implements CopyWith$Input$MapArea_max_order_by<TRes> {
  _CopyWithImpl$Input$MapArea_max_order_by(
    this._instance,
    this._then,
  );

  final Input$MapArea_max_order_by _instance;

  final TRes Function(Input$MapArea_max_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? belongingMap = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
  }) =>
      _then(Input$MapArea_max_order_by._({
        ..._instance._$data,
        if (belongingMap != _undefined)
          'belongingMap': (belongingMap as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (name != _undefined) 'name': (name as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$MapArea_max_order_by<TRes>
    implements CopyWith$Input$MapArea_max_order_by<TRes> {
  _CopyWithStubImpl$Input$MapArea_max_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? belongingMap,
    Enum$order_by? id,
    Enum$order_by? name,
  }) =>
      _res;
}

class Input$SavedPerson_max_order_by {
  factory Input$SavedPerson_max_order_by({
    Enum$order_by? email,
    Enum$order_by? id,
    Enum$order_by? name,
    Enum$order_by? phone,
    Enum$order_by? savingEncounter,
  }) =>
      Input$SavedPerson_max_order_by._({
        if (email != null) r'email': email,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
        if (phone != null) r'phone': phone,
        if (savingEncounter != null) r'savingEncounter': savingEncounter,
      });

  Input$SavedPerson_max_order_by._(this._$data);

  factory Input$SavedPerson_max_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('email')) {
      final l$email = data['email'];
      result$data['email'] =
          l$email == null ? null : fromJson$Enum$order_by((l$email as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] =
          l$name == null ? null : fromJson$Enum$order_by((l$name as String));
    }
    if (data.containsKey('phone')) {
      final l$phone = data['phone'];
      result$data['phone'] =
          l$phone == null ? null : fromJson$Enum$order_by((l$phone as String));
    }
    if (data.containsKey('savingEncounter')) {
      final l$savingEncounter = data['savingEncounter'];
      result$data['savingEncounter'] = l$savingEncounter == null
          ? null
          : fromJson$Enum$order_by((l$savingEncounter as String));
    }
    return Input$SavedPerson_max_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get email => (_$data['email'] as Enum$order_by?);
  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);
  Enum$order_by? get name => (_$data['name'] as Enum$order_by?);
  Enum$order_by? get phone => (_$data['phone'] as Enum$order_by?);
  Enum$order_by? get savingEncounter =>
      (_$data['savingEncounter'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('email')) {
      final l$email = email;
      result$data['email'] =
          l$email == null ? null : toJson$Enum$order_by(l$email);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] =
          l$name == null ? null : toJson$Enum$order_by(l$name);
    }
    if (_$data.containsKey('phone')) {
      final l$phone = phone;
      result$data['phone'] =
          l$phone == null ? null : toJson$Enum$order_by(l$phone);
    }
    if (_$data.containsKey('savingEncounter')) {
      final l$savingEncounter = savingEncounter;
      result$data['savingEncounter'] = l$savingEncounter == null
          ? null
          : toJson$Enum$order_by(l$savingEncounter);
    }
    return result$data;
  }

  CopyWith$Input$SavedPerson_max_order_by<Input$SavedPerson_max_order_by>
      get copyWith => CopyWith$Input$SavedPerson_max_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SavedPerson_max_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$email = email;
    final lOther$email = other.email;
    if (_$data.containsKey('email') != other._$data.containsKey('email')) {
      return false;
    }
    if (l$email != lOther$email) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$phone = phone;
    final lOther$phone = other.phone;
    if (_$data.containsKey('phone') != other._$data.containsKey('phone')) {
      return false;
    }
    if (l$phone != lOther$phone) {
      return false;
    }
    final l$savingEncounter = savingEncounter;
    final lOther$savingEncounter = other.savingEncounter;
    if (_$data.containsKey('savingEncounter') !=
        other._$data.containsKey('savingEncounter')) {
      return false;
    }
    if (l$savingEncounter != lOther$savingEncounter) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$email = email;
    final l$id = id;
    final l$name = name;
    final l$phone = phone;
    final l$savingEncounter = savingEncounter;
    return Object.hashAll([
      _$data.containsKey('email') ? l$email : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('phone') ? l$phone : const {},
      _$data.containsKey('savingEncounter') ? l$savingEncounter : const {},
    ]);
  }
}

abstract class CopyWith$Input$SavedPerson_max_order_by<TRes> {
  factory CopyWith$Input$SavedPerson_max_order_by(
    Input$SavedPerson_max_order_by instance,
    TRes Function(Input$SavedPerson_max_order_by) then,
  ) = _CopyWithImpl$Input$SavedPerson_max_order_by;

  factory CopyWith$Input$SavedPerson_max_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$SavedPerson_max_order_by;

  TRes call({
    Enum$order_by? email,
    Enum$order_by? id,
    Enum$order_by? name,
    Enum$order_by? phone,
    Enum$order_by? savingEncounter,
  });
}

class _CopyWithImpl$Input$SavedPerson_max_order_by<TRes>
    implements CopyWith$Input$SavedPerson_max_order_by<TRes> {
  _CopyWithImpl$Input$SavedPerson_max_order_by(
    this._instance,
    this._then,
  );

  final Input$SavedPerson_max_order_by _instance;

  final TRes Function(Input$SavedPerson_max_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? email = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
    Object? phone = _undefined,
    Object? savingEncounter = _undefined,
  }) =>
      _then(Input$SavedPerson_max_order_by._({
        ..._instance._$data,
        if (email != _undefined) 'email': (email as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (name != _undefined) 'name': (name as Enum$order_by?),
        if (phone != _undefined) 'phone': (phone as Enum$order_by?),
        if (savingEncounter != _undefined)
          'savingEncounter': (savingEncounter as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$SavedPerson_max_order_by<TRes>
    implements CopyWith$Input$SavedPerson_max_order_by<TRes> {
  _CopyWithStubImpl$Input$SavedPerson_max_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? email,
    Enum$order_by? id,
    Enum$order_by? name,
    Enum$order_by? phone,
    Enum$order_by? savingEncounter,
  }) =>
      _res;
}

class Input$SoulWinningSession_max_order_by {
  factory Input$SoulWinningSession_max_order_by({
    Enum$order_by? event,
    Enum$order_by? id,
    Enum$order_by? name,
    Enum$order_by? scheduledEndTimeInUtc,
    Enum$order_by? scheduledStartTimeInUtc,
  }) =>
      Input$SoulWinningSession_max_order_by._({
        if (event != null) r'event': event,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
        if (scheduledEndTimeInUtc != null)
          r'scheduledEndTimeInUtc': scheduledEndTimeInUtc,
        if (scheduledStartTimeInUtc != null)
          r'scheduledStartTimeInUtc': scheduledStartTimeInUtc,
      });

  Input$SoulWinningSession_max_order_by._(this._$data);

  factory Input$SoulWinningSession_max_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('event')) {
      final l$event = data['event'];
      result$data['event'] =
          l$event == null ? null : fromJson$Enum$order_by((l$event as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] =
          l$name == null ? null : fromJson$Enum$order_by((l$name as String));
    }
    if (data.containsKey('scheduledEndTimeInUtc')) {
      final l$scheduledEndTimeInUtc = data['scheduledEndTimeInUtc'];
      result$data['scheduledEndTimeInUtc'] = l$scheduledEndTimeInUtc == null
          ? null
          : fromJson$Enum$order_by((l$scheduledEndTimeInUtc as String));
    }
    if (data.containsKey('scheduledStartTimeInUtc')) {
      final l$scheduledStartTimeInUtc = data['scheduledStartTimeInUtc'];
      result$data['scheduledStartTimeInUtc'] = l$scheduledStartTimeInUtc == null
          ? null
          : fromJson$Enum$order_by((l$scheduledStartTimeInUtc as String));
    }
    return Input$SoulWinningSession_max_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get event => (_$data['event'] as Enum$order_by?);
  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);
  Enum$order_by? get name => (_$data['name'] as Enum$order_by?);
  Enum$order_by? get scheduledEndTimeInUtc =>
      (_$data['scheduledEndTimeInUtc'] as Enum$order_by?);
  Enum$order_by? get scheduledStartTimeInUtc =>
      (_$data['scheduledStartTimeInUtc'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('event')) {
      final l$event = event;
      result$data['event'] =
          l$event == null ? null : toJson$Enum$order_by(l$event);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] =
          l$name == null ? null : toJson$Enum$order_by(l$name);
    }
    if (_$data.containsKey('scheduledEndTimeInUtc')) {
      final l$scheduledEndTimeInUtc = scheduledEndTimeInUtc;
      result$data['scheduledEndTimeInUtc'] = l$scheduledEndTimeInUtc == null
          ? null
          : toJson$Enum$order_by(l$scheduledEndTimeInUtc);
    }
    if (_$data.containsKey('scheduledStartTimeInUtc')) {
      final l$scheduledStartTimeInUtc = scheduledStartTimeInUtc;
      result$data['scheduledStartTimeInUtc'] = l$scheduledStartTimeInUtc == null
          ? null
          : toJson$Enum$order_by(l$scheduledStartTimeInUtc);
    }
    return result$data;
  }

  CopyWith$Input$SoulWinningSession_max_order_by<
          Input$SoulWinningSession_max_order_by>
      get copyWith => CopyWith$Input$SoulWinningSession_max_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SoulWinningSession_max_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$event = event;
    final lOther$event = other.event;
    if (_$data.containsKey('event') != other._$data.containsKey('event')) {
      return false;
    }
    if (l$event != lOther$event) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$scheduledEndTimeInUtc = scheduledEndTimeInUtc;
    final lOther$scheduledEndTimeInUtc = other.scheduledEndTimeInUtc;
    if (_$data.containsKey('scheduledEndTimeInUtc') !=
        other._$data.containsKey('scheduledEndTimeInUtc')) {
      return false;
    }
    if (l$scheduledEndTimeInUtc != lOther$scheduledEndTimeInUtc) {
      return false;
    }
    final l$scheduledStartTimeInUtc = scheduledStartTimeInUtc;
    final lOther$scheduledStartTimeInUtc = other.scheduledStartTimeInUtc;
    if (_$data.containsKey('scheduledStartTimeInUtc') !=
        other._$data.containsKey('scheduledStartTimeInUtc')) {
      return false;
    }
    if (l$scheduledStartTimeInUtc != lOther$scheduledStartTimeInUtc) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$event = event;
    final l$id = id;
    final l$name = name;
    final l$scheduledEndTimeInUtc = scheduledEndTimeInUtc;
    final l$scheduledStartTimeInUtc = scheduledStartTimeInUtc;
    return Object.hashAll([
      _$data.containsKey('event') ? l$event : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('scheduledEndTimeInUtc')
          ? l$scheduledEndTimeInUtc
          : const {},
      _$data.containsKey('scheduledStartTimeInUtc')
          ? l$scheduledStartTimeInUtc
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$SoulWinningSession_max_order_by<TRes> {
  factory CopyWith$Input$SoulWinningSession_max_order_by(
    Input$SoulWinningSession_max_order_by instance,
    TRes Function(Input$SoulWinningSession_max_order_by) then,
  ) = _CopyWithImpl$Input$SoulWinningSession_max_order_by;

  factory CopyWith$Input$SoulWinningSession_max_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$SoulWinningSession_max_order_by;

  TRes call({
    Enum$order_by? event,
    Enum$order_by? id,
    Enum$order_by? name,
    Enum$order_by? scheduledEndTimeInUtc,
    Enum$order_by? scheduledStartTimeInUtc,
  });
}

class _CopyWithImpl$Input$SoulWinningSession_max_order_by<TRes>
    implements CopyWith$Input$SoulWinningSession_max_order_by<TRes> {
  _CopyWithImpl$Input$SoulWinningSession_max_order_by(
    this._instance,
    this._then,
  );

  final Input$SoulWinningSession_max_order_by _instance;

  final TRes Function(Input$SoulWinningSession_max_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? event = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
    Object? scheduledEndTimeInUtc = _undefined,
    Object? scheduledStartTimeInUtc = _undefined,
  }) =>
      _then(Input$SoulWinningSession_max_order_by._({
        ..._instance._$data,
        if (event != _undefined) 'event': (event as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (name != _undefined) 'name': (name as Enum$order_by?),
        if (scheduledEndTimeInUtc != _undefined)
          'scheduledEndTimeInUtc': (scheduledEndTimeInUtc as Enum$order_by?),
        if (scheduledStartTimeInUtc != _undefined)
          'scheduledStartTimeInUtc':
              (scheduledStartTimeInUtc as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$SoulWinningSession_max_order_by<TRes>
    implements CopyWith$Input$SoulWinningSession_max_order_by<TRes> {
  _CopyWithStubImpl$Input$SoulWinningSession_max_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? event,
    Enum$order_by? id,
    Enum$order_by? name,
    Enum$order_by? scheduledEndTimeInUtc,
    Enum$order_by? scheduledStartTimeInUtc,
  }) =>
      _res;
}

class Input$SoulWinningSessionGroup_max_order_by {
  factory Input$SoulWinningSessionGroup_max_order_by({
    Enum$order_by? assignedMapArea,
    Enum$order_by? id,
    Enum$order_by? session,
  }) =>
      Input$SoulWinningSessionGroup_max_order_by._({
        if (assignedMapArea != null) r'assignedMapArea': assignedMapArea,
        if (id != null) r'id': id,
        if (session != null) r'session': session,
      });

  Input$SoulWinningSessionGroup_max_order_by._(this._$data);

  factory Input$SoulWinningSessionGroup_max_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('assignedMapArea')) {
      final l$assignedMapArea = data['assignedMapArea'];
      result$data['assignedMapArea'] = l$assignedMapArea == null
          ? null
          : fromJson$Enum$order_by((l$assignedMapArea as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('session')) {
      final l$session = data['session'];
      result$data['session'] = l$session == null
          ? null
          : fromJson$Enum$order_by((l$session as String));
    }
    return Input$SoulWinningSessionGroup_max_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get assignedMapArea =>
      (_$data['assignedMapArea'] as Enum$order_by?);
  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);
  Enum$order_by? get session => (_$data['session'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('assignedMapArea')) {
      final l$assignedMapArea = assignedMapArea;
      result$data['assignedMapArea'] = l$assignedMapArea == null
          ? null
          : toJson$Enum$order_by(l$assignedMapArea);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('session')) {
      final l$session = session;
      result$data['session'] =
          l$session == null ? null : toJson$Enum$order_by(l$session);
    }
    return result$data;
  }

  CopyWith$Input$SoulWinningSessionGroup_max_order_by<
          Input$SoulWinningSessionGroup_max_order_by>
      get copyWith => CopyWith$Input$SoulWinningSessionGroup_max_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SoulWinningSessionGroup_max_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$assignedMapArea = assignedMapArea;
    final lOther$assignedMapArea = other.assignedMapArea;
    if (_$data.containsKey('assignedMapArea') !=
        other._$data.containsKey('assignedMapArea')) {
      return false;
    }
    if (l$assignedMapArea != lOther$assignedMapArea) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$session = session;
    final lOther$session = other.session;
    if (_$data.containsKey('session') != other._$data.containsKey('session')) {
      return false;
    }
    if (l$session != lOther$session) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$assignedMapArea = assignedMapArea;
    final l$id = id;
    final l$session = session;
    return Object.hashAll([
      _$data.containsKey('assignedMapArea') ? l$assignedMapArea : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('session') ? l$session : const {},
    ]);
  }
}

abstract class CopyWith$Input$SoulWinningSessionGroup_max_order_by<TRes> {
  factory CopyWith$Input$SoulWinningSessionGroup_max_order_by(
    Input$SoulWinningSessionGroup_max_order_by instance,
    TRes Function(Input$SoulWinningSessionGroup_max_order_by) then,
  ) = _CopyWithImpl$Input$SoulWinningSessionGroup_max_order_by;

  factory CopyWith$Input$SoulWinningSessionGroup_max_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$SoulWinningSessionGroup_max_order_by;

  TRes call({
    Enum$order_by? assignedMapArea,
    Enum$order_by? id,
    Enum$order_by? session,
  });
}

class _CopyWithImpl$Input$SoulWinningSessionGroup_max_order_by<TRes>
    implements CopyWith$Input$SoulWinningSessionGroup_max_order_by<TRes> {
  _CopyWithImpl$Input$SoulWinningSessionGroup_max_order_by(
    this._instance,
    this._then,
  );

  final Input$SoulWinningSessionGroup_max_order_by _instance;

  final TRes Function(Input$SoulWinningSessionGroup_max_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? assignedMapArea = _undefined,
    Object? id = _undefined,
    Object? session = _undefined,
  }) =>
      _then(Input$SoulWinningSessionGroup_max_order_by._({
        ..._instance._$data,
        if (assignedMapArea != _undefined)
          'assignedMapArea': (assignedMapArea as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (session != _undefined) 'session': (session as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$SoulWinningSessionGroup_max_order_by<TRes>
    implements CopyWith$Input$SoulWinningSessionGroup_max_order_by<TRes> {
  _CopyWithStubImpl$Input$SoulWinningSessionGroup_max_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? assignedMapArea,
    Enum$order_by? id,
    Enum$order_by? session,
  }) =>
      _res;
}

class Input$_Organization_adminsOfOrganization_max_order_by {
  factory Input$_Organization_adminsOfOrganization_max_order_by({
    Enum$order_by? A,
    Enum$order_by? B,
  }) =>
      Input$_Organization_adminsOfOrganization_max_order_by._({
        if (A != null) r'A': A,
        if (B != null) r'B': B,
      });

  Input$_Organization_adminsOfOrganization_max_order_by._(this._$data);

  factory Input$_Organization_adminsOfOrganization_max_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('A')) {
      final l$A = data['A'];
      result$data['A'] =
          l$A == null ? null : fromJson$Enum$order_by((l$A as String));
    }
    if (data.containsKey('B')) {
      final l$B = data['B'];
      result$data['B'] =
          l$B == null ? null : fromJson$Enum$order_by((l$B as String));
    }
    return Input$_Organization_adminsOfOrganization_max_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get A => (_$data['A'] as Enum$order_by?);
  Enum$order_by? get B => (_$data['B'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('A')) {
      final l$A = A;
      result$data['A'] = l$A == null ? null : toJson$Enum$order_by(l$A);
    }
    if (_$data.containsKey('B')) {
      final l$B = B;
      result$data['B'] = l$B == null ? null : toJson$Enum$order_by(l$B);
    }
    return result$data;
  }

  CopyWith$Input$_Organization_adminsOfOrganization_max_order_by<
          Input$_Organization_adminsOfOrganization_max_order_by>
      get copyWith =>
          CopyWith$Input$_Organization_adminsOfOrganization_max_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$_Organization_adminsOfOrganization_max_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$A = A;
    final lOther$A = other.A;
    if (_$data.containsKey('A') != other._$data.containsKey('A')) {
      return false;
    }
    if (l$A != lOther$A) {
      return false;
    }
    final l$B = B;
    final lOther$B = other.B;
    if (_$data.containsKey('B') != other._$data.containsKey('B')) {
      return false;
    }
    if (l$B != lOther$B) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$A = A;
    final l$B = B;
    return Object.hashAll([
      _$data.containsKey('A') ? l$A : const {},
      _$data.containsKey('B') ? l$B : const {},
    ]);
  }
}

abstract class CopyWith$Input$_Organization_adminsOfOrganization_max_order_by<
    TRes> {
  factory CopyWith$Input$_Organization_adminsOfOrganization_max_order_by(
    Input$_Organization_adminsOfOrganization_max_order_by instance,
    TRes Function(Input$_Organization_adminsOfOrganization_max_order_by) then,
  ) = _CopyWithImpl$Input$_Organization_adminsOfOrganization_max_order_by;

  factory CopyWith$Input$_Organization_adminsOfOrganization_max_order_by.stub(
          TRes res) =
      _CopyWithStubImpl$Input$_Organization_adminsOfOrganization_max_order_by;

  TRes call({
    Enum$order_by? A,
    Enum$order_by? B,
  });
}

class _CopyWithImpl$Input$_Organization_adminsOfOrganization_max_order_by<TRes>
    implements
        CopyWith$Input$_Organization_adminsOfOrganization_max_order_by<TRes> {
  _CopyWithImpl$Input$_Organization_adminsOfOrganization_max_order_by(
    this._instance,
    this._then,
  );

  final Input$_Organization_adminsOfOrganization_max_order_by _instance;

  final TRes Function(Input$_Organization_adminsOfOrganization_max_order_by)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? A = _undefined,
    Object? B = _undefined,
  }) =>
      _then(Input$_Organization_adminsOfOrganization_max_order_by._({
        ..._instance._$data,
        if (A != _undefined) 'A': (A as Enum$order_by?),
        if (B != _undefined) 'B': (B as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$_Organization_adminsOfOrganization_max_order_by<
        TRes>
    implements
        CopyWith$Input$_Organization_adminsOfOrganization_max_order_by<TRes> {
  _CopyWithStubImpl$Input$_Organization_adminsOfOrganization_max_order_by(
      this._res);

  TRes _res;

  call({
    Enum$order_by? A,
    Enum$order_by? B,
  }) =>
      _res;
}

class Input$_Organization_membersInOrganization_max_order_by {
  factory Input$_Organization_membersInOrganization_max_order_by({
    Enum$order_by? A,
    Enum$order_by? B,
  }) =>
      Input$_Organization_membersInOrganization_max_order_by._({
        if (A != null) r'A': A,
        if (B != null) r'B': B,
      });

  Input$_Organization_membersInOrganization_max_order_by._(this._$data);

  factory Input$_Organization_membersInOrganization_max_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('A')) {
      final l$A = data['A'];
      result$data['A'] =
          l$A == null ? null : fromJson$Enum$order_by((l$A as String));
    }
    if (data.containsKey('B')) {
      final l$B = data['B'];
      result$data['B'] =
          l$B == null ? null : fromJson$Enum$order_by((l$B as String));
    }
    return Input$_Organization_membersInOrganization_max_order_by._(
        result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get A => (_$data['A'] as Enum$order_by?);
  Enum$order_by? get B => (_$data['B'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('A')) {
      final l$A = A;
      result$data['A'] = l$A == null ? null : toJson$Enum$order_by(l$A);
    }
    if (_$data.containsKey('B')) {
      final l$B = B;
      result$data['B'] = l$B == null ? null : toJson$Enum$order_by(l$B);
    }
    return result$data;
  }

  CopyWith$Input$_Organization_membersInOrganization_max_order_by<
          Input$_Organization_membersInOrganization_max_order_by>
      get copyWith =>
          CopyWith$Input$_Organization_membersInOrganization_max_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$_Organization_membersInOrganization_max_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$A = A;
    final lOther$A = other.A;
    if (_$data.containsKey('A') != other._$data.containsKey('A')) {
      return false;
    }
    if (l$A != lOther$A) {
      return false;
    }
    final l$B = B;
    final lOther$B = other.B;
    if (_$data.containsKey('B') != other._$data.containsKey('B')) {
      return false;
    }
    if (l$B != lOther$B) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$A = A;
    final l$B = B;
    return Object.hashAll([
      _$data.containsKey('A') ? l$A : const {},
      _$data.containsKey('B') ? l$B : const {},
    ]);
  }
}

abstract class CopyWith$Input$_Organization_membersInOrganization_max_order_by<
    TRes> {
  factory CopyWith$Input$_Organization_membersInOrganization_max_order_by(
    Input$_Organization_membersInOrganization_max_order_by instance,
    TRes Function(Input$_Organization_membersInOrganization_max_order_by) then,
  ) = _CopyWithImpl$Input$_Organization_membersInOrganization_max_order_by;

  factory CopyWith$Input$_Organization_membersInOrganization_max_order_by.stub(
          TRes res) =
      _CopyWithStubImpl$Input$_Organization_membersInOrganization_max_order_by;

  TRes call({
    Enum$order_by? A,
    Enum$order_by? B,
  });
}

class _CopyWithImpl$Input$_Organization_membersInOrganization_max_order_by<TRes>
    implements
        CopyWith$Input$_Organization_membersInOrganization_max_order_by<TRes> {
  _CopyWithImpl$Input$_Organization_membersInOrganization_max_order_by(
    this._instance,
    this._then,
  );

  final Input$_Organization_membersInOrganization_max_order_by _instance;

  final TRes Function(Input$_Organization_membersInOrganization_max_order_by)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? A = _undefined,
    Object? B = _undefined,
  }) =>
      _then(Input$_Organization_membersInOrganization_max_order_by._({
        ..._instance._$data,
        if (A != _undefined) 'A': (A as Enum$order_by?),
        if (B != _undefined) 'B': (B as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$_Organization_membersInOrganization_max_order_by<
        TRes>
    implements
        CopyWith$Input$_Organization_membersInOrganization_max_order_by<TRes> {
  _CopyWithStubImpl$Input$_Organization_membersInOrganization_max_order_by(
      this._res);

  TRes _res;

  call({
    Enum$order_by? A,
    Enum$order_by? B,
  }) =>
      _res;
}

class Input$_SoulWinningSessionGroup_members_max_order_by {
  factory Input$_SoulWinningSessionGroup_members_max_order_by({
    Enum$order_by? A,
    Enum$order_by? B,
  }) =>
      Input$_SoulWinningSessionGroup_members_max_order_by._({
        if (A != null) r'A': A,
        if (B != null) r'B': B,
      });

  Input$_SoulWinningSessionGroup_members_max_order_by._(this._$data);

  factory Input$_SoulWinningSessionGroup_members_max_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('A')) {
      final l$A = data['A'];
      result$data['A'] =
          l$A == null ? null : fromJson$Enum$order_by((l$A as String));
    }
    if (data.containsKey('B')) {
      final l$B = data['B'];
      result$data['B'] =
          l$B == null ? null : fromJson$Enum$order_by((l$B as String));
    }
    return Input$_SoulWinningSessionGroup_members_max_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get A => (_$data['A'] as Enum$order_by?);
  Enum$order_by? get B => (_$data['B'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('A')) {
      final l$A = A;
      result$data['A'] = l$A == null ? null : toJson$Enum$order_by(l$A);
    }
    if (_$data.containsKey('B')) {
      final l$B = B;
      result$data['B'] = l$B == null ? null : toJson$Enum$order_by(l$B);
    }
    return result$data;
  }

  CopyWith$Input$_SoulWinningSessionGroup_members_max_order_by<
          Input$_SoulWinningSessionGroup_members_max_order_by>
      get copyWith =>
          CopyWith$Input$_SoulWinningSessionGroup_members_max_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$_SoulWinningSessionGroup_members_max_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$A = A;
    final lOther$A = other.A;
    if (_$data.containsKey('A') != other._$data.containsKey('A')) {
      return false;
    }
    if (l$A != lOther$A) {
      return false;
    }
    final l$B = B;
    final lOther$B = other.B;
    if (_$data.containsKey('B') != other._$data.containsKey('B')) {
      return false;
    }
    if (l$B != lOther$B) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$A = A;
    final l$B = B;
    return Object.hashAll([
      _$data.containsKey('A') ? l$A : const {},
      _$data.containsKey('B') ? l$B : const {},
    ]);
  }
}

abstract class CopyWith$Input$_SoulWinningSessionGroup_members_max_order_by<
    TRes> {
  factory CopyWith$Input$_SoulWinningSessionGroup_members_max_order_by(
    Input$_SoulWinningSessionGroup_members_max_order_by instance,
    TRes Function(Input$_SoulWinningSessionGroup_members_max_order_by) then,
  ) = _CopyWithImpl$Input$_SoulWinningSessionGroup_members_max_order_by;

  factory CopyWith$Input$_SoulWinningSessionGroup_members_max_order_by.stub(
          TRes res) =
      _CopyWithStubImpl$Input$_SoulWinningSessionGroup_members_max_order_by;

  TRes call({
    Enum$order_by? A,
    Enum$order_by? B,
  });
}

class _CopyWithImpl$Input$_SoulWinningSessionGroup_members_max_order_by<TRes>
    implements
        CopyWith$Input$_SoulWinningSessionGroup_members_max_order_by<TRes> {
  _CopyWithImpl$Input$_SoulWinningSessionGroup_members_max_order_by(
    this._instance,
    this._then,
  );

  final Input$_SoulWinningSessionGroup_members_max_order_by _instance;

  final TRes Function(Input$_SoulWinningSessionGroup_members_max_order_by)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? A = _undefined,
    Object? B = _undefined,
  }) =>
      _then(Input$_SoulWinningSessionGroup_members_max_order_by._({
        ..._instance._$data,
        if (A != _undefined) 'A': (A as Enum$order_by?),
        if (B != _undefined) 'B': (B as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$_SoulWinningSessionGroup_members_max_order_by<
        TRes>
    implements
        CopyWith$Input$_SoulWinningSessionGroup_members_max_order_by<TRes> {
  _CopyWithStubImpl$Input$_SoulWinningSessionGroup_members_max_order_by(
      this._res);

  TRes _res;

  call({
    Enum$order_by? A,
    Enum$order_by? B,
  }) =>
      _res;
}

class Input$Encounter_min_order_by {
  factory Input$Encounter_min_order_by({
    Enum$order_by? encounterTimeInUtc,
    Enum$order_by? group,
    Enum$order_by? houseAddress,
    Enum$order_by? id,
    Enum$order_by? result,
  }) =>
      Input$Encounter_min_order_by._({
        if (encounterTimeInUtc != null)
          r'encounterTimeInUtc': encounterTimeInUtc,
        if (group != null) r'group': group,
        if (houseAddress != null) r'houseAddress': houseAddress,
        if (id != null) r'id': id,
        if (result != null) r'result': result,
      });

  Input$Encounter_min_order_by._(this._$data);

  factory Input$Encounter_min_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('encounterTimeInUtc')) {
      final l$encounterTimeInUtc = data['encounterTimeInUtc'];
      result$data['encounterTimeInUtc'] = l$encounterTimeInUtc == null
          ? null
          : fromJson$Enum$order_by((l$encounterTimeInUtc as String));
    }
    if (data.containsKey('group')) {
      final l$group = data['group'];
      result$data['group'] =
          l$group == null ? null : fromJson$Enum$order_by((l$group as String));
    }
    if (data.containsKey('houseAddress')) {
      final l$houseAddress = data['houseAddress'];
      result$data['houseAddress'] = l$houseAddress == null
          ? null
          : fromJson$Enum$order_by((l$houseAddress as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('result')) {
      final l$result = data['result'];
      result$data['result'] = l$result == null
          ? null
          : fromJson$Enum$order_by((l$result as String));
    }
    return Input$Encounter_min_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get encounterTimeInUtc =>
      (_$data['encounterTimeInUtc'] as Enum$order_by?);
  Enum$order_by? get group => (_$data['group'] as Enum$order_by?);
  Enum$order_by? get houseAddress => (_$data['houseAddress'] as Enum$order_by?);
  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);
  Enum$order_by? get result => (_$data['result'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('encounterTimeInUtc')) {
      final l$encounterTimeInUtc = encounterTimeInUtc;
      result$data['encounterTimeInUtc'] = l$encounterTimeInUtc == null
          ? null
          : toJson$Enum$order_by(l$encounterTimeInUtc);
    }
    if (_$data.containsKey('group')) {
      final l$group = group;
      result$data['group'] =
          l$group == null ? null : toJson$Enum$order_by(l$group);
    }
    if (_$data.containsKey('houseAddress')) {
      final l$houseAddress = houseAddress;
      result$data['houseAddress'] =
          l$houseAddress == null ? null : toJson$Enum$order_by(l$houseAddress);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('result')) {
      final l$result = result;
      result$data['result'] =
          l$result == null ? null : toJson$Enum$order_by(l$result);
    }
    return result$data;
  }

  CopyWith$Input$Encounter_min_order_by<Input$Encounter_min_order_by>
      get copyWith => CopyWith$Input$Encounter_min_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Encounter_min_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$encounterTimeInUtc = encounterTimeInUtc;
    final lOther$encounterTimeInUtc = other.encounterTimeInUtc;
    if (_$data.containsKey('encounterTimeInUtc') !=
        other._$data.containsKey('encounterTimeInUtc')) {
      return false;
    }
    if (l$encounterTimeInUtc != lOther$encounterTimeInUtc) {
      return false;
    }
    final l$group = group;
    final lOther$group = other.group;
    if (_$data.containsKey('group') != other._$data.containsKey('group')) {
      return false;
    }
    if (l$group != lOther$group) {
      return false;
    }
    final l$houseAddress = houseAddress;
    final lOther$houseAddress = other.houseAddress;
    if (_$data.containsKey('houseAddress') !=
        other._$data.containsKey('houseAddress')) {
      return false;
    }
    if (l$houseAddress != lOther$houseAddress) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$result = result;
    final lOther$result = other.result;
    if (_$data.containsKey('result') != other._$data.containsKey('result')) {
      return false;
    }
    if (l$result != lOther$result) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$encounterTimeInUtc = encounterTimeInUtc;
    final l$group = group;
    final l$houseAddress = houseAddress;
    final l$id = id;
    final l$result = result;
    return Object.hashAll([
      _$data.containsKey('encounterTimeInUtc')
          ? l$encounterTimeInUtc
          : const {},
      _$data.containsKey('group') ? l$group : const {},
      _$data.containsKey('houseAddress') ? l$houseAddress : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('result') ? l$result : const {},
    ]);
  }
}

abstract class CopyWith$Input$Encounter_min_order_by<TRes> {
  factory CopyWith$Input$Encounter_min_order_by(
    Input$Encounter_min_order_by instance,
    TRes Function(Input$Encounter_min_order_by) then,
  ) = _CopyWithImpl$Input$Encounter_min_order_by;

  factory CopyWith$Input$Encounter_min_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$Encounter_min_order_by;

  TRes call({
    Enum$order_by? encounterTimeInUtc,
    Enum$order_by? group,
    Enum$order_by? houseAddress,
    Enum$order_by? id,
    Enum$order_by? result,
  });
}

class _CopyWithImpl$Input$Encounter_min_order_by<TRes>
    implements CopyWith$Input$Encounter_min_order_by<TRes> {
  _CopyWithImpl$Input$Encounter_min_order_by(
    this._instance,
    this._then,
  );

  final Input$Encounter_min_order_by _instance;

  final TRes Function(Input$Encounter_min_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? encounterTimeInUtc = _undefined,
    Object? group = _undefined,
    Object? houseAddress = _undefined,
    Object? id = _undefined,
    Object? result = _undefined,
  }) =>
      _then(Input$Encounter_min_order_by._({
        ..._instance._$data,
        if (encounterTimeInUtc != _undefined)
          'encounterTimeInUtc': (encounterTimeInUtc as Enum$order_by?),
        if (group != _undefined) 'group': (group as Enum$order_by?),
        if (houseAddress != _undefined)
          'houseAddress': (houseAddress as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (result != _undefined) 'result': (result as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$Encounter_min_order_by<TRes>
    implements CopyWith$Input$Encounter_min_order_by<TRes> {
  _CopyWithStubImpl$Input$Encounter_min_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? encounterTimeInUtc,
    Enum$order_by? group,
    Enum$order_by? houseAddress,
    Enum$order_by? id,
    Enum$order_by? result,
  }) =>
      _res;
}

class Input$Event_min_order_by {
  factory Input$Event_min_order_by({
    Enum$order_by? coverPhotoUrl,
    Enum$order_by? eventPlan,
    Enum$order_by? id,
    Enum$order_by? name,
    Enum$order_by? organization,
    Enum$order_by? scheduledEndTimeInUtc,
    Enum$order_by? scheduledStartTimeInUtc,
    Enum$order_by? type,
    Enum$order_by? whatToExpect,
  }) =>
      Input$Event_min_order_by._({
        if (coverPhotoUrl != null) r'coverPhotoUrl': coverPhotoUrl,
        if (eventPlan != null) r'eventPlan': eventPlan,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
        if (organization != null) r'organization': organization,
        if (scheduledEndTimeInUtc != null)
          r'scheduledEndTimeInUtc': scheduledEndTimeInUtc,
        if (scheduledStartTimeInUtc != null)
          r'scheduledStartTimeInUtc': scheduledStartTimeInUtc,
        if (type != null) r'type': type,
        if (whatToExpect != null) r'whatToExpect': whatToExpect,
      });

  Input$Event_min_order_by._(this._$data);

  factory Input$Event_min_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('coverPhotoUrl')) {
      final l$coverPhotoUrl = data['coverPhotoUrl'];
      result$data['coverPhotoUrl'] = l$coverPhotoUrl == null
          ? null
          : fromJson$Enum$order_by((l$coverPhotoUrl as String));
    }
    if (data.containsKey('eventPlan')) {
      final l$eventPlan = data['eventPlan'];
      result$data['eventPlan'] = l$eventPlan == null
          ? null
          : fromJson$Enum$order_by((l$eventPlan as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] =
          l$name == null ? null : fromJson$Enum$order_by((l$name as String));
    }
    if (data.containsKey('organization')) {
      final l$organization = data['organization'];
      result$data['organization'] = l$organization == null
          ? null
          : fromJson$Enum$order_by((l$organization as String));
    }
    if (data.containsKey('scheduledEndTimeInUtc')) {
      final l$scheduledEndTimeInUtc = data['scheduledEndTimeInUtc'];
      result$data['scheduledEndTimeInUtc'] = l$scheduledEndTimeInUtc == null
          ? null
          : fromJson$Enum$order_by((l$scheduledEndTimeInUtc as String));
    }
    if (data.containsKey('scheduledStartTimeInUtc')) {
      final l$scheduledStartTimeInUtc = data['scheduledStartTimeInUtc'];
      result$data['scheduledStartTimeInUtc'] = l$scheduledStartTimeInUtc == null
          ? null
          : fromJson$Enum$order_by((l$scheduledStartTimeInUtc as String));
    }
    if (data.containsKey('type')) {
      final l$type = data['type'];
      result$data['type'] =
          l$type == null ? null : fromJson$Enum$order_by((l$type as String));
    }
    if (data.containsKey('whatToExpect')) {
      final l$whatToExpect = data['whatToExpect'];
      result$data['whatToExpect'] = l$whatToExpect == null
          ? null
          : fromJson$Enum$order_by((l$whatToExpect as String));
    }
    return Input$Event_min_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get coverPhotoUrl =>
      (_$data['coverPhotoUrl'] as Enum$order_by?);
  Enum$order_by? get eventPlan => (_$data['eventPlan'] as Enum$order_by?);
  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);
  Enum$order_by? get name => (_$data['name'] as Enum$order_by?);
  Enum$order_by? get organization => (_$data['organization'] as Enum$order_by?);
  Enum$order_by? get scheduledEndTimeInUtc =>
      (_$data['scheduledEndTimeInUtc'] as Enum$order_by?);
  Enum$order_by? get scheduledStartTimeInUtc =>
      (_$data['scheduledStartTimeInUtc'] as Enum$order_by?);
  Enum$order_by? get type => (_$data['type'] as Enum$order_by?);
  Enum$order_by? get whatToExpect => (_$data['whatToExpect'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('coverPhotoUrl')) {
      final l$coverPhotoUrl = coverPhotoUrl;
      result$data['coverPhotoUrl'] = l$coverPhotoUrl == null
          ? null
          : toJson$Enum$order_by(l$coverPhotoUrl);
    }
    if (_$data.containsKey('eventPlan')) {
      final l$eventPlan = eventPlan;
      result$data['eventPlan'] =
          l$eventPlan == null ? null : toJson$Enum$order_by(l$eventPlan);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] =
          l$name == null ? null : toJson$Enum$order_by(l$name);
    }
    if (_$data.containsKey('organization')) {
      final l$organization = organization;
      result$data['organization'] =
          l$organization == null ? null : toJson$Enum$order_by(l$organization);
    }
    if (_$data.containsKey('scheduledEndTimeInUtc')) {
      final l$scheduledEndTimeInUtc = scheduledEndTimeInUtc;
      result$data['scheduledEndTimeInUtc'] = l$scheduledEndTimeInUtc == null
          ? null
          : toJson$Enum$order_by(l$scheduledEndTimeInUtc);
    }
    if (_$data.containsKey('scheduledStartTimeInUtc')) {
      final l$scheduledStartTimeInUtc = scheduledStartTimeInUtc;
      result$data['scheduledStartTimeInUtc'] = l$scheduledStartTimeInUtc == null
          ? null
          : toJson$Enum$order_by(l$scheduledStartTimeInUtc);
    }
    if (_$data.containsKey('type')) {
      final l$type = type;
      result$data['type'] =
          l$type == null ? null : toJson$Enum$order_by(l$type);
    }
    if (_$data.containsKey('whatToExpect')) {
      final l$whatToExpect = whatToExpect;
      result$data['whatToExpect'] =
          l$whatToExpect == null ? null : toJson$Enum$order_by(l$whatToExpect);
    }
    return result$data;
  }

  CopyWith$Input$Event_min_order_by<Input$Event_min_order_by> get copyWith =>
      CopyWith$Input$Event_min_order_by(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Event_min_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$coverPhotoUrl = coverPhotoUrl;
    final lOther$coverPhotoUrl = other.coverPhotoUrl;
    if (_$data.containsKey('coverPhotoUrl') !=
        other._$data.containsKey('coverPhotoUrl')) {
      return false;
    }
    if (l$coverPhotoUrl != lOther$coverPhotoUrl) {
      return false;
    }
    final l$eventPlan = eventPlan;
    final lOther$eventPlan = other.eventPlan;
    if (_$data.containsKey('eventPlan') !=
        other._$data.containsKey('eventPlan')) {
      return false;
    }
    if (l$eventPlan != lOther$eventPlan) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$organization = organization;
    final lOther$organization = other.organization;
    if (_$data.containsKey('organization') !=
        other._$data.containsKey('organization')) {
      return false;
    }
    if (l$organization != lOther$organization) {
      return false;
    }
    final l$scheduledEndTimeInUtc = scheduledEndTimeInUtc;
    final lOther$scheduledEndTimeInUtc = other.scheduledEndTimeInUtc;
    if (_$data.containsKey('scheduledEndTimeInUtc') !=
        other._$data.containsKey('scheduledEndTimeInUtc')) {
      return false;
    }
    if (l$scheduledEndTimeInUtc != lOther$scheduledEndTimeInUtc) {
      return false;
    }
    final l$scheduledStartTimeInUtc = scheduledStartTimeInUtc;
    final lOther$scheduledStartTimeInUtc = other.scheduledStartTimeInUtc;
    if (_$data.containsKey('scheduledStartTimeInUtc') !=
        other._$data.containsKey('scheduledStartTimeInUtc')) {
      return false;
    }
    if (l$scheduledStartTimeInUtc != lOther$scheduledStartTimeInUtc) {
      return false;
    }
    final l$type = type;
    final lOther$type = other.type;
    if (_$data.containsKey('type') != other._$data.containsKey('type')) {
      return false;
    }
    if (l$type != lOther$type) {
      return false;
    }
    final l$whatToExpect = whatToExpect;
    final lOther$whatToExpect = other.whatToExpect;
    if (_$data.containsKey('whatToExpect') !=
        other._$data.containsKey('whatToExpect')) {
      return false;
    }
    if (l$whatToExpect != lOther$whatToExpect) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$coverPhotoUrl = coverPhotoUrl;
    final l$eventPlan = eventPlan;
    final l$id = id;
    final l$name = name;
    final l$organization = organization;
    final l$scheduledEndTimeInUtc = scheduledEndTimeInUtc;
    final l$scheduledStartTimeInUtc = scheduledStartTimeInUtc;
    final l$type = type;
    final l$whatToExpect = whatToExpect;
    return Object.hashAll([
      _$data.containsKey('coverPhotoUrl') ? l$coverPhotoUrl : const {},
      _$data.containsKey('eventPlan') ? l$eventPlan : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('organization') ? l$organization : const {},
      _$data.containsKey('scheduledEndTimeInUtc')
          ? l$scheduledEndTimeInUtc
          : const {},
      _$data.containsKey('scheduledStartTimeInUtc')
          ? l$scheduledStartTimeInUtc
          : const {},
      _$data.containsKey('type') ? l$type : const {},
      _$data.containsKey('whatToExpect') ? l$whatToExpect : const {},
    ]);
  }
}

abstract class CopyWith$Input$Event_min_order_by<TRes> {
  factory CopyWith$Input$Event_min_order_by(
    Input$Event_min_order_by instance,
    TRes Function(Input$Event_min_order_by) then,
  ) = _CopyWithImpl$Input$Event_min_order_by;

  factory CopyWith$Input$Event_min_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$Event_min_order_by;

  TRes call({
    Enum$order_by? coverPhotoUrl,
    Enum$order_by? eventPlan,
    Enum$order_by? id,
    Enum$order_by? name,
    Enum$order_by? organization,
    Enum$order_by? scheduledEndTimeInUtc,
    Enum$order_by? scheduledStartTimeInUtc,
    Enum$order_by? type,
    Enum$order_by? whatToExpect,
  });
}

class _CopyWithImpl$Input$Event_min_order_by<TRes>
    implements CopyWith$Input$Event_min_order_by<TRes> {
  _CopyWithImpl$Input$Event_min_order_by(
    this._instance,
    this._then,
  );

  final Input$Event_min_order_by _instance;

  final TRes Function(Input$Event_min_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? coverPhotoUrl = _undefined,
    Object? eventPlan = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
    Object? organization = _undefined,
    Object? scheduledEndTimeInUtc = _undefined,
    Object? scheduledStartTimeInUtc = _undefined,
    Object? type = _undefined,
    Object? whatToExpect = _undefined,
  }) =>
      _then(Input$Event_min_order_by._({
        ..._instance._$data,
        if (coverPhotoUrl != _undefined)
          'coverPhotoUrl': (coverPhotoUrl as Enum$order_by?),
        if (eventPlan != _undefined) 'eventPlan': (eventPlan as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (name != _undefined) 'name': (name as Enum$order_by?),
        if (organization != _undefined)
          'organization': (organization as Enum$order_by?),
        if (scheduledEndTimeInUtc != _undefined)
          'scheduledEndTimeInUtc': (scheduledEndTimeInUtc as Enum$order_by?),
        if (scheduledStartTimeInUtc != _undefined)
          'scheduledStartTimeInUtc':
              (scheduledStartTimeInUtc as Enum$order_by?),
        if (type != _undefined) 'type': (type as Enum$order_by?),
        if (whatToExpect != _undefined)
          'whatToExpect': (whatToExpect as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$Event_min_order_by<TRes>
    implements CopyWith$Input$Event_min_order_by<TRes> {
  _CopyWithStubImpl$Input$Event_min_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? coverPhotoUrl,
    Enum$order_by? eventPlan,
    Enum$order_by? id,
    Enum$order_by? name,
    Enum$order_by? organization,
    Enum$order_by? scheduledEndTimeInUtc,
    Enum$order_by? scheduledStartTimeInUtc,
    Enum$order_by? type,
    Enum$order_by? whatToExpect,
  }) =>
      _res;
}

class Input$Map_min_order_by {
  factory Input$Map_min_order_by({
    Enum$order_by? belongingOrganization,
    Enum$order_by? id,
    Enum$order_by? name,
  }) =>
      Input$Map_min_order_by._({
        if (belongingOrganization != null)
          r'belongingOrganization': belongingOrganization,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
      });

  Input$Map_min_order_by._(this._$data);

  factory Input$Map_min_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('belongingOrganization')) {
      final l$belongingOrganization = data['belongingOrganization'];
      result$data['belongingOrganization'] = l$belongingOrganization == null
          ? null
          : fromJson$Enum$order_by((l$belongingOrganization as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] =
          l$name == null ? null : fromJson$Enum$order_by((l$name as String));
    }
    return Input$Map_min_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get belongingOrganization =>
      (_$data['belongingOrganization'] as Enum$order_by?);
  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);
  Enum$order_by? get name => (_$data['name'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('belongingOrganization')) {
      final l$belongingOrganization = belongingOrganization;
      result$data['belongingOrganization'] = l$belongingOrganization == null
          ? null
          : toJson$Enum$order_by(l$belongingOrganization);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] =
          l$name == null ? null : toJson$Enum$order_by(l$name);
    }
    return result$data;
  }

  CopyWith$Input$Map_min_order_by<Input$Map_min_order_by> get copyWith =>
      CopyWith$Input$Map_min_order_by(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Map_min_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$belongingOrganization = belongingOrganization;
    final lOther$belongingOrganization = other.belongingOrganization;
    if (_$data.containsKey('belongingOrganization') !=
        other._$data.containsKey('belongingOrganization')) {
      return false;
    }
    if (l$belongingOrganization != lOther$belongingOrganization) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$belongingOrganization = belongingOrganization;
    final l$id = id;
    final l$name = name;
    return Object.hashAll([
      _$data.containsKey('belongingOrganization')
          ? l$belongingOrganization
          : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
    ]);
  }
}

abstract class CopyWith$Input$Map_min_order_by<TRes> {
  factory CopyWith$Input$Map_min_order_by(
    Input$Map_min_order_by instance,
    TRes Function(Input$Map_min_order_by) then,
  ) = _CopyWithImpl$Input$Map_min_order_by;

  factory CopyWith$Input$Map_min_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$Map_min_order_by;

  TRes call({
    Enum$order_by? belongingOrganization,
    Enum$order_by? id,
    Enum$order_by? name,
  });
}

class _CopyWithImpl$Input$Map_min_order_by<TRes>
    implements CopyWith$Input$Map_min_order_by<TRes> {
  _CopyWithImpl$Input$Map_min_order_by(
    this._instance,
    this._then,
  );

  final Input$Map_min_order_by _instance;

  final TRes Function(Input$Map_min_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? belongingOrganization = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
  }) =>
      _then(Input$Map_min_order_by._({
        ..._instance._$data,
        if (belongingOrganization != _undefined)
          'belongingOrganization': (belongingOrganization as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (name != _undefined) 'name': (name as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$Map_min_order_by<TRes>
    implements CopyWith$Input$Map_min_order_by<TRes> {
  _CopyWithStubImpl$Input$Map_min_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? belongingOrganization,
    Enum$order_by? id,
    Enum$order_by? name,
  }) =>
      _res;
}

class Input$MapArea_min_order_by {
  factory Input$MapArea_min_order_by({
    Enum$order_by? belongingMap,
    Enum$order_by? id,
    Enum$order_by? name,
  }) =>
      Input$MapArea_min_order_by._({
        if (belongingMap != null) r'belongingMap': belongingMap,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
      });

  Input$MapArea_min_order_by._(this._$data);

  factory Input$MapArea_min_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('belongingMap')) {
      final l$belongingMap = data['belongingMap'];
      result$data['belongingMap'] = l$belongingMap == null
          ? null
          : fromJson$Enum$order_by((l$belongingMap as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] =
          l$name == null ? null : fromJson$Enum$order_by((l$name as String));
    }
    return Input$MapArea_min_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get belongingMap => (_$data['belongingMap'] as Enum$order_by?);
  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);
  Enum$order_by? get name => (_$data['name'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('belongingMap')) {
      final l$belongingMap = belongingMap;
      result$data['belongingMap'] =
          l$belongingMap == null ? null : toJson$Enum$order_by(l$belongingMap);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] =
          l$name == null ? null : toJson$Enum$order_by(l$name);
    }
    return result$data;
  }

  CopyWith$Input$MapArea_min_order_by<Input$MapArea_min_order_by>
      get copyWith => CopyWith$Input$MapArea_min_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$MapArea_min_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$belongingMap = belongingMap;
    final lOther$belongingMap = other.belongingMap;
    if (_$data.containsKey('belongingMap') !=
        other._$data.containsKey('belongingMap')) {
      return false;
    }
    if (l$belongingMap != lOther$belongingMap) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$belongingMap = belongingMap;
    final l$id = id;
    final l$name = name;
    return Object.hashAll([
      _$data.containsKey('belongingMap') ? l$belongingMap : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
    ]);
  }
}

abstract class CopyWith$Input$MapArea_min_order_by<TRes> {
  factory CopyWith$Input$MapArea_min_order_by(
    Input$MapArea_min_order_by instance,
    TRes Function(Input$MapArea_min_order_by) then,
  ) = _CopyWithImpl$Input$MapArea_min_order_by;

  factory CopyWith$Input$MapArea_min_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$MapArea_min_order_by;

  TRes call({
    Enum$order_by? belongingMap,
    Enum$order_by? id,
    Enum$order_by? name,
  });
}

class _CopyWithImpl$Input$MapArea_min_order_by<TRes>
    implements CopyWith$Input$MapArea_min_order_by<TRes> {
  _CopyWithImpl$Input$MapArea_min_order_by(
    this._instance,
    this._then,
  );

  final Input$MapArea_min_order_by _instance;

  final TRes Function(Input$MapArea_min_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? belongingMap = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
  }) =>
      _then(Input$MapArea_min_order_by._({
        ..._instance._$data,
        if (belongingMap != _undefined)
          'belongingMap': (belongingMap as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (name != _undefined) 'name': (name as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$MapArea_min_order_by<TRes>
    implements CopyWith$Input$MapArea_min_order_by<TRes> {
  _CopyWithStubImpl$Input$MapArea_min_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? belongingMap,
    Enum$order_by? id,
    Enum$order_by? name,
  }) =>
      _res;
}

class Input$SavedPerson_min_order_by {
  factory Input$SavedPerson_min_order_by({
    Enum$order_by? email,
    Enum$order_by? id,
    Enum$order_by? name,
    Enum$order_by? phone,
    Enum$order_by? savingEncounter,
  }) =>
      Input$SavedPerson_min_order_by._({
        if (email != null) r'email': email,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
        if (phone != null) r'phone': phone,
        if (savingEncounter != null) r'savingEncounter': savingEncounter,
      });

  Input$SavedPerson_min_order_by._(this._$data);

  factory Input$SavedPerson_min_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('email')) {
      final l$email = data['email'];
      result$data['email'] =
          l$email == null ? null : fromJson$Enum$order_by((l$email as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] =
          l$name == null ? null : fromJson$Enum$order_by((l$name as String));
    }
    if (data.containsKey('phone')) {
      final l$phone = data['phone'];
      result$data['phone'] =
          l$phone == null ? null : fromJson$Enum$order_by((l$phone as String));
    }
    if (data.containsKey('savingEncounter')) {
      final l$savingEncounter = data['savingEncounter'];
      result$data['savingEncounter'] = l$savingEncounter == null
          ? null
          : fromJson$Enum$order_by((l$savingEncounter as String));
    }
    return Input$SavedPerson_min_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get email => (_$data['email'] as Enum$order_by?);
  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);
  Enum$order_by? get name => (_$data['name'] as Enum$order_by?);
  Enum$order_by? get phone => (_$data['phone'] as Enum$order_by?);
  Enum$order_by? get savingEncounter =>
      (_$data['savingEncounter'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('email')) {
      final l$email = email;
      result$data['email'] =
          l$email == null ? null : toJson$Enum$order_by(l$email);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] =
          l$name == null ? null : toJson$Enum$order_by(l$name);
    }
    if (_$data.containsKey('phone')) {
      final l$phone = phone;
      result$data['phone'] =
          l$phone == null ? null : toJson$Enum$order_by(l$phone);
    }
    if (_$data.containsKey('savingEncounter')) {
      final l$savingEncounter = savingEncounter;
      result$data['savingEncounter'] = l$savingEncounter == null
          ? null
          : toJson$Enum$order_by(l$savingEncounter);
    }
    return result$data;
  }

  CopyWith$Input$SavedPerson_min_order_by<Input$SavedPerson_min_order_by>
      get copyWith => CopyWith$Input$SavedPerson_min_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SavedPerson_min_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$email = email;
    final lOther$email = other.email;
    if (_$data.containsKey('email') != other._$data.containsKey('email')) {
      return false;
    }
    if (l$email != lOther$email) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$phone = phone;
    final lOther$phone = other.phone;
    if (_$data.containsKey('phone') != other._$data.containsKey('phone')) {
      return false;
    }
    if (l$phone != lOther$phone) {
      return false;
    }
    final l$savingEncounter = savingEncounter;
    final lOther$savingEncounter = other.savingEncounter;
    if (_$data.containsKey('savingEncounter') !=
        other._$data.containsKey('savingEncounter')) {
      return false;
    }
    if (l$savingEncounter != lOther$savingEncounter) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$email = email;
    final l$id = id;
    final l$name = name;
    final l$phone = phone;
    final l$savingEncounter = savingEncounter;
    return Object.hashAll([
      _$data.containsKey('email') ? l$email : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('phone') ? l$phone : const {},
      _$data.containsKey('savingEncounter') ? l$savingEncounter : const {},
    ]);
  }
}

abstract class CopyWith$Input$SavedPerson_min_order_by<TRes> {
  factory CopyWith$Input$SavedPerson_min_order_by(
    Input$SavedPerson_min_order_by instance,
    TRes Function(Input$SavedPerson_min_order_by) then,
  ) = _CopyWithImpl$Input$SavedPerson_min_order_by;

  factory CopyWith$Input$SavedPerson_min_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$SavedPerson_min_order_by;

  TRes call({
    Enum$order_by? email,
    Enum$order_by? id,
    Enum$order_by? name,
    Enum$order_by? phone,
    Enum$order_by? savingEncounter,
  });
}

class _CopyWithImpl$Input$SavedPerson_min_order_by<TRes>
    implements CopyWith$Input$SavedPerson_min_order_by<TRes> {
  _CopyWithImpl$Input$SavedPerson_min_order_by(
    this._instance,
    this._then,
  );

  final Input$SavedPerson_min_order_by _instance;

  final TRes Function(Input$SavedPerson_min_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? email = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
    Object? phone = _undefined,
    Object? savingEncounter = _undefined,
  }) =>
      _then(Input$SavedPerson_min_order_by._({
        ..._instance._$data,
        if (email != _undefined) 'email': (email as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (name != _undefined) 'name': (name as Enum$order_by?),
        if (phone != _undefined) 'phone': (phone as Enum$order_by?),
        if (savingEncounter != _undefined)
          'savingEncounter': (savingEncounter as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$SavedPerson_min_order_by<TRes>
    implements CopyWith$Input$SavedPerson_min_order_by<TRes> {
  _CopyWithStubImpl$Input$SavedPerson_min_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? email,
    Enum$order_by? id,
    Enum$order_by? name,
    Enum$order_by? phone,
    Enum$order_by? savingEncounter,
  }) =>
      _res;
}

class Input$SoulWinningSession_min_order_by {
  factory Input$SoulWinningSession_min_order_by({
    Enum$order_by? event,
    Enum$order_by? id,
    Enum$order_by? name,
    Enum$order_by? scheduledEndTimeInUtc,
    Enum$order_by? scheduledStartTimeInUtc,
  }) =>
      Input$SoulWinningSession_min_order_by._({
        if (event != null) r'event': event,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
        if (scheduledEndTimeInUtc != null)
          r'scheduledEndTimeInUtc': scheduledEndTimeInUtc,
        if (scheduledStartTimeInUtc != null)
          r'scheduledStartTimeInUtc': scheduledStartTimeInUtc,
      });

  Input$SoulWinningSession_min_order_by._(this._$data);

  factory Input$SoulWinningSession_min_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('event')) {
      final l$event = data['event'];
      result$data['event'] =
          l$event == null ? null : fromJson$Enum$order_by((l$event as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] =
          l$name == null ? null : fromJson$Enum$order_by((l$name as String));
    }
    if (data.containsKey('scheduledEndTimeInUtc')) {
      final l$scheduledEndTimeInUtc = data['scheduledEndTimeInUtc'];
      result$data['scheduledEndTimeInUtc'] = l$scheduledEndTimeInUtc == null
          ? null
          : fromJson$Enum$order_by((l$scheduledEndTimeInUtc as String));
    }
    if (data.containsKey('scheduledStartTimeInUtc')) {
      final l$scheduledStartTimeInUtc = data['scheduledStartTimeInUtc'];
      result$data['scheduledStartTimeInUtc'] = l$scheduledStartTimeInUtc == null
          ? null
          : fromJson$Enum$order_by((l$scheduledStartTimeInUtc as String));
    }
    return Input$SoulWinningSession_min_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get event => (_$data['event'] as Enum$order_by?);
  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);
  Enum$order_by? get name => (_$data['name'] as Enum$order_by?);
  Enum$order_by? get scheduledEndTimeInUtc =>
      (_$data['scheduledEndTimeInUtc'] as Enum$order_by?);
  Enum$order_by? get scheduledStartTimeInUtc =>
      (_$data['scheduledStartTimeInUtc'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('event')) {
      final l$event = event;
      result$data['event'] =
          l$event == null ? null : toJson$Enum$order_by(l$event);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] =
          l$name == null ? null : toJson$Enum$order_by(l$name);
    }
    if (_$data.containsKey('scheduledEndTimeInUtc')) {
      final l$scheduledEndTimeInUtc = scheduledEndTimeInUtc;
      result$data['scheduledEndTimeInUtc'] = l$scheduledEndTimeInUtc == null
          ? null
          : toJson$Enum$order_by(l$scheduledEndTimeInUtc);
    }
    if (_$data.containsKey('scheduledStartTimeInUtc')) {
      final l$scheduledStartTimeInUtc = scheduledStartTimeInUtc;
      result$data['scheduledStartTimeInUtc'] = l$scheduledStartTimeInUtc == null
          ? null
          : toJson$Enum$order_by(l$scheduledStartTimeInUtc);
    }
    return result$data;
  }

  CopyWith$Input$SoulWinningSession_min_order_by<
          Input$SoulWinningSession_min_order_by>
      get copyWith => CopyWith$Input$SoulWinningSession_min_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SoulWinningSession_min_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$event = event;
    final lOther$event = other.event;
    if (_$data.containsKey('event') != other._$data.containsKey('event')) {
      return false;
    }
    if (l$event != lOther$event) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$scheduledEndTimeInUtc = scheduledEndTimeInUtc;
    final lOther$scheduledEndTimeInUtc = other.scheduledEndTimeInUtc;
    if (_$data.containsKey('scheduledEndTimeInUtc') !=
        other._$data.containsKey('scheduledEndTimeInUtc')) {
      return false;
    }
    if (l$scheduledEndTimeInUtc != lOther$scheduledEndTimeInUtc) {
      return false;
    }
    final l$scheduledStartTimeInUtc = scheduledStartTimeInUtc;
    final lOther$scheduledStartTimeInUtc = other.scheduledStartTimeInUtc;
    if (_$data.containsKey('scheduledStartTimeInUtc') !=
        other._$data.containsKey('scheduledStartTimeInUtc')) {
      return false;
    }
    if (l$scheduledStartTimeInUtc != lOther$scheduledStartTimeInUtc) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$event = event;
    final l$id = id;
    final l$name = name;
    final l$scheduledEndTimeInUtc = scheduledEndTimeInUtc;
    final l$scheduledStartTimeInUtc = scheduledStartTimeInUtc;
    return Object.hashAll([
      _$data.containsKey('event') ? l$event : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('scheduledEndTimeInUtc')
          ? l$scheduledEndTimeInUtc
          : const {},
      _$data.containsKey('scheduledStartTimeInUtc')
          ? l$scheduledStartTimeInUtc
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$SoulWinningSession_min_order_by<TRes> {
  factory CopyWith$Input$SoulWinningSession_min_order_by(
    Input$SoulWinningSession_min_order_by instance,
    TRes Function(Input$SoulWinningSession_min_order_by) then,
  ) = _CopyWithImpl$Input$SoulWinningSession_min_order_by;

  factory CopyWith$Input$SoulWinningSession_min_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$SoulWinningSession_min_order_by;

  TRes call({
    Enum$order_by? event,
    Enum$order_by? id,
    Enum$order_by? name,
    Enum$order_by? scheduledEndTimeInUtc,
    Enum$order_by? scheduledStartTimeInUtc,
  });
}

class _CopyWithImpl$Input$SoulWinningSession_min_order_by<TRes>
    implements CopyWith$Input$SoulWinningSession_min_order_by<TRes> {
  _CopyWithImpl$Input$SoulWinningSession_min_order_by(
    this._instance,
    this._then,
  );

  final Input$SoulWinningSession_min_order_by _instance;

  final TRes Function(Input$SoulWinningSession_min_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? event = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
    Object? scheduledEndTimeInUtc = _undefined,
    Object? scheduledStartTimeInUtc = _undefined,
  }) =>
      _then(Input$SoulWinningSession_min_order_by._({
        ..._instance._$data,
        if (event != _undefined) 'event': (event as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (name != _undefined) 'name': (name as Enum$order_by?),
        if (scheduledEndTimeInUtc != _undefined)
          'scheduledEndTimeInUtc': (scheduledEndTimeInUtc as Enum$order_by?),
        if (scheduledStartTimeInUtc != _undefined)
          'scheduledStartTimeInUtc':
              (scheduledStartTimeInUtc as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$SoulWinningSession_min_order_by<TRes>
    implements CopyWith$Input$SoulWinningSession_min_order_by<TRes> {
  _CopyWithStubImpl$Input$SoulWinningSession_min_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? event,
    Enum$order_by? id,
    Enum$order_by? name,
    Enum$order_by? scheduledEndTimeInUtc,
    Enum$order_by? scheduledStartTimeInUtc,
  }) =>
      _res;
}

class Input$SoulWinningSessionGroup_min_order_by {
  factory Input$SoulWinningSessionGroup_min_order_by({
    Enum$order_by? assignedMapArea,
    Enum$order_by? id,
    Enum$order_by? session,
  }) =>
      Input$SoulWinningSessionGroup_min_order_by._({
        if (assignedMapArea != null) r'assignedMapArea': assignedMapArea,
        if (id != null) r'id': id,
        if (session != null) r'session': session,
      });

  Input$SoulWinningSessionGroup_min_order_by._(this._$data);

  factory Input$SoulWinningSessionGroup_min_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('assignedMapArea')) {
      final l$assignedMapArea = data['assignedMapArea'];
      result$data['assignedMapArea'] = l$assignedMapArea == null
          ? null
          : fromJson$Enum$order_by((l$assignedMapArea as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('session')) {
      final l$session = data['session'];
      result$data['session'] = l$session == null
          ? null
          : fromJson$Enum$order_by((l$session as String));
    }
    return Input$SoulWinningSessionGroup_min_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get assignedMapArea =>
      (_$data['assignedMapArea'] as Enum$order_by?);
  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);
  Enum$order_by? get session => (_$data['session'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('assignedMapArea')) {
      final l$assignedMapArea = assignedMapArea;
      result$data['assignedMapArea'] = l$assignedMapArea == null
          ? null
          : toJson$Enum$order_by(l$assignedMapArea);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('session')) {
      final l$session = session;
      result$data['session'] =
          l$session == null ? null : toJson$Enum$order_by(l$session);
    }
    return result$data;
  }

  CopyWith$Input$SoulWinningSessionGroup_min_order_by<
          Input$SoulWinningSessionGroup_min_order_by>
      get copyWith => CopyWith$Input$SoulWinningSessionGroup_min_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SoulWinningSessionGroup_min_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$assignedMapArea = assignedMapArea;
    final lOther$assignedMapArea = other.assignedMapArea;
    if (_$data.containsKey('assignedMapArea') !=
        other._$data.containsKey('assignedMapArea')) {
      return false;
    }
    if (l$assignedMapArea != lOther$assignedMapArea) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$session = session;
    final lOther$session = other.session;
    if (_$data.containsKey('session') != other._$data.containsKey('session')) {
      return false;
    }
    if (l$session != lOther$session) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$assignedMapArea = assignedMapArea;
    final l$id = id;
    final l$session = session;
    return Object.hashAll([
      _$data.containsKey('assignedMapArea') ? l$assignedMapArea : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('session') ? l$session : const {},
    ]);
  }
}

abstract class CopyWith$Input$SoulWinningSessionGroup_min_order_by<TRes> {
  factory CopyWith$Input$SoulWinningSessionGroup_min_order_by(
    Input$SoulWinningSessionGroup_min_order_by instance,
    TRes Function(Input$SoulWinningSessionGroup_min_order_by) then,
  ) = _CopyWithImpl$Input$SoulWinningSessionGroup_min_order_by;

  factory CopyWith$Input$SoulWinningSessionGroup_min_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$SoulWinningSessionGroup_min_order_by;

  TRes call({
    Enum$order_by? assignedMapArea,
    Enum$order_by? id,
    Enum$order_by? session,
  });
}

class _CopyWithImpl$Input$SoulWinningSessionGroup_min_order_by<TRes>
    implements CopyWith$Input$SoulWinningSessionGroup_min_order_by<TRes> {
  _CopyWithImpl$Input$SoulWinningSessionGroup_min_order_by(
    this._instance,
    this._then,
  );

  final Input$SoulWinningSessionGroup_min_order_by _instance;

  final TRes Function(Input$SoulWinningSessionGroup_min_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? assignedMapArea = _undefined,
    Object? id = _undefined,
    Object? session = _undefined,
  }) =>
      _then(Input$SoulWinningSessionGroup_min_order_by._({
        ..._instance._$data,
        if (assignedMapArea != _undefined)
          'assignedMapArea': (assignedMapArea as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (session != _undefined) 'session': (session as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$SoulWinningSessionGroup_min_order_by<TRes>
    implements CopyWith$Input$SoulWinningSessionGroup_min_order_by<TRes> {
  _CopyWithStubImpl$Input$SoulWinningSessionGroup_min_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? assignedMapArea,
    Enum$order_by? id,
    Enum$order_by? session,
  }) =>
      _res;
}

class Input$_Organization_adminsOfOrganization_min_order_by {
  factory Input$_Organization_adminsOfOrganization_min_order_by({
    Enum$order_by? A,
    Enum$order_by? B,
  }) =>
      Input$_Organization_adminsOfOrganization_min_order_by._({
        if (A != null) r'A': A,
        if (B != null) r'B': B,
      });

  Input$_Organization_adminsOfOrganization_min_order_by._(this._$data);

  factory Input$_Organization_adminsOfOrganization_min_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('A')) {
      final l$A = data['A'];
      result$data['A'] =
          l$A == null ? null : fromJson$Enum$order_by((l$A as String));
    }
    if (data.containsKey('B')) {
      final l$B = data['B'];
      result$data['B'] =
          l$B == null ? null : fromJson$Enum$order_by((l$B as String));
    }
    return Input$_Organization_adminsOfOrganization_min_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get A => (_$data['A'] as Enum$order_by?);
  Enum$order_by? get B => (_$data['B'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('A')) {
      final l$A = A;
      result$data['A'] = l$A == null ? null : toJson$Enum$order_by(l$A);
    }
    if (_$data.containsKey('B')) {
      final l$B = B;
      result$data['B'] = l$B == null ? null : toJson$Enum$order_by(l$B);
    }
    return result$data;
  }

  CopyWith$Input$_Organization_adminsOfOrganization_min_order_by<
          Input$_Organization_adminsOfOrganization_min_order_by>
      get copyWith =>
          CopyWith$Input$_Organization_adminsOfOrganization_min_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$_Organization_adminsOfOrganization_min_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$A = A;
    final lOther$A = other.A;
    if (_$data.containsKey('A') != other._$data.containsKey('A')) {
      return false;
    }
    if (l$A != lOther$A) {
      return false;
    }
    final l$B = B;
    final lOther$B = other.B;
    if (_$data.containsKey('B') != other._$data.containsKey('B')) {
      return false;
    }
    if (l$B != lOther$B) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$A = A;
    final l$B = B;
    return Object.hashAll([
      _$data.containsKey('A') ? l$A : const {},
      _$data.containsKey('B') ? l$B : const {},
    ]);
  }
}

abstract class CopyWith$Input$_Organization_adminsOfOrganization_min_order_by<
    TRes> {
  factory CopyWith$Input$_Organization_adminsOfOrganization_min_order_by(
    Input$_Organization_adminsOfOrganization_min_order_by instance,
    TRes Function(Input$_Organization_adminsOfOrganization_min_order_by) then,
  ) = _CopyWithImpl$Input$_Organization_adminsOfOrganization_min_order_by;

  factory CopyWith$Input$_Organization_adminsOfOrganization_min_order_by.stub(
          TRes res) =
      _CopyWithStubImpl$Input$_Organization_adminsOfOrganization_min_order_by;

  TRes call({
    Enum$order_by? A,
    Enum$order_by? B,
  });
}

class _CopyWithImpl$Input$_Organization_adminsOfOrganization_min_order_by<TRes>
    implements
        CopyWith$Input$_Organization_adminsOfOrganization_min_order_by<TRes> {
  _CopyWithImpl$Input$_Organization_adminsOfOrganization_min_order_by(
    this._instance,
    this._then,
  );

  final Input$_Organization_adminsOfOrganization_min_order_by _instance;

  final TRes Function(Input$_Organization_adminsOfOrganization_min_order_by)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? A = _undefined,
    Object? B = _undefined,
  }) =>
      _then(Input$_Organization_adminsOfOrganization_min_order_by._({
        ..._instance._$data,
        if (A != _undefined) 'A': (A as Enum$order_by?),
        if (B != _undefined) 'B': (B as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$_Organization_adminsOfOrganization_min_order_by<
        TRes>
    implements
        CopyWith$Input$_Organization_adminsOfOrganization_min_order_by<TRes> {
  _CopyWithStubImpl$Input$_Organization_adminsOfOrganization_min_order_by(
      this._res);

  TRes _res;

  call({
    Enum$order_by? A,
    Enum$order_by? B,
  }) =>
      _res;
}

class Input$_Organization_membersInOrganization_min_order_by {
  factory Input$_Organization_membersInOrganization_min_order_by({
    Enum$order_by? A,
    Enum$order_by? B,
  }) =>
      Input$_Organization_membersInOrganization_min_order_by._({
        if (A != null) r'A': A,
        if (B != null) r'B': B,
      });

  Input$_Organization_membersInOrganization_min_order_by._(this._$data);

  factory Input$_Organization_membersInOrganization_min_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('A')) {
      final l$A = data['A'];
      result$data['A'] =
          l$A == null ? null : fromJson$Enum$order_by((l$A as String));
    }
    if (data.containsKey('B')) {
      final l$B = data['B'];
      result$data['B'] =
          l$B == null ? null : fromJson$Enum$order_by((l$B as String));
    }
    return Input$_Organization_membersInOrganization_min_order_by._(
        result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get A => (_$data['A'] as Enum$order_by?);
  Enum$order_by? get B => (_$data['B'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('A')) {
      final l$A = A;
      result$data['A'] = l$A == null ? null : toJson$Enum$order_by(l$A);
    }
    if (_$data.containsKey('B')) {
      final l$B = B;
      result$data['B'] = l$B == null ? null : toJson$Enum$order_by(l$B);
    }
    return result$data;
  }

  CopyWith$Input$_Organization_membersInOrganization_min_order_by<
          Input$_Organization_membersInOrganization_min_order_by>
      get copyWith =>
          CopyWith$Input$_Organization_membersInOrganization_min_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$_Organization_membersInOrganization_min_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$A = A;
    final lOther$A = other.A;
    if (_$data.containsKey('A') != other._$data.containsKey('A')) {
      return false;
    }
    if (l$A != lOther$A) {
      return false;
    }
    final l$B = B;
    final lOther$B = other.B;
    if (_$data.containsKey('B') != other._$data.containsKey('B')) {
      return false;
    }
    if (l$B != lOther$B) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$A = A;
    final l$B = B;
    return Object.hashAll([
      _$data.containsKey('A') ? l$A : const {},
      _$data.containsKey('B') ? l$B : const {},
    ]);
  }
}

abstract class CopyWith$Input$_Organization_membersInOrganization_min_order_by<
    TRes> {
  factory CopyWith$Input$_Organization_membersInOrganization_min_order_by(
    Input$_Organization_membersInOrganization_min_order_by instance,
    TRes Function(Input$_Organization_membersInOrganization_min_order_by) then,
  ) = _CopyWithImpl$Input$_Organization_membersInOrganization_min_order_by;

  factory CopyWith$Input$_Organization_membersInOrganization_min_order_by.stub(
          TRes res) =
      _CopyWithStubImpl$Input$_Organization_membersInOrganization_min_order_by;

  TRes call({
    Enum$order_by? A,
    Enum$order_by? B,
  });
}

class _CopyWithImpl$Input$_Organization_membersInOrganization_min_order_by<TRes>
    implements
        CopyWith$Input$_Organization_membersInOrganization_min_order_by<TRes> {
  _CopyWithImpl$Input$_Organization_membersInOrganization_min_order_by(
    this._instance,
    this._then,
  );

  final Input$_Organization_membersInOrganization_min_order_by _instance;

  final TRes Function(Input$_Organization_membersInOrganization_min_order_by)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? A = _undefined,
    Object? B = _undefined,
  }) =>
      _then(Input$_Organization_membersInOrganization_min_order_by._({
        ..._instance._$data,
        if (A != _undefined) 'A': (A as Enum$order_by?),
        if (B != _undefined) 'B': (B as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$_Organization_membersInOrganization_min_order_by<
        TRes>
    implements
        CopyWith$Input$_Organization_membersInOrganization_min_order_by<TRes> {
  _CopyWithStubImpl$Input$_Organization_membersInOrganization_min_order_by(
      this._res);

  TRes _res;

  call({
    Enum$order_by? A,
    Enum$order_by? B,
  }) =>
      _res;
}

class Input$_SoulWinningSessionGroup_members_min_order_by {
  factory Input$_SoulWinningSessionGroup_members_min_order_by({
    Enum$order_by? A,
    Enum$order_by? B,
  }) =>
      Input$_SoulWinningSessionGroup_members_min_order_by._({
        if (A != null) r'A': A,
        if (B != null) r'B': B,
      });

  Input$_SoulWinningSessionGroup_members_min_order_by._(this._$data);

  factory Input$_SoulWinningSessionGroup_members_min_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('A')) {
      final l$A = data['A'];
      result$data['A'] =
          l$A == null ? null : fromJson$Enum$order_by((l$A as String));
    }
    if (data.containsKey('B')) {
      final l$B = data['B'];
      result$data['B'] =
          l$B == null ? null : fromJson$Enum$order_by((l$B as String));
    }
    return Input$_SoulWinningSessionGroup_members_min_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get A => (_$data['A'] as Enum$order_by?);
  Enum$order_by? get B => (_$data['B'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('A')) {
      final l$A = A;
      result$data['A'] = l$A == null ? null : toJson$Enum$order_by(l$A);
    }
    if (_$data.containsKey('B')) {
      final l$B = B;
      result$data['B'] = l$B == null ? null : toJson$Enum$order_by(l$B);
    }
    return result$data;
  }

  CopyWith$Input$_SoulWinningSessionGroup_members_min_order_by<
          Input$_SoulWinningSessionGroup_members_min_order_by>
      get copyWith =>
          CopyWith$Input$_SoulWinningSessionGroup_members_min_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$_SoulWinningSessionGroup_members_min_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$A = A;
    final lOther$A = other.A;
    if (_$data.containsKey('A') != other._$data.containsKey('A')) {
      return false;
    }
    if (l$A != lOther$A) {
      return false;
    }
    final l$B = B;
    final lOther$B = other.B;
    if (_$data.containsKey('B') != other._$data.containsKey('B')) {
      return false;
    }
    if (l$B != lOther$B) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$A = A;
    final l$B = B;
    return Object.hashAll([
      _$data.containsKey('A') ? l$A : const {},
      _$data.containsKey('B') ? l$B : const {},
    ]);
  }
}

abstract class CopyWith$Input$_SoulWinningSessionGroup_members_min_order_by<
    TRes> {
  factory CopyWith$Input$_SoulWinningSessionGroup_members_min_order_by(
    Input$_SoulWinningSessionGroup_members_min_order_by instance,
    TRes Function(Input$_SoulWinningSessionGroup_members_min_order_by) then,
  ) = _CopyWithImpl$Input$_SoulWinningSessionGroup_members_min_order_by;

  factory CopyWith$Input$_SoulWinningSessionGroup_members_min_order_by.stub(
          TRes res) =
      _CopyWithStubImpl$Input$_SoulWinningSessionGroup_members_min_order_by;

  TRes call({
    Enum$order_by? A,
    Enum$order_by? B,
  });
}

class _CopyWithImpl$Input$_SoulWinningSessionGroup_members_min_order_by<TRes>
    implements
        CopyWith$Input$_SoulWinningSessionGroup_members_min_order_by<TRes> {
  _CopyWithImpl$Input$_SoulWinningSessionGroup_members_min_order_by(
    this._instance,
    this._then,
  );

  final Input$_SoulWinningSessionGroup_members_min_order_by _instance;

  final TRes Function(Input$_SoulWinningSessionGroup_members_min_order_by)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? A = _undefined,
    Object? B = _undefined,
  }) =>
      _then(Input$_SoulWinningSessionGroup_members_min_order_by._({
        ..._instance._$data,
        if (A != _undefined) 'A': (A as Enum$order_by?),
        if (B != _undefined) 'B': (B as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$_SoulWinningSessionGroup_members_min_order_by<
        TRes>
    implements
        CopyWith$Input$_SoulWinningSessionGroup_members_min_order_by<TRes> {
  _CopyWithStubImpl$Input$_SoulWinningSessionGroup_members_min_order_by(
      this._res);

  TRes _res;

  call({
    Enum$order_by? A,
    Enum$order_by? B,
  }) =>
      _res;
}

class Input$MapArea_prepend_input {
  factory Input$MapArea_prepend_input({String? polygonGeoJson}) =>
      Input$MapArea_prepend_input._({
        if (polygonGeoJson != null) r'polygonGeoJson': polygonGeoJson,
      });

  Input$MapArea_prepend_input._(this._$data);

  factory Input$MapArea_prepend_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('polygonGeoJson')) {
      final l$polygonGeoJson = data['polygonGeoJson'];
      result$data['polygonGeoJson'] = (l$polygonGeoJson as String?);
    }
    return Input$MapArea_prepend_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get polygonGeoJson => (_$data['polygonGeoJson'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('polygonGeoJson')) {
      final l$polygonGeoJson = polygonGeoJson;
      result$data['polygonGeoJson'] = l$polygonGeoJson;
    }
    return result$data;
  }

  CopyWith$Input$MapArea_prepend_input<Input$MapArea_prepend_input>
      get copyWith => CopyWith$Input$MapArea_prepend_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$MapArea_prepend_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$polygonGeoJson = polygonGeoJson;
    final lOther$polygonGeoJson = other.polygonGeoJson;
    if (_$data.containsKey('polygonGeoJson') !=
        other._$data.containsKey('polygonGeoJson')) {
      return false;
    }
    if (l$polygonGeoJson != lOther$polygonGeoJson) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$polygonGeoJson = polygonGeoJson;
    return Object.hashAll(
        [_$data.containsKey('polygonGeoJson') ? l$polygonGeoJson : const {}]);
  }
}

abstract class CopyWith$Input$MapArea_prepend_input<TRes> {
  factory CopyWith$Input$MapArea_prepend_input(
    Input$MapArea_prepend_input instance,
    TRes Function(Input$MapArea_prepend_input) then,
  ) = _CopyWithImpl$Input$MapArea_prepend_input;

  factory CopyWith$Input$MapArea_prepend_input.stub(TRes res) =
      _CopyWithStubImpl$Input$MapArea_prepend_input;

  TRes call({String? polygonGeoJson});
}

class _CopyWithImpl$Input$MapArea_prepend_input<TRes>
    implements CopyWith$Input$MapArea_prepend_input<TRes> {
  _CopyWithImpl$Input$MapArea_prepend_input(
    this._instance,
    this._then,
  );

  final Input$MapArea_prepend_input _instance;

  final TRes Function(Input$MapArea_prepend_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? polygonGeoJson = _undefined}) =>
      _then(Input$MapArea_prepend_input._({
        ..._instance._$data,
        if (polygonGeoJson != _undefined)
          'polygonGeoJson': (polygonGeoJson as String?),
      }));
}

class _CopyWithStubImpl$Input$MapArea_prepend_input<TRes>
    implements CopyWith$Input$MapArea_prepend_input<TRes> {
  _CopyWithStubImpl$Input$MapArea_prepend_input(this._res);

  TRes _res;

  call({String? polygonGeoJson}) => _res;
}

class Input$Encounter_pk_columns_input {
  factory Input$Encounter_pk_columns_input({required String id}) =>
      Input$Encounter_pk_columns_input._({
        r'id': id,
      });

  Input$Encounter_pk_columns_input._(this._$data);

  factory Input$Encounter_pk_columns_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$id = data['id'];
    result$data['id'] = (l$id as String);
    return Input$Encounter_pk_columns_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String get id => (_$data['id'] as String);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$id = id;
    result$data['id'] = l$id;
    return result$data;
  }

  CopyWith$Input$Encounter_pk_columns_input<Input$Encounter_pk_columns_input>
      get copyWith => CopyWith$Input$Encounter_pk_columns_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Encounter_pk_columns_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    return Object.hashAll([l$id]);
  }
}

abstract class CopyWith$Input$Encounter_pk_columns_input<TRes> {
  factory CopyWith$Input$Encounter_pk_columns_input(
    Input$Encounter_pk_columns_input instance,
    TRes Function(Input$Encounter_pk_columns_input) then,
  ) = _CopyWithImpl$Input$Encounter_pk_columns_input;

  factory CopyWith$Input$Encounter_pk_columns_input.stub(TRes res) =
      _CopyWithStubImpl$Input$Encounter_pk_columns_input;

  TRes call({String? id});
}

class _CopyWithImpl$Input$Encounter_pk_columns_input<TRes>
    implements CopyWith$Input$Encounter_pk_columns_input<TRes> {
  _CopyWithImpl$Input$Encounter_pk_columns_input(
    this._instance,
    this._then,
  );

  final Input$Encounter_pk_columns_input _instance;

  final TRes Function(Input$Encounter_pk_columns_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? id = _undefined}) =>
      _then(Input$Encounter_pk_columns_input._({
        ..._instance._$data,
        if (id != _undefined && id != null) 'id': (id as String),
      }));
}

class _CopyWithStubImpl$Input$Encounter_pk_columns_input<TRes>
    implements CopyWith$Input$Encounter_pk_columns_input<TRes> {
  _CopyWithStubImpl$Input$Encounter_pk_columns_input(this._res);

  TRes _res;

  call({String? id}) => _res;
}

class Input$Event_pk_columns_input {
  factory Input$Event_pk_columns_input({required String id}) =>
      Input$Event_pk_columns_input._({
        r'id': id,
      });

  Input$Event_pk_columns_input._(this._$data);

  factory Input$Event_pk_columns_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$id = data['id'];
    result$data['id'] = (l$id as String);
    return Input$Event_pk_columns_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String get id => (_$data['id'] as String);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$id = id;
    result$data['id'] = l$id;
    return result$data;
  }

  CopyWith$Input$Event_pk_columns_input<Input$Event_pk_columns_input>
      get copyWith => CopyWith$Input$Event_pk_columns_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Event_pk_columns_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    return Object.hashAll([l$id]);
  }
}

abstract class CopyWith$Input$Event_pk_columns_input<TRes> {
  factory CopyWith$Input$Event_pk_columns_input(
    Input$Event_pk_columns_input instance,
    TRes Function(Input$Event_pk_columns_input) then,
  ) = _CopyWithImpl$Input$Event_pk_columns_input;

  factory CopyWith$Input$Event_pk_columns_input.stub(TRes res) =
      _CopyWithStubImpl$Input$Event_pk_columns_input;

  TRes call({String? id});
}

class _CopyWithImpl$Input$Event_pk_columns_input<TRes>
    implements CopyWith$Input$Event_pk_columns_input<TRes> {
  _CopyWithImpl$Input$Event_pk_columns_input(
    this._instance,
    this._then,
  );

  final Input$Event_pk_columns_input _instance;

  final TRes Function(Input$Event_pk_columns_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? id = _undefined}) => _then(Input$Event_pk_columns_input._({
        ..._instance._$data,
        if (id != _undefined && id != null) 'id': (id as String),
      }));
}

class _CopyWithStubImpl$Input$Event_pk_columns_input<TRes>
    implements CopyWith$Input$Event_pk_columns_input<TRes> {
  _CopyWithStubImpl$Input$Event_pk_columns_input(this._res);

  TRes _res;

  call({String? id}) => _res;
}

class Input$Map_pk_columns_input {
  factory Input$Map_pk_columns_input({required String id}) =>
      Input$Map_pk_columns_input._({
        r'id': id,
      });

  Input$Map_pk_columns_input._(this._$data);

  factory Input$Map_pk_columns_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$id = data['id'];
    result$data['id'] = (l$id as String);
    return Input$Map_pk_columns_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String get id => (_$data['id'] as String);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$id = id;
    result$data['id'] = l$id;
    return result$data;
  }

  CopyWith$Input$Map_pk_columns_input<Input$Map_pk_columns_input>
      get copyWith => CopyWith$Input$Map_pk_columns_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Map_pk_columns_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    return Object.hashAll([l$id]);
  }
}

abstract class CopyWith$Input$Map_pk_columns_input<TRes> {
  factory CopyWith$Input$Map_pk_columns_input(
    Input$Map_pk_columns_input instance,
    TRes Function(Input$Map_pk_columns_input) then,
  ) = _CopyWithImpl$Input$Map_pk_columns_input;

  factory CopyWith$Input$Map_pk_columns_input.stub(TRes res) =
      _CopyWithStubImpl$Input$Map_pk_columns_input;

  TRes call({String? id});
}

class _CopyWithImpl$Input$Map_pk_columns_input<TRes>
    implements CopyWith$Input$Map_pk_columns_input<TRes> {
  _CopyWithImpl$Input$Map_pk_columns_input(
    this._instance,
    this._then,
  );

  final Input$Map_pk_columns_input _instance;

  final TRes Function(Input$Map_pk_columns_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? id = _undefined}) => _then(Input$Map_pk_columns_input._({
        ..._instance._$data,
        if (id != _undefined && id != null) 'id': (id as String),
      }));
}

class _CopyWithStubImpl$Input$Map_pk_columns_input<TRes>
    implements CopyWith$Input$Map_pk_columns_input<TRes> {
  _CopyWithStubImpl$Input$Map_pk_columns_input(this._res);

  TRes _res;

  call({String? id}) => _res;
}

class Input$MapArea_pk_columns_input {
  factory Input$MapArea_pk_columns_input({required String id}) =>
      Input$MapArea_pk_columns_input._({
        r'id': id,
      });

  Input$MapArea_pk_columns_input._(this._$data);

  factory Input$MapArea_pk_columns_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$id = data['id'];
    result$data['id'] = (l$id as String);
    return Input$MapArea_pk_columns_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String get id => (_$data['id'] as String);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$id = id;
    result$data['id'] = l$id;
    return result$data;
  }

  CopyWith$Input$MapArea_pk_columns_input<Input$MapArea_pk_columns_input>
      get copyWith => CopyWith$Input$MapArea_pk_columns_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$MapArea_pk_columns_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    return Object.hashAll([l$id]);
  }
}

abstract class CopyWith$Input$MapArea_pk_columns_input<TRes> {
  factory CopyWith$Input$MapArea_pk_columns_input(
    Input$MapArea_pk_columns_input instance,
    TRes Function(Input$MapArea_pk_columns_input) then,
  ) = _CopyWithImpl$Input$MapArea_pk_columns_input;

  factory CopyWith$Input$MapArea_pk_columns_input.stub(TRes res) =
      _CopyWithStubImpl$Input$MapArea_pk_columns_input;

  TRes call({String? id});
}

class _CopyWithImpl$Input$MapArea_pk_columns_input<TRes>
    implements CopyWith$Input$MapArea_pk_columns_input<TRes> {
  _CopyWithImpl$Input$MapArea_pk_columns_input(
    this._instance,
    this._then,
  );

  final Input$MapArea_pk_columns_input _instance;

  final TRes Function(Input$MapArea_pk_columns_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? id = _undefined}) =>
      _then(Input$MapArea_pk_columns_input._({
        ..._instance._$data,
        if (id != _undefined && id != null) 'id': (id as String),
      }));
}

class _CopyWithStubImpl$Input$MapArea_pk_columns_input<TRes>
    implements CopyWith$Input$MapArea_pk_columns_input<TRes> {
  _CopyWithStubImpl$Input$MapArea_pk_columns_input(this._res);

  TRes _res;

  call({String? id}) => _res;
}

class Input$Organization_pk_columns_input {
  factory Input$Organization_pk_columns_input({required String id}) =>
      Input$Organization_pk_columns_input._({
        r'id': id,
      });

  Input$Organization_pk_columns_input._(this._$data);

  factory Input$Organization_pk_columns_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$id = data['id'];
    result$data['id'] = (l$id as String);
    return Input$Organization_pk_columns_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String get id => (_$data['id'] as String);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$id = id;
    result$data['id'] = l$id;
    return result$data;
  }

  CopyWith$Input$Organization_pk_columns_input<
          Input$Organization_pk_columns_input>
      get copyWith => CopyWith$Input$Organization_pk_columns_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Organization_pk_columns_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    return Object.hashAll([l$id]);
  }
}

abstract class CopyWith$Input$Organization_pk_columns_input<TRes> {
  factory CopyWith$Input$Organization_pk_columns_input(
    Input$Organization_pk_columns_input instance,
    TRes Function(Input$Organization_pk_columns_input) then,
  ) = _CopyWithImpl$Input$Organization_pk_columns_input;

  factory CopyWith$Input$Organization_pk_columns_input.stub(TRes res) =
      _CopyWithStubImpl$Input$Organization_pk_columns_input;

  TRes call({String? id});
}

class _CopyWithImpl$Input$Organization_pk_columns_input<TRes>
    implements CopyWith$Input$Organization_pk_columns_input<TRes> {
  _CopyWithImpl$Input$Organization_pk_columns_input(
    this._instance,
    this._then,
  );

  final Input$Organization_pk_columns_input _instance;

  final TRes Function(Input$Organization_pk_columns_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? id = _undefined}) =>
      _then(Input$Organization_pk_columns_input._({
        ..._instance._$data,
        if (id != _undefined && id != null) 'id': (id as String),
      }));
}

class _CopyWithStubImpl$Input$Organization_pk_columns_input<TRes>
    implements CopyWith$Input$Organization_pk_columns_input<TRes> {
  _CopyWithStubImpl$Input$Organization_pk_columns_input(this._res);

  TRes _res;

  call({String? id}) => _res;
}

class Input$SavedPerson_pk_columns_input {
  factory Input$SavedPerson_pk_columns_input({required String id}) =>
      Input$SavedPerson_pk_columns_input._({
        r'id': id,
      });

  Input$SavedPerson_pk_columns_input._(this._$data);

  factory Input$SavedPerson_pk_columns_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$id = data['id'];
    result$data['id'] = (l$id as String);
    return Input$SavedPerson_pk_columns_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String get id => (_$data['id'] as String);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$id = id;
    result$data['id'] = l$id;
    return result$data;
  }

  CopyWith$Input$SavedPerson_pk_columns_input<
          Input$SavedPerson_pk_columns_input>
      get copyWith => CopyWith$Input$SavedPerson_pk_columns_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SavedPerson_pk_columns_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    return Object.hashAll([l$id]);
  }
}

abstract class CopyWith$Input$SavedPerson_pk_columns_input<TRes> {
  factory CopyWith$Input$SavedPerson_pk_columns_input(
    Input$SavedPerson_pk_columns_input instance,
    TRes Function(Input$SavedPerson_pk_columns_input) then,
  ) = _CopyWithImpl$Input$SavedPerson_pk_columns_input;

  factory CopyWith$Input$SavedPerson_pk_columns_input.stub(TRes res) =
      _CopyWithStubImpl$Input$SavedPerson_pk_columns_input;

  TRes call({String? id});
}

class _CopyWithImpl$Input$SavedPerson_pk_columns_input<TRes>
    implements CopyWith$Input$SavedPerson_pk_columns_input<TRes> {
  _CopyWithImpl$Input$SavedPerson_pk_columns_input(
    this._instance,
    this._then,
  );

  final Input$SavedPerson_pk_columns_input _instance;

  final TRes Function(Input$SavedPerson_pk_columns_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? id = _undefined}) =>
      _then(Input$SavedPerson_pk_columns_input._({
        ..._instance._$data,
        if (id != _undefined && id != null) 'id': (id as String),
      }));
}

class _CopyWithStubImpl$Input$SavedPerson_pk_columns_input<TRes>
    implements CopyWith$Input$SavedPerson_pk_columns_input<TRes> {
  _CopyWithStubImpl$Input$SavedPerson_pk_columns_input(this._res);

  TRes _res;

  call({String? id}) => _res;
}

class Input$SoulWinningSession_pk_columns_input {
  factory Input$SoulWinningSession_pk_columns_input({required String id}) =>
      Input$SoulWinningSession_pk_columns_input._({
        r'id': id,
      });

  Input$SoulWinningSession_pk_columns_input._(this._$data);

  factory Input$SoulWinningSession_pk_columns_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$id = data['id'];
    result$data['id'] = (l$id as String);
    return Input$SoulWinningSession_pk_columns_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String get id => (_$data['id'] as String);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$id = id;
    result$data['id'] = l$id;
    return result$data;
  }

  CopyWith$Input$SoulWinningSession_pk_columns_input<
          Input$SoulWinningSession_pk_columns_input>
      get copyWith => CopyWith$Input$SoulWinningSession_pk_columns_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SoulWinningSession_pk_columns_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    return Object.hashAll([l$id]);
  }
}

abstract class CopyWith$Input$SoulWinningSession_pk_columns_input<TRes> {
  factory CopyWith$Input$SoulWinningSession_pk_columns_input(
    Input$SoulWinningSession_pk_columns_input instance,
    TRes Function(Input$SoulWinningSession_pk_columns_input) then,
  ) = _CopyWithImpl$Input$SoulWinningSession_pk_columns_input;

  factory CopyWith$Input$SoulWinningSession_pk_columns_input.stub(TRes res) =
      _CopyWithStubImpl$Input$SoulWinningSession_pk_columns_input;

  TRes call({String? id});
}

class _CopyWithImpl$Input$SoulWinningSession_pk_columns_input<TRes>
    implements CopyWith$Input$SoulWinningSession_pk_columns_input<TRes> {
  _CopyWithImpl$Input$SoulWinningSession_pk_columns_input(
    this._instance,
    this._then,
  );

  final Input$SoulWinningSession_pk_columns_input _instance;

  final TRes Function(Input$SoulWinningSession_pk_columns_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? id = _undefined}) =>
      _then(Input$SoulWinningSession_pk_columns_input._({
        ..._instance._$data,
        if (id != _undefined && id != null) 'id': (id as String),
      }));
}

class _CopyWithStubImpl$Input$SoulWinningSession_pk_columns_input<TRes>
    implements CopyWith$Input$SoulWinningSession_pk_columns_input<TRes> {
  _CopyWithStubImpl$Input$SoulWinningSession_pk_columns_input(this._res);

  TRes _res;

  call({String? id}) => _res;
}

class Input$SoulWinningSessionGroup_pk_columns_input {
  factory Input$SoulWinningSessionGroup_pk_columns_input(
          {required String id}) =>
      Input$SoulWinningSessionGroup_pk_columns_input._({
        r'id': id,
      });

  Input$SoulWinningSessionGroup_pk_columns_input._(this._$data);

  factory Input$SoulWinningSessionGroup_pk_columns_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$id = data['id'];
    result$data['id'] = (l$id as String);
    return Input$SoulWinningSessionGroup_pk_columns_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String get id => (_$data['id'] as String);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$id = id;
    result$data['id'] = l$id;
    return result$data;
  }

  CopyWith$Input$SoulWinningSessionGroup_pk_columns_input<
          Input$SoulWinningSessionGroup_pk_columns_input>
      get copyWith => CopyWith$Input$SoulWinningSessionGroup_pk_columns_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$SoulWinningSessionGroup_pk_columns_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    return Object.hashAll([l$id]);
  }
}

abstract class CopyWith$Input$SoulWinningSessionGroup_pk_columns_input<TRes> {
  factory CopyWith$Input$SoulWinningSessionGroup_pk_columns_input(
    Input$SoulWinningSessionGroup_pk_columns_input instance,
    TRes Function(Input$SoulWinningSessionGroup_pk_columns_input) then,
  ) = _CopyWithImpl$Input$SoulWinningSessionGroup_pk_columns_input;

  factory CopyWith$Input$SoulWinningSessionGroup_pk_columns_input.stub(
          TRes res) =
      _CopyWithStubImpl$Input$SoulWinningSessionGroup_pk_columns_input;

  TRes call({String? id});
}

class _CopyWithImpl$Input$SoulWinningSessionGroup_pk_columns_input<TRes>
    implements CopyWith$Input$SoulWinningSessionGroup_pk_columns_input<TRes> {
  _CopyWithImpl$Input$SoulWinningSessionGroup_pk_columns_input(
    this._instance,
    this._then,
  );

  final Input$SoulWinningSessionGroup_pk_columns_input _instance;

  final TRes Function(Input$SoulWinningSessionGroup_pk_columns_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? id = _undefined}) =>
      _then(Input$SoulWinningSessionGroup_pk_columns_input._({
        ..._instance._$data,
        if (id != _undefined && id != null) 'id': (id as String),
      }));
}

class _CopyWithStubImpl$Input$SoulWinningSessionGroup_pk_columns_input<TRes>
    implements CopyWith$Input$SoulWinningSessionGroup_pk_columns_input<TRes> {
  _CopyWithStubImpl$Input$SoulWinningSessionGroup_pk_columns_input(this._res);

  TRes _res;

  call({String? id}) => _res;
}

class Input$User_pk_columns_input {
  factory Input$User_pk_columns_input({required String id}) =>
      Input$User_pk_columns_input._({
        r'id': id,
      });

  Input$User_pk_columns_input._(this._$data);

  factory Input$User_pk_columns_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$id = data['id'];
    result$data['id'] = (l$id as String);
    return Input$User_pk_columns_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String get id => (_$data['id'] as String);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$id = id;
    result$data['id'] = l$id;
    return result$data;
  }

  CopyWith$Input$User_pk_columns_input<Input$User_pk_columns_input>
      get copyWith => CopyWith$Input$User_pk_columns_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$User_pk_columns_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    return Object.hashAll([l$id]);
  }
}

abstract class CopyWith$Input$User_pk_columns_input<TRes> {
  factory CopyWith$Input$User_pk_columns_input(
    Input$User_pk_columns_input instance,
    TRes Function(Input$User_pk_columns_input) then,
  ) = _CopyWithImpl$Input$User_pk_columns_input;

  factory CopyWith$Input$User_pk_columns_input.stub(TRes res) =
      _CopyWithStubImpl$Input$User_pk_columns_input;

  TRes call({String? id});
}

class _CopyWithImpl$Input$User_pk_columns_input<TRes>
    implements CopyWith$Input$User_pk_columns_input<TRes> {
  _CopyWithImpl$Input$User_pk_columns_input(
    this._instance,
    this._then,
  );

  final Input$User_pk_columns_input _instance;

  final TRes Function(Input$User_pk_columns_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? id = _undefined}) => _then(Input$User_pk_columns_input._({
        ..._instance._$data,
        if (id != _undefined && id != null) 'id': (id as String),
      }));
}

class _CopyWithStubImpl$Input$User_pk_columns_input<TRes>
    implements CopyWith$Input$User_pk_columns_input<TRes> {
  _CopyWithStubImpl$Input$User_pk_columns_input(this._res);

  TRes _res;

  call({String? id}) => _res;
}

enum Enum$__TypeKind {
  ENUM,
  INPUT_OBJECT,
  INTERFACE,
  LIST,
  NON_NULL,
  OBJECT,
  SCALAR,
  UNION,
  $unknown
}

String toJson$Enum$__TypeKind(Enum$__TypeKind e) {
  switch (e) {
    case Enum$__TypeKind.ENUM:
      return r'ENUM';
    case Enum$__TypeKind.INPUT_OBJECT:
      return r'INPUT_OBJECT';
    case Enum$__TypeKind.INTERFACE:
      return r'INTERFACE';
    case Enum$__TypeKind.LIST:
      return r'LIST';
    case Enum$__TypeKind.NON_NULL:
      return r'NON_NULL';
    case Enum$__TypeKind.OBJECT:
      return r'OBJECT';
    case Enum$__TypeKind.SCALAR:
      return r'SCALAR';
    case Enum$__TypeKind.UNION:
      return r'UNION';
    case Enum$__TypeKind.$unknown:
      return r'$unknown';
  }
}

Enum$__TypeKind fromJson$Enum$__TypeKind(String value) {
  switch (value) {
    case r'ENUM':
      return Enum$__TypeKind.ENUM;
    case r'INPUT_OBJECT':
      return Enum$__TypeKind.INPUT_OBJECT;
    case r'INTERFACE':
      return Enum$__TypeKind.INTERFACE;
    case r'LIST':
      return Enum$__TypeKind.LIST;
    case r'NON_NULL':
      return Enum$__TypeKind.NON_NULL;
    case r'OBJECT':
      return Enum$__TypeKind.OBJECT;
    case r'SCALAR':
      return Enum$__TypeKind.SCALAR;
    case r'UNION':
      return Enum$__TypeKind.UNION;
    default:
      return Enum$__TypeKind.$unknown;
  }
}

enum Enum$order_by {
  asc_nulls_first,
  asc,
  asc_nulls_last,
  desc,
  desc_nulls_first,
  desc_nulls_last,
  $unknown
}

String toJson$Enum$order_by(Enum$order_by e) {
  switch (e) {
    case Enum$order_by.asc_nulls_first:
      return r'asc_nulls_first';
    case Enum$order_by.asc:
      return r'asc';
    case Enum$order_by.asc_nulls_last:
      return r'asc_nulls_last';
    case Enum$order_by.desc:
      return r'desc';
    case Enum$order_by.desc_nulls_first:
      return r'desc_nulls_first';
    case Enum$order_by.desc_nulls_last:
      return r'desc_nulls_last';
    case Enum$order_by.$unknown:
      return r'$unknown';
  }
}

Enum$order_by fromJson$Enum$order_by(String value) {
  switch (value) {
    case r'asc_nulls_first':
      return Enum$order_by.asc_nulls_first;
    case r'asc':
      return Enum$order_by.asc;
    case r'asc_nulls_last':
      return Enum$order_by.asc_nulls_last;
    case r'desc':
      return Enum$order_by.desc;
    case r'desc_nulls_first':
      return Enum$order_by.desc_nulls_first;
    case r'desc_nulls_last':
      return Enum$order_by.desc_nulls_last;
    default:
      return Enum$order_by.$unknown;
  }
}

enum Enum$cursor_ordering { ASC, DESC, $unknown }

String toJson$Enum$cursor_ordering(Enum$cursor_ordering e) {
  switch (e) {
    case Enum$cursor_ordering.ASC:
      return r'ASC';
    case Enum$cursor_ordering.DESC:
      return r'DESC';
    case Enum$cursor_ordering.$unknown:
      return r'$unknown';
  }
}

Enum$cursor_ordering fromJson$Enum$cursor_ordering(String value) {
  switch (value) {
    case r'ASC':
      return Enum$cursor_ordering.ASC;
    case r'DESC':
      return Enum$cursor_ordering.DESC;
    default:
      return Enum$cursor_ordering.$unknown;
  }
}

enum Enum$Encounter_select_column {
  encounterTimeInUtc,
  group,
  houseAddress,
  id,
  result,
  $unknown
}

String toJson$Enum$Encounter_select_column(Enum$Encounter_select_column e) {
  switch (e) {
    case Enum$Encounter_select_column.encounterTimeInUtc:
      return r'encounterTimeInUtc';
    case Enum$Encounter_select_column.group:
      return r'group';
    case Enum$Encounter_select_column.houseAddress:
      return r'houseAddress';
    case Enum$Encounter_select_column.id:
      return r'id';
    case Enum$Encounter_select_column.result:
      return r'result';
    case Enum$Encounter_select_column.$unknown:
      return r'$unknown';
  }
}

Enum$Encounter_select_column fromJson$Enum$Encounter_select_column(
    String value) {
  switch (value) {
    case r'encounterTimeInUtc':
      return Enum$Encounter_select_column.encounterTimeInUtc;
    case r'group':
      return Enum$Encounter_select_column.group;
    case r'houseAddress':
      return Enum$Encounter_select_column.houseAddress;
    case r'id':
      return Enum$Encounter_select_column.id;
    case r'result':
      return Enum$Encounter_select_column.result;
    default:
      return Enum$Encounter_select_column.$unknown;
  }
}

enum Enum$Event_select_column {
  coverPhotoUrl,
  eventPlan,
  id,
  name,
  organization,
  scheduledEndTimeInUtc,
  scheduledStartTimeInUtc,
  type,
  whatToExpect,
  $unknown
}

String toJson$Enum$Event_select_column(Enum$Event_select_column e) {
  switch (e) {
    case Enum$Event_select_column.coverPhotoUrl:
      return r'coverPhotoUrl';
    case Enum$Event_select_column.eventPlan:
      return r'eventPlan';
    case Enum$Event_select_column.id:
      return r'id';
    case Enum$Event_select_column.name:
      return r'name';
    case Enum$Event_select_column.organization:
      return r'organization';
    case Enum$Event_select_column.scheduledEndTimeInUtc:
      return r'scheduledEndTimeInUtc';
    case Enum$Event_select_column.scheduledStartTimeInUtc:
      return r'scheduledStartTimeInUtc';
    case Enum$Event_select_column.type:
      return r'type';
    case Enum$Event_select_column.whatToExpect:
      return r'whatToExpect';
    case Enum$Event_select_column.$unknown:
      return r'$unknown';
  }
}

Enum$Event_select_column fromJson$Enum$Event_select_column(String value) {
  switch (value) {
    case r'coverPhotoUrl':
      return Enum$Event_select_column.coverPhotoUrl;
    case r'eventPlan':
      return Enum$Event_select_column.eventPlan;
    case r'id':
      return Enum$Event_select_column.id;
    case r'name':
      return Enum$Event_select_column.name;
    case r'organization':
      return Enum$Event_select_column.organization;
    case r'scheduledEndTimeInUtc':
      return Enum$Event_select_column.scheduledEndTimeInUtc;
    case r'scheduledStartTimeInUtc':
      return Enum$Event_select_column.scheduledStartTimeInUtc;
    case r'type':
      return Enum$Event_select_column.type;
    case r'whatToExpect':
      return Enum$Event_select_column.whatToExpect;
    default:
      return Enum$Event_select_column.$unknown;
  }
}

enum Enum$Map_select_column { belongingOrganization, id, name, $unknown }

String toJson$Enum$Map_select_column(Enum$Map_select_column e) {
  switch (e) {
    case Enum$Map_select_column.belongingOrganization:
      return r'belongingOrganization';
    case Enum$Map_select_column.id:
      return r'id';
    case Enum$Map_select_column.name:
      return r'name';
    case Enum$Map_select_column.$unknown:
      return r'$unknown';
  }
}

Enum$Map_select_column fromJson$Enum$Map_select_column(String value) {
  switch (value) {
    case r'belongingOrganization':
      return Enum$Map_select_column.belongingOrganization;
    case r'id':
      return Enum$Map_select_column.id;
    case r'name':
      return Enum$Map_select_column.name;
    default:
      return Enum$Map_select_column.$unknown;
  }
}

enum Enum$MapArea_select_column {
  belongingMap,
  id,
  name,
  polygonGeoJson,
  $unknown
}

String toJson$Enum$MapArea_select_column(Enum$MapArea_select_column e) {
  switch (e) {
    case Enum$MapArea_select_column.belongingMap:
      return r'belongingMap';
    case Enum$MapArea_select_column.id:
      return r'id';
    case Enum$MapArea_select_column.name:
      return r'name';
    case Enum$MapArea_select_column.polygonGeoJson:
      return r'polygonGeoJson';
    case Enum$MapArea_select_column.$unknown:
      return r'$unknown';
  }
}

Enum$MapArea_select_column fromJson$Enum$MapArea_select_column(String value) {
  switch (value) {
    case r'belongingMap':
      return Enum$MapArea_select_column.belongingMap;
    case r'id':
      return Enum$MapArea_select_column.id;
    case r'name':
      return Enum$MapArea_select_column.name;
    case r'polygonGeoJson':
      return Enum$MapArea_select_column.polygonGeoJson;
    default:
      return Enum$MapArea_select_column.$unknown;
  }
}

enum Enum$Organization_select_column { id, name, type, $unknown }

String toJson$Enum$Organization_select_column(
    Enum$Organization_select_column e) {
  switch (e) {
    case Enum$Organization_select_column.id:
      return r'id';
    case Enum$Organization_select_column.name:
      return r'name';
    case Enum$Organization_select_column.type:
      return r'type';
    case Enum$Organization_select_column.$unknown:
      return r'$unknown';
  }
}

Enum$Organization_select_column fromJson$Enum$Organization_select_column(
    String value) {
  switch (value) {
    case r'id':
      return Enum$Organization_select_column.id;
    case r'name':
      return Enum$Organization_select_column.name;
    case r'type':
      return Enum$Organization_select_column.type;
    default:
      return Enum$Organization_select_column.$unknown;
  }
}

enum Enum$SavedPerson_select_column {
  email,
  id,
  name,
  phone,
  savingEncounter,
  $unknown
}

String toJson$Enum$SavedPerson_select_column(Enum$SavedPerson_select_column e) {
  switch (e) {
    case Enum$SavedPerson_select_column.email:
      return r'email';
    case Enum$SavedPerson_select_column.id:
      return r'id';
    case Enum$SavedPerson_select_column.name:
      return r'name';
    case Enum$SavedPerson_select_column.phone:
      return r'phone';
    case Enum$SavedPerson_select_column.savingEncounter:
      return r'savingEncounter';
    case Enum$SavedPerson_select_column.$unknown:
      return r'$unknown';
  }
}

Enum$SavedPerson_select_column fromJson$Enum$SavedPerson_select_column(
    String value) {
  switch (value) {
    case r'email':
      return Enum$SavedPerson_select_column.email;
    case r'id':
      return Enum$SavedPerson_select_column.id;
    case r'name':
      return Enum$SavedPerson_select_column.name;
    case r'phone':
      return Enum$SavedPerson_select_column.phone;
    case r'savingEncounter':
      return Enum$SavedPerson_select_column.savingEncounter;
    default:
      return Enum$SavedPerson_select_column.$unknown;
  }
}

enum Enum$SoulWinningSession_select_column {
  event,
  id,
  name,
  scheduledEndTimeInUtc,
  scheduledStartTimeInUtc,
  $unknown
}

String toJson$Enum$SoulWinningSession_select_column(
    Enum$SoulWinningSession_select_column e) {
  switch (e) {
    case Enum$SoulWinningSession_select_column.event:
      return r'event';
    case Enum$SoulWinningSession_select_column.id:
      return r'id';
    case Enum$SoulWinningSession_select_column.name:
      return r'name';
    case Enum$SoulWinningSession_select_column.scheduledEndTimeInUtc:
      return r'scheduledEndTimeInUtc';
    case Enum$SoulWinningSession_select_column.scheduledStartTimeInUtc:
      return r'scheduledStartTimeInUtc';
    case Enum$SoulWinningSession_select_column.$unknown:
      return r'$unknown';
  }
}

Enum$SoulWinningSession_select_column
    fromJson$Enum$SoulWinningSession_select_column(String value) {
  switch (value) {
    case r'event':
      return Enum$SoulWinningSession_select_column.event;
    case r'id':
      return Enum$SoulWinningSession_select_column.id;
    case r'name':
      return Enum$SoulWinningSession_select_column.name;
    case r'scheduledEndTimeInUtc':
      return Enum$SoulWinningSession_select_column.scheduledEndTimeInUtc;
    case r'scheduledStartTimeInUtc':
      return Enum$SoulWinningSession_select_column.scheduledStartTimeInUtc;
    default:
      return Enum$SoulWinningSession_select_column.$unknown;
  }
}

enum Enum$SoulWinningSessionGroup_select_column {
  assignedMapArea,
  id,
  session,
  $unknown
}

String toJson$Enum$SoulWinningSessionGroup_select_column(
    Enum$SoulWinningSessionGroup_select_column e) {
  switch (e) {
    case Enum$SoulWinningSessionGroup_select_column.assignedMapArea:
      return r'assignedMapArea';
    case Enum$SoulWinningSessionGroup_select_column.id:
      return r'id';
    case Enum$SoulWinningSessionGroup_select_column.session:
      return r'session';
    case Enum$SoulWinningSessionGroup_select_column.$unknown:
      return r'$unknown';
  }
}

Enum$SoulWinningSessionGroup_select_column
    fromJson$Enum$SoulWinningSessionGroup_select_column(String value) {
  switch (value) {
    case r'assignedMapArea':
      return Enum$SoulWinningSessionGroup_select_column.assignedMapArea;
    case r'id':
      return Enum$SoulWinningSessionGroup_select_column.id;
    case r'session':
      return Enum$SoulWinningSessionGroup_select_column.session;
    default:
      return Enum$SoulWinningSessionGroup_select_column.$unknown;
  }
}

enum Enum$User_select_column {
  adminUiPassword,
  createdAt,
  email,
  id,
  name,
  $unknown
}

String toJson$Enum$User_select_column(Enum$User_select_column e) {
  switch (e) {
    case Enum$User_select_column.adminUiPassword:
      return r'adminUiPassword';
    case Enum$User_select_column.createdAt:
      return r'createdAt';
    case Enum$User_select_column.email:
      return r'email';
    case Enum$User_select_column.id:
      return r'id';
    case Enum$User_select_column.name:
      return r'name';
    case Enum$User_select_column.$unknown:
      return r'$unknown';
  }
}

Enum$User_select_column fromJson$Enum$User_select_column(String value) {
  switch (value) {
    case r'adminUiPassword':
      return Enum$User_select_column.adminUiPassword;
    case r'createdAt':
      return Enum$User_select_column.createdAt;
    case r'email':
      return Enum$User_select_column.email;
    case r'id':
      return Enum$User_select_column.id;
    case r'name':
      return Enum$User_select_column.name;
    default:
      return Enum$User_select_column.$unknown;
  }
}

enum Enum$_Organization_adminsOfOrganization_select_column { A, B, $unknown }

String toJson$Enum$_Organization_adminsOfOrganization_select_column(
    Enum$_Organization_adminsOfOrganization_select_column e) {
  switch (e) {
    case Enum$_Organization_adminsOfOrganization_select_column.A:
      return r'A';
    case Enum$_Organization_adminsOfOrganization_select_column.B:
      return r'B';
    case Enum$_Organization_adminsOfOrganization_select_column.$unknown:
      return r'$unknown';
  }
}

Enum$_Organization_adminsOfOrganization_select_column
    fromJson$Enum$_Organization_adminsOfOrganization_select_column(
        String value) {
  switch (value) {
    case r'A':
      return Enum$_Organization_adminsOfOrganization_select_column.A;
    case r'B':
      return Enum$_Organization_adminsOfOrganization_select_column.B;
    default:
      return Enum$_Organization_adminsOfOrganization_select_column.$unknown;
  }
}

enum Enum$_Organization_membersInOrganization_select_column { A, B, $unknown }

String toJson$Enum$_Organization_membersInOrganization_select_column(
    Enum$_Organization_membersInOrganization_select_column e) {
  switch (e) {
    case Enum$_Organization_membersInOrganization_select_column.A:
      return r'A';
    case Enum$_Organization_membersInOrganization_select_column.B:
      return r'B';
    case Enum$_Organization_membersInOrganization_select_column.$unknown:
      return r'$unknown';
  }
}

Enum$_Organization_membersInOrganization_select_column
    fromJson$Enum$_Organization_membersInOrganization_select_column(
        String value) {
  switch (value) {
    case r'A':
      return Enum$_Organization_membersInOrganization_select_column.A;
    case r'B':
      return Enum$_Organization_membersInOrganization_select_column.B;
    default:
      return Enum$_Organization_membersInOrganization_select_column.$unknown;
  }
}

enum Enum$_SoulWinningSessionGroup_members_select_column { A, B, $unknown }

String toJson$Enum$_SoulWinningSessionGroup_members_select_column(
    Enum$_SoulWinningSessionGroup_members_select_column e) {
  switch (e) {
    case Enum$_SoulWinningSessionGroup_members_select_column.A:
      return r'A';
    case Enum$_SoulWinningSessionGroup_members_select_column.B:
      return r'B';
    case Enum$_SoulWinningSessionGroup_members_select_column.$unknown:
      return r'$unknown';
  }
}

Enum$_SoulWinningSessionGroup_members_select_column
    fromJson$Enum$_SoulWinningSessionGroup_members_select_column(String value) {
  switch (value) {
    case r'A':
      return Enum$_SoulWinningSessionGroup_members_select_column.A;
    case r'B':
      return Enum$_SoulWinningSessionGroup_members_select_column.B;
    default:
      return Enum$_SoulWinningSessionGroup_members_select_column.$unknown;
  }
}

enum Enum$Encounter_constraint { Encounter_pkey, $unknown }

String toJson$Enum$Encounter_constraint(Enum$Encounter_constraint e) {
  switch (e) {
    case Enum$Encounter_constraint.Encounter_pkey:
      return r'Encounter_pkey';
    case Enum$Encounter_constraint.$unknown:
      return r'$unknown';
  }
}

Enum$Encounter_constraint fromJson$Enum$Encounter_constraint(String value) {
  switch (value) {
    case r'Encounter_pkey':
      return Enum$Encounter_constraint.Encounter_pkey;
    default:
      return Enum$Encounter_constraint.$unknown;
  }
}

enum Enum$Event_constraint { Event_pkey, $unknown }

String toJson$Enum$Event_constraint(Enum$Event_constraint e) {
  switch (e) {
    case Enum$Event_constraint.Event_pkey:
      return r'Event_pkey';
    case Enum$Event_constraint.$unknown:
      return r'$unknown';
  }
}

Enum$Event_constraint fromJson$Enum$Event_constraint(String value) {
  switch (value) {
    case r'Event_pkey':
      return Enum$Event_constraint.Event_pkey;
    default:
      return Enum$Event_constraint.$unknown;
  }
}

enum Enum$Map_constraint { Map_pkey, $unknown }

String toJson$Enum$Map_constraint(Enum$Map_constraint e) {
  switch (e) {
    case Enum$Map_constraint.Map_pkey:
      return r'Map_pkey';
    case Enum$Map_constraint.$unknown:
      return r'$unknown';
  }
}

Enum$Map_constraint fromJson$Enum$Map_constraint(String value) {
  switch (value) {
    case r'Map_pkey':
      return Enum$Map_constraint.Map_pkey;
    default:
      return Enum$Map_constraint.$unknown;
  }
}

enum Enum$MapArea_constraint { MapArea_pkey, $unknown }

String toJson$Enum$MapArea_constraint(Enum$MapArea_constraint e) {
  switch (e) {
    case Enum$MapArea_constraint.MapArea_pkey:
      return r'MapArea_pkey';
    case Enum$MapArea_constraint.$unknown:
      return r'$unknown';
  }
}

Enum$MapArea_constraint fromJson$Enum$MapArea_constraint(String value) {
  switch (value) {
    case r'MapArea_pkey':
      return Enum$MapArea_constraint.MapArea_pkey;
    default:
      return Enum$MapArea_constraint.$unknown;
  }
}

enum Enum$Organization_constraint { Organization_pkey, $unknown }

String toJson$Enum$Organization_constraint(Enum$Organization_constraint e) {
  switch (e) {
    case Enum$Organization_constraint.Organization_pkey:
      return r'Organization_pkey';
    case Enum$Organization_constraint.$unknown:
      return r'$unknown';
  }
}

Enum$Organization_constraint fromJson$Enum$Organization_constraint(
    String value) {
  switch (value) {
    case r'Organization_pkey':
      return Enum$Organization_constraint.Organization_pkey;
    default:
      return Enum$Organization_constraint.$unknown;
  }
}

enum Enum$SavedPerson_constraint {
  SavedPerson_email_key,
  SavedPerson_pkey,
  $unknown
}

String toJson$Enum$SavedPerson_constraint(Enum$SavedPerson_constraint e) {
  switch (e) {
    case Enum$SavedPerson_constraint.SavedPerson_email_key:
      return r'SavedPerson_email_key';
    case Enum$SavedPerson_constraint.SavedPerson_pkey:
      return r'SavedPerson_pkey';
    case Enum$SavedPerson_constraint.$unknown:
      return r'$unknown';
  }
}

Enum$SavedPerson_constraint fromJson$Enum$SavedPerson_constraint(String value) {
  switch (value) {
    case r'SavedPerson_email_key':
      return Enum$SavedPerson_constraint.SavedPerson_email_key;
    case r'SavedPerson_pkey':
      return Enum$SavedPerson_constraint.SavedPerson_pkey;
    default:
      return Enum$SavedPerson_constraint.$unknown;
  }
}

enum Enum$SoulWinningSession_constraint { SoulWinningSession_pkey, $unknown }

String toJson$Enum$SoulWinningSession_constraint(
    Enum$SoulWinningSession_constraint e) {
  switch (e) {
    case Enum$SoulWinningSession_constraint.SoulWinningSession_pkey:
      return r'SoulWinningSession_pkey';
    case Enum$SoulWinningSession_constraint.$unknown:
      return r'$unknown';
  }
}

Enum$SoulWinningSession_constraint fromJson$Enum$SoulWinningSession_constraint(
    String value) {
  switch (value) {
    case r'SoulWinningSession_pkey':
      return Enum$SoulWinningSession_constraint.SoulWinningSession_pkey;
    default:
      return Enum$SoulWinningSession_constraint.$unknown;
  }
}

enum Enum$SoulWinningSessionGroup_constraint {
  SoulWinningSessionGroup_pkey,
  $unknown
}

String toJson$Enum$SoulWinningSessionGroup_constraint(
    Enum$SoulWinningSessionGroup_constraint e) {
  switch (e) {
    case Enum$SoulWinningSessionGroup_constraint.SoulWinningSessionGroup_pkey:
      return r'SoulWinningSessionGroup_pkey';
    case Enum$SoulWinningSessionGroup_constraint.$unknown:
      return r'$unknown';
  }
}

Enum$SoulWinningSessionGroup_constraint
    fromJson$Enum$SoulWinningSessionGroup_constraint(String value) {
  switch (value) {
    case r'SoulWinningSessionGroup_pkey':
      return Enum$SoulWinningSessionGroup_constraint
          .SoulWinningSessionGroup_pkey;
    default:
      return Enum$SoulWinningSessionGroup_constraint.$unknown;
  }
}

enum Enum$User_constraint { User_email_key, User_pkey, $unknown }

String toJson$Enum$User_constraint(Enum$User_constraint e) {
  switch (e) {
    case Enum$User_constraint.User_email_key:
      return r'User_email_key';
    case Enum$User_constraint.User_pkey:
      return r'User_pkey';
    case Enum$User_constraint.$unknown:
      return r'$unknown';
  }
}

Enum$User_constraint fromJson$Enum$User_constraint(String value) {
  switch (value) {
    case r'User_email_key':
      return Enum$User_constraint.User_email_key;
    case r'User_pkey':
      return Enum$User_constraint.User_pkey;
    default:
      return Enum$User_constraint.$unknown;
  }
}

enum Enum$_Organization_adminsOfOrganization_constraint {
  _Organization_adminsOfOrganization_AB_unique,
  $unknown
}

String toJson$Enum$_Organization_adminsOfOrganization_constraint(
    Enum$_Organization_adminsOfOrganization_constraint e) {
  switch (e) {
    case Enum$_Organization_adminsOfOrganization_constraint
          ._Organization_adminsOfOrganization_AB_unique:
      return r'_Organization_adminsOfOrganization_AB_unique';
    case Enum$_Organization_adminsOfOrganization_constraint.$unknown:
      return r'$unknown';
  }
}

Enum$_Organization_adminsOfOrganization_constraint
    fromJson$Enum$_Organization_adminsOfOrganization_constraint(String value) {
  switch (value) {
    case r'_Organization_adminsOfOrganization_AB_unique':
      return Enum$_Organization_adminsOfOrganization_constraint
          ._Organization_adminsOfOrganization_AB_unique;
    default:
      return Enum$_Organization_adminsOfOrganization_constraint.$unknown;
  }
}

enum Enum$_Organization_membersInOrganization_constraint {
  _Organization_membersInOrganization_AB_unique,
  $unknown
}

String toJson$Enum$_Organization_membersInOrganization_constraint(
    Enum$_Organization_membersInOrganization_constraint e) {
  switch (e) {
    case Enum$_Organization_membersInOrganization_constraint
          ._Organization_membersInOrganization_AB_unique:
      return r'_Organization_membersInOrganization_AB_unique';
    case Enum$_Organization_membersInOrganization_constraint.$unknown:
      return r'$unknown';
  }
}

Enum$_Organization_membersInOrganization_constraint
    fromJson$Enum$_Organization_membersInOrganization_constraint(String value) {
  switch (value) {
    case r'_Organization_membersInOrganization_AB_unique':
      return Enum$_Organization_membersInOrganization_constraint
          ._Organization_membersInOrganization_AB_unique;
    default:
      return Enum$_Organization_membersInOrganization_constraint.$unknown;
  }
}

enum Enum$_SoulWinningSessionGroup_members_constraint {
  _SoulWinningSessionGroup_members_AB_unique,
  $unknown
}

String toJson$Enum$_SoulWinningSessionGroup_members_constraint(
    Enum$_SoulWinningSessionGroup_members_constraint e) {
  switch (e) {
    case Enum$_SoulWinningSessionGroup_members_constraint
          ._SoulWinningSessionGroup_members_AB_unique:
      return r'_SoulWinningSessionGroup_members_AB_unique';
    case Enum$_SoulWinningSessionGroup_members_constraint.$unknown:
      return r'$unknown';
  }
}

Enum$_SoulWinningSessionGroup_members_constraint
    fromJson$Enum$_SoulWinningSessionGroup_members_constraint(String value) {
  switch (value) {
    case r'_SoulWinningSessionGroup_members_AB_unique':
      return Enum$_SoulWinningSessionGroup_members_constraint
          ._SoulWinningSessionGroup_members_AB_unique;
    default:
      return Enum$_SoulWinningSessionGroup_members_constraint.$unknown;
  }
}

enum Enum$Encounter_update_column {
  encounterTimeInUtc,
  group,
  houseAddress,
  id,
  result,
  $unknown
}

String toJson$Enum$Encounter_update_column(Enum$Encounter_update_column e) {
  switch (e) {
    case Enum$Encounter_update_column.encounterTimeInUtc:
      return r'encounterTimeInUtc';
    case Enum$Encounter_update_column.group:
      return r'group';
    case Enum$Encounter_update_column.houseAddress:
      return r'houseAddress';
    case Enum$Encounter_update_column.id:
      return r'id';
    case Enum$Encounter_update_column.result:
      return r'result';
    case Enum$Encounter_update_column.$unknown:
      return r'$unknown';
  }
}

Enum$Encounter_update_column fromJson$Enum$Encounter_update_column(
    String value) {
  switch (value) {
    case r'encounterTimeInUtc':
      return Enum$Encounter_update_column.encounterTimeInUtc;
    case r'group':
      return Enum$Encounter_update_column.group;
    case r'houseAddress':
      return Enum$Encounter_update_column.houseAddress;
    case r'id':
      return Enum$Encounter_update_column.id;
    case r'result':
      return Enum$Encounter_update_column.result;
    default:
      return Enum$Encounter_update_column.$unknown;
  }
}

enum Enum$Event_update_column {
  coverPhotoUrl,
  eventPlan,
  id,
  name,
  organization,
  scheduledEndTimeInUtc,
  scheduledStartTimeInUtc,
  type,
  whatToExpect,
  $unknown
}

String toJson$Enum$Event_update_column(Enum$Event_update_column e) {
  switch (e) {
    case Enum$Event_update_column.coverPhotoUrl:
      return r'coverPhotoUrl';
    case Enum$Event_update_column.eventPlan:
      return r'eventPlan';
    case Enum$Event_update_column.id:
      return r'id';
    case Enum$Event_update_column.name:
      return r'name';
    case Enum$Event_update_column.organization:
      return r'organization';
    case Enum$Event_update_column.scheduledEndTimeInUtc:
      return r'scheduledEndTimeInUtc';
    case Enum$Event_update_column.scheduledStartTimeInUtc:
      return r'scheduledStartTimeInUtc';
    case Enum$Event_update_column.type:
      return r'type';
    case Enum$Event_update_column.whatToExpect:
      return r'whatToExpect';
    case Enum$Event_update_column.$unknown:
      return r'$unknown';
  }
}

Enum$Event_update_column fromJson$Enum$Event_update_column(String value) {
  switch (value) {
    case r'coverPhotoUrl':
      return Enum$Event_update_column.coverPhotoUrl;
    case r'eventPlan':
      return Enum$Event_update_column.eventPlan;
    case r'id':
      return Enum$Event_update_column.id;
    case r'name':
      return Enum$Event_update_column.name;
    case r'organization':
      return Enum$Event_update_column.organization;
    case r'scheduledEndTimeInUtc':
      return Enum$Event_update_column.scheduledEndTimeInUtc;
    case r'scheduledStartTimeInUtc':
      return Enum$Event_update_column.scheduledStartTimeInUtc;
    case r'type':
      return Enum$Event_update_column.type;
    case r'whatToExpect':
      return Enum$Event_update_column.whatToExpect;
    default:
      return Enum$Event_update_column.$unknown;
  }
}

enum Enum$Map_update_column { belongingOrganization, id, name, $unknown }

String toJson$Enum$Map_update_column(Enum$Map_update_column e) {
  switch (e) {
    case Enum$Map_update_column.belongingOrganization:
      return r'belongingOrganization';
    case Enum$Map_update_column.id:
      return r'id';
    case Enum$Map_update_column.name:
      return r'name';
    case Enum$Map_update_column.$unknown:
      return r'$unknown';
  }
}

Enum$Map_update_column fromJson$Enum$Map_update_column(String value) {
  switch (value) {
    case r'belongingOrganization':
      return Enum$Map_update_column.belongingOrganization;
    case r'id':
      return Enum$Map_update_column.id;
    case r'name':
      return Enum$Map_update_column.name;
    default:
      return Enum$Map_update_column.$unknown;
  }
}

enum Enum$MapArea_update_column {
  belongingMap,
  id,
  name,
  polygonGeoJson,
  $unknown
}

String toJson$Enum$MapArea_update_column(Enum$MapArea_update_column e) {
  switch (e) {
    case Enum$MapArea_update_column.belongingMap:
      return r'belongingMap';
    case Enum$MapArea_update_column.id:
      return r'id';
    case Enum$MapArea_update_column.name:
      return r'name';
    case Enum$MapArea_update_column.polygonGeoJson:
      return r'polygonGeoJson';
    case Enum$MapArea_update_column.$unknown:
      return r'$unknown';
  }
}

Enum$MapArea_update_column fromJson$Enum$MapArea_update_column(String value) {
  switch (value) {
    case r'belongingMap':
      return Enum$MapArea_update_column.belongingMap;
    case r'id':
      return Enum$MapArea_update_column.id;
    case r'name':
      return Enum$MapArea_update_column.name;
    case r'polygonGeoJson':
      return Enum$MapArea_update_column.polygonGeoJson;
    default:
      return Enum$MapArea_update_column.$unknown;
  }
}

enum Enum$Organization_update_column { id, name, type, $unknown }

String toJson$Enum$Organization_update_column(
    Enum$Organization_update_column e) {
  switch (e) {
    case Enum$Organization_update_column.id:
      return r'id';
    case Enum$Organization_update_column.name:
      return r'name';
    case Enum$Organization_update_column.type:
      return r'type';
    case Enum$Organization_update_column.$unknown:
      return r'$unknown';
  }
}

Enum$Organization_update_column fromJson$Enum$Organization_update_column(
    String value) {
  switch (value) {
    case r'id':
      return Enum$Organization_update_column.id;
    case r'name':
      return Enum$Organization_update_column.name;
    case r'type':
      return Enum$Organization_update_column.type;
    default:
      return Enum$Organization_update_column.$unknown;
  }
}

enum Enum$SavedPerson_update_column {
  email,
  id,
  name,
  phone,
  savingEncounter,
  $unknown
}

String toJson$Enum$SavedPerson_update_column(Enum$SavedPerson_update_column e) {
  switch (e) {
    case Enum$SavedPerson_update_column.email:
      return r'email';
    case Enum$SavedPerson_update_column.id:
      return r'id';
    case Enum$SavedPerson_update_column.name:
      return r'name';
    case Enum$SavedPerson_update_column.phone:
      return r'phone';
    case Enum$SavedPerson_update_column.savingEncounter:
      return r'savingEncounter';
    case Enum$SavedPerson_update_column.$unknown:
      return r'$unknown';
  }
}

Enum$SavedPerson_update_column fromJson$Enum$SavedPerson_update_column(
    String value) {
  switch (value) {
    case r'email':
      return Enum$SavedPerson_update_column.email;
    case r'id':
      return Enum$SavedPerson_update_column.id;
    case r'name':
      return Enum$SavedPerson_update_column.name;
    case r'phone':
      return Enum$SavedPerson_update_column.phone;
    case r'savingEncounter':
      return Enum$SavedPerson_update_column.savingEncounter;
    default:
      return Enum$SavedPerson_update_column.$unknown;
  }
}

enum Enum$SoulWinningSession_update_column {
  event,
  id,
  name,
  scheduledEndTimeInUtc,
  scheduledStartTimeInUtc,
  $unknown
}

String toJson$Enum$SoulWinningSession_update_column(
    Enum$SoulWinningSession_update_column e) {
  switch (e) {
    case Enum$SoulWinningSession_update_column.event:
      return r'event';
    case Enum$SoulWinningSession_update_column.id:
      return r'id';
    case Enum$SoulWinningSession_update_column.name:
      return r'name';
    case Enum$SoulWinningSession_update_column.scheduledEndTimeInUtc:
      return r'scheduledEndTimeInUtc';
    case Enum$SoulWinningSession_update_column.scheduledStartTimeInUtc:
      return r'scheduledStartTimeInUtc';
    case Enum$SoulWinningSession_update_column.$unknown:
      return r'$unknown';
  }
}

Enum$SoulWinningSession_update_column
    fromJson$Enum$SoulWinningSession_update_column(String value) {
  switch (value) {
    case r'event':
      return Enum$SoulWinningSession_update_column.event;
    case r'id':
      return Enum$SoulWinningSession_update_column.id;
    case r'name':
      return Enum$SoulWinningSession_update_column.name;
    case r'scheduledEndTimeInUtc':
      return Enum$SoulWinningSession_update_column.scheduledEndTimeInUtc;
    case r'scheduledStartTimeInUtc':
      return Enum$SoulWinningSession_update_column.scheduledStartTimeInUtc;
    default:
      return Enum$SoulWinningSession_update_column.$unknown;
  }
}

enum Enum$SoulWinningSessionGroup_update_column {
  assignedMapArea,
  id,
  session,
  $unknown
}

String toJson$Enum$SoulWinningSessionGroup_update_column(
    Enum$SoulWinningSessionGroup_update_column e) {
  switch (e) {
    case Enum$SoulWinningSessionGroup_update_column.assignedMapArea:
      return r'assignedMapArea';
    case Enum$SoulWinningSessionGroup_update_column.id:
      return r'id';
    case Enum$SoulWinningSessionGroup_update_column.session:
      return r'session';
    case Enum$SoulWinningSessionGroup_update_column.$unknown:
      return r'$unknown';
  }
}

Enum$SoulWinningSessionGroup_update_column
    fromJson$Enum$SoulWinningSessionGroup_update_column(String value) {
  switch (value) {
    case r'assignedMapArea':
      return Enum$SoulWinningSessionGroup_update_column.assignedMapArea;
    case r'id':
      return Enum$SoulWinningSessionGroup_update_column.id;
    case r'session':
      return Enum$SoulWinningSessionGroup_update_column.session;
    default:
      return Enum$SoulWinningSessionGroup_update_column.$unknown;
  }
}

enum Enum$User_update_column {
  adminUiPassword,
  createdAt,
  email,
  id,
  name,
  $unknown
}

String toJson$Enum$User_update_column(Enum$User_update_column e) {
  switch (e) {
    case Enum$User_update_column.adminUiPassword:
      return r'adminUiPassword';
    case Enum$User_update_column.createdAt:
      return r'createdAt';
    case Enum$User_update_column.email:
      return r'email';
    case Enum$User_update_column.id:
      return r'id';
    case Enum$User_update_column.name:
      return r'name';
    case Enum$User_update_column.$unknown:
      return r'$unknown';
  }
}

Enum$User_update_column fromJson$Enum$User_update_column(String value) {
  switch (value) {
    case r'adminUiPassword':
      return Enum$User_update_column.adminUiPassword;
    case r'createdAt':
      return Enum$User_update_column.createdAt;
    case r'email':
      return Enum$User_update_column.email;
    case r'id':
      return Enum$User_update_column.id;
    case r'name':
      return Enum$User_update_column.name;
    default:
      return Enum$User_update_column.$unknown;
  }
}

enum Enum$_Organization_adminsOfOrganization_update_column { A, B, $unknown }

String toJson$Enum$_Organization_adminsOfOrganization_update_column(
    Enum$_Organization_adminsOfOrganization_update_column e) {
  switch (e) {
    case Enum$_Organization_adminsOfOrganization_update_column.A:
      return r'A';
    case Enum$_Organization_adminsOfOrganization_update_column.B:
      return r'B';
    case Enum$_Organization_adminsOfOrganization_update_column.$unknown:
      return r'$unknown';
  }
}

Enum$_Organization_adminsOfOrganization_update_column
    fromJson$Enum$_Organization_adminsOfOrganization_update_column(
        String value) {
  switch (value) {
    case r'A':
      return Enum$_Organization_adminsOfOrganization_update_column.A;
    case r'B':
      return Enum$_Organization_adminsOfOrganization_update_column.B;
    default:
      return Enum$_Organization_adminsOfOrganization_update_column.$unknown;
  }
}

enum Enum$_Organization_membersInOrganization_update_column { A, B, $unknown }

String toJson$Enum$_Organization_membersInOrganization_update_column(
    Enum$_Organization_membersInOrganization_update_column e) {
  switch (e) {
    case Enum$_Organization_membersInOrganization_update_column.A:
      return r'A';
    case Enum$_Organization_membersInOrganization_update_column.B:
      return r'B';
    case Enum$_Organization_membersInOrganization_update_column.$unknown:
      return r'$unknown';
  }
}

Enum$_Organization_membersInOrganization_update_column
    fromJson$Enum$_Organization_membersInOrganization_update_column(
        String value) {
  switch (value) {
    case r'A':
      return Enum$_Organization_membersInOrganization_update_column.A;
    case r'B':
      return Enum$_Organization_membersInOrganization_update_column.B;
    default:
      return Enum$_Organization_membersInOrganization_update_column.$unknown;
  }
}

enum Enum$_SoulWinningSessionGroup_members_update_column { A, B, $unknown }

String toJson$Enum$_SoulWinningSessionGroup_members_update_column(
    Enum$_SoulWinningSessionGroup_members_update_column e) {
  switch (e) {
    case Enum$_SoulWinningSessionGroup_members_update_column.A:
      return r'A';
    case Enum$_SoulWinningSessionGroup_members_update_column.B:
      return r'B';
    case Enum$_SoulWinningSessionGroup_members_update_column.$unknown:
      return r'$unknown';
  }
}

Enum$_SoulWinningSessionGroup_members_update_column
    fromJson$Enum$_SoulWinningSessionGroup_members_update_column(String value) {
  switch (value) {
    case r'A':
      return Enum$_SoulWinningSessionGroup_members_update_column.A;
    case r'B':
      return Enum$_SoulWinningSessionGroup_members_update_column.B;
    default:
      return Enum$_SoulWinningSessionGroup_members_update_column.$unknown;
  }
}

const possibleTypesMap = <String, Set<String>>{};
